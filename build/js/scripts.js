//---------------------------------------------------------------------
//
// QR Code Generator for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//  http://www.opensource.org/licenses/mit-license.php
//
// The word 'QR Code' is registered trademark of
// DENSO WAVE INCORPORATED
//  http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------

var qrcode = (function () {
  //---------------------------------------------------------------------
  // qrcode
  //---------------------------------------------------------------------

  /**
   * qrcode
   * @param typeNumber 1 to 40
   * @param errorCorrectionLevel 'L','M','Q','H'
   */
  var qrcode = function (typeNumber, errorCorrectionLevel) {
    var PAD0 = 0xec
    var PAD1 = 0x11

    var _typeNumber = typeNumber
    var _errorCorrectionLevel = QRErrorCorrectionLevel[errorCorrectionLevel]
    var _modules = null
    var _moduleCount = 0
    var _dataCache = null
    var _dataList = []

    var _this = {}

    var makeImpl = function (test, maskPattern) {
      _moduleCount = _typeNumber * 4 + 17
      _modules = (function (moduleCount) {
        var modules = new Array(moduleCount)
        for (var row = 0; row < moduleCount; row += 1) {
          modules[row] = new Array(moduleCount)
          for (var col = 0; col < moduleCount; col += 1) {
            modules[row][col] = null
          }
        }
        return modules
      })(_moduleCount)

      setupPositionProbePattern(0, 0)
      setupPositionProbePattern(_moduleCount - 7, 0)
      setupPositionProbePattern(0, _moduleCount - 7)
      setupPositionAdjustPattern()
      setupTimingPattern()
      setupTypeInfo(test, maskPattern)

      if (_typeNumber >= 7) {
        setupTypeNumber(test)
      }

      if (_dataCache == null) {
        _dataCache = createData(_typeNumber, _errorCorrectionLevel, _dataList)
      }

      mapData(_dataCache, maskPattern)
    }

    var setupPositionProbePattern = function (row, col) {
      for (var r = -1; r <= 7; r += 1) {
        if (row + r <= -1 || _moduleCount <= row + r) continue

        for (var c = -1; c <= 7; c += 1) {
          if (col + c <= -1 || _moduleCount <= col + c) continue

          if (
            (0 <= r && r <= 6 && (c == 0 || c == 6)) ||
            (0 <= c && c <= 6 && (r == 0 || r == 6)) ||
            (2 <= r && r <= 4 && 2 <= c && c <= 4)
          ) {
            _modules[row + r][col + c] = true
          } else {
            _modules[row + r][col + c] = false
          }
        }
      }
    }

    var getBestMaskPattern = function () {
      var minLostPoint = 0
      var pattern = 0

      for (var i = 0; i < 8; i += 1) {
        makeImpl(true, i)

        var lostPoint = QRUtil.getLostPoint(_this)

        if (i == 0 || minLostPoint > lostPoint) {
          minLostPoint = lostPoint
          pattern = i
        }
      }

      return pattern
    }

    var setupTimingPattern = function () {
      for (var r = 8; r < _moduleCount - 8; r += 1) {
        if (_modules[r][6] != null) {
          continue
        }
        _modules[r][6] = r % 2 == 0
      }

      for (var c = 8; c < _moduleCount - 8; c += 1) {
        if (_modules[6][c] != null) {
          continue
        }
        _modules[6][c] = c % 2 == 0
      }
    }

    var setupPositionAdjustPattern = function () {
      var pos = QRUtil.getPatternPosition(_typeNumber)

      for (var i = 0; i < pos.length; i += 1) {
        for (var j = 0; j < pos.length; j += 1) {
          var row = pos[i]
          var col = pos[j]

          if (_modules[row][col] != null) {
            continue
          }

          for (var r = -2; r <= 2; r += 1) {
            for (var c = -2; c <= 2; c += 1) {
              if (r == -2 || r == 2 || c == -2 || c == 2 || (r == 0 && c == 0)) {
                _modules[row + r][col + c] = true
              } else {
                _modules[row + r][col + c] = false
              }
            }
          }
        }
      }
    }

    var setupTypeNumber = function (test) {
      var bits = QRUtil.getBCHTypeNumber(_typeNumber)

      for (var i = 0; i < 18; i += 1) {
        var mod = !test && ((bits >> i) & 1) == 1
        _modules[Math.floor(i / 3)][(i % 3) + _moduleCount - 8 - 3] = mod
      }

      for (var i = 0; i < 18; i += 1) {
        var mod = !test && ((bits >> i) & 1) == 1
        _modules[(i % 3) + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod
      }
    }

    var setupTypeInfo = function (test, maskPattern) {
      var data = (_errorCorrectionLevel << 3) | maskPattern
      var bits = QRUtil.getBCHTypeInfo(data)

      // vertical
      for (var i = 0; i < 15; i += 1) {
        var mod = !test && ((bits >> i) & 1) == 1

        if (i < 6) {
          _modules[i][8] = mod
        } else if (i < 8) {
          _modules[i + 1][8] = mod
        } else {
          _modules[_moduleCount - 15 + i][8] = mod
        }
      }

      // horizontal
      for (var i = 0; i < 15; i += 1) {
        var mod = !test && ((bits >> i) & 1) == 1

        if (i < 8) {
          _modules[8][_moduleCount - i - 1] = mod
        } else if (i < 9) {
          _modules[8][15 - i - 1 + 1] = mod
        } else {
          _modules[8][15 - i - 1] = mod
        }
      }

      // fixed module
      _modules[_moduleCount - 8][8] = !test
    }

    var mapData = function (data, maskPattern) {
      var inc = -1
      var row = _moduleCount - 1
      var bitIndex = 7
      var byteIndex = 0
      var maskFunc = QRUtil.getMaskFunction(maskPattern)

      for (var col = _moduleCount - 1; col > 0; col -= 2) {
        if (col == 6) col -= 1

        while (true) {
          for (var c = 0; c < 2; c += 1) {
            if (_modules[row][col - c] == null) {
              var dark = false

              if (byteIndex < data.length) {
                dark = ((data[byteIndex] >>> bitIndex) & 1) == 1
              }

              var mask = maskFunc(row, col - c)

              if (mask) {
                dark = !dark
              }

              _modules[row][col - c] = dark
              bitIndex -= 1

              if (bitIndex == -1) {
                byteIndex += 1
                bitIndex = 7
              }
            }
          }

          row += inc

          if (row < 0 || _moduleCount <= row) {
            row -= inc
            inc = -inc
            break
          }
        }
      }
    }

    var createBytes = function (buffer, rsBlocks) {
      var offset = 0

      var maxDcCount = 0
      var maxEcCount = 0

      var dcdata = new Array(rsBlocks.length)
      var ecdata = new Array(rsBlocks.length)

      for (var r = 0; r < rsBlocks.length; r += 1) {
        var dcCount = rsBlocks[r].dataCount
        var ecCount = rsBlocks[r].totalCount - dcCount

        maxDcCount = Math.max(maxDcCount, dcCount)
        maxEcCount = Math.max(maxEcCount, ecCount)

        dcdata[r] = new Array(dcCount)

        for (var i = 0; i < dcdata[r].length; i += 1) {
          dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset]
        }
        offset += dcCount

        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount)
        var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1)

        var modPoly = rawPoly.mod(rsPoly)
        ecdata[r] = new Array(rsPoly.getLength() - 1)
        for (var i = 0; i < ecdata[r].length; i += 1) {
          var modIndex = i + modPoly.getLength() - ecdata[r].length
          ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0
        }
      }

      var totalCodeCount = 0
      for (var i = 0; i < rsBlocks.length; i += 1) {
        totalCodeCount += rsBlocks[i].totalCount
      }

      var data = new Array(totalCodeCount)
      var index = 0

      for (var i = 0; i < maxDcCount; i += 1) {
        for (var r = 0; r < rsBlocks.length; r += 1) {
          if (i < dcdata[r].length) {
            data[index] = dcdata[r][i]
            index += 1
          }
        }
      }

      for (var i = 0; i < maxEcCount; i += 1) {
        for (var r = 0; r < rsBlocks.length; r += 1) {
          if (i < ecdata[r].length) {
            data[index] = ecdata[r][i]
            index += 1
          }
        }
      }

      return data
    }

    var createData = function (typeNumber, errorCorrectionLevel, dataList) {
      var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectionLevel)

      var buffer = qrBitBuffer()

      for (var i = 0; i < dataList.length; i += 1) {
        var data = dataList[i]
        buffer.put(data.getMode(), 4)
        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber))
        data.write(buffer)
      }

      // calc num max data.
      var totalDataCount = 0
      for (var i = 0; i < rsBlocks.length; i += 1) {
        totalDataCount += rsBlocks[i].dataCount
      }

      if (buffer.getLengthInBits() > totalDataCount * 8) {
        throw 'code length overflow. (' + buffer.getLengthInBits() + '>' + totalDataCount * 8 + ')'
      }

      // end code
      if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
        buffer.put(0, 4)
      }

      // padding
      while (buffer.getLengthInBits() % 8 != 0) {
        buffer.putBit(false)
      }

      // padding
      while (true) {
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break
        }
        buffer.put(PAD0, 8)

        if (buffer.getLengthInBits() >= totalDataCount * 8) {
          break
        }
        buffer.put(PAD1, 8)
      }

      return createBytes(buffer, rsBlocks)
    }

    _this.addData = function (data, mode) {
      mode = mode || 'Byte'

      var newData = null

      switch (mode) {
        case 'Numeric':
          newData = qrNumber(data)
          break
        case 'Alphanumeric':
          newData = qrAlphaNum(data)
          break
        case 'Byte':
          newData = qr8BitByte(data)
          break
        case 'Kanji':
          newData = qrKanji(data)
          break
        default:
          throw 'mode:' + mode
      }

      _dataList.push(newData)
      _dataCache = null
    }

    _this.isDark = function (row, col) {
      if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {
        throw row + ',' + col
      }
      return _modules[row][col]
    }

    _this.getModuleCount = function () {
      return _moduleCount
    }

    _this.make = function () {
      if (_typeNumber < 1) {
        var typeNumber = 1

        for (; typeNumber < 40; typeNumber++) {
          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, _errorCorrectionLevel)
          var buffer = qrBitBuffer()

          for (var i = 0; i < _dataList.length; i++) {
            var data = _dataList[i]
            buffer.put(data.getMode(), 4)
            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber))
            data.write(buffer)
          }

          var totalDataCount = 0
          for (var i = 0; i < rsBlocks.length; i++) {
            totalDataCount += rsBlocks[i].dataCount
          }

          if (buffer.getLengthInBits() <= totalDataCount * 8) {
            break
          }
        }

        _typeNumber = typeNumber
      }

      makeImpl(false, getBestMaskPattern())
    }

    _this.createTableTag = function (cellSize, margin) {
      cellSize = cellSize || 2
      margin = typeof margin == 'undefined' ? cellSize * 4 : margin

      var qrHtml = ''

      qrHtml += '<table style="'
      qrHtml += ' border-width: 0px; border-style: none;'
      qrHtml += ' border-collapse: collapse;'
      qrHtml += ' padding: 0px; margin: ' + margin + 'px;'
      qrHtml += '">'
      qrHtml += '<tbody>'

      for (var r = 0; r < _this.getModuleCount(); r += 1) {
        qrHtml += '<tr>'

        for (var c = 0; c < _this.getModuleCount(); c += 1) {
          qrHtml += '<td style="'
          qrHtml += ' border-width: 0px; border-style: none;'
          qrHtml += ' border-collapse: collapse;'
          qrHtml += ' padding: 0px; margin: 0px;'
          qrHtml += ' width: ' + cellSize + 'px;'
          qrHtml += ' height: ' + cellSize + 'px;'
          qrHtml += ' background-color: '
          qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff'
          qrHtml += ';'
          qrHtml += '"/>'
        }

        qrHtml += '</tr>'
      }

      qrHtml += '</tbody>'
      qrHtml += '</table>'

      return qrHtml
    }

    _this.createSvgTag = function (cellSize, margin, alt, title) {
      var opts = {}
      if (typeof arguments[0] == 'object') {
        // Called by options.
        opts = arguments[0]
        // overwrite cellSize and margin.
        cellSize = opts.cellSize
        margin = opts.margin
        alt = opts.alt
        title = opts.title
      }

      cellSize = cellSize || 2
      margin = typeof margin == 'undefined' ? cellSize * 4 : margin

      // Compose alt property surrogate
      alt = typeof alt === 'string' ? { text: alt } : alt || {}
      alt.text = alt.text || null
      alt.id = alt.text ? alt.id || 'qrcode-description' : null

      // Compose title property surrogate
      title = typeof title === 'string' ? { text: title } : title || {}
      title.text = title.text || null
      title.id = title.text ? title.id || 'qrcode-title' : null

      var size = _this.getModuleCount() * cellSize + margin * 2
      var c,
        mc,
        r,
        mr,
        qrSvg = '',
        rect

      rect = 'l' + cellSize + ',0 0,' + cellSize + ' -' + cellSize + ',0 0,-' + cellSize + 'z '

      qrSvg += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"'
      qrSvg += !opts.scalable ? ' width="' + size + 'px" height="' + size + 'px"' : ''
      qrSvg += ' viewBox="0 0 ' + size + ' ' + size + '" '
      qrSvg += ' preserveAspectRatio="xMinYMin meet"'
      qrSvg +=
        title.text || alt.text
          ? ' role="img" aria-labelledby="' + escapeXml([title.id, alt.id].join(' ').trim()) + '"'
          : ''
      qrSvg += '>'
      qrSvg += title.text
        ? '<title id="' + escapeXml(title.id) + '">' + escapeXml(title.text) + '</title>'
        : ''
      qrSvg += alt.text
        ? '<description id="' + escapeXml(alt.id) + '">' + escapeXml(alt.text) + '</description>'
        : ''
      qrSvg += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>'
      qrSvg += '<path d="'

      for (r = 0; r < _this.getModuleCount(); r += 1) {
        mr = r * cellSize + margin
        for (c = 0; c < _this.getModuleCount(); c += 1) {
          if (_this.isDark(r, c)) {
            mc = c * cellSize + margin
            qrSvg += 'M' + mc + ',' + mr + rect
          }
        }
      }

      qrSvg += '" stroke="transparent" fill="black"/>'
      qrSvg += '</svg>'

      return qrSvg
    }

    _this.createDataURL = function (cellSize, margin) {
      cellSize = cellSize || 2
      margin = typeof margin == 'undefined' ? cellSize * 4 : margin

      var size = _this.getModuleCount() * cellSize + margin * 2
      var min = margin
      var max = size - margin

      return createDataURL(size, size, function (x, y) {
        if (min <= x && x < max && min <= y && y < max) {
          var c = Math.floor((x - min) / cellSize)
          var r = Math.floor((y - min) / cellSize)
          return _this.isDark(r, c) ? 0 : 1
        } else {
          return 1
        }
      })
    }

    _this.createImgTag = function (cellSize, margin, alt) {
      cellSize = cellSize || 2
      margin = typeof margin == 'undefined' ? cellSize * 4 : margin

      var size = _this.getModuleCount() * cellSize + margin * 2

      var img = ''
      img += '<img'
      img += '\u0020src="'
      img += _this.createDataURL(cellSize, margin)
      img += '"'
      img += '\u0020width="'
      img += size
      img += '"'
      img += '\u0020height="'
      img += size
      img += '"'
      if (alt) {
        img += '\u0020alt="'
        img += escapeXml(alt)
        img += '"'
      }
      img += '/>'

      return img
    }

    var escapeXml = function (s) {
      var escaped = ''
      for (var i = 0; i < s.length; i += 1) {
        var c = s.charAt(i)
        switch (c) {
          case '<':
            escaped += '&lt;'
            break
          case '>':
            escaped += '&gt;'
            break
          case '&':
            escaped += '&amp;'
            break
          case '"':
            escaped += '&quot;'
            break
          default:
            escaped += c
            break
        }
      }
      return escaped
    }

    var _createHalfASCII = function (margin) {
      var cellSize = 1
      margin = typeof margin == 'undefined' ? cellSize * 2 : margin

      var size = _this.getModuleCount() * cellSize + margin * 2
      var min = margin
      var max = size - margin

      var y, x, r1, r2, p

      var blocks = {
        '██': '█',
        '█ ': '▀',
        ' █': '▄',
        '  ': ' ',
      }

      var blocksLastLineNoMargin = {
        '██': '▀',
        '█ ': '▀',
        ' █': ' ',
        '  ': ' ',
      }

      var ascii = ''
      for (y = 0; y < size; y += 2) {
        r1 = Math.floor((y - min) / cellSize)
        r2 = Math.floor((y + 1 - min) / cellSize)
        for (x = 0; x < size; x += 1) {
          p = '█'

          if (
            min <= x &&
            x < max &&
            min <= y &&
            y < max &&
            _this.isDark(r1, Math.floor((x - min) / cellSize))
          ) {
            p = ' '
          }

          if (
            min <= x &&
            x < max &&
            min <= y + 1 &&
            y + 1 < max &&
            _this.isDark(r2, Math.floor((x - min) / cellSize))
          ) {
            p += ' '
          } else {
            p += '█'
          }

          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.
          ascii += margin < 1 && y + 1 >= max ? blocksLastLineNoMargin[p] : blocks[p]
        }

        ascii += '\n'
      }

      if (size % 2 && margin > 0) {
        return ascii.substring(0, ascii.length - size - 1) + Array(size + 1).join('▀')
      }

      return ascii.substring(0, ascii.length - 1)
    }

    _this.createASCII = function (cellSize, margin) {
      cellSize = cellSize || 1

      if (cellSize < 2) {
        return _createHalfASCII(margin)
      }

      cellSize -= 1
      margin = typeof margin == 'undefined' ? cellSize * 2 : margin

      var size = _this.getModuleCount() * cellSize + margin * 2
      var min = margin
      var max = size - margin

      var y, x, r, p

      var white = Array(cellSize + 1).join('██')
      var black = Array(cellSize + 1).join('  ')

      var ascii = ''
      var line = ''
      for (y = 0; y < size; y += 1) {
        r = Math.floor((y - min) / cellSize)
        line = ''
        for (x = 0; x < size; x += 1) {
          p = 1

          if (
            min <= x &&
            x < max &&
            min <= y &&
            y < max &&
            _this.isDark(r, Math.floor((x - min) / cellSize))
          ) {
            p = 0
          }

          // Output 2 characters per pixel, to create full square. 1 character per pixels gives only half width of square.
          line += p ? white : black
        }

        for (r = 0; r < cellSize; r += 1) {
          ascii += line + '\n'
        }
      }

      return ascii.substring(0, ascii.length - 1)
    }

    _this.renderTo2dContext = function (context, cellSize) {
      cellSize = cellSize || 2
      var length = _this.getModuleCount()
      for (var row = 0; row < length; row++) {
        for (var col = 0; col < length; col++) {
          context.fillStyle = _this.isDark(row, col) ? 'black' : 'white'
          context.fillRect(row * cellSize, col * cellSize, cellSize, cellSize)
        }
      }
    }

    return _this
  }

  //---------------------------------------------------------------------
  // qrcode.stringToBytes
  //---------------------------------------------------------------------

  qrcode.stringToBytesFuncs = {
    default: function (s) {
      var bytes = []
      for (var i = 0; i < s.length; i += 1) {
        var c = s.charCodeAt(i)
        bytes.push(c & 0xff)
      }
      return bytes
    },
  }

  qrcode.stringToBytes = qrcode.stringToBytesFuncs['default']

  //---------------------------------------------------------------------
  // qrcode.createStringToBytes
  //---------------------------------------------------------------------

  /**
   * @param unicodeData base64 string of byte array.
   * [16bit Unicode],[16bit Bytes], ...
   * @param numChars
   */
  qrcode.createStringToBytes = function (unicodeData, numChars) {
    // create conversion map.

    var unicodeMap = (function () {
      var bin = base64DecodeInputStream(unicodeData)
      var read = function () {
        var b = bin.read()
        if (b == -1) throw 'eof'
        return b
      }

      var count = 0
      var unicodeMap = {}
      while (true) {
        var b0 = bin.read()
        if (b0 == -1) break
        var b1 = read()
        var b2 = read()
        var b3 = read()
        var k = String.fromCharCode((b0 << 8) | b1)
        var v = (b2 << 8) | b3
        unicodeMap[k] = v
        count += 1
      }
      if (count != numChars) {
        throw count + ' != ' + numChars
      }

      return unicodeMap
    })()

    var unknownChar = '?'.charCodeAt(0)

    return function (s) {
      var bytes = []
      for (var i = 0; i < s.length; i += 1) {
        var c = s.charCodeAt(i)
        if (c < 128) {
          bytes.push(c)
        } else {
          var b = unicodeMap[s.charAt(i)]
          if (typeof b == 'number') {
            if ((b & 0xff) == b) {
              // 1byte
              bytes.push(b)
            } else {
              // 2bytes
              bytes.push(b >>> 8)
              bytes.push(b & 0xff)
            }
          } else {
            bytes.push(unknownChar)
          }
        }
      }
      return bytes
    }
  }

  //---------------------------------------------------------------------
  // QRMode
  //---------------------------------------------------------------------

  var QRMode = {
    MODE_NUMBER: 1 << 0,
    MODE_ALPHA_NUM: 1 << 1,
    MODE_8BIT_BYTE: 1 << 2,
    MODE_KANJI: 1 << 3,
  }

  //---------------------------------------------------------------------
  // QRErrorCorrectionLevel
  //---------------------------------------------------------------------

  var QRErrorCorrectionLevel = {
    L: 1,
    M: 0,
    Q: 3,
    H: 2,
  }

  //---------------------------------------------------------------------
  // QRMaskPattern
  //---------------------------------------------------------------------

  var QRMaskPattern = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7,
  }

  //---------------------------------------------------------------------
  // QRUtil
  //---------------------------------------------------------------------

  var QRUtil = (function () {
    var PATTERN_POSITION_TABLE = [
      [],
      [6, 18],
      [6, 22],
      [6, 26],
      [6, 30],
      [6, 34],
      [6, 22, 38],
      [6, 24, 42],
      [6, 26, 46],
      [6, 28, 50],
      [6, 30, 54],
      [6, 32, 58],
      [6, 34, 62],
      [6, 26, 46, 66],
      [6, 26, 48, 70],
      [6, 26, 50, 74],
      [6, 30, 54, 78],
      [6, 30, 56, 82],
      [6, 30, 58, 86],
      [6, 34, 62, 90],
      [6, 28, 50, 72, 94],
      [6, 26, 50, 74, 98],
      [6, 30, 54, 78, 102],
      [6, 28, 54, 80, 106],
      [6, 32, 58, 84, 110],
      [6, 30, 58, 86, 114],
      [6, 34, 62, 90, 118],
      [6, 26, 50, 74, 98, 122],
      [6, 30, 54, 78, 102, 126],
      [6, 26, 52, 78, 104, 130],
      [6, 30, 56, 82, 108, 134],
      [6, 34, 60, 86, 112, 138],
      [6, 30, 58, 86, 114, 142],
      [6, 34, 62, 90, 118, 146],
      [6, 30, 54, 78, 102, 126, 150],
      [6, 24, 50, 76, 102, 128, 154],
      [6, 28, 54, 80, 106, 132, 158],
      [6, 32, 58, 84, 110, 136, 162],
      [6, 26, 54, 82, 110, 138, 166],
      [6, 30, 58, 86, 114, 142, 170],
    ]
    var G15 = (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0)
    var G18 =
      (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)
    var G15_MASK = (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1)

    var _this = {}

    var getBCHDigit = function (data) {
      var digit = 0
      while (data != 0) {
        digit += 1
        data >>>= 1
      }
      return digit
    }

    _this.getBCHTypeInfo = function (data) {
      var d = data << 10
      while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {
        d ^= G15 << (getBCHDigit(d) - getBCHDigit(G15))
      }
      return ((data << 10) | d) ^ G15_MASK
    }

    _this.getBCHTypeNumber = function (data) {
      var d = data << 12
      while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {
        d ^= G18 << (getBCHDigit(d) - getBCHDigit(G18))
      }
      return (data << 12) | d
    }

    _this.getPatternPosition = function (typeNumber) {
      return PATTERN_POSITION_TABLE[typeNumber - 1]
    }

    _this.getMaskFunction = function (maskPattern) {
      switch (maskPattern) {
        case QRMaskPattern.PATTERN000:
          return function (i, j) {
            return (i + j) % 2 == 0
          }
        case QRMaskPattern.PATTERN001:
          return function (i, j) {
            return i % 2 == 0
          }
        case QRMaskPattern.PATTERN010:
          return function (i, j) {
            return j % 3 == 0
          }
        case QRMaskPattern.PATTERN011:
          return function (i, j) {
            return (i + j) % 3 == 0
          }
        case QRMaskPattern.PATTERN100:
          return function (i, j) {
            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0
          }
        case QRMaskPattern.PATTERN101:
          return function (i, j) {
            return ((i * j) % 2) + ((i * j) % 3) == 0
          }
        case QRMaskPattern.PATTERN110:
          return function (i, j) {
            return (((i * j) % 2) + ((i * j) % 3)) % 2 == 0
          }
        case QRMaskPattern.PATTERN111:
          return function (i, j) {
            return (((i * j) % 3) + ((i + j) % 2)) % 2 == 0
          }

        default:
          throw 'bad maskPattern:' + maskPattern
      }
    }

    _this.getErrorCorrectPolynomial = function (errorCorrectLength) {
      var a = qrPolynomial([1], 0)
      for (var i = 0; i < errorCorrectLength; i += 1) {
        a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0))
      }
      return a
    }

    _this.getLengthInBits = function (mode, type) {
      if (1 <= type && type < 10) {
        // 1 - 9

        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 10
          case QRMode.MODE_ALPHA_NUM:
            return 9
          case QRMode.MODE_8BIT_BYTE:
            return 8
          case QRMode.MODE_KANJI:
            return 8
          default:
            throw 'mode:' + mode
        }
      } else if (type < 27) {
        // 10 - 26

        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 12
          case QRMode.MODE_ALPHA_NUM:
            return 11
          case QRMode.MODE_8BIT_BYTE:
            return 16
          case QRMode.MODE_KANJI:
            return 10
          default:
            throw 'mode:' + mode
        }
      } else if (type < 41) {
        // 27 - 40

        switch (mode) {
          case QRMode.MODE_NUMBER:
            return 14
          case QRMode.MODE_ALPHA_NUM:
            return 13
          case QRMode.MODE_8BIT_BYTE:
            return 16
          case QRMode.MODE_KANJI:
            return 12
          default:
            throw 'mode:' + mode
        }
      } else {
        throw 'type:' + type
      }
    }

    _this.getLostPoint = function (qrcode) {
      var moduleCount = qrcode.getModuleCount()

      var lostPoint = 0

      // LEVEL1

      for (var row = 0; row < moduleCount; row += 1) {
        for (var col = 0; col < moduleCount; col += 1) {
          var sameCount = 0
          var dark = qrcode.isDark(row, col)

          for (var r = -1; r <= 1; r += 1) {
            if (row + r < 0 || moduleCount <= row + r) {
              continue
            }

            for (var c = -1; c <= 1; c += 1) {
              if (col + c < 0 || moduleCount <= col + c) {
                continue
              }

              if (r == 0 && c == 0) {
                continue
              }

              if (dark == qrcode.isDark(row + r, col + c)) {
                sameCount += 1
              }
            }
          }

          if (sameCount > 5) {
            lostPoint += 3 + sameCount - 5
          }
        }
      }

      // LEVEL2

      for (var row = 0; row < moduleCount - 1; row += 1) {
        for (var col = 0; col < moduleCount - 1; col += 1) {
          var count = 0
          if (qrcode.isDark(row, col)) count += 1
          if (qrcode.isDark(row + 1, col)) count += 1
          if (qrcode.isDark(row, col + 1)) count += 1
          if (qrcode.isDark(row + 1, col + 1)) count += 1
          if (count == 0 || count == 4) {
            lostPoint += 3
          }
        }
      }

      // LEVEL3

      for (var row = 0; row < moduleCount; row += 1) {
        for (var col = 0; col < moduleCount - 6; col += 1) {
          if (
            qrcode.isDark(row, col) &&
            !qrcode.isDark(row, col + 1) &&
            qrcode.isDark(row, col + 2) &&
            qrcode.isDark(row, col + 3) &&
            qrcode.isDark(row, col + 4) &&
            !qrcode.isDark(row, col + 5) &&
            qrcode.isDark(row, col + 6)
          ) {
            lostPoint += 40
          }
        }
      }

      for (var col = 0; col < moduleCount; col += 1) {
        for (var row = 0; row < moduleCount - 6; row += 1) {
          if (
            qrcode.isDark(row, col) &&
            !qrcode.isDark(row + 1, col) &&
            qrcode.isDark(row + 2, col) &&
            qrcode.isDark(row + 3, col) &&
            qrcode.isDark(row + 4, col) &&
            !qrcode.isDark(row + 5, col) &&
            qrcode.isDark(row + 6, col)
          ) {
            lostPoint += 40
          }
        }
      }

      // LEVEL4

      var darkCount = 0

      for (var col = 0; col < moduleCount; col += 1) {
        for (var row = 0; row < moduleCount; row += 1) {
          if (qrcode.isDark(row, col)) {
            darkCount += 1
          }
        }
      }

      var ratio = Math.abs((100 * darkCount) / moduleCount / moduleCount - 50) / 5
      lostPoint += ratio * 10

      return lostPoint
    }

    return _this
  })()

  //---------------------------------------------------------------------
  // QRMath
  //---------------------------------------------------------------------

  var QRMath = (function () {
    var EXP_TABLE = new Array(256)
    var LOG_TABLE = new Array(256)

    // initialize tables
    for (var i = 0; i < 8; i += 1) {
      EXP_TABLE[i] = 1 << i
    }
    for (var i = 8; i < 256; i += 1) {
      EXP_TABLE[i] = EXP_TABLE[i - 4] ^ EXP_TABLE[i - 5] ^ EXP_TABLE[i - 6] ^ EXP_TABLE[i - 8]
    }
    for (var i = 0; i < 255; i += 1) {
      LOG_TABLE[EXP_TABLE[i]] = i
    }

    var _this = {}

    _this.glog = function (n) {
      if (n < 1) {
        throw 'glog(' + n + ')'
      }

      return LOG_TABLE[n]
    }

    _this.gexp = function (n) {
      while (n < 0) {
        n += 255
      }

      while (n >= 256) {
        n -= 255
      }

      return EXP_TABLE[n]
    }

    return _this
  })()

  //---------------------------------------------------------------------
  // qrPolynomial
  //---------------------------------------------------------------------

  function qrPolynomial(num, shift) {
    if (typeof num.length == 'undefined') {
      throw num.length + '/' + shift
    }

    var _num = (function () {
      var offset = 0
      while (offset < num.length && num[offset] == 0) {
        offset += 1
      }
      var _num = new Array(num.length - offset + shift)
      for (var i = 0; i < num.length - offset; i += 1) {
        _num[i] = num[i + offset]
      }
      return _num
    })()

    var _this = {}

    _this.getAt = function (index) {
      return _num[index]
    }

    _this.getLength = function () {
      return _num.length
    }

    _this.multiply = function (e) {
      var num = new Array(_this.getLength() + e.getLength() - 1)

      for (var i = 0; i < _this.getLength(); i += 1) {
        for (var j = 0; j < e.getLength(); j += 1) {
          num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)))
        }
      }

      return qrPolynomial(num, 0)
    }

    _this.mod = function (e) {
      if (_this.getLength() - e.getLength() < 0) {
        return _this
      }

      var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0))

      var num = new Array(_this.getLength())
      for (var i = 0; i < _this.getLength(); i += 1) {
        num[i] = _this.getAt(i)
      }

      for (var i = 0; i < e.getLength(); i += 1) {
        num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio)
      }

      // recursive call
      return qrPolynomial(num, 0).mod(e)
    }

    return _this
  }

  //---------------------------------------------------------------------
  // QRRSBlock
  //---------------------------------------------------------------------

  var QRRSBlock = (function () {
    var RS_BLOCK_TABLE = [
      // L
      // M
      // Q
      // H

      // 1
      [1, 26, 19],
      [1, 26, 16],
      [1, 26, 13],
      [1, 26, 9],

      // 2
      [1, 44, 34],
      [1, 44, 28],
      [1, 44, 22],
      [1, 44, 16],

      // 3
      [1, 70, 55],
      [1, 70, 44],
      [2, 35, 17],
      [2, 35, 13],

      // 4
      [1, 100, 80],
      [2, 50, 32],
      [2, 50, 24],
      [4, 25, 9],

      // 5
      [1, 134, 108],
      [2, 67, 43],
      [2, 33, 15, 2, 34, 16],
      [2, 33, 11, 2, 34, 12],

      // 6
      [2, 86, 68],
      [4, 43, 27],
      [4, 43, 19],
      [4, 43, 15],

      // 7
      [2, 98, 78],
      [4, 49, 31],
      [2, 32, 14, 4, 33, 15],
      [4, 39, 13, 1, 40, 14],

      // 8
      [2, 121, 97],
      [2, 60, 38, 2, 61, 39],
      [4, 40, 18, 2, 41, 19],
      [4, 40, 14, 2, 41, 15],

      // 9
      [2, 146, 116],
      [3, 58, 36, 2, 59, 37],
      [4, 36, 16, 4, 37, 17],
      [4, 36, 12, 4, 37, 13],

      // 10
      [2, 86, 68, 2, 87, 69],
      [4, 69, 43, 1, 70, 44],
      [6, 43, 19, 2, 44, 20],
      [6, 43, 15, 2, 44, 16],

      // 11
      [4, 101, 81],
      [1, 80, 50, 4, 81, 51],
      [4, 50, 22, 4, 51, 23],
      [3, 36, 12, 8, 37, 13],

      // 12
      [2, 116, 92, 2, 117, 93],
      [6, 58, 36, 2, 59, 37],
      [4, 46, 20, 6, 47, 21],
      [7, 42, 14, 4, 43, 15],

      // 13
      [4, 133, 107],
      [8, 59, 37, 1, 60, 38],
      [8, 44, 20, 4, 45, 21],
      [12, 33, 11, 4, 34, 12],

      // 14
      [3, 145, 115, 1, 146, 116],
      [4, 64, 40, 5, 65, 41],
      [11, 36, 16, 5, 37, 17],
      [11, 36, 12, 5, 37, 13],

      // 15
      [5, 109, 87, 1, 110, 88],
      [5, 65, 41, 5, 66, 42],
      [5, 54, 24, 7, 55, 25],
      [11, 36, 12, 7, 37, 13],

      // 16
      [5, 122, 98, 1, 123, 99],
      [7, 73, 45, 3, 74, 46],
      [15, 43, 19, 2, 44, 20],
      [3, 45, 15, 13, 46, 16],

      // 17
      [1, 135, 107, 5, 136, 108],
      [10, 74, 46, 1, 75, 47],
      [1, 50, 22, 15, 51, 23],
      [2, 42, 14, 17, 43, 15],

      // 18
      [5, 150, 120, 1, 151, 121],
      [9, 69, 43, 4, 70, 44],
      [17, 50, 22, 1, 51, 23],
      [2, 42, 14, 19, 43, 15],

      // 19
      [3, 141, 113, 4, 142, 114],
      [3, 70, 44, 11, 71, 45],
      [17, 47, 21, 4, 48, 22],
      [9, 39, 13, 16, 40, 14],

      // 20
      [3, 135, 107, 5, 136, 108],
      [3, 67, 41, 13, 68, 42],
      [15, 54, 24, 5, 55, 25],
      [15, 43, 15, 10, 44, 16],

      // 21
      [4, 144, 116, 4, 145, 117],
      [17, 68, 42],
      [17, 50, 22, 6, 51, 23],
      [19, 46, 16, 6, 47, 17],

      // 22
      [2, 139, 111, 7, 140, 112],
      [17, 74, 46],
      [7, 54, 24, 16, 55, 25],
      [34, 37, 13],

      // 23
      [4, 151, 121, 5, 152, 122],
      [4, 75, 47, 14, 76, 48],
      [11, 54, 24, 14, 55, 25],
      [16, 45, 15, 14, 46, 16],

      // 24
      [6, 147, 117, 4, 148, 118],
      [6, 73, 45, 14, 74, 46],
      [11, 54, 24, 16, 55, 25],
      [30, 46, 16, 2, 47, 17],

      // 25
      [8, 132, 106, 4, 133, 107],
      [8, 75, 47, 13, 76, 48],
      [7, 54, 24, 22, 55, 25],
      [22, 45, 15, 13, 46, 16],

      // 26
      [10, 142, 114, 2, 143, 115],
      [19, 74, 46, 4, 75, 47],
      [28, 50, 22, 6, 51, 23],
      [33, 46, 16, 4, 47, 17],

      // 27
      [8, 152, 122, 4, 153, 123],
      [22, 73, 45, 3, 74, 46],
      [8, 53, 23, 26, 54, 24],
      [12, 45, 15, 28, 46, 16],

      // 28
      [3, 147, 117, 10, 148, 118],
      [3, 73, 45, 23, 74, 46],
      [4, 54, 24, 31, 55, 25],
      [11, 45, 15, 31, 46, 16],

      // 29
      [7, 146, 116, 7, 147, 117],
      [21, 73, 45, 7, 74, 46],
      [1, 53, 23, 37, 54, 24],
      [19, 45, 15, 26, 46, 16],

      // 30
      [5, 145, 115, 10, 146, 116],
      [19, 75, 47, 10, 76, 48],
      [15, 54, 24, 25, 55, 25],
      [23, 45, 15, 25, 46, 16],

      // 31
      [13, 145, 115, 3, 146, 116],
      [2, 74, 46, 29, 75, 47],
      [42, 54, 24, 1, 55, 25],
      [23, 45, 15, 28, 46, 16],

      // 32
      [17, 145, 115],
      [10, 74, 46, 23, 75, 47],
      [10, 54, 24, 35, 55, 25],
      [19, 45, 15, 35, 46, 16],

      // 33
      [17, 145, 115, 1, 146, 116],
      [14, 74, 46, 21, 75, 47],
      [29, 54, 24, 19, 55, 25],
      [11, 45, 15, 46, 46, 16],

      // 34
      [13, 145, 115, 6, 146, 116],
      [14, 74, 46, 23, 75, 47],
      [44, 54, 24, 7, 55, 25],
      [59, 46, 16, 1, 47, 17],

      // 35
      [12, 151, 121, 7, 152, 122],
      [12, 75, 47, 26, 76, 48],
      [39, 54, 24, 14, 55, 25],
      [22, 45, 15, 41, 46, 16],

      // 36
      [6, 151, 121, 14, 152, 122],
      [6, 75, 47, 34, 76, 48],
      [46, 54, 24, 10, 55, 25],
      [2, 45, 15, 64, 46, 16],

      // 37
      [17, 152, 122, 4, 153, 123],
      [29, 74, 46, 14, 75, 47],
      [49, 54, 24, 10, 55, 25],
      [24, 45, 15, 46, 46, 16],

      // 38
      [4, 152, 122, 18, 153, 123],
      [13, 74, 46, 32, 75, 47],
      [48, 54, 24, 14, 55, 25],
      [42, 45, 15, 32, 46, 16],

      // 39
      [20, 147, 117, 4, 148, 118],
      [40, 75, 47, 7, 76, 48],
      [43, 54, 24, 22, 55, 25],
      [10, 45, 15, 67, 46, 16],

      // 40
      [19, 148, 118, 6, 149, 119],
      [18, 75, 47, 31, 76, 48],
      [34, 54, 24, 34, 55, 25],
      [20, 45, 15, 61, 46, 16],
    ]

    var qrRSBlock = function (totalCount, dataCount) {
      var _this = {}
      _this.totalCount = totalCount
      _this.dataCount = dataCount
      return _this
    }

    var _this = {}

    var getRsBlockTable = function (typeNumber, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case QRErrorCorrectionLevel.L:
          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0]
        case QRErrorCorrectionLevel.M:
          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1]
        case QRErrorCorrectionLevel.Q:
          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2]
        case QRErrorCorrectionLevel.H:
          return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3]
        default:
          return undefined
      }
    }

    _this.getRSBlocks = function (typeNumber, errorCorrectionLevel) {
      var rsBlock = getRsBlockTable(typeNumber, errorCorrectionLevel)

      if (typeof rsBlock == 'undefined') {
        throw (
          'bad rs block @ typeNumber:' +
          typeNumber +
          '/errorCorrectionLevel:' +
          errorCorrectionLevel
        )
      }

      var length = rsBlock.length / 3

      var list = []

      for (var i = 0; i < length; i += 1) {
        var count = rsBlock[i * 3 + 0]
        var totalCount = rsBlock[i * 3 + 1]
        var dataCount = rsBlock[i * 3 + 2]

        for (var j = 0; j < count; j += 1) {
          list.push(qrRSBlock(totalCount, dataCount))
        }
      }

      return list
    }

    return _this
  })()

  //---------------------------------------------------------------------
  // qrBitBuffer
  //---------------------------------------------------------------------

  var qrBitBuffer = function () {
    var _buffer = []
    var _length = 0

    var _this = {}

    _this.getBuffer = function () {
      return _buffer
    }

    _this.getAt = function (index) {
      var bufIndex = Math.floor(index / 8)
      return ((_buffer[bufIndex] >>> (7 - (index % 8))) & 1) == 1
    }

    _this.put = function (num, length) {
      for (var i = 0; i < length; i += 1) {
        _this.putBit(((num >>> (length - i - 1)) & 1) == 1)
      }
    }

    _this.getLengthInBits = function () {
      return _length
    }

    _this.putBit = function (bit) {
      var bufIndex = Math.floor(_length / 8)
      if (_buffer.length <= bufIndex) {
        _buffer.push(0)
      }

      if (bit) {
        _buffer[bufIndex] |= 0x80 >>> _length % 8
      }

      _length += 1
    }

    return _this
  }

  //---------------------------------------------------------------------
  // qrNumber
  //---------------------------------------------------------------------

  var qrNumber = function (data) {
    var _mode = QRMode.MODE_NUMBER
    var _data = data

    var _this = {}

    _this.getMode = function () {
      return _mode
    }

    _this.getLength = function (buffer) {
      return _data.length
    }

    _this.write = function (buffer) {
      var data = _data

      var i = 0

      while (i + 2 < data.length) {
        buffer.put(strToNum(data.substring(i, i + 3)), 10)
        i += 3
      }

      if (i < data.length) {
        if (data.length - i == 1) {
          buffer.put(strToNum(data.substring(i, i + 1)), 4)
        } else if (data.length - i == 2) {
          buffer.put(strToNum(data.substring(i, i + 2)), 7)
        }
      }
    }

    var strToNum = function (s) {
      var num = 0
      for (var i = 0; i < s.length; i += 1) {
        num = num * 10 + chatToNum(s.charAt(i))
      }
      return num
    }

    var chatToNum = function (c) {
      if ('0' <= c && c <= '9') {
        return c.charCodeAt(0) - '0'.charCodeAt(0)
      }
      throw 'illegal char :' + c
    }

    return _this
  }

  //---------------------------------------------------------------------
  // qrAlphaNum
  //---------------------------------------------------------------------

  var qrAlphaNum = function (data) {
    var _mode = QRMode.MODE_ALPHA_NUM
    var _data = data

    var _this = {}

    _this.getMode = function () {
      return _mode
    }

    _this.getLength = function (buffer) {
      return _data.length
    }

    _this.write = function (buffer) {
      var s = _data

      var i = 0

      while (i + 1 < s.length) {
        buffer.put(getCode(s.charAt(i)) * 45 + getCode(s.charAt(i + 1)), 11)
        i += 2
      }

      if (i < s.length) {
        buffer.put(getCode(s.charAt(i)), 6)
      }
    }

    var getCode = function (c) {
      if ('0' <= c && c <= '9') {
        return c.charCodeAt(0) - '0'.charCodeAt(0)
      } else if ('A' <= c && c <= 'Z') {
        return c.charCodeAt(0) - 'A'.charCodeAt(0) + 10
      } else {
        switch (c) {
          case ' ':
            return 36
          case '$':
            return 37
          case '%':
            return 38
          case '*':
            return 39
          case '+':
            return 40
          case '-':
            return 41
          case '.':
            return 42
          case '/':
            return 43
          case ':':
            return 44
          default:
            throw 'illegal char :' + c
        }
      }
    }

    return _this
  }

  //---------------------------------------------------------------------
  // qr8BitByte
  //---------------------------------------------------------------------

  var qr8BitByte = function (data) {
    var _mode = QRMode.MODE_8BIT_BYTE
    var _data = data
    var _bytes = qrcode.stringToBytes(data)

    var _this = {}

    _this.getMode = function () {
      return _mode
    }

    _this.getLength = function (buffer) {
      return _bytes.length
    }

    _this.write = function (buffer) {
      for (var i = 0; i < _bytes.length; i += 1) {
        buffer.put(_bytes[i], 8)
      }
    }

    return _this
  }

  //---------------------------------------------------------------------
  // qrKanji
  //---------------------------------------------------------------------

  var qrKanji = function (data) {
    var _mode = QRMode.MODE_KANJI
    var _data = data

    var stringToBytes = qrcode.stringToBytesFuncs['SJIS']
    if (!stringToBytes) {
      throw 'sjis not supported.'
    }
    !(function (c, code) {
      // self test for sjis support.
      var test = stringToBytes(c)
      if (test.length != 2 || ((test[0] << 8) | test[1]) != code) {
        throw 'sjis not supported.'
      }
    })('\u53cb', 0x9746)

    var _bytes = stringToBytes(data)

    var _this = {}

    _this.getMode = function () {
      return _mode
    }

    _this.getLength = function (buffer) {
      return ~~(_bytes.length / 2)
    }

    _this.write = function (buffer) {
      var data = _bytes

      var i = 0

      while (i + 1 < data.length) {
        var c = ((0xff & data[i]) << 8) | (0xff & data[i + 1])

        if (0x8140 <= c && c <= 0x9ffc) {
          c -= 0x8140
        } else if (0xe040 <= c && c <= 0xebbf) {
          c -= 0xc140
        } else {
          throw 'illegal char at ' + (i + 1) + '/' + c
        }

        c = ((c >>> 8) & 0xff) * 0xc0 + (c & 0xff)

        buffer.put(c, 13)

        i += 2
      }

      if (i < data.length) {
        throw 'illegal char at ' + (i + 1)
      }
    }

    return _this
  }

  //=====================================================================
  // GIF Support etc.
  //

  //---------------------------------------------------------------------
  // byteArrayOutputStream
  //---------------------------------------------------------------------

  var byteArrayOutputStream = function () {
    var _bytes = []

    var _this = {}

    _this.writeByte = function (b) {
      _bytes.push(b & 0xff)
    }

    _this.writeShort = function (i) {
      _this.writeByte(i)
      _this.writeByte(i >>> 8)
    }

    _this.writeBytes = function (b, off, len) {
      off = off || 0
      len = len || b.length
      for (var i = 0; i < len; i += 1) {
        _this.writeByte(b[i + off])
      }
    }

    _this.writeString = function (s) {
      for (var i = 0; i < s.length; i += 1) {
        _this.writeByte(s.charCodeAt(i))
      }
    }

    _this.toByteArray = function () {
      return _bytes
    }

    _this.toString = function () {
      var s = ''
      s += '['
      for (var i = 0; i < _bytes.length; i += 1) {
        if (i > 0) {
          s += ','
        }
        s += _bytes[i]
      }
      s += ']'
      return s
    }

    return _this
  }

  //---------------------------------------------------------------------
  // base64EncodeOutputStream
  //---------------------------------------------------------------------

  var base64EncodeOutputStream = function () {
    var _buffer = 0
    var _buflen = 0
    var _length = 0
    var _base64 = ''

    var _this = {}

    var writeEncoded = function (b) {
      _base64 += String.fromCharCode(encode(b & 0x3f))
    }

    var encode = function (n) {
      if (n < 0) {
        // error.
      } else if (n < 26) {
        return 0x41 + n
      } else if (n < 52) {
        return 0x61 + (n - 26)
      } else if (n < 62) {
        return 0x30 + (n - 52)
      } else if (n == 62) {
        return 0x2b
      } else if (n == 63) {
        return 0x2f
      }
      throw 'n:' + n
    }

    _this.writeByte = function (n) {
      _buffer = (_buffer << 8) | (n & 0xff)
      _buflen += 8
      _length += 1

      while (_buflen >= 6) {
        writeEncoded(_buffer >>> (_buflen - 6))
        _buflen -= 6
      }
    }

    _this.flush = function () {
      if (_buflen > 0) {
        writeEncoded(_buffer << (6 - _buflen))
        _buffer = 0
        _buflen = 0
      }

      if (_length % 3 != 0) {
        // padding
        var padlen = 3 - (_length % 3)
        for (var i = 0; i < padlen; i += 1) {
          _base64 += '='
        }
      }
    }

    _this.toString = function () {
      return _base64
    }

    return _this
  }

  //---------------------------------------------------------------------
  // base64DecodeInputStream
  //---------------------------------------------------------------------

  var base64DecodeInputStream = function (str) {
    var _str = str
    var _pos = 0
    var _buffer = 0
    var _buflen = 0

    var _this = {}

    _this.read = function () {
      while (_buflen < 8) {
        if (_pos >= _str.length) {
          if (_buflen == 0) {
            return -1
          }
          throw 'unexpected end of file./' + _buflen
        }

        var c = _str.charAt(_pos)
        _pos += 1

        if (c == '=') {
          _buflen = 0
          return -1
        } else if (c.match(/^\s$/)) {
          // ignore if whitespace.
          continue
        }

        _buffer = (_buffer << 6) | decode(c.charCodeAt(0))
        _buflen += 6
      }

      var n = (_buffer >>> (_buflen - 8)) & 0xff
      _buflen -= 8
      return n
    }

    var decode = function (c) {
      if (0x41 <= c && c <= 0x5a) {
        return c - 0x41
      } else if (0x61 <= c && c <= 0x7a) {
        return c - 0x61 + 26
      } else if (0x30 <= c && c <= 0x39) {
        return c - 0x30 + 52
      } else if (c == 0x2b) {
        return 62
      } else if (c == 0x2f) {
        return 63
      } else {
        throw 'c:' + c
      }
    }

    return _this
  }

  //---------------------------------------------------------------------
  // gifImage (B/W)
  //---------------------------------------------------------------------

  var gifImage = function (width, height) {
    var _width = width
    var _height = height
    var _data = new Array(width * height)

    var _this = {}

    _this.setPixel = function (x, y, pixel) {
      _data[y * _width + x] = pixel
    }

    _this.write = function (out) {
      //---------------------------------
      // GIF Signature

      out.writeString('GIF87a')

      //---------------------------------
      // Screen Descriptor

      out.writeShort(_width)
      out.writeShort(_height)

      out.writeByte(0x80) // 2bit
      out.writeByte(0)
      out.writeByte(0)

      //---------------------------------
      // Global Color Map

      // black
      out.writeByte(0x00)
      out.writeByte(0x00)
      out.writeByte(0x00)

      // white
      out.writeByte(0xff)
      out.writeByte(0xff)
      out.writeByte(0xff)

      //---------------------------------
      // Image Descriptor

      out.writeString(',')
      out.writeShort(0)
      out.writeShort(0)
      out.writeShort(_width)
      out.writeShort(_height)
      out.writeByte(0)

      //---------------------------------
      // Local Color Map

      //---------------------------------
      // Raster Data

      var lzwMinCodeSize = 2
      var raster = getLZWRaster(lzwMinCodeSize)

      out.writeByte(lzwMinCodeSize)

      var offset = 0

      while (raster.length - offset > 255) {
        out.writeByte(255)
        out.writeBytes(raster, offset, 255)
        offset += 255
      }

      out.writeByte(raster.length - offset)
      out.writeBytes(raster, offset, raster.length - offset)
      out.writeByte(0x00)

      //---------------------------------
      // GIF Terminator
      out.writeString(';')
    }

    var bitOutputStream = function (out) {
      var _out = out
      var _bitLength = 0
      var _bitBuffer = 0

      var _this = {}

      _this.write = function (data, length) {
        if (data >>> length != 0) {
          throw 'length over'
        }

        while (_bitLength + length >= 8) {
          _out.writeByte(0xff & ((data << _bitLength) | _bitBuffer))
          length -= 8 - _bitLength
          data >>>= 8 - _bitLength
          _bitBuffer = 0
          _bitLength = 0
        }

        _bitBuffer = (data << _bitLength) | _bitBuffer
        _bitLength = _bitLength + length
      }

      _this.flush = function () {
        if (_bitLength > 0) {
          _out.writeByte(_bitBuffer)
        }
      }

      return _this
    }

    var getLZWRaster = function (lzwMinCodeSize) {
      var clearCode = 1 << lzwMinCodeSize
      var endCode = (1 << lzwMinCodeSize) + 1
      var bitLength = lzwMinCodeSize + 1

      // Setup LZWTable
      var table = lzwTable()

      for (var i = 0; i < clearCode; i += 1) {
        table.add(String.fromCharCode(i))
      }
      table.add(String.fromCharCode(clearCode))
      table.add(String.fromCharCode(endCode))

      var byteOut = byteArrayOutputStream()
      var bitOut = bitOutputStream(byteOut)

      // clear code
      bitOut.write(clearCode, bitLength)

      var dataIndex = 0

      var s = String.fromCharCode(_data[dataIndex])
      dataIndex += 1

      while (dataIndex < _data.length) {
        var c = String.fromCharCode(_data[dataIndex])
        dataIndex += 1

        if (table.contains(s + c)) {
          s = s + c
        } else {
          bitOut.write(table.indexOf(s), bitLength)

          if (table.size() < 0xfff) {
            if (table.size() == 1 << bitLength) {
              bitLength += 1
            }

            table.add(s + c)
          }

          s = c
        }
      }

      bitOut.write(table.indexOf(s), bitLength)

      // end code
      bitOut.write(endCode, bitLength)

      bitOut.flush()

      return byteOut.toByteArray()
    }

    var lzwTable = function () {
      var _map = {}
      var _size = 0

      var _this = {}

      _this.add = function (key) {
        if (_this.contains(key)) {
          throw 'dup key:' + key
        }
        _map[key] = _size
        _size += 1
      }

      _this.size = function () {
        return _size
      }

      _this.indexOf = function (key) {
        return _map[key]
      }

      _this.contains = function (key) {
        return typeof _map[key] != 'undefined'
      }

      return _this
    }

    return _this
  }

  var createDataURL = function (width, height, getPixel) {
    var gif = gifImage(width, height)
    for (var y = 0; y < height; y += 1) {
      for (var x = 0; x < width; x += 1) {
        gif.setPixel(x, y, getPixel(x, y))
      }
    }

    var b = byteArrayOutputStream()
    gif.write(b)

    var base64 = base64EncodeOutputStream()
    var bytes = b.toByteArray()
    for (var i = 0; i < bytes.length; i += 1) {
      base64.writeByte(bytes[i])
    }
    base64.flush()

    return 'data:image/gif;base64,' + base64
  }

  //---------------------------------------------------------------------
  // returns qrcode function.

  return qrcode
})()

// multibyte support
!(function () {
  qrcode.stringToBytesFuncs['UTF-8'] = function (s) {
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUTF8Array(str) {
      var utf8 = []
      for (var i = 0; i < str.length; i++) {
        var charcode = str.charCodeAt(i)
        if (charcode < 0x80) utf8.push(charcode)
        else if (charcode < 0x800) {
          utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f))
        } else if (charcode < 0xd800 || charcode >= 0xe000) {
          utf8.push(
            0xe0 | (charcode >> 12),
            0x80 | ((charcode >> 6) & 0x3f),
            0x80 | (charcode & 0x3f)
          )
        }
        // surrogate pair
        else {
          i++
          // UTF-16 encodes 0x10000-0x10FFFF by
          // subtracting 0x10000 and splitting the
          // 20 bits of 0x0-0xFFFFF into two halves
          charcode = 0x10000 + (((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff))
          utf8.push(
            0xf0 | (charcode >> 18),
            0x80 | ((charcode >> 12) & 0x3f),
            0x80 | ((charcode >> 6) & 0x3f),
            0x80 | (charcode & 0x3f)
          )
        }
      }
      return utf8
    }
    return toUTF8Array(s)
  }
})()

;(function (factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory)
  } else if (typeof exports === 'object') {
    module.exports = factory()
  }
})(function () {
  return qrcode
}) /*! showdown v 1.9.1 - 02-11-2019 */

;(function () {
  /**
   * Created by Tivie on 13-07-2015.
   */

  function getDefaultOpts(simple) {
    'use strict'

    var defaultOptions = {
      omitExtraWLInCodeBlocks: {
        defaultValue: false,
        describe: 'Omit the default extra whiteline added to code blocks',
        type: 'boolean',
      },
      noHeaderId: {
        defaultValue: false,
        describe: 'Turn on/off generated header id',
        type: 'boolean',
      },
      prefixHeaderId: {
        defaultValue: false,
        describe:
          "Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",
        type: 'string',
      },
      rawPrefixHeaderId: {
        defaultValue: false,
        describe:
          'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
        type: 'boolean',
      },
      ghCompatibleHeaderId: {
        defaultValue: false,
        describe:
          'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
        type: 'boolean',
      },
      rawHeaderId: {
        defaultValue: false,
        describe:
          'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
        type: 'boolean',
      },
      headerLevelStart: {
        defaultValue: false,
        describe: 'The header blocks level start',
        type: 'integer',
      },
      parseImgDimensions: {
        defaultValue: false,
        describe: 'Turn on/off image dimension parsing',
        type: 'boolean',
      },
      simplifiedAutoLink: {
        defaultValue: false,
        describe: 'Turn on/off GFM autolink style',
        type: 'boolean',
      },
      excludeTrailingPunctuationFromURLs: {
        defaultValue: false,
        describe: 'Excludes trailing punctuation from links generated with autoLinking',
        type: 'boolean',
      },
      literalMidWordUnderscores: {
        defaultValue: false,
        describe: 'Parse midword underscores as literal underscores',
        type: 'boolean',
      },
      literalMidWordAsterisks: {
        defaultValue: false,
        describe: 'Parse midword asterisks as literal asterisks',
        type: 'boolean',
      },
      strikethrough: {
        defaultValue: false,
        describe: 'Turn on/off strikethrough support',
        type: 'boolean',
      },
      tables: {
        defaultValue: false,
        describe: 'Turn on/off tables support',
        type: 'boolean',
      },
      tablesHeaderId: {
        defaultValue: false,
        describe: 'Add an id to table headers',
        type: 'boolean',
      },
      ghCodeBlocks: {
        defaultValue: true,
        describe: 'Turn on/off GFM fenced code blocks support',
        type: 'boolean',
      },
      tasklists: {
        defaultValue: false,
        describe: 'Turn on/off GFM tasklist support',
        type: 'boolean',
      },
      smoothLivePreview: {
        defaultValue: false,
        describe: 'Prevents weird effects in live previews due to incomplete input',
        type: 'boolean',
      },
      smartIndentationFix: {
        defaultValue: false,
        description: 'Tries to smartly fix indentation in es6 strings',
        type: 'boolean',
      },
      disableForced4SpacesIndentedSublists: {
        defaultValue: false,
        description: 'Disables the requirement of indenting nested sublists by 4 spaces',
        type: 'boolean',
      },
      simpleLineBreaks: {
        defaultValue: false,
        description: 'Parses simple line breaks as <br> (GFM Style)',
        type: 'boolean',
      },
      requireSpaceBeforeHeadingText: {
        defaultValue: false,
        description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
        type: 'boolean',
      },
      ghMentions: {
        defaultValue: false,
        description: 'Enables github @mentions',
        type: 'boolean',
      },
      ghMentionsLink: {
        defaultValue: 'https://github.com/{u}',
        description:
          'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
        type: 'string',
      },
      encodeEmails: {
        defaultValue: true,
        description:
          'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
        type: 'boolean',
      },
      openLinksInNewWindow: {
        defaultValue: false,
        description: 'Open all links in new windows',
        type: 'boolean',
      },
      backslashEscapesHTMLTags: {
        defaultValue: false,
        description: 'Support for HTML Tag escaping. ex: <div>foo</div>',
        type: 'boolean',
      },
      emoji: {
        defaultValue: false,
        description: 'Enable emoji support. Ex: `this is a :smile: emoji`',
        type: 'boolean',
      },
      underline: {
        defaultValue: false,
        description:
          'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
        type: 'boolean',
      },
      completeHTMLDocument: {
        defaultValue: false,
        description:
          'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
        type: 'boolean',
      },
      metadata: {
        defaultValue: false,
        description:
          'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
        type: 'boolean',
      },
      splitAdjacentBlockquotes: {
        defaultValue: false,
        description: 'Split adjacent blockquote blocks',
        type: 'boolean',
      },
    }
    if (simple === false) {
      return JSON.parse(JSON.stringify(defaultOptions))
    }
    var ret = {}
    for (var opt in defaultOptions) {
      if (defaultOptions.hasOwnProperty(opt)) {
        ret[opt] = defaultOptions[opt].defaultValue
      }
    }
    return ret
  }

  function allOptionsOn() {
    'use strict'
    var options = getDefaultOpts(true),
      ret = {}
    for (var opt in options) {
      if (options.hasOwnProperty(opt)) {
        ret[opt] = true
      }
    }
    return ret
  }

  /**
   * Created by Tivie on 06-01-2015.
   */

  // Private properties
  var showdown = {},
    parsers = {},
    extensions = {},
    globalOptions = getDefaultOpts(true),
    setFlavor = 'vanilla',
    flavor = {
      github: {
        omitExtraWLInCodeBlocks: true,
        simplifiedAutoLink: true,
        excludeTrailingPunctuationFromURLs: true,
        literalMidWordUnderscores: true,
        strikethrough: true,
        tables: true,
        tablesHeaderId: true,
        ghCodeBlocks: true,
        tasklists: true,
        disableForced4SpacesIndentedSublists: true,
        simpleLineBreaks: true,
        requireSpaceBeforeHeadingText: true,
        ghCompatibleHeaderId: true,
        ghMentions: true,
        backslashEscapesHTMLTags: true,
        emoji: true,
        splitAdjacentBlockquotes: true,
      },
      original: {
        noHeaderId: true,
        ghCodeBlocks: false,
      },
      ghost: {
        omitExtraWLInCodeBlocks: true,
        parseImgDimensions: true,
        simplifiedAutoLink: true,
        excludeTrailingPunctuationFromURLs: true,
        literalMidWordUnderscores: true,
        strikethrough: true,
        tables: true,
        tablesHeaderId: true,
        ghCodeBlocks: true,
        tasklists: true,
        smoothLivePreview: true,
        simpleLineBreaks: true,
        requireSpaceBeforeHeadingText: true,
        ghMentions: false,
        encodeEmails: true,
      },
      vanilla: getDefaultOpts(true),
      allOn: allOptionsOn(),
    }

  /**
   * helper namespace
   * @type {{}}
   */
  showdown.helper = {}

  /**
   * TODO LEGACY SUPPORT CODE
   * @type {{}}
   */
  showdown.extensions = {}

  /**
   * Set a global option
   * @static
   * @param {string} key
   * @param {*} value
   * @returns {showdown}
   */
  showdown.setOption = function (key, value) {
    'use strict'
    globalOptions[key] = value
    return this
  }

  /**
   * Get a global option
   * @static
   * @param {string} key
   * @returns {*}
   */
  showdown.getOption = function (key) {
    'use strict'
    return globalOptions[key]
  }

  /**
   * Get the global options
   * @static
   * @returns {{}}
   */
  showdown.getOptions = function () {
    'use strict'
    return globalOptions
  }

  /**
   * Reset global options to the default values
   * @static
   */
  showdown.resetOptions = function () {
    'use strict'
    globalOptions = getDefaultOpts(true)
  }

  /**
   * Set the flavor showdown should use as default
   * @param {string} name
   */
  showdown.setFlavor = function (name) {
    'use strict'
    if (!flavor.hasOwnProperty(name)) {
      throw Error(name + ' flavor was not found')
    }
    showdown.resetOptions()
    var preset = flavor[name]
    setFlavor = name
    for (var option in preset) {
      if (preset.hasOwnProperty(option)) {
        globalOptions[option] = preset[option]
      }
    }
  }

  /**
   * Get the currently set flavor
   * @returns {string}
   */
  showdown.getFlavor = function () {
    'use strict'
    return setFlavor
  }

  /**
   * Get the options of a specified flavor. Returns undefined if the flavor was not found
   * @param {string} name Name of the flavor
   * @returns {{}|undefined}
   */
  showdown.getFlavorOptions = function (name) {
    'use strict'
    if (flavor.hasOwnProperty(name)) {
      return flavor[name]
    }
  }

  /**
   * Get the default options
   * @static
   * @param {boolean} [simple=true]
   * @returns {{}}
   */
  showdown.getDefaultOptions = function (simple) {
    'use strict'
    return getDefaultOpts(simple)
  }

  /**
   * Get or set a subParser
   *
   * subParser(name)       - Get a registered subParser
   * subParser(name, func) - Register a subParser
   * @static
   * @param {string} name
   * @param {function} [func]
   * @returns {*}
   */
  showdown.subParser = function (name, func) {
    'use strict'
    if (showdown.helper.isString(name)) {
      if (typeof func !== 'undefined') {
        parsers[name] = func
      } else {
        if (parsers.hasOwnProperty(name)) {
          return parsers[name]
        } else {
          throw Error('SubParser named ' + name + ' not registered!')
        }
      }
    }
  }

  /**
   * Gets or registers an extension
   * @static
   * @param {string} name
   * @param {object|function=} ext
   * @returns {*}
   */
  showdown.extension = function (name, ext) {
    'use strict'

    if (!showdown.helper.isString(name)) {
      throw Error("Extension 'name' must be a string")
    }

    name = showdown.helper.stdExtName(name)

    // Getter
    if (showdown.helper.isUndefined(ext)) {
      if (!extensions.hasOwnProperty(name)) {
        throw Error('Extension named ' + name + ' is not registered!')
      }
      return extensions[name]

      // Setter
    } else {
      // Expand extension if it's wrapped in a function
      if (typeof ext === 'function') {
        ext = ext()
      }

      // Ensure extension is an array
      if (!showdown.helper.isArray(ext)) {
        ext = [ext]
      }

      var validExtension = validate(ext, name)

      if (validExtension.valid) {
        extensions[name] = ext
      } else {
        throw Error(validExtension.error)
      }
    }
  }

  /**
   * Gets all extensions registered
   * @returns {{}}
   */
  showdown.getAllExtensions = function () {
    'use strict'
    return extensions
  }

  /**
   * Remove an extension
   * @param {string} name
   */
  showdown.removeExtension = function (name) {
    'use strict'
    delete extensions[name]
  }

  /**
   * Removes all extensions
   */
  showdown.resetExtensions = function () {
    'use strict'
    extensions = {}
  }

  /**
   * Validate extension
   * @param {array} extension
   * @param {string} name
   * @returns {{valid: boolean, error: string}}
   */
  function validate(extension, name) {
    'use strict'

    var errMsg = name ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
      ret = {
        valid: true,
        error: '',
      }

    if (!showdown.helper.isArray(extension)) {
      extension = [extension]
    }

    for (var i = 0; i < extension.length; ++i) {
      var baseMsg = errMsg + ' sub-extension ' + i + ': ',
        ext = extension[i]
      if (typeof ext !== 'object') {
        ret.valid = false
        ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given'
        return ret
      }

      if (!showdown.helper.isString(ext.type)) {
        ret.valid = false
        ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given'
        return ret
      }

      var type = (ext.type = ext.type.toLowerCase())

      // normalize extension type
      if (type === 'language') {
        type = ext.type = 'lang'
      }

      if (type === 'html') {
        type = ext.type = 'output'
      }

      if (type !== 'lang' && type !== 'output' && type !== 'listener') {
        ret.valid = false
        ret.error =
          baseMsg +
          'type ' +
          type +
          ' is not recognized. Valid values: "lang/language", "output/html" or "listener"'
        return ret
      }

      if (type === 'listener') {
        if (showdown.helper.isUndefined(ext.listeners)) {
          ret.valid = false
          ret.error =
            baseMsg + '. Extensions of type "listener" must have a property called "listeners"'
          return ret
        }
      } else {
        if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
          ret.valid = false
          ret.error =
            baseMsg +
            type +
            ' extensions must define either a "regex" property or a "filter" method'
          return ret
        }
      }

      if (ext.listeners) {
        if (typeof ext.listeners !== 'object') {
          ret.valid = false
          ret.error =
            baseMsg +
            '"listeners" property must be an object but ' +
            typeof ext.listeners +
            ' given'
          return ret
        }
        for (var ln in ext.listeners) {
          if (ext.listeners.hasOwnProperty(ln)) {
            if (typeof ext.listeners[ln] !== 'function') {
              ret.valid = false
              ret.error =
                baseMsg +
                '"listeners" property must be an hash of [event name]: [callback]. listeners.' +
                ln +
                ' must be a function but ' +
                typeof ext.listeners[ln] +
                ' given'
              return ret
            }
          }
        }
      }

      if (ext.filter) {
        if (typeof ext.filter !== 'function') {
          ret.valid = false
          ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given'
          return ret
        }
      } else if (ext.regex) {
        if (showdown.helper.isString(ext.regex)) {
          ext.regex = new RegExp(ext.regex, 'g')
        }
        if (!(ext.regex instanceof RegExp)) {
          ret.valid = false
          ret.error =
            baseMsg +
            '"regex" property must either be a string or a RegExp object, but ' +
            typeof ext.regex +
            ' given'
          return ret
        }
        if (showdown.helper.isUndefined(ext.replace)) {
          ret.valid = false
          ret.error = baseMsg + '"regex" extensions must implement a replace string or function'
          return ret
        }
      }
    }
    return ret
  }

  /**
   * Validate extension
   * @param {object} ext
   * @returns {boolean}
   */
  showdown.validateExtension = function (ext) {
    'use strict'

    var validateExtension = validate(ext, null)
    if (!validateExtension.valid) {
      console.warn(validateExtension.error)
      return false
    }
    return true
  }

  /**
   * showdownjs helper functions
   */

  if (!showdown.hasOwnProperty('helper')) {
    showdown.helper = {}
  }

  /**
   * Check if var is string
   * @static
   * @param {string} a
   * @returns {boolean}
   */
  showdown.helper.isString = function (a) {
    'use strict'
    return typeof a === 'string' || a instanceof String
  }

  /**
   * Check if var is a function
   * @static
   * @param {*} a
   * @returns {boolean}
   */
  showdown.helper.isFunction = function (a) {
    'use strict'
    var getType = {}
    return a && getType.toString.call(a) === '[object Function]'
  }

  /**
   * isArray helper function
   * @static
   * @param {*} a
   * @returns {boolean}
   */
  showdown.helper.isArray = function (a) {
    'use strict'
    return Array.isArray(a)
  }

  /**
   * Check if value is undefined
   * @static
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   */
  showdown.helper.isUndefined = function (value) {
    'use strict'
    return typeof value === 'undefined'
  }

  /**
   * ForEach helper function
   * Iterates over Arrays and Objects (own properties only)
   * @static
   * @param {*} obj
   * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
   */
  showdown.helper.forEach = function (obj, callback) {
    'use strict'
    // check if obj is defined
    if (showdown.helper.isUndefined(obj)) {
      throw new Error('obj param is required')
    }

    if (showdown.helper.isUndefined(callback)) {
      throw new Error('callback param is required')
    }

    if (!showdown.helper.isFunction(callback)) {
      throw new Error('callback param must be a function/closure')
    }

    if (typeof obj.forEach === 'function') {
      obj.forEach(callback)
    } else if (showdown.helper.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        callback(obj[i], i, obj)
      }
    } else if (typeof obj === 'object') {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          callback(obj[prop], prop, obj)
        }
      }
    } else {
      throw new Error('obj does not seem to be an array or an iterable object')
    }
  }

  /**
   * Standardidize extension name
   * @static
   * @param {string} s extension name
   * @returns {string}
   */
  showdown.helper.stdExtName = function (s) {
    'use strict'
    return s
      .replace(/[_?*+\/\\.^-]/g, '')
      .replace(/\s/g, '')
      .toLowerCase()
  }

  function escapeCharactersCallback(wholeMatch, m1) {
    'use strict'
    var charCodeToEscape = m1.charCodeAt(0)
    return '¨E' + charCodeToEscape + 'E'
  }

  /**
   * Callback used to escape characters when passing through String.replace
   * @static
   * @param {string} wholeMatch
   * @param {string} m1
   * @returns {string}
   */
  showdown.helper.escapeCharactersCallback = escapeCharactersCallback

  /**
   * Escape characters in a string
   * @static
   * @param {string} text
   * @param {string} charsToEscape
   * @param {boolean} afterBackslash
   * @returns {XML|string|void|*}
   */
  showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
    'use strict'
    // First we have to escape the escape characters so that
    // we can build a character class out of them
    var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])'

    if (afterBackslash) {
      regexString = '\\\\' + regexString
    }

    var regex = new RegExp(regexString, 'g')
    text = text.replace(regex, escapeCharactersCallback)

    return text
  }

  /**
   * Unescape HTML entities
   * @param txt
   * @returns {string}
   */
  showdown.helper.unescapeHTMLEntities = function (txt) {
    'use strict'

    return txt
      .replace(/&quot;/g, '"')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&amp;/g, '&')
  }

  var rgxFindMatchPos = function (str, left, right, flags) {
    'use strict'
    var f = flags || '',
      g = f.indexOf('g') > -1,
      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
      l = new RegExp(left, f.replace(/g/g, '')),
      pos = [],
      t,
      s,
      m,
      start,
      end

    do {
      t = 0
      while ((m = x.exec(str))) {
        if (l.test(m[0])) {
          if (!t++) {
            s = x.lastIndex
            start = s - m[0].length
          }
        } else if (t) {
          if (!--t) {
            end = m.index + m[0].length
            var obj = {
              left: { start: start, end: s },
              match: { start: s, end: m.index },
              right: { start: m.index, end: end },
              wholeMatch: { start: start, end: end },
            }
            pos.push(obj)
            if (!g) {
              return pos
            }
          }
        }
      }
    } while (t && (x.lastIndex = s))

    return pos
  }

  /**
   * matchRecursiveRegExp
   *
   * (c) 2007 Steven Levithan <stevenlevithan.com>
   * MIT License
   *
   * Accepts a string to search, a left and right format delimiter
   * as regex patterns, and optional regex flags. Returns an array
   * of matches, allowing nested instances of left/right delimiters.
   * Use the "g" flag to return all matches, otherwise only the
   * first is returned. Be careful to ensure that the left and
   * right format delimiters produce mutually exclusive matches.
   * Backreferences are not supported within the right delimiter
   * due to how it is internally combined with the left delimiter.
   * When matching strings whose format delimiters are unbalanced
   * to the left or right, the output is intentionally as a
   * conventional regex library with recursion support would
   * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
   * "<" and ">" as the delimiters (both strings contain a single,
   * balanced instance of "<x>").
   *
   * examples:
   * matchRecursiveRegExp("test", "\\(", "\\)")
   * returns: []
   * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
   * returns: ["t<<e>><s>", ""]
   * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
   * returns: ["test"]
   */
  showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {
    'use strict'

    var matchPos = rgxFindMatchPos(str, left, right, flags),
      results = []

    for (var i = 0; i < matchPos.length; ++i) {
      results.push([
        str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
        str.slice(matchPos[i].match.start, matchPos[i].match.end),
        str.slice(matchPos[i].left.start, matchPos[i].left.end),
        str.slice(matchPos[i].right.start, matchPos[i].right.end),
      ])
    }
    return results
  }

  /**
   *
   * @param {string} str
   * @param {string|function} replacement
   * @param {string} left
   * @param {string} right
   * @param {string} flags
   * @returns {string}
   */
  showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {
    'use strict'

    if (!showdown.helper.isFunction(replacement)) {
      var repStr = replacement
      replacement = function () {
        return repStr
      }
    }

    var matchPos = rgxFindMatchPos(str, left, right, flags),
      finalStr = str,
      lng = matchPos.length

    if (lng > 0) {
      var bits = []
      if (matchPos[0].wholeMatch.start !== 0) {
        bits.push(str.slice(0, matchPos[0].wholeMatch.start))
      }
      for (var i = 0; i < lng; ++i) {
        bits.push(
          replacement(
            str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
            str.slice(matchPos[i].match.start, matchPos[i].match.end),
            str.slice(matchPos[i].left.start, matchPos[i].left.end),
            str.slice(matchPos[i].right.start, matchPos[i].right.end)
          )
        )
        if (i < lng - 1) {
          bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start))
        }
      }
      if (matchPos[lng - 1].wholeMatch.end < str.length) {
        bits.push(str.slice(matchPos[lng - 1].wholeMatch.end))
      }
      finalStr = bits.join('')
    }
    return finalStr
  }

  /**
   * Returns the index within the passed String object of the first occurrence of the specified regex,
   * starting the search at fromIndex. Returns -1 if the value is not found.
   *
   * @param {string} str string to search
   * @param {RegExp} regex Regular expression to search
   * @param {int} [fromIndex = 0] Index to start the search
   * @returns {Number}
   * @throws InvalidArgumentError
   */
  showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
    'use strict'
    if (!showdown.helper.isString(str)) {
      throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string'
    }
    if (regex instanceof RegExp === false) {
      throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp'
    }
    var indexOf = str.substring(fromIndex || 0).search(regex)
    return indexOf >= 0 ? indexOf + (fromIndex || 0) : indexOf
  }

  /**
   * Splits the passed string object at the defined index, and returns an array composed of the two substrings
   * @param {string} str string to split
   * @param {int} index index to split string at
   * @returns {[string,string]}
   * @throws InvalidArgumentError
   */
  showdown.helper.splitAtIndex = function (str, index) {
    'use strict'
    if (!showdown.helper.isString(str)) {
      throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string'
    }
    return [str.substring(0, index), str.substring(index)]
  }

  /**
   * Obfuscate an e-mail address through the use of Character Entities,
   * transforming ASCII characters into their equivalent decimal or hex entities.
   *
   * Since it has a random component, subsequent calls to this function produce different results
   *
   * @param {string} mail
   * @returns {string}
   */
  showdown.helper.encodeEmailAddress = function (mail) {
    'use strict'
    var encode = [
      function (ch) {
        return '&#' + ch.charCodeAt(0) + ';'
      },
      function (ch) {
        return '&#x' + ch.charCodeAt(0).toString(16) + ';'
      },
      function (ch) {
        return ch
      },
    ]

    mail = mail.replace(/./g, function (ch) {
      if (ch === '@') {
        // this *must* be encoded. I insist.
        ch = encode[Math.floor(Math.random() * 2)](ch)
      } else {
        var r = Math.random()
        // roughly 10% raw, 45% hex, 45% dec
        ch = r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
      }
      return ch
    })

    return mail
  }

  /**
   *
   * @param str
   * @param targetLength
   * @param padString
   * @returns {string}
   */
  showdown.helper.padEnd = function padEnd(str, targetLength, padString) {
    'use strict'
    /*jshint bitwise: false*/
    // eslint-disable-next-line space-infix-ops
    targetLength = targetLength >> 0 //floor if number or convert non-number to 0;
    /*jshint bitwise: true*/
    padString = String(padString || ' ')
    if (str.length > targetLength) {
      return String(str)
    } else {
      targetLength = targetLength - str.length
      if (targetLength > padString.length) {
        padString += padString.repeat(targetLength / padString.length) //append to original to ensure we are longer than needed
      }
      return String(str) + padString.slice(0, targetLength)
    }
  }

  /**
   * POLYFILLS
   */
  // use this instead of builtin is undefined for IE8 compatibility
  if (typeof console === 'undefined') {
    console = {
      warn: function (msg) {
        'use strict'
        alert(msg)
      },
      log: function (msg) {
        'use strict'
        alert(msg)
      },
      error: function (msg) {
        'use strict'
        throw msg
      },
    }
  }

  /**
   * Common regexes.
   * We declare some common regexes to improve performance
   */
  showdown.helper.regexes = {
    asteriskDashAndColon: /([*_:~])/g,
  }

  /**
   * EMOJIS LIST
   */
  showdown.helper.emojis = {
    '+1': '\ud83d\udc4d',
    '-1': '\ud83d\udc4e',
    100: '\ud83d\udcaf',
    1234: '\ud83d\udd22',
    '1st_place_medal': '\ud83e\udd47',
    '2nd_place_medal': '\ud83e\udd48',
    '3rd_place_medal': '\ud83e\udd49',
    '8ball': '\ud83c\udfb1',
    a: '\ud83c\udd70\ufe0f',
    ab: '\ud83c\udd8e',
    abc: '\ud83d\udd24',
    abcd: '\ud83d\udd21',
    accept: '\ud83c\ude51',
    aerial_tramway: '\ud83d\udea1',
    airplane: '\u2708\ufe0f',
    alarm_clock: '\u23f0',
    alembic: '\u2697\ufe0f',
    alien: '\ud83d\udc7d',
    ambulance: '\ud83d\ude91',
    amphora: '\ud83c\udffa',
    anchor: '\u2693\ufe0f',
    angel: '\ud83d\udc7c',
    anger: '\ud83d\udca2',
    angry: '\ud83d\ude20',
    anguished: '\ud83d\ude27',
    ant: '\ud83d\udc1c',
    apple: '\ud83c\udf4e',
    aquarius: '\u2652\ufe0f',
    aries: '\u2648\ufe0f',
    arrow_backward: '\u25c0\ufe0f',
    arrow_double_down: '\u23ec',
    arrow_double_up: '\u23eb',
    arrow_down: '\u2b07\ufe0f',
    arrow_down_small: '\ud83d\udd3d',
    arrow_forward: '\u25b6\ufe0f',
    arrow_heading_down: '\u2935\ufe0f',
    arrow_heading_up: '\u2934\ufe0f',
    arrow_left: '\u2b05\ufe0f',
    arrow_lower_left: '\u2199\ufe0f',
    arrow_lower_right: '\u2198\ufe0f',
    arrow_right: '\u27a1\ufe0f',
    arrow_right_hook: '\u21aa\ufe0f',
    arrow_up: '\u2b06\ufe0f',
    arrow_up_down: '\u2195\ufe0f',
    arrow_up_small: '\ud83d\udd3c',
    arrow_upper_left: '\u2196\ufe0f',
    arrow_upper_right: '\u2197\ufe0f',
    arrows_clockwise: '\ud83d\udd03',
    arrows_counterclockwise: '\ud83d\udd04',
    art: '\ud83c\udfa8',
    articulated_lorry: '\ud83d\ude9b',
    artificial_satellite: '\ud83d\udef0',
    astonished: '\ud83d\ude32',
    athletic_shoe: '\ud83d\udc5f',
    atm: '\ud83c\udfe7',
    atom_symbol: '\u269b\ufe0f',
    avocado: '\ud83e\udd51',
    b: '\ud83c\udd71\ufe0f',
    baby: '\ud83d\udc76',
    baby_bottle: '\ud83c\udf7c',
    baby_chick: '\ud83d\udc24',
    baby_symbol: '\ud83d\udebc',
    back: '\ud83d\udd19',
    bacon: '\ud83e\udd53',
    badminton: '\ud83c\udff8',
    baggage_claim: '\ud83d\udec4',
    baguette_bread: '\ud83e\udd56',
    balance_scale: '\u2696\ufe0f',
    balloon: '\ud83c\udf88',
    ballot_box: '\ud83d\uddf3',
    ballot_box_with_check: '\u2611\ufe0f',
    bamboo: '\ud83c\udf8d',
    banana: '\ud83c\udf4c',
    bangbang: '\u203c\ufe0f',
    bank: '\ud83c\udfe6',
    bar_chart: '\ud83d\udcca',
    barber: '\ud83d\udc88',
    baseball: '\u26be\ufe0f',
    basketball: '\ud83c\udfc0',
    basketball_man: '\u26f9\ufe0f',
    basketball_woman: '\u26f9\ufe0f&zwj;\u2640\ufe0f',
    bat: '\ud83e\udd87',
    bath: '\ud83d\udec0',
    bathtub: '\ud83d\udec1',
    battery: '\ud83d\udd0b',
    beach_umbrella: '\ud83c\udfd6',
    bear: '\ud83d\udc3b',
    bed: '\ud83d\udecf',
    bee: '\ud83d\udc1d',
    beer: '\ud83c\udf7a',
    beers: '\ud83c\udf7b',
    beetle: '\ud83d\udc1e',
    beginner: '\ud83d\udd30',
    bell: '\ud83d\udd14',
    bellhop_bell: '\ud83d\udece',
    bento: '\ud83c\udf71',
    biking_man: '\ud83d\udeb4',
    bike: '\ud83d\udeb2',
    biking_woman: '\ud83d\udeb4&zwj;\u2640\ufe0f',
    bikini: '\ud83d\udc59',
    biohazard: '\u2623\ufe0f',
    bird: '\ud83d\udc26',
    birthday: '\ud83c\udf82',
    black_circle: '\u26ab\ufe0f',
    black_flag: '\ud83c\udff4',
    black_heart: '\ud83d\udda4',
    black_joker: '\ud83c\udccf',
    black_large_square: '\u2b1b\ufe0f',
    black_medium_small_square: '\u25fe\ufe0f',
    black_medium_square: '\u25fc\ufe0f',
    black_nib: '\u2712\ufe0f',
    black_small_square: '\u25aa\ufe0f',
    black_square_button: '\ud83d\udd32',
    blonde_man: '\ud83d\udc71',
    blonde_woman: '\ud83d\udc71&zwj;\u2640\ufe0f',
    blossom: '\ud83c\udf3c',
    blowfish: '\ud83d\udc21',
    blue_book: '\ud83d\udcd8',
    blue_car: '\ud83d\ude99',
    blue_heart: '\ud83d\udc99',
    blush: '\ud83d\ude0a',
    boar: '\ud83d\udc17',
    boat: '\u26f5\ufe0f',
    bomb: '\ud83d\udca3',
    book: '\ud83d\udcd6',
    bookmark: '\ud83d\udd16',
    bookmark_tabs: '\ud83d\udcd1',
    books: '\ud83d\udcda',
    boom: '\ud83d\udca5',
    boot: '\ud83d\udc62',
    bouquet: '\ud83d\udc90',
    bowing_man: '\ud83d\ude47',
    bow_and_arrow: '\ud83c\udff9',
    bowing_woman: '\ud83d\ude47&zwj;\u2640\ufe0f',
    bowling: '\ud83c\udfb3',
    boxing_glove: '\ud83e\udd4a',
    boy: '\ud83d\udc66',
    bread: '\ud83c\udf5e',
    bride_with_veil: '\ud83d\udc70',
    bridge_at_night: '\ud83c\udf09',
    briefcase: '\ud83d\udcbc',
    broken_heart: '\ud83d\udc94',
    bug: '\ud83d\udc1b',
    building_construction: '\ud83c\udfd7',
    bulb: '\ud83d\udca1',
    bullettrain_front: '\ud83d\ude85',
    bullettrain_side: '\ud83d\ude84',
    burrito: '\ud83c\udf2f',
    bus: '\ud83d\ude8c',
    business_suit_levitating: '\ud83d\udd74',
    busstop: '\ud83d\ude8f',
    bust_in_silhouette: '\ud83d\udc64',
    busts_in_silhouette: '\ud83d\udc65',
    butterfly: '\ud83e\udd8b',
    cactus: '\ud83c\udf35',
    cake: '\ud83c\udf70',
    calendar: '\ud83d\udcc6',
    call_me_hand: '\ud83e\udd19',
    calling: '\ud83d\udcf2',
    camel: '\ud83d\udc2b',
    camera: '\ud83d\udcf7',
    camera_flash: '\ud83d\udcf8',
    camping: '\ud83c\udfd5',
    cancer: '\u264b\ufe0f',
    candle: '\ud83d\udd6f',
    candy: '\ud83c\udf6c',
    canoe: '\ud83d\udef6',
    capital_abcd: '\ud83d\udd20',
    capricorn: '\u2651\ufe0f',
    car: '\ud83d\ude97',
    card_file_box: '\ud83d\uddc3',
    card_index: '\ud83d\udcc7',
    card_index_dividers: '\ud83d\uddc2',
    carousel_horse: '\ud83c\udfa0',
    carrot: '\ud83e\udd55',
    cat: '\ud83d\udc31',
    cat2: '\ud83d\udc08',
    cd: '\ud83d\udcbf',
    chains: '\u26d3',
    champagne: '\ud83c\udf7e',
    chart: '\ud83d\udcb9',
    chart_with_downwards_trend: '\ud83d\udcc9',
    chart_with_upwards_trend: '\ud83d\udcc8',
    checkered_flag: '\ud83c\udfc1',
    cheese: '\ud83e\uddc0',
    cherries: '\ud83c\udf52',
    cherry_blossom: '\ud83c\udf38',
    chestnut: '\ud83c\udf30',
    chicken: '\ud83d\udc14',
    children_crossing: '\ud83d\udeb8',
    chipmunk: '\ud83d\udc3f',
    chocolate_bar: '\ud83c\udf6b',
    christmas_tree: '\ud83c\udf84',
    church: '\u26ea\ufe0f',
    cinema: '\ud83c\udfa6',
    circus_tent: '\ud83c\udfaa',
    city_sunrise: '\ud83c\udf07',
    city_sunset: '\ud83c\udf06',
    cityscape: '\ud83c\udfd9',
    cl: '\ud83c\udd91',
    clamp: '\ud83d\udddc',
    clap: '\ud83d\udc4f',
    clapper: '\ud83c\udfac',
    classical_building: '\ud83c\udfdb',
    clinking_glasses: '\ud83e\udd42',
    clipboard: '\ud83d\udccb',
    clock1: '\ud83d\udd50',
    clock10: '\ud83d\udd59',
    clock1030: '\ud83d\udd65',
    clock11: '\ud83d\udd5a',
    clock1130: '\ud83d\udd66',
    clock12: '\ud83d\udd5b',
    clock1230: '\ud83d\udd67',
    clock130: '\ud83d\udd5c',
    clock2: '\ud83d\udd51',
    clock230: '\ud83d\udd5d',
    clock3: '\ud83d\udd52',
    clock330: '\ud83d\udd5e',
    clock4: '\ud83d\udd53',
    clock430: '\ud83d\udd5f',
    clock5: '\ud83d\udd54',
    clock530: '\ud83d\udd60',
    clock6: '\ud83d\udd55',
    clock630: '\ud83d\udd61',
    clock7: '\ud83d\udd56',
    clock730: '\ud83d\udd62',
    clock8: '\ud83d\udd57',
    clock830: '\ud83d\udd63',
    clock9: '\ud83d\udd58',
    clock930: '\ud83d\udd64',
    closed_book: '\ud83d\udcd5',
    closed_lock_with_key: '\ud83d\udd10',
    closed_umbrella: '\ud83c\udf02',
    cloud: '\u2601\ufe0f',
    cloud_with_lightning: '\ud83c\udf29',
    cloud_with_lightning_and_rain: '\u26c8',
    cloud_with_rain: '\ud83c\udf27',
    cloud_with_snow: '\ud83c\udf28',
    clown_face: '\ud83e\udd21',
    clubs: '\u2663\ufe0f',
    cocktail: '\ud83c\udf78',
    coffee: '\u2615\ufe0f',
    coffin: '\u26b0\ufe0f',
    cold_sweat: '\ud83d\ude30',
    comet: '\u2604\ufe0f',
    computer: '\ud83d\udcbb',
    computer_mouse: '\ud83d\uddb1',
    confetti_ball: '\ud83c\udf8a',
    confounded: '\ud83d\ude16',
    confused: '\ud83d\ude15',
    congratulations: '\u3297\ufe0f',
    construction: '\ud83d\udea7',
    construction_worker_man: '\ud83d\udc77',
    construction_worker_woman: '\ud83d\udc77&zwj;\u2640\ufe0f',
    control_knobs: '\ud83c\udf9b',
    convenience_store: '\ud83c\udfea',
    cookie: '\ud83c\udf6a',
    cool: '\ud83c\udd92',
    policeman: '\ud83d\udc6e',
    copyright: '\u00a9\ufe0f',
    corn: '\ud83c\udf3d',
    couch_and_lamp: '\ud83d\udecb',
    couple: '\ud83d\udc6b',
    couple_with_heart_woman_man: '\ud83d\udc91',
    couple_with_heart_man_man: '\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
    couple_with_heart_woman_woman: '\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
    couplekiss_man_man: '\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
    couplekiss_man_woman: '\ud83d\udc8f',
    couplekiss_woman_woman: '\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
    cow: '\ud83d\udc2e',
    cow2: '\ud83d\udc04',
    cowboy_hat_face: '\ud83e\udd20',
    crab: '\ud83e\udd80',
    crayon: '\ud83d\udd8d',
    credit_card: '\ud83d\udcb3',
    crescent_moon: '\ud83c\udf19',
    cricket: '\ud83c\udfcf',
    crocodile: '\ud83d\udc0a',
    croissant: '\ud83e\udd50',
    crossed_fingers: '\ud83e\udd1e',
    crossed_flags: '\ud83c\udf8c',
    crossed_swords: '\u2694\ufe0f',
    crown: '\ud83d\udc51',
    cry: '\ud83d\ude22',
    crying_cat_face: '\ud83d\ude3f',
    crystal_ball: '\ud83d\udd2e',
    cucumber: '\ud83e\udd52',
    cupid: '\ud83d\udc98',
    curly_loop: '\u27b0',
    currency_exchange: '\ud83d\udcb1',
    curry: '\ud83c\udf5b',
    custard: '\ud83c\udf6e',
    customs: '\ud83d\udec3',
    cyclone: '\ud83c\udf00',
    dagger: '\ud83d\udde1',
    dancer: '\ud83d\udc83',
    dancing_women: '\ud83d\udc6f',
    dancing_men: '\ud83d\udc6f&zwj;\u2642\ufe0f',
    dango: '\ud83c\udf61',
    dark_sunglasses: '\ud83d\udd76',
    dart: '\ud83c\udfaf',
    dash: '\ud83d\udca8',
    date: '\ud83d\udcc5',
    deciduous_tree: '\ud83c\udf33',
    deer: '\ud83e\udd8c',
    department_store: '\ud83c\udfec',
    derelict_house: '\ud83c\udfda',
    desert: '\ud83c\udfdc',
    desert_island: '\ud83c\udfdd',
    desktop_computer: '\ud83d\udda5',
    male_detective: '\ud83d\udd75\ufe0f',
    diamond_shape_with_a_dot_inside: '\ud83d\udca0',
    diamonds: '\u2666\ufe0f',
    disappointed: '\ud83d\ude1e',
    disappointed_relieved: '\ud83d\ude25',
    dizzy: '\ud83d\udcab',
    dizzy_face: '\ud83d\ude35',
    do_not_litter: '\ud83d\udeaf',
    dog: '\ud83d\udc36',
    dog2: '\ud83d\udc15',
    dollar: '\ud83d\udcb5',
    dolls: '\ud83c\udf8e',
    dolphin: '\ud83d\udc2c',
    door: '\ud83d\udeaa',
    doughnut: '\ud83c\udf69',
    dove: '\ud83d\udd4a',
    dragon: '\ud83d\udc09',
    dragon_face: '\ud83d\udc32',
    dress: '\ud83d\udc57',
    dromedary_camel: '\ud83d\udc2a',
    drooling_face: '\ud83e\udd24',
    droplet: '\ud83d\udca7',
    drum: '\ud83e\udd41',
    duck: '\ud83e\udd86',
    dvd: '\ud83d\udcc0',
    'e-mail': '\ud83d\udce7',
    eagle: '\ud83e\udd85',
    ear: '\ud83d\udc42',
    ear_of_rice: '\ud83c\udf3e',
    earth_africa: '\ud83c\udf0d',
    earth_americas: '\ud83c\udf0e',
    earth_asia: '\ud83c\udf0f',
    egg: '\ud83e\udd5a',
    eggplant: '\ud83c\udf46',
    eight_pointed_black_star: '\u2734\ufe0f',
    eight_spoked_asterisk: '\u2733\ufe0f',
    electric_plug: '\ud83d\udd0c',
    elephant: '\ud83d\udc18',
    email: '\u2709\ufe0f',
    end: '\ud83d\udd1a',
    envelope_with_arrow: '\ud83d\udce9',
    euro: '\ud83d\udcb6',
    european_castle: '\ud83c\udff0',
    european_post_office: '\ud83c\udfe4',
    evergreen_tree: '\ud83c\udf32',
    exclamation: '\u2757\ufe0f',
    expressionless: '\ud83d\ude11',
    eye: '\ud83d\udc41',
    eye_speech_bubble: '\ud83d\udc41&zwj;\ud83d\udde8',
    eyeglasses: '\ud83d\udc53',
    eyes: '\ud83d\udc40',
    face_with_head_bandage: '\ud83e\udd15',
    face_with_thermometer: '\ud83e\udd12',
    fist_oncoming: '\ud83d\udc4a',
    factory: '\ud83c\udfed',
    fallen_leaf: '\ud83c\udf42',
    family_man_woman_boy: '\ud83d\udc6a',
    family_man_boy: '\ud83d\udc68&zwj;\ud83d\udc66',
    family_man_boy_boy: '\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    family_man_girl: '\ud83d\udc68&zwj;\ud83d\udc67',
    family_man_girl_boy: '\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    family_man_girl_girl: '\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    family_man_man_boy: '\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
    family_man_man_boy_boy: '\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    family_man_man_girl: '\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
    family_man_man_girl_boy: '\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    family_man_man_girl_girl: '\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    family_man_woman_boy_boy: '\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    family_man_woman_girl: '\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    family_man_woman_girl_boy: '\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    family_man_woman_girl_girl: '\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    family_woman_boy: '\ud83d\udc69&zwj;\ud83d\udc66',
    family_woman_boy_boy: '\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    family_woman_girl: '\ud83d\udc69&zwj;\ud83d\udc67',
    family_woman_girl_boy: '\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    family_woman_girl_girl: '\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    family_woman_woman_boy: '\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
    family_woman_woman_boy_boy: '\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
    family_woman_woman_girl: '\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
    family_woman_woman_girl_boy: '\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
    family_woman_woman_girl_girl: '\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
    fast_forward: '\u23e9',
    fax: '\ud83d\udce0',
    fearful: '\ud83d\ude28',
    feet: '\ud83d\udc3e',
    female_detective: '\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
    ferris_wheel: '\ud83c\udfa1',
    ferry: '\u26f4',
    field_hockey: '\ud83c\udfd1',
    file_cabinet: '\ud83d\uddc4',
    file_folder: '\ud83d\udcc1',
    film_projector: '\ud83d\udcfd',
    film_strip: '\ud83c\udf9e',
    fire: '\ud83d\udd25',
    fire_engine: '\ud83d\ude92',
    fireworks: '\ud83c\udf86',
    first_quarter_moon: '\ud83c\udf13',
    first_quarter_moon_with_face: '\ud83c\udf1b',
    fish: '\ud83d\udc1f',
    fish_cake: '\ud83c\udf65',
    fishing_pole_and_fish: '\ud83c\udfa3',
    fist_raised: '\u270a',
    fist_left: '\ud83e\udd1b',
    fist_right: '\ud83e\udd1c',
    flags: '\ud83c\udf8f',
    flashlight: '\ud83d\udd26',
    fleur_de_lis: '\u269c\ufe0f',
    flight_arrival: '\ud83d\udeec',
    flight_departure: '\ud83d\udeeb',
    floppy_disk: '\ud83d\udcbe',
    flower_playing_cards: '\ud83c\udfb4',
    flushed: '\ud83d\ude33',
    fog: '\ud83c\udf2b',
    foggy: '\ud83c\udf01',
    football: '\ud83c\udfc8',
    footprints: '\ud83d\udc63',
    fork_and_knife: '\ud83c\udf74',
    fountain: '\u26f2\ufe0f',
    fountain_pen: '\ud83d\udd8b',
    four_leaf_clover: '\ud83c\udf40',
    fox_face: '\ud83e\udd8a',
    framed_picture: '\ud83d\uddbc',
    free: '\ud83c\udd93',
    fried_egg: '\ud83c\udf73',
    fried_shrimp: '\ud83c\udf64',
    fries: '\ud83c\udf5f',
    frog: '\ud83d\udc38',
    frowning: '\ud83d\ude26',
    frowning_face: '\u2639\ufe0f',
    frowning_man: '\ud83d\ude4d&zwj;\u2642\ufe0f',
    frowning_woman: '\ud83d\ude4d',
    middle_finger: '\ud83d\udd95',
    fuelpump: '\u26fd\ufe0f',
    full_moon: '\ud83c\udf15',
    full_moon_with_face: '\ud83c\udf1d',
    funeral_urn: '\u26b1\ufe0f',
    game_die: '\ud83c\udfb2',
    gear: '\u2699\ufe0f',
    gem: '\ud83d\udc8e',
    gemini: '\u264a\ufe0f',
    ghost: '\ud83d\udc7b',
    gift: '\ud83c\udf81',
    gift_heart: '\ud83d\udc9d',
    girl: '\ud83d\udc67',
    globe_with_meridians: '\ud83c\udf10',
    goal_net: '\ud83e\udd45',
    goat: '\ud83d\udc10',
    golf: '\u26f3\ufe0f',
    golfing_man: '\ud83c\udfcc\ufe0f',
    golfing_woman: '\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
    gorilla: '\ud83e\udd8d',
    grapes: '\ud83c\udf47',
    green_apple: '\ud83c\udf4f',
    green_book: '\ud83d\udcd7',
    green_heart: '\ud83d\udc9a',
    green_salad: '\ud83e\udd57',
    grey_exclamation: '\u2755',
    grey_question: '\u2754',
    grimacing: '\ud83d\ude2c',
    grin: '\ud83d\ude01',
    grinning: '\ud83d\ude00',
    guardsman: '\ud83d\udc82',
    guardswoman: '\ud83d\udc82&zwj;\u2640\ufe0f',
    guitar: '\ud83c\udfb8',
    gun: '\ud83d\udd2b',
    haircut_woman: '\ud83d\udc87',
    haircut_man: '\ud83d\udc87&zwj;\u2642\ufe0f',
    hamburger: '\ud83c\udf54',
    hammer: '\ud83d\udd28',
    hammer_and_pick: '\u2692',
    hammer_and_wrench: '\ud83d\udee0',
    hamster: '\ud83d\udc39',
    hand: '\u270b',
    handbag: '\ud83d\udc5c',
    handshake: '\ud83e\udd1d',
    hankey: '\ud83d\udca9',
    hatched_chick: '\ud83d\udc25',
    hatching_chick: '\ud83d\udc23',
    headphones: '\ud83c\udfa7',
    hear_no_evil: '\ud83d\ude49',
    heart: '\u2764\ufe0f',
    heart_decoration: '\ud83d\udc9f',
    heart_eyes: '\ud83d\ude0d',
    heart_eyes_cat: '\ud83d\ude3b',
    heartbeat: '\ud83d\udc93',
    heartpulse: '\ud83d\udc97',
    hearts: '\u2665\ufe0f',
    heavy_check_mark: '\u2714\ufe0f',
    heavy_division_sign: '\u2797',
    heavy_dollar_sign: '\ud83d\udcb2',
    heavy_heart_exclamation: '\u2763\ufe0f',
    heavy_minus_sign: '\u2796',
    heavy_multiplication_x: '\u2716\ufe0f',
    heavy_plus_sign: '\u2795',
    helicopter: '\ud83d\ude81',
    herb: '\ud83c\udf3f',
    hibiscus: '\ud83c\udf3a',
    high_brightness: '\ud83d\udd06',
    high_heel: '\ud83d\udc60',
    hocho: '\ud83d\udd2a',
    hole: '\ud83d\udd73',
    honey_pot: '\ud83c\udf6f',
    horse: '\ud83d\udc34',
    horse_racing: '\ud83c\udfc7',
    hospital: '\ud83c\udfe5',
    hot_pepper: '\ud83c\udf36',
    hotdog: '\ud83c\udf2d',
    hotel: '\ud83c\udfe8',
    hotsprings: '\u2668\ufe0f',
    hourglass: '\u231b\ufe0f',
    hourglass_flowing_sand: '\u23f3',
    house: '\ud83c\udfe0',
    house_with_garden: '\ud83c\udfe1',
    houses: '\ud83c\udfd8',
    hugs: '\ud83e\udd17',
    hushed: '\ud83d\ude2f',
    ice_cream: '\ud83c\udf68',
    ice_hockey: '\ud83c\udfd2',
    ice_skate: '\u26f8',
    icecream: '\ud83c\udf66',
    id: '\ud83c\udd94',
    ideograph_advantage: '\ud83c\ude50',
    imp: '\ud83d\udc7f',
    inbox_tray: '\ud83d\udce5',
    incoming_envelope: '\ud83d\udce8',
    tipping_hand_woman: '\ud83d\udc81',
    information_source: '\u2139\ufe0f',
    innocent: '\ud83d\ude07',
    interrobang: '\u2049\ufe0f',
    iphone: '\ud83d\udcf1',
    izakaya_lantern: '\ud83c\udfee',
    jack_o_lantern: '\ud83c\udf83',
    japan: '\ud83d\uddfe',
    japanese_castle: '\ud83c\udfef',
    japanese_goblin: '\ud83d\udc7a',
    japanese_ogre: '\ud83d\udc79',
    jeans: '\ud83d\udc56',
    joy: '\ud83d\ude02',
    joy_cat: '\ud83d\ude39',
    joystick: '\ud83d\udd79',
    kaaba: '\ud83d\udd4b',
    key: '\ud83d\udd11',
    keyboard: '\u2328\ufe0f',
    keycap_ten: '\ud83d\udd1f',
    kick_scooter: '\ud83d\udef4',
    kimono: '\ud83d\udc58',
    kiss: '\ud83d\udc8b',
    kissing: '\ud83d\ude17',
    kissing_cat: '\ud83d\ude3d',
    kissing_closed_eyes: '\ud83d\ude1a',
    kissing_heart: '\ud83d\ude18',
    kissing_smiling_eyes: '\ud83d\ude19',
    kiwi_fruit: '\ud83e\udd5d',
    koala: '\ud83d\udc28',
    koko: '\ud83c\ude01',
    label: '\ud83c\udff7',
    large_blue_circle: '\ud83d\udd35',
    large_blue_diamond: '\ud83d\udd37',
    large_orange_diamond: '\ud83d\udd36',
    last_quarter_moon: '\ud83c\udf17',
    last_quarter_moon_with_face: '\ud83c\udf1c',
    latin_cross: '\u271d\ufe0f',
    laughing: '\ud83d\ude06',
    leaves: '\ud83c\udf43',
    ledger: '\ud83d\udcd2',
    left_luggage: '\ud83d\udec5',
    left_right_arrow: '\u2194\ufe0f',
    leftwards_arrow_with_hook: '\u21a9\ufe0f',
    lemon: '\ud83c\udf4b',
    leo: '\u264c\ufe0f',
    leopard: '\ud83d\udc06',
    level_slider: '\ud83c\udf9a',
    libra: '\u264e\ufe0f',
    light_rail: '\ud83d\ude88',
    link: '\ud83d\udd17',
    lion: '\ud83e\udd81',
    lips: '\ud83d\udc44',
    lipstick: '\ud83d\udc84',
    lizard: '\ud83e\udd8e',
    lock: '\ud83d\udd12',
    lock_with_ink_pen: '\ud83d\udd0f',
    lollipop: '\ud83c\udf6d',
    loop: '\u27bf',
    loud_sound: '\ud83d\udd0a',
    loudspeaker: '\ud83d\udce2',
    love_hotel: '\ud83c\udfe9',
    love_letter: '\ud83d\udc8c',
    low_brightness: '\ud83d\udd05',
    lying_face: '\ud83e\udd25',
    m: '\u24c2\ufe0f',
    mag: '\ud83d\udd0d',
    mag_right: '\ud83d\udd0e',
    mahjong: '\ud83c\udc04\ufe0f',
    mailbox: '\ud83d\udceb',
    mailbox_closed: '\ud83d\udcea',
    mailbox_with_mail: '\ud83d\udcec',
    mailbox_with_no_mail: '\ud83d\udced',
    man: '\ud83d\udc68',
    man_artist: '\ud83d\udc68&zwj;\ud83c\udfa8',
    man_astronaut: '\ud83d\udc68&zwj;\ud83d\ude80',
    man_cartwheeling: '\ud83e\udd38&zwj;\u2642\ufe0f',
    man_cook: '\ud83d\udc68&zwj;\ud83c\udf73',
    man_dancing: '\ud83d\udd7a',
    man_facepalming: '\ud83e\udd26&zwj;\u2642\ufe0f',
    man_factory_worker: '\ud83d\udc68&zwj;\ud83c\udfed',
    man_farmer: '\ud83d\udc68&zwj;\ud83c\udf3e',
    man_firefighter: '\ud83d\udc68&zwj;\ud83d\ude92',
    man_health_worker: '\ud83d\udc68&zwj;\u2695\ufe0f',
    man_in_tuxedo: '\ud83e\udd35',
    man_judge: '\ud83d\udc68&zwj;\u2696\ufe0f',
    man_juggling: '\ud83e\udd39&zwj;\u2642\ufe0f',
    man_mechanic: '\ud83d\udc68&zwj;\ud83d\udd27',
    man_office_worker: '\ud83d\udc68&zwj;\ud83d\udcbc',
    man_pilot: '\ud83d\udc68&zwj;\u2708\ufe0f',
    man_playing_handball: '\ud83e\udd3e&zwj;\u2642\ufe0f',
    man_playing_water_polo: '\ud83e\udd3d&zwj;\u2642\ufe0f',
    man_scientist: '\ud83d\udc68&zwj;\ud83d\udd2c',
    man_shrugging: '\ud83e\udd37&zwj;\u2642\ufe0f',
    man_singer: '\ud83d\udc68&zwj;\ud83c\udfa4',
    man_student: '\ud83d\udc68&zwj;\ud83c\udf93',
    man_teacher: '\ud83d\udc68&zwj;\ud83c\udfeb',
    man_technologist: '\ud83d\udc68&zwj;\ud83d\udcbb',
    man_with_gua_pi_mao: '\ud83d\udc72',
    man_with_turban: '\ud83d\udc73',
    tangerine: '\ud83c\udf4a',
    mans_shoe: '\ud83d\udc5e',
    mantelpiece_clock: '\ud83d\udd70',
    maple_leaf: '\ud83c\udf41',
    martial_arts_uniform: '\ud83e\udd4b',
    mask: '\ud83d\ude37',
    massage_woman: '\ud83d\udc86',
    massage_man: '\ud83d\udc86&zwj;\u2642\ufe0f',
    meat_on_bone: '\ud83c\udf56',
    medal_military: '\ud83c\udf96',
    medal_sports: '\ud83c\udfc5',
    mega: '\ud83d\udce3',
    melon: '\ud83c\udf48',
    memo: '\ud83d\udcdd',
    men_wrestling: '\ud83e\udd3c&zwj;\u2642\ufe0f',
    menorah: '\ud83d\udd4e',
    mens: '\ud83d\udeb9',
    metal: '\ud83e\udd18',
    metro: '\ud83d\ude87',
    microphone: '\ud83c\udfa4',
    microscope: '\ud83d\udd2c',
    milk_glass: '\ud83e\udd5b',
    milky_way: '\ud83c\udf0c',
    minibus: '\ud83d\ude90',
    minidisc: '\ud83d\udcbd',
    mobile_phone_off: '\ud83d\udcf4',
    money_mouth_face: '\ud83e\udd11',
    money_with_wings: '\ud83d\udcb8',
    moneybag: '\ud83d\udcb0',
    monkey: '\ud83d\udc12',
    monkey_face: '\ud83d\udc35',
    monorail: '\ud83d\ude9d',
    moon: '\ud83c\udf14',
    mortar_board: '\ud83c\udf93',
    mosque: '\ud83d\udd4c',
    motor_boat: '\ud83d\udee5',
    motor_scooter: '\ud83d\udef5',
    motorcycle: '\ud83c\udfcd',
    motorway: '\ud83d\udee3',
    mount_fuji: '\ud83d\uddfb',
    mountain: '\u26f0',
    mountain_biking_man: '\ud83d\udeb5',
    mountain_biking_woman: '\ud83d\udeb5&zwj;\u2640\ufe0f',
    mountain_cableway: '\ud83d\udea0',
    mountain_railway: '\ud83d\ude9e',
    mountain_snow: '\ud83c\udfd4',
    mouse: '\ud83d\udc2d',
    mouse2: '\ud83d\udc01',
    movie_camera: '\ud83c\udfa5',
    moyai: '\ud83d\uddff',
    mrs_claus: '\ud83e\udd36',
    muscle: '\ud83d\udcaa',
    mushroom: '\ud83c\udf44',
    musical_keyboard: '\ud83c\udfb9',
    musical_note: '\ud83c\udfb5',
    musical_score: '\ud83c\udfbc',
    mute: '\ud83d\udd07',
    nail_care: '\ud83d\udc85',
    name_badge: '\ud83d\udcdb',
    national_park: '\ud83c\udfde',
    nauseated_face: '\ud83e\udd22',
    necktie: '\ud83d\udc54',
    negative_squared_cross_mark: '\u274e',
    nerd_face: '\ud83e\udd13',
    neutral_face: '\ud83d\ude10',
    new: '\ud83c\udd95',
    new_moon: '\ud83c\udf11',
    new_moon_with_face: '\ud83c\udf1a',
    newspaper: '\ud83d\udcf0',
    newspaper_roll: '\ud83d\uddde',
    next_track_button: '\u23ed',
    ng: '\ud83c\udd96',
    no_good_man: '\ud83d\ude45&zwj;\u2642\ufe0f',
    no_good_woman: '\ud83d\ude45',
    night_with_stars: '\ud83c\udf03',
    no_bell: '\ud83d\udd15',
    no_bicycles: '\ud83d\udeb3',
    no_entry: '\u26d4\ufe0f',
    no_entry_sign: '\ud83d\udeab',
    no_mobile_phones: '\ud83d\udcf5',
    no_mouth: '\ud83d\ude36',
    no_pedestrians: '\ud83d\udeb7',
    no_smoking: '\ud83d\udead',
    'non-potable_water': '\ud83d\udeb1',
    nose: '\ud83d\udc43',
    notebook: '\ud83d\udcd3',
    notebook_with_decorative_cover: '\ud83d\udcd4',
    notes: '\ud83c\udfb6',
    nut_and_bolt: '\ud83d\udd29',
    o: '\u2b55\ufe0f',
    o2: '\ud83c\udd7e\ufe0f',
    ocean: '\ud83c\udf0a',
    octopus: '\ud83d\udc19',
    oden: '\ud83c\udf62',
    office: '\ud83c\udfe2',
    oil_drum: '\ud83d\udee2',
    ok: '\ud83c\udd97',
    ok_hand: '\ud83d\udc4c',
    ok_man: '\ud83d\ude46&zwj;\u2642\ufe0f',
    ok_woman: '\ud83d\ude46',
    old_key: '\ud83d\udddd',
    older_man: '\ud83d\udc74',
    older_woman: '\ud83d\udc75',
    om: '\ud83d\udd49',
    on: '\ud83d\udd1b',
    oncoming_automobile: '\ud83d\ude98',
    oncoming_bus: '\ud83d\ude8d',
    oncoming_police_car: '\ud83d\ude94',
    oncoming_taxi: '\ud83d\ude96',
    open_file_folder: '\ud83d\udcc2',
    open_hands: '\ud83d\udc50',
    open_mouth: '\ud83d\ude2e',
    open_umbrella: '\u2602\ufe0f',
    ophiuchus: '\u26ce',
    orange_book: '\ud83d\udcd9',
    orthodox_cross: '\u2626\ufe0f',
    outbox_tray: '\ud83d\udce4',
    owl: '\ud83e\udd89',
    ox: '\ud83d\udc02',
    package: '\ud83d\udce6',
    page_facing_up: '\ud83d\udcc4',
    page_with_curl: '\ud83d\udcc3',
    pager: '\ud83d\udcdf',
    paintbrush: '\ud83d\udd8c',
    palm_tree: '\ud83c\udf34',
    pancakes: '\ud83e\udd5e',
    panda_face: '\ud83d\udc3c',
    paperclip: '\ud83d\udcce',
    paperclips: '\ud83d\udd87',
    parasol_on_ground: '\u26f1',
    parking: '\ud83c\udd7f\ufe0f',
    part_alternation_mark: '\u303d\ufe0f',
    partly_sunny: '\u26c5\ufe0f',
    passenger_ship: '\ud83d\udef3',
    passport_control: '\ud83d\udec2',
    pause_button: '\u23f8',
    peace_symbol: '\u262e\ufe0f',
    peach: '\ud83c\udf51',
    peanuts: '\ud83e\udd5c',
    pear: '\ud83c\udf50',
    pen: '\ud83d\udd8a',
    pencil2: '\u270f\ufe0f',
    penguin: '\ud83d\udc27',
    pensive: '\ud83d\ude14',
    performing_arts: '\ud83c\udfad',
    persevere: '\ud83d\ude23',
    person_fencing: '\ud83e\udd3a',
    pouting_woman: '\ud83d\ude4e',
    phone: '\u260e\ufe0f',
    pick: '\u26cf',
    pig: '\ud83d\udc37',
    pig2: '\ud83d\udc16',
    pig_nose: '\ud83d\udc3d',
    pill: '\ud83d\udc8a',
    pineapple: '\ud83c\udf4d',
    ping_pong: '\ud83c\udfd3',
    pisces: '\u2653\ufe0f',
    pizza: '\ud83c\udf55',
    place_of_worship: '\ud83d\uded0',
    plate_with_cutlery: '\ud83c\udf7d',
    play_or_pause_button: '\u23ef',
    point_down: '\ud83d\udc47',
    point_left: '\ud83d\udc48',
    point_right: '\ud83d\udc49',
    point_up: '\u261d\ufe0f',
    point_up_2: '\ud83d\udc46',
    police_car: '\ud83d\ude93',
    policewoman: '\ud83d\udc6e&zwj;\u2640\ufe0f',
    poodle: '\ud83d\udc29',
    popcorn: '\ud83c\udf7f',
    post_office: '\ud83c\udfe3',
    postal_horn: '\ud83d\udcef',
    postbox: '\ud83d\udcee',
    potable_water: '\ud83d\udeb0',
    potato: '\ud83e\udd54',
    pouch: '\ud83d\udc5d',
    poultry_leg: '\ud83c\udf57',
    pound: '\ud83d\udcb7',
    rage: '\ud83d\ude21',
    pouting_cat: '\ud83d\ude3e',
    pouting_man: '\ud83d\ude4e&zwj;\u2642\ufe0f',
    pray: '\ud83d\ude4f',
    prayer_beads: '\ud83d\udcff',
    pregnant_woman: '\ud83e\udd30',
    previous_track_button: '\u23ee',
    prince: '\ud83e\udd34',
    princess: '\ud83d\udc78',
    printer: '\ud83d\udda8',
    purple_heart: '\ud83d\udc9c',
    purse: '\ud83d\udc5b',
    pushpin: '\ud83d\udccc',
    put_litter_in_its_place: '\ud83d\udeae',
    question: '\u2753',
    rabbit: '\ud83d\udc30',
    rabbit2: '\ud83d\udc07',
    racehorse: '\ud83d\udc0e',
    racing_car: '\ud83c\udfce',
    radio: '\ud83d\udcfb',
    radio_button: '\ud83d\udd18',
    radioactive: '\u2622\ufe0f',
    railway_car: '\ud83d\ude83',
    railway_track: '\ud83d\udee4',
    rainbow: '\ud83c\udf08',
    rainbow_flag: '\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
    raised_back_of_hand: '\ud83e\udd1a',
    raised_hand_with_fingers_splayed: '\ud83d\udd90',
    raised_hands: '\ud83d\ude4c',
    raising_hand_woman: '\ud83d\ude4b',
    raising_hand_man: '\ud83d\ude4b&zwj;\u2642\ufe0f',
    ram: '\ud83d\udc0f',
    ramen: '\ud83c\udf5c',
    rat: '\ud83d\udc00',
    record_button: '\u23fa',
    recycle: '\u267b\ufe0f',
    red_circle: '\ud83d\udd34',
    registered: '\u00ae\ufe0f',
    relaxed: '\u263a\ufe0f',
    relieved: '\ud83d\ude0c',
    reminder_ribbon: '\ud83c\udf97',
    repeat: '\ud83d\udd01',
    repeat_one: '\ud83d\udd02',
    rescue_worker_helmet: '\u26d1',
    restroom: '\ud83d\udebb',
    revolving_hearts: '\ud83d\udc9e',
    rewind: '\u23ea',
    rhinoceros: '\ud83e\udd8f',
    ribbon: '\ud83c\udf80',
    rice: '\ud83c\udf5a',
    rice_ball: '\ud83c\udf59',
    rice_cracker: '\ud83c\udf58',
    rice_scene: '\ud83c\udf91',
    right_anger_bubble: '\ud83d\uddef',
    ring: '\ud83d\udc8d',
    robot: '\ud83e\udd16',
    rocket: '\ud83d\ude80',
    rofl: '\ud83e\udd23',
    roll_eyes: '\ud83d\ude44',
    roller_coaster: '\ud83c\udfa2',
    rooster: '\ud83d\udc13',
    rose: '\ud83c\udf39',
    rosette: '\ud83c\udff5',
    rotating_light: '\ud83d\udea8',
    round_pushpin: '\ud83d\udccd',
    rowing_man: '\ud83d\udea3',
    rowing_woman: '\ud83d\udea3&zwj;\u2640\ufe0f',
    rugby_football: '\ud83c\udfc9',
    running_man: '\ud83c\udfc3',
    running_shirt_with_sash: '\ud83c\udfbd',
    running_woman: '\ud83c\udfc3&zwj;\u2640\ufe0f',
    sa: '\ud83c\ude02\ufe0f',
    sagittarius: '\u2650\ufe0f',
    sake: '\ud83c\udf76',
    sandal: '\ud83d\udc61',
    santa: '\ud83c\udf85',
    satellite: '\ud83d\udce1',
    saxophone: '\ud83c\udfb7',
    school: '\ud83c\udfeb',
    school_satchel: '\ud83c\udf92',
    scissors: '\u2702\ufe0f',
    scorpion: '\ud83e\udd82',
    scorpius: '\u264f\ufe0f',
    scream: '\ud83d\ude31',
    scream_cat: '\ud83d\ude40',
    scroll: '\ud83d\udcdc',
    seat: '\ud83d\udcba',
    secret: '\u3299\ufe0f',
    see_no_evil: '\ud83d\ude48',
    seedling: '\ud83c\udf31',
    selfie: '\ud83e\udd33',
    shallow_pan_of_food: '\ud83e\udd58',
    shamrock: '\u2618\ufe0f',
    shark: '\ud83e\udd88',
    shaved_ice: '\ud83c\udf67',
    sheep: '\ud83d\udc11',
    shell: '\ud83d\udc1a',
    shield: '\ud83d\udee1',
    shinto_shrine: '\u26e9',
    ship: '\ud83d\udea2',
    shirt: '\ud83d\udc55',
    shopping: '\ud83d\udecd',
    shopping_cart: '\ud83d\uded2',
    shower: '\ud83d\udebf',
    shrimp: '\ud83e\udd90',
    signal_strength: '\ud83d\udcf6',
    six_pointed_star: '\ud83d\udd2f',
    ski: '\ud83c\udfbf',
    skier: '\u26f7',
    skull: '\ud83d\udc80',
    skull_and_crossbones: '\u2620\ufe0f',
    sleeping: '\ud83d\ude34',
    sleeping_bed: '\ud83d\udecc',
    sleepy: '\ud83d\ude2a',
    slightly_frowning_face: '\ud83d\ude41',
    slightly_smiling_face: '\ud83d\ude42',
    slot_machine: '\ud83c\udfb0',
    small_airplane: '\ud83d\udee9',
    small_blue_diamond: '\ud83d\udd39',
    small_orange_diamond: '\ud83d\udd38',
    small_red_triangle: '\ud83d\udd3a',
    small_red_triangle_down: '\ud83d\udd3b',
    smile: '\ud83d\ude04',
    smile_cat: '\ud83d\ude38',
    smiley: '\ud83d\ude03',
    smiley_cat: '\ud83d\ude3a',
    smiling_imp: '\ud83d\ude08',
    smirk: '\ud83d\ude0f',
    smirk_cat: '\ud83d\ude3c',
    smoking: '\ud83d\udeac',
    snail: '\ud83d\udc0c',
    snake: '\ud83d\udc0d',
    sneezing_face: '\ud83e\udd27',
    snowboarder: '\ud83c\udfc2',
    snowflake: '\u2744\ufe0f',
    snowman: '\u26c4\ufe0f',
    snowman_with_snow: '\u2603\ufe0f',
    sob: '\ud83d\ude2d',
    soccer: '\u26bd\ufe0f',
    soon: '\ud83d\udd1c',
    sos: '\ud83c\udd98',
    sound: '\ud83d\udd09',
    space_invader: '\ud83d\udc7e',
    spades: '\u2660\ufe0f',
    spaghetti: '\ud83c\udf5d',
    sparkle: '\u2747\ufe0f',
    sparkler: '\ud83c\udf87',
    sparkles: '\u2728',
    sparkling_heart: '\ud83d\udc96',
    speak_no_evil: '\ud83d\ude4a',
    speaker: '\ud83d\udd08',
    speaking_head: '\ud83d\udde3',
    speech_balloon: '\ud83d\udcac',
    speedboat: '\ud83d\udea4',
    spider: '\ud83d\udd77',
    spider_web: '\ud83d\udd78',
    spiral_calendar: '\ud83d\uddd3',
    spiral_notepad: '\ud83d\uddd2',
    spoon: '\ud83e\udd44',
    squid: '\ud83e\udd91',
    stadium: '\ud83c\udfdf',
    star: '\u2b50\ufe0f',
    star2: '\ud83c\udf1f',
    star_and_crescent: '\u262a\ufe0f',
    star_of_david: '\u2721\ufe0f',
    stars: '\ud83c\udf20',
    station: '\ud83d\ude89',
    statue_of_liberty: '\ud83d\uddfd',
    steam_locomotive: '\ud83d\ude82',
    stew: '\ud83c\udf72',
    stop_button: '\u23f9',
    stop_sign: '\ud83d\uded1',
    stopwatch: '\u23f1',
    straight_ruler: '\ud83d\udccf',
    strawberry: '\ud83c\udf53',
    stuck_out_tongue: '\ud83d\ude1b',
    stuck_out_tongue_closed_eyes: '\ud83d\ude1d',
    stuck_out_tongue_winking_eye: '\ud83d\ude1c',
    studio_microphone: '\ud83c\udf99',
    stuffed_flatbread: '\ud83e\udd59',
    sun_behind_large_cloud: '\ud83c\udf25',
    sun_behind_rain_cloud: '\ud83c\udf26',
    sun_behind_small_cloud: '\ud83c\udf24',
    sun_with_face: '\ud83c\udf1e',
    sunflower: '\ud83c\udf3b',
    sunglasses: '\ud83d\ude0e',
    sunny: '\u2600\ufe0f',
    sunrise: '\ud83c\udf05',
    sunrise_over_mountains: '\ud83c\udf04',
    surfing_man: '\ud83c\udfc4',
    surfing_woman: '\ud83c\udfc4&zwj;\u2640\ufe0f',
    sushi: '\ud83c\udf63',
    suspension_railway: '\ud83d\ude9f',
    sweat: '\ud83d\ude13',
    sweat_drops: '\ud83d\udca6',
    sweat_smile: '\ud83d\ude05',
    sweet_potato: '\ud83c\udf60',
    swimming_man: '\ud83c\udfca',
    swimming_woman: '\ud83c\udfca&zwj;\u2640\ufe0f',
    symbols: '\ud83d\udd23',
    synagogue: '\ud83d\udd4d',
    syringe: '\ud83d\udc89',
    taco: '\ud83c\udf2e',
    tada: '\ud83c\udf89',
    tanabata_tree: '\ud83c\udf8b',
    taurus: '\u2649\ufe0f',
    taxi: '\ud83d\ude95',
    tea: '\ud83c\udf75',
    telephone_receiver: '\ud83d\udcde',
    telescope: '\ud83d\udd2d',
    tennis: '\ud83c\udfbe',
    tent: '\u26fa\ufe0f',
    thermometer: '\ud83c\udf21',
    thinking: '\ud83e\udd14',
    thought_balloon: '\ud83d\udcad',
    ticket: '\ud83c\udfab',
    tickets: '\ud83c\udf9f',
    tiger: '\ud83d\udc2f',
    tiger2: '\ud83d\udc05',
    timer_clock: '\u23f2',
    tipping_hand_man: '\ud83d\udc81&zwj;\u2642\ufe0f',
    tired_face: '\ud83d\ude2b',
    tm: '\u2122\ufe0f',
    toilet: '\ud83d\udebd',
    tokyo_tower: '\ud83d\uddfc',
    tomato: '\ud83c\udf45',
    tongue: '\ud83d\udc45',
    top: '\ud83d\udd1d',
    tophat: '\ud83c\udfa9',
    tornado: '\ud83c\udf2a',
    trackball: '\ud83d\uddb2',
    tractor: '\ud83d\ude9c',
    traffic_light: '\ud83d\udea5',
    train: '\ud83d\ude8b',
    train2: '\ud83d\ude86',
    tram: '\ud83d\ude8a',
    triangular_flag_on_post: '\ud83d\udea9',
    triangular_ruler: '\ud83d\udcd0',
    trident: '\ud83d\udd31',
    triumph: '\ud83d\ude24',
    trolleybus: '\ud83d\ude8e',
    trophy: '\ud83c\udfc6',
    tropical_drink: '\ud83c\udf79',
    tropical_fish: '\ud83d\udc20',
    truck: '\ud83d\ude9a',
    trumpet: '\ud83c\udfba',
    tulip: '\ud83c\udf37',
    tumbler_glass: '\ud83e\udd43',
    turkey: '\ud83e\udd83',
    turtle: '\ud83d\udc22',
    tv: '\ud83d\udcfa',
    twisted_rightwards_arrows: '\ud83d\udd00',
    two_hearts: '\ud83d\udc95',
    two_men_holding_hands: '\ud83d\udc6c',
    two_women_holding_hands: '\ud83d\udc6d',
    u5272: '\ud83c\ude39',
    u5408: '\ud83c\ude34',
    u55b6: '\ud83c\ude3a',
    u6307: '\ud83c\ude2f\ufe0f',
    u6708: '\ud83c\ude37\ufe0f',
    u6709: '\ud83c\ude36',
    u6e80: '\ud83c\ude35',
    u7121: '\ud83c\ude1a\ufe0f',
    u7533: '\ud83c\ude38',
    u7981: '\ud83c\ude32',
    u7a7a: '\ud83c\ude33',
    umbrella: '\u2614\ufe0f',
    unamused: '\ud83d\ude12',
    underage: '\ud83d\udd1e',
    unicorn: '\ud83e\udd84',
    unlock: '\ud83d\udd13',
    up: '\ud83c\udd99',
    upside_down_face: '\ud83d\ude43',
    v: '\u270c\ufe0f',
    vertical_traffic_light: '\ud83d\udea6',
    vhs: '\ud83d\udcfc',
    vibration_mode: '\ud83d\udcf3',
    video_camera: '\ud83d\udcf9',
    video_game: '\ud83c\udfae',
    violin: '\ud83c\udfbb',
    virgo: '\u264d\ufe0f',
    volcano: '\ud83c\udf0b',
    volleyball: '\ud83c\udfd0',
    vs: '\ud83c\udd9a',
    vulcan_salute: '\ud83d\udd96',
    walking_man: '\ud83d\udeb6',
    walking_woman: '\ud83d\udeb6&zwj;\u2640\ufe0f',
    waning_crescent_moon: '\ud83c\udf18',
    waning_gibbous_moon: '\ud83c\udf16',
    warning: '\u26a0\ufe0f',
    wastebasket: '\ud83d\uddd1',
    watch: '\u231a\ufe0f',
    water_buffalo: '\ud83d\udc03',
    watermelon: '\ud83c\udf49',
    wave: '\ud83d\udc4b',
    wavy_dash: '\u3030\ufe0f',
    waxing_crescent_moon: '\ud83c\udf12',
    wc: '\ud83d\udebe',
    weary: '\ud83d\ude29',
    wedding: '\ud83d\udc92',
    weight_lifting_man: '\ud83c\udfcb\ufe0f',
    weight_lifting_woman: '\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
    whale: '\ud83d\udc33',
    whale2: '\ud83d\udc0b',
    wheel_of_dharma: '\u2638\ufe0f',
    wheelchair: '\u267f\ufe0f',
    white_check_mark: '\u2705',
    white_circle: '\u26aa\ufe0f',
    white_flag: '\ud83c\udff3\ufe0f',
    white_flower: '\ud83d\udcae',
    white_large_square: '\u2b1c\ufe0f',
    white_medium_small_square: '\u25fd\ufe0f',
    white_medium_square: '\u25fb\ufe0f',
    white_small_square: '\u25ab\ufe0f',
    white_square_button: '\ud83d\udd33',
    wilted_flower: '\ud83e\udd40',
    wind_chime: '\ud83c\udf90',
    wind_face: '\ud83c\udf2c',
    wine_glass: '\ud83c\udf77',
    wink: '\ud83d\ude09',
    wolf: '\ud83d\udc3a',
    woman: '\ud83d\udc69',
    woman_artist: '\ud83d\udc69&zwj;\ud83c\udfa8',
    woman_astronaut: '\ud83d\udc69&zwj;\ud83d\ude80',
    woman_cartwheeling: '\ud83e\udd38&zwj;\u2640\ufe0f',
    woman_cook: '\ud83d\udc69&zwj;\ud83c\udf73',
    woman_facepalming: '\ud83e\udd26&zwj;\u2640\ufe0f',
    woman_factory_worker: '\ud83d\udc69&zwj;\ud83c\udfed',
    woman_farmer: '\ud83d\udc69&zwj;\ud83c\udf3e',
    woman_firefighter: '\ud83d\udc69&zwj;\ud83d\ude92',
    woman_health_worker: '\ud83d\udc69&zwj;\u2695\ufe0f',
    woman_judge: '\ud83d\udc69&zwj;\u2696\ufe0f',
    woman_juggling: '\ud83e\udd39&zwj;\u2640\ufe0f',
    woman_mechanic: '\ud83d\udc69&zwj;\ud83d\udd27',
    woman_office_worker: '\ud83d\udc69&zwj;\ud83d\udcbc',
    woman_pilot: '\ud83d\udc69&zwj;\u2708\ufe0f',
    woman_playing_handball: '\ud83e\udd3e&zwj;\u2640\ufe0f',
    woman_playing_water_polo: '\ud83e\udd3d&zwj;\u2640\ufe0f',
    woman_scientist: '\ud83d\udc69&zwj;\ud83d\udd2c',
    woman_shrugging: '\ud83e\udd37&zwj;\u2640\ufe0f',
    woman_singer: '\ud83d\udc69&zwj;\ud83c\udfa4',
    woman_student: '\ud83d\udc69&zwj;\ud83c\udf93',
    woman_teacher: '\ud83d\udc69&zwj;\ud83c\udfeb',
    woman_technologist: '\ud83d\udc69&zwj;\ud83d\udcbb',
    woman_with_turban: '\ud83d\udc73&zwj;\u2640\ufe0f',
    womans_clothes: '\ud83d\udc5a',
    womans_hat: '\ud83d\udc52',
    women_wrestling: '\ud83e\udd3c&zwj;\u2640\ufe0f',
    womens: '\ud83d\udeba',
    world_map: '\ud83d\uddfa',
    worried: '\ud83d\ude1f',
    wrench: '\ud83d\udd27',
    writing_hand: '\u270d\ufe0f',
    x: '\u274c',
    yellow_heart: '\ud83d\udc9b',
    yen: '\ud83d\udcb4',
    yin_yang: '\u262f\ufe0f',
    yum: '\ud83d\ude0b',
    zap: '\u26a1\ufe0f',
    zipper_mouth_face: '\ud83e\udd10',
    zzz: '\ud83d\udca4',

    /* special emojis :P */
    octocat:
      '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
    showdown:
      '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>',
  }

  /**
   * Created by Estevao on 31-05-2015.
   */

  /**
   * Showdown Converter class
   * @class
   * @param {object} [converterOptions]
   * @returns {Converter}
   */
  showdown.Converter = function (converterOptions) {
    'use strict'

    var /**
       * Options used by this converter
       * @private
       * @type {{}}
       */
      options = {},
      /**
       * Language extensions used by this converter
       * @private
       * @type {Array}
       */
      langExtensions = [],
      /**
       * Output modifiers extensions used by this converter
       * @private
       * @type {Array}
       */
      outputModifiers = [],
      /**
       * Event listeners
       * @private
       * @type {{}}
       */
      listeners = {},
      /**
       * The flavor set in this converter
       */
      setConvFlavor = setFlavor,
      /**
       * Metadata of the document
       * @type {{parsed: {}, raw: string, format: string}}
       */
      metadata = {
        parsed: {},
        raw: '',
        format: '',
      }

    _constructor()

    /**
     * Converter constructor
     * @private
     */
    function _constructor() {
      converterOptions = converterOptions || {}

      for (var gOpt in globalOptions) {
        if (globalOptions.hasOwnProperty(gOpt)) {
          options[gOpt] = globalOptions[gOpt]
        }
      }

      // Merge options
      if (typeof converterOptions === 'object') {
        for (var opt in converterOptions) {
          if (converterOptions.hasOwnProperty(opt)) {
            options[opt] = converterOptions[opt]
          }
        }
      } else {
        throw Error(
          'Converter expects the passed parameter to be an object, but ' +
            typeof converterOptions +
            ' was passed instead.'
        )
      }

      if (options.extensions) {
        showdown.helper.forEach(options.extensions, _parseExtension)
      }
    }

    /**
     * Parse extension
     * @param {*} ext
     * @param {string} [name='']
     * @private
     */
    function _parseExtension(ext, name) {
      name = name || null
      // If it's a string, the extension was previously loaded
      if (showdown.helper.isString(ext)) {
        ext = showdown.helper.stdExtName(ext)
        name = ext

        // LEGACY_SUPPORT CODE
        if (showdown.extensions[ext]) {
          console.warn(
            'DEPRECATION WARNING: ' +
              ext +
              ' is an old extension that uses a deprecated loading method.' +
              'Please inform the developer that the extension should be updated!'
          )
          legacyExtensionLoading(showdown.extensions[ext], ext)
          return
          // END LEGACY SUPPORT CODE
        } else if (!showdown.helper.isUndefined(extensions[ext])) {
          ext = extensions[ext]
        } else {
          throw Error(
            'Extension "' +
              ext +
              '" could not be loaded. It was either not found or is not a valid extension.'
          )
        }
      }

      if (typeof ext === 'function') {
        ext = ext()
      }

      if (!showdown.helper.isArray(ext)) {
        ext = [ext]
      }

      var validExt = validate(ext, name)
      if (!validExt.valid) {
        throw Error(validExt.error)
      }

      for (var i = 0; i < ext.length; ++i) {
        switch (ext[i].type) {
          case 'lang':
            langExtensions.push(ext[i])
            break

          case 'output':
            outputModifiers.push(ext[i])
            break
        }
        if (ext[i].hasOwnProperty('listeners')) {
          for (var ln in ext[i].listeners) {
            if (ext[i].listeners.hasOwnProperty(ln)) {
              listen(ln, ext[i].listeners[ln])
            }
          }
        }
      }
    }

    /**
     * LEGACY_SUPPORT
     * @param {*} ext
     * @param {string} name
     */
    function legacyExtensionLoading(ext, name) {
      if (typeof ext === 'function') {
        ext = ext(new showdown.Converter())
      }
      if (!showdown.helper.isArray(ext)) {
        ext = [ext]
      }
      var valid = validate(ext, name)

      if (!valid.valid) {
        throw Error(valid.error)
      }

      for (var i = 0; i < ext.length; ++i) {
        switch (ext[i].type) {
          case 'lang':
            langExtensions.push(ext[i])
            break
          case 'output':
            outputModifiers.push(ext[i])
            break
          default:
            // should never reach here
            throw Error('Extension loader error: Type unrecognized!!!')
        }
      }
    }

    /**
     * Listen to an event
     * @param {string} name
     * @param {function} callback
     */
    function listen(name, callback) {
      if (!showdown.helper.isString(name)) {
        throw Error(
          'Invalid argument in converter.listen() method: name must be a string, but ' +
            typeof name +
            ' given'
        )
      }

      if (typeof callback !== 'function') {
        throw Error(
          'Invalid argument in converter.listen() method: callback must be a function, but ' +
            typeof callback +
            ' given'
        )
      }

      if (!listeners.hasOwnProperty(name)) {
        listeners[name] = []
      }
      listeners[name].push(callback)
    }

    function rTrimInputText(text) {
      var rsp = text.match(/^\s*/)[0].length,
        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm')
      return text.replace(rgx, '')
    }

    /**
     * Dispatch an event
     * @private
     * @param {string} evtName Event name
     * @param {string} text Text
     * @param {{}} options Converter Options
     * @param {{}} globals
     * @returns {string}
     */
    this._dispatch = function dispatch(evtName, text, options, globals) {
      if (listeners.hasOwnProperty(evtName)) {
        for (var ei = 0; ei < listeners[evtName].length; ++ei) {
          var nText = listeners[evtName][ei](evtName, text, this, options, globals)
          if (nText && typeof nText !== 'undefined') {
            text = nText
          }
        }
      }
      return text
    }

    /**
     * Listen to an event
     * @param {string} name
     * @param {function} callback
     * @returns {showdown.Converter}
     */
    this.listen = function (name, callback) {
      listen(name, callback)
      return this
    }

    /**
     * Converts a markdown string into HTML
     * @param {string} text
     * @returns {*}
     */
    this.makeHtml = function (text) {
      //check if text is not falsy
      if (!text) {
        return text
      }

      var globals = {
        gHtmlBlocks: [],
        gHtmlMdBlocks: [],
        gHtmlSpans: [],
        gUrls: {},
        gTitles: {},
        gDimensions: {},
        gListLevel: 0,
        hashLinkCounts: {},
        langExtensions: langExtensions,
        outputModifiers: outputModifiers,
        converter: this,
        ghCodeBlocks: [],
        metadata: {
          parsed: {},
          raw: '',
          format: '',
        },
      }

      // This lets us use ¨ trema as an escape char to avoid md5 hashes
      // The choice of character is arbitrary; anything that isn't
      // magic in Markdown will work.
      text = text.replace(/¨/g, '¨T')

      // Replace $ with ¨D
      // RegExp interprets $ as a special character
      // when it's in a replacement string
      text = text.replace(/\$/g, '¨D')

      // Standardize line endings
      text = text.replace(/\r\n/g, '\n') // DOS to Unix
      text = text.replace(/\r/g, '\n') // Mac to Unix

      // Stardardize line spaces
      text = text.replace(/\u00A0/g, '&nbsp;')

      if (options.smartIndentationFix) {
        text = rTrimInputText(text)
      }

      // Make sure text begins and ends with a couple of newlines:
      text = '\n\n' + text + '\n\n'

      // detab
      text = showdown.subParser('detab')(text, options, globals)

      /**
       * Strip any lines consisting only of spaces and tabs.
       * This makes subsequent regexs easier to write, because we can
       * match consecutive blank lines with /\n+/ instead of something
       * contorted like /[ \t]*\n+/
       */
      text = text.replace(/^[ \t]+$/gm, '')

      //run languageExtensions
      showdown.helper.forEach(langExtensions, function (ext) {
        text = showdown.subParser('runExtension')(ext, text, options, globals)
      })

      // run the sub parsers
      text = showdown.subParser('metadata')(text, options, globals)
      text = showdown.subParser('hashPreCodeTags')(text, options, globals)
      text = showdown.subParser('githubCodeBlocks')(text, options, globals)
      text = showdown.subParser('hashHTMLBlocks')(text, options, globals)
      text = showdown.subParser('hashCodeTags')(text, options, globals)
      text = showdown.subParser('stripLinkDefinitions')(text, options, globals)
      text = showdown.subParser('blockGamut')(text, options, globals)
      text = showdown.subParser('unhashHTMLSpans')(text, options, globals)
      text = showdown.subParser('unescapeSpecialChars')(text, options, globals)

      // attacklab: Restore dollar signs
      text = text.replace(/¨D/g, '$$')

      // attacklab: Restore tremas
      text = text.replace(/¨T/g, '¨')

      // render a complete html document instead of a partial if the option is enabled
      text = showdown.subParser('completeHTMLDocument')(text, options, globals)

      // Run output modifiers
      showdown.helper.forEach(outputModifiers, function (ext) {
        text = showdown.subParser('runExtension')(ext, text, options, globals)
      })

      // update metadata
      metadata = globals.metadata
      return text
    }

    /**
     * Converts an HTML string into a markdown string
     * @param src
     * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
     * @returns {string}
     */
    this.makeMarkdown = this.makeMd = function (src, HTMLParser) {
      // replace \r\n with \n
      src = src.replace(/\r\n/g, '\n')
      src = src.replace(/\r/g, '\n') // old macs

      // due to an edge case, we need to find this: > <
      // to prevent removing of non silent white spaces
      // ex: <em>this is</em> <strong>sparta</strong>
      src = src.replace(/>[ \t]+</, '>¨NBSP;<')

      if (!HTMLParser) {
        if (window && window.document) {
          HTMLParser = window.document
        } else {
          throw new Error(
            'HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM'
          )
        }
      }

      var doc = HTMLParser.createElement('div')
      doc.innerHTML = src

      var globals = {
        preList: substitutePreCodeTags(doc),
      }

      // remove all newlines and collapse spaces
      clean(doc)

      // some stuff, like accidental reference links must now be escaped
      // TODO
      // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

      var nodes = doc.childNodes,
        mdDoc = ''

      for (var i = 0; i < nodes.length; i++) {
        mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals)
      }

      function clean(node) {
        for (var n = 0; n < node.childNodes.length; ++n) {
          var child = node.childNodes[n]
          if (child.nodeType === 3) {
            if (!/\S/.test(child.nodeValue)) {
              node.removeChild(child)
              --n
            } else {
              child.nodeValue = child.nodeValue.split('\n').join(' ')
              child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1')
            }
          } else if (child.nodeType === 1) {
            clean(child)
          }
        }
      }

      // find all pre tags and replace contents with placeholder
      // we need this so that we can remove all indentation from html
      // to ease up parsing
      function substitutePreCodeTags(doc) {
        var pres = doc.querySelectorAll('pre'),
          presPH = []

        for (var i = 0; i < pres.length; ++i) {
          if (
            pres[i].childElementCount === 1 &&
            pres[i].firstChild.tagName.toLowerCase() === 'code'
          ) {
            var content = pres[i].firstChild.innerHTML.trim(),
              language = pres[i].firstChild.getAttribute('data-language') || ''

            // if data-language attribute is not defined, then we look for class language-*
            if (language === '') {
              var classes = pres[i].firstChild.className.split(' ')
              for (var c = 0; c < classes.length; ++c) {
                var matches = classes[c].match(/^language-(.+)$/)
                if (matches !== null) {
                  language = matches[1]
                  break
                }
              }
            }

            // unescape html entities in content
            content = showdown.helper.unescapeHTMLEntities(content)

            presPH.push(content)
            pres[i].outerHTML =
              '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>'
          } else {
            presPH.push(pres[i].innerHTML)
            pres[i].innerHTML = ''
            pres[i].setAttribute('prenum', i.toString())
          }
        }
        return presPH
      }

      return mdDoc
    }

    /**
     * Set an option of this Converter instance
     * @param {string} key
     * @param {*} value
     */
    this.setOption = function (key, value) {
      options[key] = value
    }

    /**
     * Get the option of this Converter instance
     * @param {string} key
     * @returns {*}
     */
    this.getOption = function (key) {
      return options[key]
    }

    /**
     * Get the options of this Converter instance
     * @returns {{}}
     */
    this.getOptions = function () {
      return options
    }

    /**
     * Add extension to THIS converter
     * @param {{}} extension
     * @param {string} [name=null]
     */
    this.addExtension = function (extension, name) {
      name = name || null
      _parseExtension(extension, name)
    }

    /**
     * Use a global registered extension with THIS converter
     * @param {string} extensionName Name of the previously registered extension
     */
    this.useExtension = function (extensionName) {
      _parseExtension(extensionName)
    }

    /**
     * Set the flavor THIS converter should use
     * @param {string} name
     */
    this.setFlavor = function (name) {
      if (!flavor.hasOwnProperty(name)) {
        throw Error(name + ' flavor was not found')
      }
      var preset = flavor[name]
      setConvFlavor = name
      for (var option in preset) {
        if (preset.hasOwnProperty(option)) {
          options[option] = preset[option]
        }
      }
    }

    /**
     * Get the currently set flavor of this converter
     * @returns {string}
     */
    this.getFlavor = function () {
      return setConvFlavor
    }

    /**
     * Remove an extension from THIS converter.
     * Note: This is a costly operation. It's better to initialize a new converter
     * and specify the extensions you wish to use
     * @param {Array} extension
     */
    this.removeExtension = function (extension) {
      if (!showdown.helper.isArray(extension)) {
        extension = [extension]
      }
      for (var a = 0; a < extension.length; ++a) {
        var ext = extension[a]
        for (var i = 0; i < langExtensions.length; ++i) {
          if (langExtensions[i] === ext) {
            langExtensions[i].splice(i, 1)
          }
        }
        for (var ii = 0; ii < outputModifiers.length; ++i) {
          if (outputModifiers[ii] === ext) {
            outputModifiers[ii].splice(i, 1)
          }
        }
      }
    }

    /**
     * Get all extension of THIS converter
     * @returns {{language: Array, output: Array}}
     */
    this.getAllExtensions = function () {
      return {
        language: langExtensions,
        output: outputModifiers,
      }
    }

    /**
     * Get the metadata of the previously parsed document
     * @param raw
     * @returns {string|{}}
     */
    this.getMetadata = function (raw) {
      if (raw) {
        return metadata.raw
      } else {
        return metadata.parsed
      }
    }

    /**
     * Get the metadata format of the previously parsed document
     * @returns {string}
     */
    this.getMetadataFormat = function () {
      return metadata.format
    }

    /**
     * Private: set a single key, value metadata pair
     * @param {string} key
     * @param {string} value
     */
    this._setMetadataPair = function (key, value) {
      metadata.parsed[key] = value
    }

    /**
     * Private: set metadata format
     * @param {string} format
     */
    this._setMetadataFormat = function (format) {
      metadata.format = format
    }

    /**
     * Private: set metadata raw text
     * @param {string} raw
     */
    this._setMetadataRaw = function (raw) {
      metadata.raw = raw
    }
  }

  /**
   * Turn Markdown link shortcuts into XHTML <a> tags.
   */
  showdown.subParser('anchors', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('anchors.before', text, options, globals)

    var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
      if (showdown.helper.isUndefined(title)) {
        title = ''
      }
      linkId = linkId.toLowerCase()

      // Special case for explicit empty url
      if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
        url = ''
      } else if (!url) {
        if (!linkId) {
          // lower-case and turn embedded newlines into spaces
          linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ')
        }
        url = '#' + linkId

        if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
          url = globals.gUrls[linkId]
          if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
            title = globals.gTitles[linkId]
          }
        } else {
          return wholeMatch
        }
      }

      //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
      url = url.replace(
        showdown.helper.regexes.asteriskDashAndColon,
        showdown.helper.escapeCharactersCallback
      )

      var result = '<a href="' + url + '"'

      if (title !== '' && title !== null) {
        title = title.replace(/"/g, '&quot;')
        //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
        title = title.replace(
          showdown.helper.regexes.asteriskDashAndColon,
          showdown.helper.escapeCharactersCallback
        )
        result += ' title="' + title + '"'
      }

      // optionLinksInNewWindow only applies
      // to external links. Hash links (#) open in same page
      if (options.openLinksInNewWindow && !/^#/.test(url)) {
        // escaped _
        result += ' rel="noopener noreferrer" target="¨E95Eblank"'
      }

      result += '>' + linkText + '</a>'

      return result
    }

    // First, handle reference-style links: [link text] [id]
    text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag)

    // Next, inline-style links: [link text](url "optional title")
    // cases with crazy urls like ./image/cat1).png
    text = text.replace(
      /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
      writeAnchorTag
    )

    // normal cases
    text = text.replace(
      /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
      writeAnchorTag
    )

    // handle reference-style shortcuts: [link text]
    // These must come last in case you've also got [link test][1]
    // or [link test](/foo)
    text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag)

    // Lastly handle GithubMentions if option is enabled
    if (options.ghMentions) {
      text = text.replace(
        /(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,
        function (wm, st, escape, mentions, username) {
          if (escape === '\\') {
            return st + mentions
          }

          //check if options.ghMentionsLink is a string
          if (!showdown.helper.isString(options.ghMentionsLink)) {
            throw new Error('ghMentionsLink option must be a string')
          }
          var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
            target = ''
          if (options.openLinksInNewWindow) {
            target = ' rel="noopener noreferrer" target="¨E95Eblank"'
          }
          return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>'
        }
      )
    }

    text = globals.converter._dispatch('anchors.after', text, options, globals)
    return text
  })

  // url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

  var simpleURLRegex =
      /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
    simpleURLRegex2 =
      /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
    delimUrlRegex = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
    simpleMailRegex =
      /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,
    delimMailRegex = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,
    replaceLink = function (options) {
      'use strict'
      return function (
        wm,
        leadingMagicChars,
        link,
        m2,
        m3,
        trailingPunctuation,
        trailingMagicChars
      ) {
        link = link.replace(
          showdown.helper.regexes.asteriskDashAndColon,
          showdown.helper.escapeCharactersCallback
        )
        var lnkTxt = link,
          append = '',
          target = '',
          lmc = leadingMagicChars || '',
          tmc = trailingMagicChars || ''
        if (/^www\./i.test(link)) {
          link = link.replace(/^www\./i, 'http://www.')
        }
        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
          append = trailingPunctuation
        }
        if (options.openLinksInNewWindow) {
          target = ' rel="noopener noreferrer" target="¨E95Eblank"'
        }
        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc
      }
    },
    replaceMail = function (options, globals) {
      'use strict'
      return function (wholeMatch, b, mail) {
        var href = 'mailto:'
        b = b || ''
        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals)
        if (options.encodeEmails) {
          href = showdown.helper.encodeEmailAddress(href + mail)
          mail = showdown.helper.encodeEmailAddress(mail)
        } else {
          href = href + mail
        }
        return b + '<a href="' + href + '">' + mail + '</a>'
      }
    }

  showdown.subParser('autoLinks', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('autoLinks.before', text, options, globals)

    text = text.replace(delimUrlRegex, replaceLink(options))
    text = text.replace(delimMailRegex, replaceMail(options, globals))

    text = globals.converter._dispatch('autoLinks.after', text, options, globals)

    return text
  })

  showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {
    'use strict'

    if (!options.simplifiedAutoLink) {
      return text
    }

    text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals)

    if (options.excludeTrailingPunctuationFromURLs) {
      text = text.replace(simpleURLRegex2, replaceLink(options))
    } else {
      text = text.replace(simpleURLRegex, replaceLink(options))
    }
    text = text.replace(simpleMailRegex, replaceMail(options, globals))

    text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals)

    return text
  })

  /**
   * These are all the transformations that form block-level
   * tags like paragraphs, headers, and list items.
   */
  showdown.subParser('blockGamut', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('blockGamut.before', text, options, globals)

    // we parse blockquotes first so that we can have headings and hrs
    // inside blockquotes
    text = showdown.subParser('blockQuotes')(text, options, globals)
    text = showdown.subParser('headers')(text, options, globals)

    // Do Horizontal Rules:
    text = showdown.subParser('horizontalRule')(text, options, globals)

    text = showdown.subParser('lists')(text, options, globals)
    text = showdown.subParser('codeBlocks')(text, options, globals)
    text = showdown.subParser('tables')(text, options, globals)

    // We already ran _HashHTMLBlocks() before, in Markdown(), but that
    // was to escape raw HTML in the original Markdown source. This time,
    // we're escaping the markup we've just created, so that we don't wrap
    // <p> tags around block-level tags.
    text = showdown.subParser('hashHTMLBlocks')(text, options, globals)
    text = showdown.subParser('paragraphs')(text, options, globals)

    text = globals.converter._dispatch('blockGamut.after', text, options, globals)

    return text
  })

  showdown.subParser('blockQuotes', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('blockQuotes.before', text, options, globals)

    // add a couple extra lines after the text and endtext mark
    text = text + '\n\n'

    var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm

    if (options.splitAdjacentBlockquotes) {
      rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm
    }

    text = text.replace(rgx, function (bq) {
      // attacklab: hack around Konqueror 3.5.4 bug:
      // "----------bug".replace(/^-/g,"") == "bug"
      bq = bq.replace(/^[ \t]*>[ \t]?/gm, '') // trim one level of quoting

      // attacklab: clean up hack
      bq = bq.replace(/¨0/g, '')

      bq = bq.replace(/^[ \t]+$/gm, '') // trim whitespace-only lines
      bq = showdown.subParser('githubCodeBlocks')(bq, options, globals)
      bq = showdown.subParser('blockGamut')(bq, options, globals) // recurse

      bq = bq.replace(/(^|\n)/g, '$1  ')
      // These leading spaces screw with <pre> content, so we need to fix that:
      bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
        var pre = m1
        // attacklab: hack around Konqueror 3.5.4 bug:
        pre = pre.replace(/^  /gm, '¨0')
        pre = pre.replace(/¨0/g, '')
        return pre
      })

      return showdown.subParser('hashBlock')(
        '<blockquote>\n' + bq + '\n</blockquote>',
        options,
        globals
      )
    })

    text = globals.converter._dispatch('blockQuotes.after', text, options, globals)
    return text
  })

  /**
   * Process Markdown `<pre><code>` blocks.
   */
  showdown.subParser('codeBlocks', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('codeBlocks.before', text, options, globals)

    // sentinel workarounds for lack of \A and \Z, safari\khtml bug
    text += '¨0'

    var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g
    text = text.replace(pattern, function (wholeMatch, m1, m2) {
      var codeblock = m1,
        nextChar = m2,
        end = '\n'

      codeblock = showdown.subParser('outdent')(codeblock, options, globals)
      codeblock = showdown.subParser('encodeCode')(codeblock, options, globals)
      codeblock = showdown.subParser('detab')(codeblock, options, globals)
      codeblock = codeblock.replace(/^\n+/g, '') // trim leading newlines
      codeblock = codeblock.replace(/\n+$/g, '') // trim trailing newlines

      if (options.omitExtraWLInCodeBlocks) {
        end = ''
      }

      codeblock = '<pre><code>' + codeblock + end + '</code></pre>'

      return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar
    })

    // strip sentinel
    text = text.replace(/¨0/, '')

    text = globals.converter._dispatch('codeBlocks.after', text, options, globals)
    return text
  })

  /**
   *
   *   *  Backtick quotes are used for <code></code> spans.
   *
   *   *  You can use multiple backticks as the delimiters if you want to
   *     include literal backticks in the code span. So, this input:
   *
   *         Just type ``foo `bar` baz`` at the prompt.
   *
   *       Will translate to:
   *
   *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
   *
   *    There's no arbitrary limit to the number of backticks you
   *    can use as delimters. If you need three consecutive backticks
   *    in your code, use four for delimiters, etc.
   *
   *  *  You can use spaces to get literal backticks at the edges:
   *
   *         ... type `` `bar` `` ...
   *
   *       Turns to:
   *
   *         ... type <code>`bar`</code> ...
   */
  showdown.subParser('codeSpans', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('codeSpans.before', text, options, globals)

    if (typeof text === 'undefined') {
      text = ''
    }
    text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm, function (wholeMatch, m1, m2, m3) {
      var c = m3
      c = c.replace(/^([ \t]*)/g, '') // leading whitespace
      c = c.replace(/[ \t]*$/g, '') // trailing whitespace
      c = showdown.subParser('encodeCode')(c, options, globals)
      c = m1 + '<code>' + c + '</code>'
      c = showdown.subParser('hashHTMLSpans')(c, options, globals)
      return c
    })

    text = globals.converter._dispatch('codeSpans.after', text, options, globals)
    return text
  })

  /**
   * Create a full HTML document from the processed markdown
   */
  showdown.subParser('completeHTMLDocument', function (text, options, globals) {
    'use strict'

    if (!options.completeHTMLDocument) {
      return text
    }

    text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals)

    var doctype = 'html',
      doctypeParsed = '<!DOCTYPE HTML>\n',
      title = '',
      charset = '<meta charset="utf-8">\n',
      lang = '',
      metadata = ''

    if (typeof globals.metadata.parsed.doctype !== 'undefined') {
      doctypeParsed = '<!DOCTYPE ' + globals.metadata.parsed.doctype + '>\n'
      doctype = globals.metadata.parsed.doctype.toString().toLowerCase()
      if (doctype === 'html' || doctype === 'html5') {
        charset = '<meta charset="utf-8">'
      }
    }

    for (var meta in globals.metadata.parsed) {
      if (globals.metadata.parsed.hasOwnProperty(meta)) {
        switch (meta.toLowerCase()) {
          case 'doctype':
            break

          case 'title':
            title = '<title>' + globals.metadata.parsed.title + '</title>\n'
            break

          case 'charset':
            if (doctype === 'html' || doctype === 'html5') {
              charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n'
            } else {
              charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n'
            }
            break

          case 'language':
          case 'lang':
            lang = ' lang="' + globals.metadata.parsed[meta] + '"'
            metadata +=
              '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n'
            break

          default:
            metadata +=
              '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n'
        }
      }
    }

    text =
      doctypeParsed +
      '<html' +
      lang +
      '>\n<head>\n' +
      title +
      charset +
      metadata +
      '</head>\n<body>\n' +
      text.trim() +
      '\n</body>\n</html>'

    text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals)
    return text
  })

  /**
   * Convert all tabs to spaces
   */
  showdown.subParser('detab', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('detab.before', text, options, globals)

    // expand first n-1 tabs
    text = text.replace(/\t(?=\t)/g, '    ') // g_tab_width

    // replace the nth with two sentinels
    text = text.replace(/\t/g, '¨A¨B')

    // use the sentinel to anchor our regex so it doesn't explode
    text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
      var leadingText = m1,
        numSpaces = 4 - (leadingText.length % 4) // g_tab_width

      // there *must* be a better way to do this:
      for (var i = 0; i < numSpaces; i++) {
        leadingText += ' '
      }

      return leadingText
    })

    // clean up sentinels
    text = text.replace(/¨A/g, '    ') // g_tab_width
    text = text.replace(/¨B/g, '')

    text = globals.converter._dispatch('detab.after', text, options, globals)
    return text
  })

  showdown.subParser('ellipsis', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('ellipsis.before', text, options, globals)

    text = text.replace(/\.\.\./g, '…')

    text = globals.converter._dispatch('ellipsis.after', text, options, globals)

    return text
  })

  /**
   * Turn emoji codes into emojis
   *
   * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
   */
  showdown.subParser('emoji', function (text, options, globals) {
    'use strict'

    if (!options.emoji) {
      return text
    }

    text = globals.converter._dispatch('emoji.before', text, options, globals)

    var emojiRgx = /:([\S]+?):/g

    text = text.replace(emojiRgx, function (wm, emojiCode) {
      if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
        return showdown.helper.emojis[emojiCode]
      }
      return wm
    })

    text = globals.converter._dispatch('emoji.after', text, options, globals)

    return text
  })

  /**
   * Smart processing for ampersands and angle brackets that need to be encoded.
   */
  showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals)

    // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
    // http://bumppo.net/projects/amputator/
    text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;')

    // Encode naked <'s
    text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;')

    // Encode <
    text = text.replace(/</g, '&lt;')

    // Encode >
    text = text.replace(/>/g, '&gt;')

    text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals)
    return text
  })

  /**
   * Returns the string, with after processing the following backslash escape sequences.
   *
   * attacklab: The polite way to do this is with the new escapeCharacters() function:
   *
   *    text = escapeCharacters(text,"\\",true);
   *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
   *
   * ...but we're sidestepping its use of the (slow) RegExp constructor
   * as an optimization for Firefox.  This function gets called a LOT.
   */
  showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals)

    text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback)
    text = text.replace(/\\([`*_{}\[\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback)

    text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals)
    return text
  })

  /**
   * Encode/escape certain characters inside Markdown code runs.
   * The point is that in code, these characters are literals,
   * and lose their special Markdown meanings.
   */
  showdown.subParser('encodeCode', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('encodeCode.before', text, options, globals)

    // Encode all ampersands; HTML entities are not
    // entities within a Markdown code span.
    text = text
      .replace(/&/g, '&amp;')
      // Do the angle bracket song and dance:
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      // Now, escape characters that are magic in Markdown:
      .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback)

    text = globals.converter._dispatch('encodeCode.after', text, options, globals)
    return text
  })

  /**
   * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
   * don't conflict with their use in Markdown for code, italics and strong.
   */
  showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch(
      'escapeSpecialCharsWithinTagAttributes.before',
      text,
      options,
      globals
    )

    // Build a regex to find HTML tags.
    var tags = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi

    text = text.replace(tags, function (wholeMatch) {
      return wholeMatch
        .replace(/(.)<\/?code>(?=.)/g, '$1`')
        .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback)
    })

    text = text.replace(comments, function (wholeMatch) {
      return wholeMatch.replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback)
    })

    text = globals.converter._dispatch(
      'escapeSpecialCharsWithinTagAttributes.after',
      text,
      options,
      globals
    )
    return text
  })

  /**
   * Handle github codeblocks prior to running HashHTML so that
   * HTML contained within the codeblock gets escaped properly
   * Example:
   * ```ruby
   *     def hello_world(x)
   *       puts "Hello, #{x}"
   *     end
   * ```
   */
  showdown.subParser('githubCodeBlocks', function (text, options, globals) {
    'use strict'

    // early exit if option is not enabled
    if (!options.ghCodeBlocks) {
      return text
    }

    text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals)

    text += '¨0'

    text = text.replace(
      /(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,
      function (wholeMatch, delim, language, codeblock) {
        var end = options.omitExtraWLInCodeBlocks ? '' : '\n'

        // First parse the github code block
        codeblock = showdown.subParser('encodeCode')(codeblock, options, globals)
        codeblock = showdown.subParser('detab')(codeblock, options, globals)
        codeblock = codeblock.replace(/^\n+/g, '') // trim leading newlines
        codeblock = codeblock.replace(/\n+$/g, '') // trim trailing whitespace

        codeblock =
          '<pre><code' +
          (language ? ' class="' + language + ' language-' + language + '"' : '') +
          '>' +
          codeblock +
          end +
          '</code></pre>'

        codeblock = showdown.subParser('hashBlock')(codeblock, options, globals)

        // Since GHCodeblocks can be false positives, we need to
        // store the primitive text and the parsed text in a global var,
        // and then return a token
        return (
          '\n\n¨G' +
          (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock: codeblock }) - 1) +
          'G\n\n'
        )
      }
    )

    // attacklab: strip sentinel
    text = text.replace(/¨0/, '')

    return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals)
  })

  showdown.subParser('hashBlock', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('hashBlock.before', text, options, globals)
    text = text.replace(/(^\n+|\n+$)/g, '')
    text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n'
    text = globals.converter._dispatch('hashBlock.after', text, options, globals)
    return text
  })

  /**
   * Hash and escape <code> elements that should not be parsed as markdown
   */
  showdown.subParser('hashCodeTags', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('hashCodeTags.before', text, options, globals)

    var repFunc = function (wholeMatch, match, left, right) {
      var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right
      return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C'
    }

    // Hash naked <code>
    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim')

    text = globals.converter._dispatch('hashCodeTags.after', text, options, globals)
    return text
  })

  showdown.subParser('hashElement', function (text, options, globals) {
    'use strict'

    return function (wholeMatch, m1) {
      var blockText = m1

      // Undo double lines
      blockText = blockText.replace(/\n\n/g, '\n')
      blockText = blockText.replace(/^\n/, '')

      // strip trailing blank lines
      blockText = blockText.replace(/\n+$/g, '')

      // Replace the element text with a marker ("¨KxK" where x is its key)
      blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n'

      return blockText
    }
  })

  showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals)

    var blockTags = [
        'pre',
        'div',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'blockquote',
        'table',
        'dl',
        'ol',
        'ul',
        'script',
        'noscript',
        'form',
        'fieldset',
        'iframe',
        'math',
        'style',
        'section',
        'header',
        'footer',
        'nav',
        'article',
        'aside',
        'address',
        'audio',
        'canvas',
        'figure',
        'hgroup',
        'output',
        'video',
        'p',
      ],
      repFunc = function (wholeMatch, match, left, right) {
        var txt = wholeMatch
        // check if this html element is marked as markdown
        // if so, it's contents should be parsed as markdown
        if (left.search(/\bmarkdown\b/) !== -1) {
          txt = left + globals.converter.makeHtml(match) + right
        }
        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n'
      }

    if (options.backslashEscapesHTMLTags) {
      // encode backslash escaped HTML tags
      text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
        return '&lt;' + inside + '&gt;'
      })
    }

    // hash HTML Blocks
    for (var i = 0; i < blockTags.length; ++i) {
      var opTagPos,
        rgx1 = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
        patLeft = '<' + blockTags[i] + '\\b[^>]*>',
        patRight = '</' + blockTags[i] + '>'
      // 1. Look for the first position of the first opening HTML tag in the text
      while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {
        // if the HTML tag is \ escaped, we need to escape it and break

        //2. Split the text in that position
        var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
          //3. Match recursively
          newSubText1 = showdown.helper.replaceRecursiveRegExp(
            subTexts[1],
            repFunc,
            patLeft,
            patRight,
            'im'
          )

        // prevent an infinite loop
        if (newSubText1 === subTexts[1]) {
          break
        }
        text = subTexts[0].concat(newSubText1)
      }
    }
    // HR SPECIAL CASE
    text = text.replace(
      /(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
      showdown.subParser('hashElement')(text, options, globals)
    )

    // Special case for standalone HTML comments
    text = showdown.helper.replaceRecursiveRegExp(
      text,
      function (txt) {
        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n'
      },
      '^ {0,3}<!--',
      '-->',
      'gm'
    )

    // PHP and ASP-style processor instructions (<?...?> and <%...%>)
    text = text.replace(
      /(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
      showdown.subParser('hashElement')(text, options, globals)
    )

    text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals)
    return text
  })

  /**
   * Hash span elements that should not be parsed as markdown
   */
  showdown.subParser('hashHTMLSpans', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals)

    function hashHTMLSpan(html) {
      return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C'
    }

    // Hash Self Closing tags
    text = text.replace(/<[^>]+?\/>/gi, function (wm) {
      return hashHTMLSpan(wm)
    })

    // Hash tags without properties
    text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
      return hashHTMLSpan(wm)
    })

    // Hash tags with properties
    text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
      return hashHTMLSpan(wm)
    })

    // Hash self closing tags without />
    text = text.replace(/<[^>]+?>/gi, function (wm) {
      return hashHTMLSpan(wm)
    })

    /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

    text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals)
    return text
  })

  /**
   * Unhash HTML spans
   */
  showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals)

    for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
      var repText = globals.gHtmlSpans[i],
        // limiter to prevent infinite loop (assume 10 as limit for recurse)
        limit = 0

      while (/¨C(\d+)C/.test(repText)) {
        var num = RegExp.$1
        repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num])
        if (limit === 10) {
          console.error('maximum nesting of 10 spans reached!!!')
          break
        }
        ++limit
      }
      text = text.replace('¨C' + i + 'C', repText)
    }

    text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals)
    return text
  })

  /**
   * Hash and escape <pre><code> elements that should not be parsed as markdown
   */
  showdown.subParser('hashPreCodeTags', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals)

    var repFunc = function (wholeMatch, match, left, right) {
      // encode html entities
      var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right
      return (
        '\n\n¨G' +
        (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock: codeblock }) - 1) +
        'G\n\n'
      )
    }

    // Hash <pre><code>
    text = showdown.helper.replaceRecursiveRegExp(
      text,
      repFunc,
      '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>',
      '^ {0,3}</code>\\s*</pre>',
      'gim'
    )

    text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals)
    return text
  })

  showdown.subParser('headers', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('headers.before', text, options, globals)

    var headerLevelStart = isNaN(parseInt(options.headerLevelStart))
        ? 1
        : parseInt(options.headerLevelStart),
      // Set text-style headers:
      //	Header 1
      //	========
      //
      //	Header 2
      //	--------
      //
      setextRegexH1 = options.smoothLivePreview
        ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm
        : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
      setextRegexH2 = options.smoothLivePreview
        ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm
        : /^(.+)[ \t]*\n-+[ \t]*\n+/gm

    text = text.replace(setextRegexH1, function (wholeMatch, m1) {
      var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = options.noHeaderId ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>'
      return showdown.subParser('hashBlock')(hashBlock, options, globals)
    })

    text = text.replace(setextRegexH2, function (matchFound, m1) {
      var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
        hID = options.noHeaderId ? '' : ' id="' + headerId(m1) + '"',
        hLevel = headerLevelStart + 1,
        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>'
      return showdown.subParser('hashBlock')(hashBlock, options, globals)
    })

    // atx-style headers:
    //  # Header 1
    //  ## Header 2
    //  ## Header 2 with closing hashes ##
    //  ...
    //  ###### Header 6
    //
    var atxStyle = options.requireSpaceBeforeHeadingText
      ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm
      : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm

    text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
      var hText = m2
      if (options.customizedHeaderId) {
        hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '')
      }

      var span = showdown.subParser('spanGamut')(hText, options, globals),
        hID = options.noHeaderId ? '' : ' id="' + headerId(m2) + '"',
        hLevel = headerLevelStart - 1 + m1.length,
        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>'

      return showdown.subParser('hashBlock')(header, options, globals)
    })

    function headerId(m) {
      var title, prefix

      // It is separate from other options to allow combining prefix and customized
      if (options.customizedHeaderId) {
        var match = m.match(/\{([^{]+?)}\s*$/)
        if (match && match[1]) {
          m = match[1]
        }
      }

      title = m

      // Prefix id to prevent causing inadvertent pre-existing style matches.
      if (showdown.helper.isString(options.prefixHeaderId)) {
        prefix = options.prefixHeaderId
      } else if (options.prefixHeaderId === true) {
        prefix = 'section-'
      } else {
        prefix = ''
      }

      if (!options.rawPrefixHeaderId) {
        title = prefix + title
      }

      if (options.ghCompatibleHeaderId) {
        title = title
          .replace(/ /g, '-')
          // replace previously escaped chars (&, ¨ and $)
          .replace(/&amp;/g, '')
          .replace(/¨T/g, '')
          .replace(/¨D/g, '')
          // replace rest of the chars (&~$ are repeated as they might have been escaped)
          // borrowed from github's redcarpet (some they should produce similar results)
          .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
          .toLowerCase()
      } else if (options.rawHeaderId) {
        title = title
          .replace(/ /g, '-')
          // replace previously escaped chars (&, ¨ and $)
          .replace(/&amp;/g, '&')
          .replace(/¨T/g, '¨')
          .replace(/¨D/g, '$')
          // replace " and '
          .replace(/["']/g, '-')
          .toLowerCase()
      } else {
        title = title.replace(/[^\w]/g, '').toLowerCase()
      }

      if (options.rawPrefixHeaderId) {
        title = prefix + title
      }

      if (globals.hashLinkCounts[title]) {
        title = title + '-' + globals.hashLinkCounts[title]++
      } else {
        globals.hashLinkCounts[title] = 1
      }
      return title
    }

    text = globals.converter._dispatch('headers.after', text, options, globals)
    return text
  })

  /**
   * Turn Markdown link shortcuts into XHTML <a> tags.
   */
  showdown.subParser('horizontalRule', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('horizontalRule.before', text, options, globals)

    var key = showdown.subParser('hashBlock')('<hr />', options, globals)
    text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key)
    text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key)
    text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key)

    text = globals.converter._dispatch('horizontalRule.after', text, options, globals)
    return text
  })

  /**
   * Turn Markdown image shortcuts into <img> tags.
   */
  showdown.subParser('images', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('images.before', text, options, globals)

    var inlineRegExp =
        /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      crazyRegExp =
        /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
      base64RegExp =
        /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
      referenceRegExp = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g

    function writeImageTagBase64(wholeMatch, altText, linkId, url, width, height, m5, title) {
      url = url.replace(/\s/g, '')
      return writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title)
    }

    function writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title) {
      var gUrls = globals.gUrls,
        gTitles = globals.gTitles,
        gDims = globals.gDimensions

      linkId = linkId.toLowerCase()

      if (!title) {
        title = ''
      }
      // Special case for explicit empty url
      if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
        url = ''
      } else if (url === '' || url === null) {
        if (linkId === '' || linkId === null) {
          // lower-case and turn embedded newlines into spaces
          linkId = altText.toLowerCase().replace(/ ?\n/g, ' ')
        }
        url = '#' + linkId

        if (!showdown.helper.isUndefined(gUrls[linkId])) {
          url = gUrls[linkId]
          if (!showdown.helper.isUndefined(gTitles[linkId])) {
            title = gTitles[linkId]
          }
          if (!showdown.helper.isUndefined(gDims[linkId])) {
            width = gDims[linkId].width
            height = gDims[linkId].height
          }
        } else {
          return wholeMatch
        }
      }

      altText = altText
        .replace(/"/g, '&quot;')
        //altText = showdown.helper.escapeCharacters(altText, '*_', false);
        .replace(
          showdown.helper.regexes.asteriskDashAndColon,
          showdown.helper.escapeCharactersCallback
        )
      //url = showdown.helper.escapeCharacters(url, '*_', false);
      url = url.replace(
        showdown.helper.regexes.asteriskDashAndColon,
        showdown.helper.escapeCharactersCallback
      )
      var result = '<img src="' + url + '" alt="' + altText + '"'

      if (title && showdown.helper.isString(title)) {
        title = title
          .replace(/"/g, '&quot;')
          //title = showdown.helper.escapeCharacters(title, '*_', false);
          .replace(
            showdown.helper.regexes.asteriskDashAndColon,
            showdown.helper.escapeCharactersCallback
          )
        result += ' title="' + title + '"'
      }

      if (width && height) {
        width = width === '*' ? 'auto' : width
        height = height === '*' ? 'auto' : height

        result += ' width="' + width + '"'
        result += ' height="' + height + '"'
      }

      result += ' />'

      return result
    }

    // First, handle reference-style labeled images: ![alt text][id]
    text = text.replace(referenceRegExp, writeImageTag)

    // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

    // base64 encoded images
    text = text.replace(base64RegExp, writeImageTagBase64)

    // cases with crazy urls like ./image/cat1).png
    text = text.replace(crazyRegExp, writeImageTag)

    // normal cases
    text = text.replace(inlineRegExp, writeImageTag)

    // handle reference-style shortcuts: ![img text]
    text = text.replace(refShortcutRegExp, writeImageTag)

    text = globals.converter._dispatch('images.after', text, options, globals)
    return text
  })

  showdown.subParser('italicsAndBold', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('italicsAndBold.before', text, options, globals)

    // it's faster to have 3 separate regexes for each case than have just one
    // because of backtracing, in some cases, it could lead to an exponential effect
    // called "catastrophic backtrace". Ominous!

    function parseInside(txt, left, right) {
      /*
    if (options.simplifiedAutoLink) {
      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
    }
    */
      return left + txt + right
    }

    // Parse underscores
    if (options.literalMidWordUnderscores) {
      text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
        return parseInside(txt, '<strong><em>', '</em></strong>')
      })
      text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
        return parseInside(txt, '<strong>', '</strong>')
      })
      text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
        return parseInside(txt, '<em>', '</em>')
      })
    } else {
      text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
        return /\S$/.test(m) ? parseInside(m, '<strong><em>', '</em></strong>') : wm
      })
      text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
        return /\S$/.test(m) ? parseInside(m, '<strong>', '</strong>') : wm
      })
      text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
        // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
        return /\S$/.test(m) ? parseInside(m, '<em>', '</em>') : wm
      })
    }

    // Now parse asterisks
    if (options.literalMidWordAsterisks) {
      text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
        return parseInside(txt, lead + '<strong><em>', '</em></strong>')
      })
      text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
        return parseInside(txt, lead + '<strong>', '</strong>')
      })
      text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
        return parseInside(txt, lead + '<em>', '</em>')
      })
    } else {
      text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
        return /\S$/.test(m) ? parseInside(m, '<strong><em>', '</em></strong>') : wm
      })
      text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
        return /\S$/.test(m) ? parseInside(m, '<strong>', '</strong>') : wm
      })
      text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
        // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
        return /\S$/.test(m) ? parseInside(m, '<em>', '</em>') : wm
      })
    }

    text = globals.converter._dispatch('italicsAndBold.after', text, options, globals)
    return text
  })

  /**
   * Form HTML ordered (numbered) and unordered (bulleted) lists.
   */
  showdown.subParser('lists', function (text, options, globals) {
    'use strict'

    /**
     * Process the contents of a single ordered or unordered list, splitting it
     * into individual list items.
     * @param {string} listStr
     * @param {boolean} trimTrailing
     * @returns {string}
     */
    function processListItems(listStr, trimTrailing) {
      // The $g_list_level global keeps track of when we're inside a list.
      // Each time we enter a list, we increment it; when we leave a list,
      // we decrement. If it's zero, we're not in a list anymore.
      //
      // We do this because when we're not inside a list, we want to treat
      // something like this:
      //
      //    I recommend upgrading to version
      //    8. Oops, now this line is treated
      //    as a sub-list.
      //
      // As a single paragraph, despite the fact that the second line starts
      // with a digit-period-space sequence.
      //
      // Whereas when we're inside a list (or sub-list), that line will be
      // treated as the start of a sub-list. What a kludge, huh? This is
      // an aspect of Markdown's syntax that's hard to parse perfectly
      // without resorting to mind-reading. Perhaps the solution is to
      // change the syntax rules such that sub-lists must start with a
      // starting cardinal number; e.g. "1." or "a.".
      globals.gListLevel++

      // trim trailing blank lines:
      listStr = listStr.replace(/\n{2,}$/, '\n')

      // attacklab: add sentinel to emulate \z
      listStr += '¨0'

      var rgx =
          /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
        isParagraphed = /\n[ \t]*\n(?!¨0)/.test(listStr)

      // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
      // which is a syntax breaking change
      // activating this option reverts to old behavior
      if (options.disableForced4SpacesIndentedSublists) {
        rgx =
          /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm
      }

      listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
        checked = checked && checked.trim() !== ''

        var item = showdown.subParser('outdent')(m4, options, globals),
          bulletStyle = ''

        // Support for github tasklists
        if (taskbtn && options.tasklists) {
          bulletStyle = ' class="task-list-item" style="list-style-type: none;"'
          item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
            var otp =
              '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"'
            if (checked) {
              otp += ' checked'
            }
            otp += '>'
            return otp
          })
        }

        // ISSUE #312
        // This input: - - - a
        // causes trouble to the parser, since it interprets it as:
        // <ul><li><li><li>a</li></li></li></ul>
        // instead of:
        // <ul><li>- - a</li></ul>
        // So, to prevent it, we will put a marker (¨A)in the beginning of the line
        // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
        item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
          return '¨A' + wm2
        })

        // m1 - Leading line or
        // Has a double return (multi paragraph) or
        // Has sublist
        if (m1 || item.search(/\n{2,}/) > -1) {
          item = showdown.subParser('githubCodeBlocks')(item, options, globals)
          item = showdown.subParser('blockGamut')(item, options, globals)
        } else {
          // Recursion for sub-lists:
          item = showdown.subParser('lists')(item, options, globals)
          item = item.replace(/\n$/, '') // chomp(item)
          item = showdown.subParser('hashHTMLBlocks')(item, options, globals)

          // Colapse double linebreaks
          item = item.replace(/\n\n+/g, '\n\n')
          if (isParagraphed) {
            item = showdown.subParser('paragraphs')(item, options, globals)
          } else {
            item = showdown.subParser('spanGamut')(item, options, globals)
          }
        }

        // now we need to remove the marker (¨A)
        item = item.replace('¨A', '')
        // we can finally wrap the line in list item tags
        item = '<li' + bulletStyle + '>' + item + '</li>\n'

        return item
      })

      // attacklab: strip sentinel
      listStr = listStr.replace(/¨0/g, '')

      globals.gListLevel--

      if (trimTrailing) {
        listStr = listStr.replace(/\s+$/, '')
      }

      return listStr
    }

    function styleStartNumber(list, listType) {
      // check if ol and starts by a number different than 1
      if (listType === 'ol') {
        var res = list.match(/^ *(\d+)\./)
        if (res && res[1] !== '1') {
          return ' start="' + res[1] + '"'
        }
      }
      return ''
    }

    /**
     * Check and parse consecutive lists (better fix for issue #142)
     * @param {string} list
     * @param {string} listType
     * @param {boolean} trimTrailing
     * @returns {string}
     */
    function parseConsecutiveLists(list, listType, trimTrailing) {
      // check if we caught 2 or more consecutive lists by mistake
      // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
      var olRgx = options.disableForced4SpacesIndentedSublists
          ? /^ ?\d+\.[ \t]/gm
          : /^ {0,3}\d+\.[ \t]/gm,
        ulRgx = options.disableForced4SpacesIndentedSublists
          ? /^ ?[*+-][ \t]/gm
          : /^ {0,3}[*+-][ \t]/gm,
        counterRxg = listType === 'ul' ? olRgx : ulRgx,
        result = ''

      if (list.search(counterRxg) !== -1) {
        ;(function parseCL(txt) {
          var pos = txt.search(counterRxg),
            style = styleStartNumber(list, listType)
          if (pos !== -1) {
            // slice
            result +=
              '\n\n<' +
              listType +
              style +
              '>\n' +
              processListItems(txt.slice(0, pos), !!trimTrailing) +
              '</' +
              listType +
              '>\n'

            // invert counterType and listType
            listType = listType === 'ul' ? 'ol' : 'ul'
            counterRxg = listType === 'ul' ? olRgx : ulRgx

            //recurse
            parseCL(txt.slice(pos))
          } else {
            result +=
              '\n\n<' +
              listType +
              style +
              '>\n' +
              processListItems(txt, !!trimTrailing) +
              '</' +
              listType +
              '>\n'
          }
        })(list)
      } else {
        var style = styleStartNumber(list, listType)
        result =
          '\n\n<' +
          listType +
          style +
          '>\n' +
          processListItems(list, !!trimTrailing) +
          '</' +
          listType +
          '>\n'
      }

      return result
    }

    /** Start of list parsing **/
    text = globals.converter._dispatch('lists.before', text, options, globals)
    // add sentinel to hack around khtml/safari bug:
    // http://bugs.webkit.org/show_bug.cgi?id=11231
    text += '¨0'

    if (globals.gListLevel) {
      text = text.replace(
        /^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
        function (wholeMatch, list, m2) {
          var listType = m2.search(/[*+-]/g) > -1 ? 'ul' : 'ol'
          return parseConsecutiveLists(list, listType, true)
        }
      )
    } else {
      text = text.replace(
        /(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
        function (wholeMatch, m1, list, m3) {
          var listType = m3.search(/[*+-]/g) > -1 ? 'ul' : 'ol'
          return parseConsecutiveLists(list, listType, false)
        }
      )
    }

    // strip sentinel
    text = text.replace(/¨0/, '')
    text = globals.converter._dispatch('lists.after', text, options, globals)
    return text
  })

  /**
   * Parse metadata at the top of the document
   */
  showdown.subParser('metadata', function (text, options, globals) {
    'use strict'

    if (!options.metadata) {
      return text
    }

    text = globals.converter._dispatch('metadata.before', text, options, globals)

    function parseMetadataContents(content) {
      // raw is raw so it's not changed in any way
      globals.metadata.raw = content

      // escape chars forbidden in html attributes
      // double quotes
      content = content
        // ampersand first
        .replace(/&/g, '&amp;')
        // double quotes
        .replace(/"/g, '&quot;')

      content = content.replace(/\n {4}/g, ' ')
      content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
        globals.metadata.parsed[key] = value
        return ''
      })
    }

    text = text.replace(
      /^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,
      function (wholematch, format, content) {
        parseMetadataContents(content)
        return '¨M'
      }
    )

    text = text.replace(
      /^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,
      function (wholematch, format, content) {
        if (format) {
          globals.metadata.format = format
        }
        parseMetadataContents(content)
        return '¨M'
      }
    )

    text = text.replace(/¨M/g, '')

    text = globals.converter._dispatch('metadata.after', text, options, globals)
    return text
  })

  /**
   * Remove one level of line-leading tabs or spaces
   */
  showdown.subParser('outdent', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('outdent.before', text, options, globals)

    // attacklab: hack around Konqueror 3.5.4 bug:
    // "----------bug".replace(/^-/g,"") == "bug"
    text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0') // attacklab: g_tab_width

    // attacklab: clean up hack
    text = text.replace(/¨0/g, '')

    text = globals.converter._dispatch('outdent.after', text, options, globals)
    return text
  })

  /**
   *
   */
  showdown.subParser('paragraphs', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('paragraphs.before', text, options, globals)
    // Strip leading and trailing lines:
    text = text.replace(/^\n+/g, '')
    text = text.replace(/\n+$/g, '')

    var grafs = text.split(/\n{2,}/g),
      grafsOut = [],
      end = grafs.length // Wrap <p> tags

    for (var i = 0; i < end; i++) {
      var str = grafs[i]
      // if this is an HTML marker, copy it
      if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
        grafsOut.push(str)

        // test for presence of characters to prevent empty lines being parsed
        // as paragraphs (resulting in undesired extra empty paragraphs)
      } else if (str.search(/\S/) >= 0) {
        str = showdown.subParser('spanGamut')(str, options, globals)
        str = str.replace(/^([ \t]*)/g, '<p>')
        str += '</p>'
        grafsOut.push(str)
      }
    }

    /** Unhashify HTML blocks */
    end = grafsOut.length
    for (i = 0; i < end; i++) {
      var blockText = '',
        grafsOutIt = grafsOut[i],
        codeFlag = false
      // if this is a marker for an html block...
      // use RegExp.test instead of string.search because of QML bug
      while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
        var delim = RegExp.$1,
          num = RegExp.$2

        if (delim === 'K') {
          blockText = globals.gHtmlBlocks[num]
        } else {
          // we need to check if ghBlock is a false positive
          if (codeFlag) {
            // use encoded version of all text
            blockText = showdown.subParser('encodeCode')(
              globals.ghCodeBlocks[num].text,
              options,
              globals
            )
          } else {
            blockText = globals.ghCodeBlocks[num].codeblock
          }
        }
        blockText = blockText.replace(/\$/g, '$$$$') // Escape any dollar signs

        grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText)
        // Check if grafsOutIt is a pre->code
        if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
          codeFlag = true
        }
      }
      grafsOut[i] = grafsOutIt
    }
    text = grafsOut.join('\n')
    // Strip leading and trailing lines:
    text = text.replace(/^\n+/g, '')
    text = text.replace(/\n+$/g, '')
    return globals.converter._dispatch('paragraphs.after', text, options, globals)
  })

  /**
   * Run extension
   */
  showdown.subParser('runExtension', function (ext, text, options, globals) {
    'use strict'

    if (ext.filter) {
      text = ext.filter(text, globals.converter, options)
    } else if (ext.regex) {
      // TODO remove this when old extension loading mechanism is deprecated
      var re = ext.regex
      if (!(re instanceof RegExp)) {
        re = new RegExp(re, 'g')
      }
      text = text.replace(re, ext.replace)
    }

    return text
  })

  /**
   * These are all the transformations that occur *within* block-level
   * tags like paragraphs, headers, and list items.
   */
  showdown.subParser('spanGamut', function (text, options, globals) {
    'use strict'

    text = globals.converter._dispatch('spanGamut.before', text, options, globals)
    text = showdown.subParser('codeSpans')(text, options, globals)
    text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals)
    text = showdown.subParser('encodeBackslashEscapes')(text, options, globals)

    // Process anchor and image tags. Images must come first,
    // because ![foo][f] looks like an anchor.
    text = showdown.subParser('images')(text, options, globals)
    text = showdown.subParser('anchors')(text, options, globals)

    // Make links out of things like `<http://example.com/>`
    // Must come after anchors, because you can use < and >
    // delimiters in inline links like [this](<url>).
    text = showdown.subParser('autoLinks')(text, options, globals)
    text = showdown.subParser('simplifiedAutoLinks')(text, options, globals)
    text = showdown.subParser('emoji')(text, options, globals)
    text = showdown.subParser('underline')(text, options, globals)
    text = showdown.subParser('italicsAndBold')(text, options, globals)
    text = showdown.subParser('strikethrough')(text, options, globals)
    text = showdown.subParser('ellipsis')(text, options, globals)

    // we need to hash HTML tags inside spans
    text = showdown.subParser('hashHTMLSpans')(text, options, globals)

    // now we encode amps and angles
    text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals)

    // Do hard breaks
    if (options.simpleLineBreaks) {
      // GFM style hard breaks
      // only add line breaks if the text does not contain a block (special case for lists)
      if (!/\n\n¨K/.test(text)) {
        text = text.replace(/\n+/g, '<br />\n')
      }
    } else {
      // Vanilla hard breaks
      text = text.replace(/  +\n/g, '<br />\n')
    }

    text = globals.converter._dispatch('spanGamut.after', text, options, globals)
    return text
  })

  showdown.subParser('strikethrough', function (text, options, globals) {
    'use strict'

    function parseInside(txt) {
      if (options.simplifiedAutoLink) {
        txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals)
      }
      return '<del>' + txt + '</del>'
    }

    if (options.strikethrough) {
      text = globals.converter._dispatch('strikethrough.before', text, options, globals)
      text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) {
        return parseInside(txt)
      })
      text = globals.converter._dispatch('strikethrough.after', text, options, globals)
    }

    return text
  })

  /**
   * Strips link definitions from text, stores the URLs and titles in
   * hash references.
   * Link defs are in the form: ^[id]: url "optional title"
   */
  showdown.subParser('stripLinkDefinitions', function (text, options, globals) {
    'use strict'

    var regex =
        /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
      base64Regex =
        /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm

    // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
    text += '¨0'

    var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {
      linkId = linkId.toLowerCase()
      if (url.match(/^data:.+?\/.+?;base64,/)) {
        // remove newlines
        globals.gUrls[linkId] = url.replace(/\s/g, '')
      } else {
        globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals) // Link IDs are case-insensitive
      }

      if (blankLines) {
        // Oops, found blank lines, so it's not a title.
        // Put back the parenthetical statement we stole.
        return blankLines + title
      } else {
        if (title) {
          globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;')
        }
        if (options.parseImgDimensions && width && height) {
          globals.gDimensions[linkId] = {
            width: width,
            height: height,
          }
        }
      }
      // Completely remove the definition from the text
      return ''
    }

    // first we try to find base64 link references
    text = text.replace(base64Regex, replaceFunc)

    text = text.replace(regex, replaceFunc)

    // attacklab: strip sentinel
    text = text.replace(/¨0/, '')

    return text
  })

  showdown.subParser('tables', function (text, options, globals) {
    'use strict'

    if (!options.tables) {
      return text
    }

    var tableRgx =
        /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
      //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
      singeColTblRgx =
        /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm

    function parseStyles(sLine) {
      if (/^:[ \t]*--*$/.test(sLine)) {
        return ' style="text-align:left;"'
      } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
        return ' style="text-align:right;"'
      } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
        return ' style="text-align:center;"'
      } else {
        return ''
      }
    }

    function parseHeaders(header, style) {
      var id = ''
      header = header.trim()
      // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
      if (options.tablesHeaderId || options.tableHeaderId) {
        id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"'
      }
      header = showdown.subParser('spanGamut')(header, options, globals)

      return '<th' + id + style + '>' + header + '</th>\n'
    }

    function parseCells(cell, style) {
      var subText = showdown.subParser('spanGamut')(cell, options, globals)
      return '<td' + style + '>' + subText + '</td>\n'
    }

    function buildTable(headers, cells) {
      var tb = '<table>\n<thead>\n<tr>\n',
        tblLgn = headers.length

      for (var i = 0; i < tblLgn; ++i) {
        tb += headers[i]
      }
      tb += '</tr>\n</thead>\n<tbody>\n'

      for (i = 0; i < cells.length; ++i) {
        tb += '<tr>\n'
        for (var ii = 0; ii < tblLgn; ++ii) {
          tb += cells[i][ii]
        }
        tb += '</tr>\n'
      }
      tb += '</tbody>\n</table>\n'
      return tb
    }

    function parseTable(rawTable) {
      var i,
        tableLines = rawTable.split('\n')

      for (i = 0; i < tableLines.length; ++i) {
        // strip wrong first and last column if wrapped tables are used
        if (/^ {0,3}\|/.test(tableLines[i])) {
          tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '')
        }
        if (/\|[ \t]*$/.test(tableLines[i])) {
          tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '')
        }
        // parse code spans first, but we only support one line code spans
        tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals)
      }

      var rawHeaders = tableLines[0].split('|').map(function (s) {
          return s.trim()
        }),
        rawStyles = tableLines[1].split('|').map(function (s) {
          return s.trim()
        }),
        rawCells = [],
        headers = [],
        styles = [],
        cells = []

      tableLines.shift()
      tableLines.shift()

      for (i = 0; i < tableLines.length; ++i) {
        if (tableLines[i].trim() === '') {
          continue
        }
        rawCells.push(
          tableLines[i].split('|').map(function (s) {
            return s.trim()
          })
        )
      }

      if (rawHeaders.length < rawStyles.length) {
        return rawTable
      }

      for (i = 0; i < rawStyles.length; ++i) {
        styles.push(parseStyles(rawStyles[i]))
      }

      for (i = 0; i < rawHeaders.length; ++i) {
        if (showdown.helper.isUndefined(styles[i])) {
          styles[i] = ''
        }
        headers.push(parseHeaders(rawHeaders[i], styles[i]))
      }

      for (i = 0; i < rawCells.length; ++i) {
        var row = []
        for (var ii = 0; ii < headers.length; ++ii) {
          if (showdown.helper.isUndefined(rawCells[i][ii])) {
          }
          row.push(parseCells(rawCells[i][ii], styles[ii]))
        }
        cells.push(row)
      }

      return buildTable(headers, cells)
    }

    text = globals.converter._dispatch('tables.before', text, options, globals)

    // find escaped pipe characters
    text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback)

    // parse multi column tables
    text = text.replace(tableRgx, parseTable)

    // parse one column tables
    text = text.replace(singeColTblRgx, parseTable)

    text = globals.converter._dispatch('tables.after', text, options, globals)

    return text
  })

  showdown.subParser('underline', function (text, options, globals) {
    'use strict'

    if (!options.underline) {
      return text
    }

    text = globals.converter._dispatch('underline.before', text, options, globals)

    if (options.literalMidWordUnderscores) {
      text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
        return '<u>' + txt + '</u>'
      })
      text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
        return '<u>' + txt + '</u>'
      })
    } else {
      text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
        return /\S$/.test(m) ? '<u>' + m + '</u>' : wm
      })
      text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
        return /\S$/.test(m) ? '<u>' + m + '</u>' : wm
      })
    }

    // escape remaining underscores to prevent them being parsed by italic and bold
    text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback)

    text = globals.converter._dispatch('underline.after', text, options, globals)

    return text
  })

  /**
   * Swap back in all the special characters we've hidden.
   */
  showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
    'use strict'
    text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals)

    text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
      var charCodeToReplace = parseInt(m1)
      return String.fromCharCode(charCodeToReplace)
    })

    text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals)
    return text
  })

  showdown.subParser('makeMarkdown.blockquote', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes()) {
      var children = node.childNodes,
        childrenLength = children.length

      for (var i = 0; i < childrenLength; ++i) {
        var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals)

        if (innerTxt === '') {
          continue
        }
        txt += innerTxt
      }
    }
    // cleanup
    txt = txt.trim()
    txt = '> ' + txt.split('\n').join('\n> ')
    return txt
  })

  showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {
    'use strict'

    var lang = node.getAttribute('language'),
      num = node.getAttribute('precodenum')
    return '```' + lang + '\n' + globals.preList[num] + '\n```'
  })

  showdown.subParser('makeMarkdown.codeSpan', function (node) {
    'use strict'

    return '`' + node.innerHTML + '`'
  })

  showdown.subParser('makeMarkdown.emphasis', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes()) {
      txt += '*'
      var children = node.childNodes,
        childrenLength = children.length
      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
      txt += '*'
    }
    return txt
  })

  showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {
    'use strict'

    var headerMark = new Array(headerLevel + 1).join('#'),
      txt = ''

    if (node.hasChildNodes()) {
      txt = headerMark + ' '
      var children = node.childNodes,
        childrenLength = children.length

      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
    }
    return txt
  })

  showdown.subParser('makeMarkdown.hr', function () {
    'use strict'

    return '---'
  })

  showdown.subParser('makeMarkdown.image', function (node) {
    'use strict'

    var txt = ''
    if (node.hasAttribute('src')) {
      txt += '![' + node.getAttribute('alt') + ']('
      txt += '<' + node.getAttribute('src') + '>'
      if (node.hasAttribute('width') && node.hasAttribute('height')) {
        txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height')
      }

      if (node.hasAttribute('title')) {
        txt += ' "' + node.getAttribute('title') + '"'
      }
      txt += ')'
    }
    return txt
  })

  showdown.subParser('makeMarkdown.links', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes() && node.hasAttribute('href')) {
      var children = node.childNodes,
        childrenLength = children.length
      txt = '['
      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
      txt += ']('
      txt += '<' + node.getAttribute('href') + '>'
      if (node.hasAttribute('title')) {
        txt += ' "' + node.getAttribute('title') + '"'
      }
      txt += ')'
    }
    return txt
  })

  showdown.subParser('makeMarkdown.list', function (node, globals, type) {
    'use strict'

    var txt = ''
    if (!node.hasChildNodes()) {
      return ''
    }
    var listItems = node.childNodes,
      listItemsLenght = listItems.length,
      listNum = node.getAttribute('start') || 1

    for (var i = 0; i < listItemsLenght; ++i) {
      if (
        typeof listItems[i].tagName === 'undefined' ||
        listItems[i].tagName.toLowerCase() !== 'li'
      ) {
        continue
      }

      // define the bullet to use in list
      var bullet = ''
      if (type === 'ol') {
        bullet = listNum.toString() + '. '
      } else {
        bullet = '- '
      }

      // parse list item
      txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals)
      ++listNum
    }

    // add comment at the end to prevent consecutive lists to be parsed as one
    txt += '\n<!-- -->\n'
    return txt.trim()
  })

  showdown.subParser('makeMarkdown.listItem', function (node, globals) {
    'use strict'

    var listItemTxt = ''

    var children = node.childNodes,
      childrenLenght = children.length

    for (var i = 0; i < childrenLenght; ++i) {
      listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals)
    }
    // if it's only one liner, we need to add a newline at the end
    if (!/\n$/.test(listItemTxt)) {
      listItemTxt += '\n'
    } else {
      // it's multiparagraph, so we need to indent
      listItemTxt = listItemTxt
        .split('\n')
        .join('\n    ')
        .replace(/^ {4}$/gm, '')
        .replace(/\n\n+/g, '\n\n')
    }

    return listItemTxt
  })

  showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {
    'use strict'

    spansOnly = spansOnly || false

    var txt = ''

    // edge case of text without wrapper paragraph
    if (node.nodeType === 3) {
      return showdown.subParser('makeMarkdown.txt')(node, globals)
    }

    // HTML comment
    if (node.nodeType === 8) {
      return '<!--' + node.data + '-->\n\n'
    }

    // process only node elements
    if (node.nodeType !== 1) {
      return ''
    }

    var tagName = node.tagName.toLowerCase()

    switch (tagName) {
      //
      // BLOCKS
      //
      case 'h1':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'
        }
        break
      case 'h2':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'
        }
        break
      case 'h3':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'
        }
        break
      case 'h4':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'
        }
        break
      case 'h5':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'
        }
        break
      case 'h6':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'
        }
        break

      case 'p':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'
        }
        break

      case 'blockquote':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'
        }
        break

      case 'hr':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'
        }
        break

      case 'ol':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'
        }
        break

      case 'ul':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'
        }
        break

      case 'precode':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'
        }
        break

      case 'pre':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'
        }
        break

      case 'table':
        if (!spansOnly) {
          txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'
        }
        break

      //
      // SPANS
      //
      case 'code':
        txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals)
        break

      case 'em':
      case 'i':
        txt = showdown.subParser('makeMarkdown.emphasis')(node, globals)
        break

      case 'strong':
      case 'b':
        txt = showdown.subParser('makeMarkdown.strong')(node, globals)
        break

      case 'del':
        txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals)
        break

      case 'a':
        txt = showdown.subParser('makeMarkdown.links')(node, globals)
        break

      case 'img':
        txt = showdown.subParser('makeMarkdown.image')(node, globals)
        break

      default:
        txt = node.outerHTML + '\n\n'
    }

    // common normalization
    // TODO eventually

    return txt
  })

  showdown.subParser('makeMarkdown.paragraph', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes()) {
      var children = node.childNodes,
        childrenLength = children.length
      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
    }

    // some text normalization
    txt = txt.trim()

    return txt
  })

  showdown.subParser('makeMarkdown.pre', function (node, globals) {
    'use strict'

    var num = node.getAttribute('prenum')
    return '<pre>' + globals.preList[num] + '</pre>'
  })

  showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes()) {
      txt += '~~'
      var children = node.childNodes,
        childrenLength = children.length
      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
      txt += '~~'
    }
    return txt
  })

  showdown.subParser('makeMarkdown.strong', function (node, globals) {
    'use strict'

    var txt = ''
    if (node.hasChildNodes()) {
      txt += '**'
      var children = node.childNodes,
        childrenLength = children.length
      for (var i = 0; i < childrenLength; ++i) {
        txt += showdown.subParser('makeMarkdown.node')(children[i], globals)
      }
      txt += '**'
    }
    return txt
  })

  showdown.subParser('makeMarkdown.table', function (node, globals) {
    'use strict'

    var txt = '',
      tableArray = [[], []],
      headings = node.querySelectorAll('thead>tr>th'),
      rows = node.querySelectorAll('tbody>tr'),
      i,
      ii
    for (i = 0; i < headings.length; ++i) {
      var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
        allign = '---'

      if (headings[i].hasAttribute('style')) {
        var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '')
        switch (style) {
          case 'text-align:left;':
            allign = ':---'
            break
          case 'text-align:right;':
            allign = '---:'
            break
          case 'text-align:center;':
            allign = ':---:'
            break
        }
      }
      tableArray[0][i] = headContent.trim()
      tableArray[1][i] = allign
    }

    for (i = 0; i < rows.length; ++i) {
      var r = tableArray.push([]) - 1,
        cols = rows[i].getElementsByTagName('td')

      for (ii = 0; ii < headings.length; ++ii) {
        var cellContent = ' '
        if (typeof cols[ii] !== 'undefined') {
          cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals)
        }
        tableArray[r].push(cellContent)
      }
    }

    var cellSpacesCount = 3
    for (i = 0; i < tableArray.length; ++i) {
      for (ii = 0; ii < tableArray[i].length; ++ii) {
        var strLen = tableArray[i][ii].length
        if (strLen > cellSpacesCount) {
          cellSpacesCount = strLen
        }
      }
    }

    for (i = 0; i < tableArray.length; ++i) {
      for (ii = 0; ii < tableArray[i].length; ++ii) {
        if (i === 1) {
          if (tableArray[i][ii].slice(-1) === ':') {
            tableArray[i][ii] =
              showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':'
          } else {
            tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-')
          }
        } else {
          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount)
        }
      }
      txt += '| ' + tableArray[i].join(' | ') + ' |\n'
    }

    return txt.trim()
  })

  showdown.subParser('makeMarkdown.tableCell', function (node, globals) {
    'use strict'

    var txt = ''
    if (!node.hasChildNodes()) {
      return ''
    }
    var children = node.childNodes,
      childrenLength = children.length

    for (var i = 0; i < childrenLength; ++i) {
      txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true)
    }
    return txt.trim()
  })

  showdown.subParser('makeMarkdown.txt', function (node) {
    'use strict'

    var txt = node.nodeValue

    // multiple spaces are collapsed
    txt = txt.replace(/ +/g, ' ')

    // replace the custom ¨NBSP; with a space
    txt = txt.replace(/¨NBSP;/g, ' ')

    // ", <, > and & should replace escaped html entities
    txt = showdown.helper.unescapeHTMLEntities(txt)

    // escape markdown magic characters
    // emphasis, strong and strikethrough - can appear everywhere
    // we also escape pipe (|) because of tables
    // and escape ` because of code blocks and spans
    txt = txt.replace(/([*_~|`])/g, '\\$1')

    // escape > because of blockquotes
    txt = txt.replace(/^(\s*)>/g, '\\$1>')

    // hash character, only troublesome at the beginning of a line because of headers
    txt = txt.replace(/^#/gm, '\\#')

    // horizontal rules
    txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3')

    // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
    txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.')

    // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
    txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2')

    // images and links, ] followed by ( is problematic, so we escape it
    txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(')

    // reference URIs must also be escaped
    txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:')

    return txt
  })

  var root = this

  // AMD Loader
  if (typeof define === 'function' && define.amd) {
    define(function () {
      'use strict'
      return showdown
    })

    // CommonJS/nodeJS Loader
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = showdown

    // Regular Browser loader
  } else {
    root.showdown = showdown
  }
}.call(this))

//# sourceMappingURL=showdown.js.map

/**
 * @license AngularJS v1.8.2
 * (c) 2010-2020 Google LLC. http://angularjs.org
 * License: MIT
 */
;(function (window) {
  'use strict'

  /* exported
  minErrConfig,
  errorHandlingConfig,
  isValidObjectMaxDepth
*/

  var minErrConfig = {
    objectMaxDepth: 5,
    urlErrorParamsEnabled: true,
  }

  /**
   * @ngdoc function
   * @name angular.errorHandlingConfig
   * @module ng
   * @kind function
   *
   * @description
   * Configure several aspects of error handling in AngularJS if used as a setter or return the
   * current configuration if used as a getter. The following options are supported:
   *
   * - **objectMaxDepth**: The maximum depth to which objects are traversed when stringified for error messages.
   *
   * Omitted or undefined options will leave the corresponding configuration values unchanged.
   *
   * @param {Object=} config - The configuration object. May only contain the options that need to be
   *     updated. Supported keys:
   *
   * * `objectMaxDepth`  **{Number}** - The max depth for stringifying objects. Setting to a
   *   non-positive or non-numeric value, removes the max depth limit.
   *   Default: 5
   *
   * * `urlErrorParamsEnabled`  **{Boolean}** - Specifies whether the generated error url will
   *   contain the parameters of the thrown error. Disabling the parameters can be useful if the
   *   generated error url is very long.
   *
   *   Default: true. When used without argument, it returns the current value.
   */
  function errorHandlingConfig(config) {
    if (isObject(config)) {
      if (isDefined(config.objectMaxDepth)) {
        minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth)
          ? config.objectMaxDepth
          : NaN
      }
      if (isDefined(config.urlErrorParamsEnabled) && isBoolean(config.urlErrorParamsEnabled)) {
        minErrConfig.urlErrorParamsEnabled = config.urlErrorParamsEnabled
      }
    } else {
      return minErrConfig
    }
  }

  /**
   * @private
   * @param {Number} maxDepth
   * @return {boolean}
   */
  function isValidObjectMaxDepth(maxDepth) {
    return isNumber(maxDepth) && maxDepth > 0
  }

  /**
   * @description
   *
   * This object provides a utility for producing rich Error messages within
   * AngularJS. It can be called as follows:
   *
   * var exampleMinErr = minErr('example');
   * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
   *
   * The above creates an instance of minErr in the example namespace. The
   * resulting error will have a namespaced error code of example.one.  The
   * resulting error will replace {0} with the value of foo, and {1} with the
   * value of bar. The object is not restricted in the number of arguments it can
   * take.
   *
   * If fewer arguments are specified than necessary for interpolation, the extra
   * interpolation markers will be preserved in the final string.
   *
   * Since data will be parsed statically during a build step, some restrictions
   * are applied with respect to how minErr instances are created and called.
   * Instances should have names of the form namespaceMinErr for a minErr created
   * using minErr('namespace'). Error codes, namespaces and template strings
   * should all be static strings, not variables or general expressions.
   *
   * @param {string} module The namespace to use for the new minErr instance.
   * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
   *   error from returned function, for cases when a particular type of error is useful.
   * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
   */

  function minErr(module, ErrorConstructor) {
    ErrorConstructor = ErrorConstructor || Error

    var url = 'https://errors.angularjs.org/1.8.2/'
    var regex = url.replace('.', '\\.') + '[\\s\\S]*'
    var errRegExp = new RegExp(regex, 'g')

    return function () {
      var code = arguments[0],
        template = arguments[1],
        message = '[' + (module ? module + ':' : '') + code + '] ',
        templateArgs = sliceArgs(arguments, 2).map(function (arg) {
          return toDebugString(arg, minErrConfig.objectMaxDepth)
        }),
        paramPrefix,
        i

      // A minErr message has two parts: the message itself and the url that contains the
      // encoded message.
      // The message's parameters can contain other error messages which also include error urls.
      // To prevent the messages from getting too long, we strip the error urls from the parameters.

      message += template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1)

        if (index < templateArgs.length) {
          return templateArgs[index].replace(errRegExp, '')
        }

        return match
      })

      message += '\n' + url + (module ? module + '/' : '') + code

      if (minErrConfig.urlErrorParamsEnabled) {
        for (i = 0, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
          message += paramPrefix + 'p' + i + '=' + encodeURIComponent(templateArgs[i])
        }
      }

      return new ErrorConstructor(message)
    }
  }

  /* We need to tell ESLint what variables are being exported */
  /* exported
  angular,
  msie,
  jqLite,
  jQuery,
  slice,
  splice,
  push,
  toString,
  minErrConfig,
  errorHandlingConfig,
  isValidObjectMaxDepth,
  ngMinErr,
  angularModule,
  uid,
  REGEX_STRING_REGEXP,
  VALIDITY_STATE_PROPERTY,

  lowercase,
  uppercase,
  nodeName_,
  isArrayLike,
  forEach,
  forEachSorted,
  reverseParams,
  nextUid,
  setHashKey,
  extend,
  toInt,
  inherit,
  merge,
  noop,
  identity,
  valueFn,
  isUndefined,
  isDefined,
  isObject,
  isBlankObject,
  isString,
  isNumber,
  isNumberNaN,
  isDate,
  isError,
  isArray,
  isFunction,
  isRegExp,
  isWindow,
  isScope,
  isFile,
  isFormData,
  isBlob,
  isBoolean,
  isPromiseLike,
  trim,
  escapeForRegexp,
  isElement,
  makeMap,
  includes,
  arrayRemove,
  copy,
  simpleCompare,
  equals,
  csp,
  jq,
  concat,
  sliceArgs,
  bind,
  toJsonReplacer,
  toJson,
  fromJson,
  convertTimezoneToLocal,
  timezoneToOffset,
  addDateMinutes,
  startingTag,
  tryDecodeURIComponent,
  parseKeyValue,
  toKeyValue,
  encodeUriSegment,
  encodeUriQuery,
  angularInit,
  bootstrap,
  getTestability,
  snake_case,
  bindJQuery,
  assertArg,
  assertArgFn,
  assertNotHasOwnProperty,
  getter,
  getBlockNodes,
  hasOwnProperty,
  createMap,
  stringify,
  UNSAFE_restoreLegacyJqLiteXHTMLReplacement,

  NODE_TYPE_ELEMENT,
  NODE_TYPE_ATTRIBUTE,
  NODE_TYPE_TEXT,
  NODE_TYPE_COMMENT,
  NODE_TYPE_DOCUMENT,
  NODE_TYPE_DOCUMENT_FRAGMENT
*/

  ////////////////////////////////////

  /**
   * @ngdoc module
   * @name ng
   * @module ng
   * @installation
   * @description
   *
   * The ng module is loaded by default when an AngularJS application is started. The module itself
   * contains the essential components for an AngularJS application to function. The table below
   * lists a high level breakdown of each of the services/factories, filters, directives and testing
   * components available within this core module.
   *
   */

  var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/

  // The name of a form control's ValidityState property.
  // This is used so that it's possible for internal tests to create mock ValidityStates.
  var VALIDITY_STATE_PROPERTY = 'validity'

  var hasOwnProperty = Object.prototype.hasOwnProperty

  /**
   * @private
   *
   * @description Converts the specified string to lowercase.
   * @param {string} string String to be converted to lowercase.
   * @returns {string} Lowercased string.
   */
  var lowercase = function (string) {
    return isString(string) ? string.toLowerCase() : string
  }

  /**
   * @private
   *
   * @description Converts the specified string to uppercase.
   * @param {string} string String to be converted to uppercase.
   * @returns {string} Uppercased string.
   */
  var uppercase = function (string) {
    return isString(string) ? string.toUpperCase() : string
  }

  var msie, // holds major version number for IE, or NaN if UA is not IE.
    jqLite, // delay binding since jQuery could be loaded after us.
    jQuery, // delay binding
    slice = [].slice,
    splice = [].splice,
    push = [].push,
    toString = Object.prototype.toString,
    getPrototypeOf = Object.getPrototypeOf,
    ngMinErr = minErr('ng'),
    /** @name angular */
    angular = window.angular || (window.angular = {}),
    angularModule,
    uid = 0

  // Support: IE 9-11 only
  /**
   * documentMode is an IE-only property
   * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
   */
  msie = window.document.documentMode

  /**
   * @private
   * @param {*} obj
   * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
   *                   String ...)
   */
  function isArrayLike(obj) {
    // `null`, `undefined` and `window` are not array-like
    if (obj == null || isWindow(obj)) return false

    // arrays, strings and jQuery/jqLite objects are array like
    // * jqLite is either the jQuery or jqLite constructor function
    // * we have to check the existence of jqLite first as this method is called
    //   via the forEach method when constructing the jqLite object in the first place
    if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true

    // Support: iOS 8.2 (not reproducible in simulator)
    // "length" in obj used to prevent JIT error (gh-11508)
    var length = 'length' in Object(obj) && obj.length

    // NodeList objects (with `item` method) and
    // other objects with suitable length characteristics are array-like
    return (
      isNumber(length) && ((length >= 0 && length - 1 in obj) || typeof obj.item === 'function')
    )
  }

  /**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

  function forEach(obj, iterator, context) {
    var key, length
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          if (
            key !== 'prototype' &&
            key !== 'length' &&
            key !== 'name' &&
            obj.hasOwnProperty(key)
          ) {
            iterator.call(context, obj[key], key, obj)
          }
        }
      } else if (isArray(obj) || isArrayLike(obj)) {
        var isPrimitive = typeof obj !== 'object'
        for (key = 0, length = obj.length; key < length; key++) {
          if (isPrimitive || key in obj) {
            iterator.call(context, obj[key], key, obj)
          }
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj)
      } else if (isBlankObject(obj)) {
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
        for (key in obj) {
          iterator.call(context, obj[key], key, obj)
        }
      } else if (typeof obj.hasOwnProperty === 'function') {
        // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key, obj)
          }
        }
      } else {
        // Slow path for objects which do not have a method `hasOwnProperty`
        for (key in obj) {
          if (hasOwnProperty.call(obj, key)) {
            iterator.call(context, obj[key], key, obj)
          }
        }
      }
    }
    return obj
  }

  function forEachSorted(obj, iterator, context) {
    var keys = Object.keys(obj).sort()
    for (var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i])
    }
    return keys
  }

  /**
   * when using forEach the params are value, key, but it is often useful to have key, value.
   * @param {function(string, *)} iteratorFn
   * @returns {function(*, string)}
   */
  function reverseParams(iteratorFn) {
    return function (value, key) {
      iteratorFn(key, value)
    }
  }

  /**
   * A consistent way of creating unique IDs in angular.
   *
   * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
   * we hit number precision issues in JavaScript.
   *
   * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
   *
   * @returns {number} an unique alpha-numeric string
   */
  function nextUid() {
    return ++uid
  }

  /**
   * Set or clear the hashkey for an object.
   * @param obj object
   * @param h the hashkey (!truthy to delete the hashkey)
   */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h
    } else {
      delete obj.$$hashKey
    }
  }

  function baseExtend(dst, objs, deep) {
    var h = dst.$$hashKey

    for (var i = 0, ii = objs.length; i < ii; ++i) {
      var obj = objs[i]
      if (!isObject(obj) && !isFunction(obj)) continue
      var keys = Object.keys(obj)
      for (var j = 0, jj = keys.length; j < jj; j++) {
        var key = keys[j]
        var src = obj[key]

        if (deep && isObject(src)) {
          if (isDate(src)) {
            dst[key] = new Date(src.valueOf())
          } else if (isRegExp(src)) {
            dst[key] = new RegExp(src)
          } else if (src.nodeName) {
            dst[key] = src.cloneNode(true)
          } else if (isElement(src)) {
            dst[key] = src.clone()
          } else {
            if (key !== '__proto__') {
              if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {}
              baseExtend(dst[key], [src], true)
            }
          }
        } else {
          dst[key] = src
        }
      }
    }

    setHashKey(dst, h)
    return dst
  }

  /**
   * @ngdoc function
   * @name angular.extend
   * @module ng
   * @kind function
   *
   * @description
   * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
   * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
   * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
   *
   * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
   * {@link angular.merge} for this.
   *
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
  function extend(dst) {
    return baseExtend(dst, slice.call(arguments, 1), false)
  }

  /**
   * @ngdoc function
   * @name angular.merge
   * @module ng
   * @kind function
   *
   * @description
   * Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
   * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
   * by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
   *
   * Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
   * objects, performing a deep copy.
   *
   * @deprecated
   * sinceVersion="1.6.5"
   * This function is deprecated, but will not be removed in the 1.x lifecycle.
   * There are edge cases (see {@link angular.merge#known-issues known issues}) that are not
   * supported by this function. We suggest using another, similar library for all-purpose merging,
   * such as [lodash's merge()](https://lodash.com/docs/4.17.4#merge).
   *
   * @knownIssue
   * This is a list of (known) object types that are not handled correctly by this function:
   * - [`Blob`](https://developer.mozilla.org/docs/Web/API/Blob)
   * - [`MediaStream`](https://developer.mozilla.org/docs/Web/API/MediaStream)
   * - [`CanvasGradient`](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
   * - AngularJS {@link $rootScope.Scope scopes};
   *
   * `angular.merge` also does not support merging objects with circular references.
   *
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
  function merge(dst) {
    return baseExtend(dst, slice.call(arguments, 1), true)
  }

  function toInt(str) {
    return parseInt(str, 10)
  }

  var isNumberNaN =
    Number.isNaN ||
    function isNumberNaN(num) {
      // eslint-disable-next-line no-self-compare
      return num !== num
    }

  function inherit(parent, extra) {
    return extend(Object.create(parent), extra)
  }

  /**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
  function noop() {}
  noop.$inject = []

  /**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
   function transformer(transformationFn, value) {
     return (transformationFn || angular.identity)(value);
   };

   // E.g.
   function getResult(fn, input) {
     return (fn || angular.identity)(input);
   };

   getResult(function(n) { return n * 2; }, 21);   // returns 42
   getResult(null, 21);                            // returns 21
   getResult(undefined, 21);                       // returns 21
   ```
 *
 * @param {*} value to be returned.
 * @returns {*} the value passed in.
 */
  function identity($) {
    return $
  }
  identity.$inject = []

  function valueFn(value) {
    return function valueRef() {
      return value
    }
  }

  function hasCustomToString(obj) {
    return isFunction(obj.toString) && obj.toString !== toString
  }

  /**
   * @ngdoc function
   * @name angular.isUndefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is undefined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is undefined.
   */
  function isUndefined(value) {
    return typeof value === 'undefined'
  }

  /**
   * @ngdoc function
   * @name angular.isDefined
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is defined.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is defined.
   */
  function isDefined(value) {
    return typeof value !== 'undefined'
  }

  /**
   * @ngdoc function
   * @name angular.isObject
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
   * considered to be objects. Note that JavaScript arrays are objects.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Object` but not `null`.
   */
  function isObject(value) {
    // http://jsperf.com/isobject4
    return value !== null && typeof value === 'object'
  }

  /**
   * Determine if a value is an object with a null prototype
   *
   * @returns {boolean} True if `value` is an `Object` with a null prototype
   */
  function isBlankObject(value) {
    return value !== null && typeof value === 'object' && !getPrototypeOf(value)
  }

  /**
   * @ngdoc function
   * @name angular.isString
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `String`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `String`.
   */
  function isString(value) {
    return typeof value === 'string'
  }

  /**
   * @ngdoc function
   * @name angular.isNumber
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Number`.
   *
   * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
   *
   * If you wish to exclude these then you can use the native
   * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
   * method.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Number`.
   */
  function isNumber(value) {
    return typeof value === 'number'
  }

  /**
   * @ngdoc function
   * @name angular.isDate
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a value is a date.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Date`.
   */
  function isDate(value) {
    return toString.call(value) === '[object Date]'
  }

  /**
   * @ngdoc function
   * @name angular.isArray
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is an `Array`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Array`.
   */
  function isArray(arr) {
    return Array.isArray(arr) || arr instanceof Array
  }

  /**
   * @description
   * Determines if a reference is an `Error`.
   * Loosely based on https://www.npmjs.com/package/iserror
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is an `Error`.
   */
  function isError(value) {
    var tag = toString.call(value)
    switch (tag) {
      case '[object Error]':
        return true
      case '[object Exception]':
        return true
      case '[object DOMException]':
        return true
      default:
        return value instanceof Error
    }
  }

  /**
   * @ngdoc function
   * @name angular.isFunction
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a `Function`.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `Function`.
   */
  function isFunction(value) {
    return typeof value === 'function'
  }

  /**
   * Determines if a value is a regular expression object.
   *
   * @private
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a `RegExp`.
   */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]'
  }

  /**
   * Checks if `obj` is a window object.
   *
   * @private
   * @param {*} obj Object to check
   * @returns {boolean} True if `obj` is a window obj.
   */
  function isWindow(obj) {
    return obj && obj.window === obj
  }

  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch
  }

  function isFile(obj) {
    return toString.call(obj) === '[object File]'
  }

  function isFormData(obj) {
    return toString.call(obj) === '[object FormData]'
  }

  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]'
  }

  function isBoolean(value) {
    return typeof value === 'boolean'
  }

  function isPromiseLike(obj) {
    return obj && isFunction(obj.then)
  }

  var TYPED_ARRAY_REGEXP =
    /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/
  function isTypedArray(value) {
    return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value))
  }

  function isArrayBuffer(obj) {
    return toString.call(obj) === '[object ArrayBuffer]'
  }

  var trim = function (value) {
    return isString(value) ? value.trim() : value
  }

  // Copied from:
  // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
  // Prereq: s is a string.
  var escapeForRegexp = function (s) {
    return (
      s
        .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
        // eslint-disable-next-line no-control-regex
        .replace(/\x08/g, '\\x08')
    )
  }

  /**
   * @ngdoc function
   * @name angular.isElement
   * @module ng
   * @kind function
   *
   * @description
   * Determines if a reference is a DOM element (or wrapped jQuery element).
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
   */
  function isElement(node) {
    return !!(
      node &&
      (node.nodeName || // We are a direct element.
        (node.prop && node.attr && node.find))
    ) // We have an on and find method part of jQuery API.
  }

  /**
   * @param str 'key1,key2,...'
   * @returns {object} in the form of {key1:true, key2:true, ...}
   */
  function makeMap(str) {
    var obj = {},
      items = str.split(','),
      i
    for (i = 0; i < items.length; i++) {
      obj[items[i]] = true
    }
    return obj
  }

  function nodeName_(element) {
    return lowercase(element.nodeName || (element[0] && element[0].nodeName))
  }

  function includes(array, obj) {
    return Array.prototype.indexOf.call(array, obj) !== -1
  }

  function arrayRemove(array, value) {
    var index = array.indexOf(value)
    if (index >= 0) {
      array.splice(index, 1)
    }
    return index
  }

  /**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array. This functions is used
 * internally, mostly in the change-detection code. It is not intended as an all-purpose copy
 * function, and has several limitations (see below).
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to `destination` an exception will be thrown.
 *
 * <br />
 *
 * <div class="alert alert-warning">
 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
 *   and on `destination`) will be ignored.
 * </div>
 *
 * <div class="alert alert-warning">
 *   `angular.copy` does not check if destination and source are of the same type. It's the
 *   developer's responsibility to make sure they are compatible.
 * </div>
 *
 * @knownIssue
 * This is a non-exhaustive list of object types / features that are not handled correctly by
 * `angular.copy`. Note that since this functions is used by the change detection code, this
 * means binding or watching objects of these types (or that include these types) might not work
 * correctly.
 * - [`File`](https://developer.mozilla.org/docs/Web/API/File)
 * - [`Map`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map)
 * - [`ImageData`](https://developer.mozilla.org/docs/Web/API/ImageData)
 * - [`MediaStream`](https://developer.mozilla.org/docs/Web/API/MediaStream)
 * - [`Set`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set)
 * - [`WeakMap`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)
 * - [`getter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)/
 *   [`setter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)
 *
 * @param {*} source The source that will be used to make a copy. Can be any type, including
 *     primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If provided,
 *     must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
  <example module="copyExample" name="angular-copy">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate class="simple-form">
          <label>Name: <input type="text" ng-model="user.name" /></label><br />
          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
          <button ng-click="reset()">RESET</button>
          <button ng-click="update(user)">SAVE</button>
        </form>
        <pre>form = {{user | json}}</pre>
        <pre>leader = {{leader | json}}</pre>
      </div>
    </file>
    <file name="script.js">
      // Module: copyExample
      angular.
        module('copyExample', []).
        controller('ExampleController', ['$scope', function($scope) {
          $scope.leader = {};

          $scope.reset = function() {
            // Example with 1 argument
            $scope.user = angular.copy($scope.leader);
          };

          $scope.update = function(user) {
            // Example with 2 arguments
            angular.copy(user, $scope.leader);
          };

          $scope.reset();
        }]);
    </file>
  </example>
 */
  function copy(source, destination, maxDepth) {
    var stackSource = []
    var stackDest = []
    maxDepth = isValidObjectMaxDepth(maxDepth) ? maxDepth : NaN

    if (destination) {
      if (isTypedArray(destination) || isArrayBuffer(destination)) {
        throw ngMinErr('cpta', "Can't copy! TypedArray destination cannot be mutated.")
      }
      if (source === destination) {
        throw ngMinErr('cpi', "Can't copy! Source and destination are identical.")
      }

      // Empty the destination object
      if (isArray(destination)) {
        destination.length = 0
      } else {
        forEach(destination, function (value, key) {
          if (key !== '$$hashKey') {
            delete destination[key]
          }
        })
      }

      stackSource.push(source)
      stackDest.push(destination)
      return copyRecurse(source, destination, maxDepth)
    }

    return copyElement(source, maxDepth)

    function copyRecurse(source, destination, maxDepth) {
      maxDepth--
      if (maxDepth < 0) {
        return '...'
      }
      var h = destination.$$hashKey
      var key
      if (isArray(source)) {
        for (var i = 0, ii = source.length; i < ii; i++) {
          destination.push(copyElement(source[i], maxDepth))
        }
      } else if (isBlankObject(source)) {
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
        for (key in source) {
          destination[key] = copyElement(source[key], maxDepth)
        }
      } else if (source && typeof source.hasOwnProperty === 'function') {
        // Slow path, which must rely on hasOwnProperty
        for (key in source) {
          if (source.hasOwnProperty(key)) {
            destination[key] = copyElement(source[key], maxDepth)
          }
        }
      } else {
        // Slowest path --- hasOwnProperty can't be called as a method
        for (key in source) {
          if (hasOwnProperty.call(source, key)) {
            destination[key] = copyElement(source[key], maxDepth)
          }
        }
      }
      setHashKey(destination, h)
      return destination
    }

    function copyElement(source, maxDepth) {
      // Simple values
      if (!isObject(source)) {
        return source
      }

      // Already copied values
      var index = stackSource.indexOf(source)
      if (index !== -1) {
        return stackDest[index]
      }

      if (isWindow(source) || isScope(source)) {
        throw ngMinErr(
          'cpws',
          "Can't copy! Making copies of Window or Scope instances is not supported."
        )
      }

      var needsRecurse = false
      var destination = copyType(source)

      if (destination === undefined) {
        destination = isArray(source) ? [] : Object.create(getPrototypeOf(source))
        needsRecurse = true
      }

      stackSource.push(source)
      stackDest.push(destination)

      return needsRecurse ? copyRecurse(source, destination, maxDepth) : destination
    }

    function copyType(source) {
      switch (toString.call(source)) {
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object Int32Array]':
        case '[object Float32Array]':
        case '[object Float64Array]':
        case '[object Uint8Array]':
        case '[object Uint8ClampedArray]':
        case '[object Uint16Array]':
        case '[object Uint32Array]':
          return new source.constructor(
            copyElement(source.buffer),
            source.byteOffset,
            source.length
          )

        case '[object ArrayBuffer]':
          // Support: IE10
          if (!source.slice) {
            // If we're in this case we know the environment supports ArrayBuffer
            /* eslint-disable no-undef */
            var copied = new ArrayBuffer(source.byteLength)
            new Uint8Array(copied).set(new Uint8Array(source))
            /* eslint-enable */
            return copied
          }
          return source.slice(0)

        case '[object Boolean]':
        case '[object Number]':
        case '[object String]':
        case '[object Date]':
          return new source.constructor(source.valueOf())

        case '[object RegExp]':
          var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0])
          re.lastIndex = source.lastIndex
          return re

        case '[object Blob]':
          return new source.constructor([source], { type: source.type })
      }

      if (isFunction(source.cloneNode)) {
        return source.cloneNode(true)
      }
    }
  }

  // eslint-disable-next-line no-self-compare
  function simpleCompare(a, b) {
    return a === b || (a !== a && b !== b)
  }

  /**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 *
 * @example
   <example module="equalsExample" name="equalsExample">
     <file name="index.html">
      <div ng-controller="ExampleController">
        <form novalidate>
          <h3>User 1</h3>
          Name: <input type="text" ng-model="user1.name">
          Age: <input type="number" ng-model="user1.age">

          <h3>User 2</h3>
          Name: <input type="text" ng-model="user2.name">
          Age: <input type="number" ng-model="user2.age">

          <div>
            <br/>
            <input type="button" value="Compare" ng-click="compare()">
          </div>
          User 1: <pre>{{user1 | json}}</pre>
          User 2: <pre>{{user2 | json}}</pre>
          Equal: <pre>{{result}}</pre>
        </form>
      </div>
    </file>
    <file name="script.js">
        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
          $scope.user1 = {};
          $scope.user2 = {};
          $scope.compare = function() {
            $scope.result = angular.equals($scope.user1, $scope.user2);
          };
        }]);
    </file>
  </example>
 */
  function equals(o1, o2) {
    if (o1 === o2) return true
    if (o1 === null || o2 === null) return false
    // eslint-disable-next-line no-self-compare
    if (o1 !== o1 && o2 !== o2) return true // NaN === NaN
    var t1 = typeof o1,
      t2 = typeof o2,
      length,
      key,
      keySet
    if (t1 === t2 && t1 === 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false
        if ((length = o1.length) === o2.length) {
          for (key = 0; key < length; key++) {
            if (!equals(o1[key], o2[key])) return false
          }
          return true
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false
        return simpleCompare(o1.getTime(), o2.getTime())
      } else if (isRegExp(o1)) {
        if (!isRegExp(o2)) return false
        return o1.toString() === o2.toString()
      } else {
        if (
          isScope(o1) ||
          isScope(o2) ||
          isWindow(o1) ||
          isWindow(o2) ||
          isArray(o2) ||
          isDate(o2) ||
          isRegExp(o2)
        )
          return false
        keySet = createMap()
        for (key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue
          if (!equals(o1[key], o2[key])) return false
          keySet[key] = true
        }
        for (key in o2) {
          if (
            !(key in keySet) &&
            key.charAt(0) !== '$' &&
            isDefined(o2[key]) &&
            !isFunction(o2[key])
          )
            return false
        }
        return true
      }
    }
    return false
  }

  var csp = function () {
    if (!isDefined(csp.rules)) {
      var ngCspElement =
        window.document.querySelector('[ng-csp]') || window.document.querySelector('[data-ng-csp]')

      if (ngCspElement) {
        var ngCspAttribute =
          ngCspElement.getAttribute('ng-csp') || ngCspElement.getAttribute('data-ng-csp')
        csp.rules = {
          noUnsafeEval: !ngCspAttribute || ngCspAttribute.indexOf('no-unsafe-eval') !== -1,
          noInlineStyle: !ngCspAttribute || ngCspAttribute.indexOf('no-inline-style') !== -1,
        }
      } else {
        csp.rules = {
          noUnsafeEval: noUnsafeEval(),
          noInlineStyle: false,
        }
      }
    }

    return csp.rules

    function noUnsafeEval() {
      try {
        // eslint-disable-next-line no-new, no-new-func
        new Function('')
        return false
      } catch (e) {
        return true
      }
    }
  }

  /**
 * @ngdoc directive
 * @module ng
 * @name ngJq
 *
 * @element ANY
 * @param {string=} ngJq the name of the library available under `window`
 * to be used for angular.element
 * @description
 * Use this directive to force the angular.element library.  This should be
 * used to force either jqLite by leaving ng-jq blank or setting the name of
 * the jquery variable under window (eg. jQuery).
 *
 * Since AngularJS looks for this directive when it is loaded (doesn't wait for the
 * DOMContentLoaded event), it must be placed on an element that comes before the script
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
 * others ignored.
 *
 * @example
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
 ```html
 <!doctype html>
 <html ng-app ng-jq>
 ...
 ...
 </html>
 ```
 * @example
 * This example shows how to use a jQuery based library of a different name.
 * The library name must be available at the top most 'window'.
 ```html
 <!doctype html>
 <html ng-app ng-jq="jQueryLib">
 ...
 ...
 </html>
 ```
 */
  var jq = function () {
    if (isDefined(jq.name_)) return jq.name_
    var el
    var i,
      ii = ngAttrPrefixes.length,
      prefix,
      name
    for (i = 0; i < ii; ++i) {
      prefix = ngAttrPrefixes[i]
      el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')
      if (el) {
        name = el.getAttribute(prefix + 'jq')
        break
      }
    }

    return (jq.name_ = name)
  }

  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index))
  }

  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0)
  }

  /**
   * @ngdoc function
   * @name angular.bind
   * @module ng
   * @kind function
   *
   * @description
   * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
   * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
   * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
   * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
   *
   * @param {Object} self Context which `fn` should be evaluated in.
   * @param {function()} fn Function to be bound.
   * @param {...*} args Optional arguments to be prebound to the `fn` function call.
   * @returns {function()} Function that wraps the `fn` with all the specified bindings.
   */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : []
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length
        ? function () {
            return arguments.length
              ? fn.apply(self, concat(curryArgs, arguments, 0))
              : fn.apply(self, curryArgs)
          }
        : function () {
            return arguments.length ? fn.apply(self, arguments) : fn.call(self)
          }
    } else {
      // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
      return fn
    }
  }

  function toJsonReplacer(key, value) {
    var val = value

    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
      val = undefined
    } else if (isWindow(value)) {
      val = '$WINDOW'
    } else if (value && window.document === value) {
      val = '$DOCUMENT'
    } else if (isScope(value)) {
      val = '$SCOPE'
    }

    return val
  }

  /**
   * @ngdoc function
   * @name angular.toJson
   * @module ng
   * @kind function
   *
   * @description
   * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
   * stripped since AngularJS uses this notation internally.
   *
   * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
   * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
   *    If set to an integer, the JSON output will contain that many spaces per indentation.
   * @returns {string|undefined} JSON-ified string representing `obj`.
   * @knownIssue
   *
   * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
   * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
   * `Date.prototype.toJSON` method as follows:
   *
   * ```
   * var _DatetoJSON = Date.prototype.toJSON;
   * Date.prototype.toJSON = function() {
   *   try {
   *     return _DatetoJSON.call(this);
   *   } catch(e) {
   *     if (e instanceof RangeError) {
   *       return null;
   *     }
   *     throw e;
   *   }
   * };
   * ```
   *
   * See https://github.com/angular/angular.js/pull/14221 for more information.
   */
  function toJson(obj, pretty) {
    if (isUndefined(obj)) return undefined
    if (!isNumber(pretty)) {
      pretty = pretty ? 2 : null
    }
    return JSON.stringify(obj, toJsonReplacer, pretty)
  }

  /**
   * @ngdoc function
   * @name angular.fromJson
   * @module ng
   * @kind function
   *
   * @description
   * Deserializes a JSON string.
   *
   * @param {string} json JSON string to deserialize.
   * @returns {Object|Array|string|number} Deserialized JSON string.
   */
  function fromJson(json) {
    return isString(json) ? JSON.parse(json) : json
  }

  var ALL_COLONS = /:/g
  function timezoneToOffset(timezone, fallback) {
    // Support: IE 9-11 only, Edge 13-15+
    // IE/Edge do not "understand" colon (`:`) in timezone
    timezone = timezone.replace(ALL_COLONS, '')
    var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000
    return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset
  }

  function addDateMinutes(date, minutes) {
    date = new Date(date.getTime())
    date.setMinutes(date.getMinutes() + minutes)
    return date
  }

  function convertTimezoneToLocal(date, timezone, reverse) {
    reverse = reverse ? -1 : 1
    var dateTimezoneOffset = date.getTimezoneOffset()
    var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset)
    return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset))
  }

  /**
   * @returns {string} Returns the string representation of the element.
   */
  function startingTag(element) {
    element = jqLite(element).clone().empty()
    var elemHtml = jqLite('<div></div>').append(element).html()
    try {
      return element[0].nodeType === NODE_TYPE_TEXT
        ? lowercase(elemHtml)
        : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/, function (match, nodeName) {
            return '<' + lowercase(nodeName)
          })
    } catch (e) {
      return lowercase(elemHtml)
    }
  }

  /////////////////////////////////////////////////

  /**
   * Tries to decode the URI component without throwing an exception.
   *
   * @private
   * @param str value potential URI component to check.
   * @returns {boolean} True if `value` can be decoded
   * with the decodeURIComponent function.
   */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value)
    } catch (e) {
      // Ignore any invalid uri component.
    }
  }

  /**
   * Parses an escaped url query string into key-value pairs.
   * @returns {Object.<string,boolean|Array>}
   */
  function parseKeyValue(/**string*/ keyValue) {
    var obj = {}
    forEach((keyValue || '').split('&'), function (keyValue) {
      var splitPoint, key, val
      if (keyValue) {
        key = keyValue = keyValue.replace(/\+/g, '%20')
        splitPoint = keyValue.indexOf('=')
        if (splitPoint !== -1) {
          key = keyValue.substring(0, splitPoint)
          val = keyValue.substring(splitPoint + 1)
        }
        key = tryDecodeURIComponent(key)
        if (isDefined(key)) {
          val = isDefined(val) ? tryDecodeURIComponent(val) : true
          if (!hasOwnProperty.call(obj, key)) {
            obj[key] = val
          } else if (isArray(obj[key])) {
            obj[key].push(val)
          } else {
            obj[key] = [obj[key], val]
          }
        }
      }
    })
    return obj
  }

  function toKeyValue(obj) {
    var parts = []
    forEach(obj, function (value, key) {
      if (isArray(value)) {
        forEach(value, function (arrayValue) {
          parts.push(
            encodeUriQuery(key, true) +
              (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true))
          )
        })
      } else {
        parts.push(
          encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true))
        )
      }
    })
    return parts.length ? parts.join('&') : ''
  }

  /**
   * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
   * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
   * segments:
   *    segment       = *pchar
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true)
      .replace(/%26/gi, '&')
      .replace(/%3D/gi, '=')
      .replace(/%2B/gi, '+')
  }

  /**
   * This method is intended for encoding *key* or *value* parts of query component. We need a custom
   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
   * encoded per http://tools.ietf.org/html/rfc3986:
   *    query         = *( pchar / "/" / "?" )
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   *    pct-encoded   = "%" HEXDIG HEXDIG
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
   *                     / "*" / "+" / "," / ";" / "="
   */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val)
      .replace(/%40/gi, '@')
      .replace(/%3A/gi, ':')
      .replace(/%24/g, '$')
      .replace(/%2C/gi, ',')
      .replace(/%3B/gi, ';')
      .replace(/%20/g, pctEncodeSpaces ? '%20' : '+')
  }

  var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-']

  function getNgAttribute(element, ngAttr) {
    var attr,
      i,
      ii = ngAttrPrefixes.length
    for (i = 0; i < ii; ++i) {
      attr = ngAttrPrefixes[i] + ngAttr
      if (isString((attr = element.getAttribute(attr)))) {
        return attr
      }
    }
    return null
  }

  function allowAutoBootstrap(document) {
    var script = document.currentScript

    if (!script) {
      // Support: IE 9-11 only
      // IE does not have `document.currentScript`
      return true
    }

    // If the `currentScript` property has been clobbered just return false, since this indicates a probable attack
    if (
      !(script instanceof window.HTMLScriptElement || script instanceof window.SVGScriptElement)
    ) {
      return false
    }

    var attributes = script.attributes
    var srcs = [
      attributes.getNamedItem('src'),
      attributes.getNamedItem('href'),
      attributes.getNamedItem('xlink:href'),
    ]

    return srcs.every(function (src) {
      if (!src) {
        return true
      }
      if (!src.value) {
        return false
      }

      var link = document.createElement('a')
      link.href = src.value

      if (document.location.origin === link.origin) {
        // Same-origin resources are always allowed, even for banned URL schemes.
        return true
      }
      // Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
      // This is to prevent angular.js bundled with browser extensions from being used to bypass the
      // content security policy in web pages and other browser extensions.
      switch (link.protocol) {
        case 'http:':
        case 'https:':
        case 'ftp:':
        case 'blob:':
        case 'file:':
        case 'data:':
          return true
        default:
          return false
      }
    })
  }

  // Cached as it has to run during loading so that document.currentScript is available.
  var isAutoBootstrapAllowed = allowAutoBootstrap(window.document)

  /**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * There are a few things to keep in mind when using `ngApp`:
 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 *   found in the document will be used to define the root element to auto-bootstrap as an
 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
 *   {@link angular.bootstrap} instead.
 * - AngularJS applications cannot be nested within each other.
 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
 *   {@link ngRoute.ngView `ngView`}.
 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
 *   causing animations to stop working and making the injector inaccessible from outside the app.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * @example
 *
 * ### Simple Usage
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo" name="ng-app">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * @example
 *
 * ### With `ngStrictDi`
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true" name="strict-di">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = 'World';
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
  function angularInit(element, bootstrap) {
    var appElement,
      module,
      config = {}

    // The element `element` has priority over any other element.
    forEach(ngAttrPrefixes, function (prefix) {
      var name = prefix + 'app'

      if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
        appElement = element
        module = element.getAttribute(name)
      }
    })
    forEach(ngAttrPrefixes, function (prefix) {
      var name = prefix + 'app'
      var candidate

      if (
        !appElement &&
        (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))
      ) {
        appElement = candidate
        module = candidate.getAttribute(name)
      }
    })
    if (appElement) {
      if (!isAutoBootstrapAllowed) {
        window.console.error(
          'AngularJS: disabling automatic bootstrap. <script> protocol indicates ' +
            'an extension, document.location.href does not match.'
        )
        return
      }
      config.strictDi = getNgAttribute(appElement, 'strict-di') !== null
      bootstrap(appElement, module ? [module] : [], config)
    }
  }

  /**
   * @ngdoc function
   * @name angular.bootstrap
   * @module ng
   * @description
   * Use this function to manually start up AngularJS application.
   *
   * For more information, see the {@link guide/bootstrap Bootstrap guide}.
   *
   * AngularJS will detect if it has been loaded into the browser more than once and only allow the
   * first loaded script to be bootstrapped and will report a warning to the browser console for
   * each of the subsequent scripts. This prevents strange results in applications, where otherwise
   * multiple instances of AngularJS try to work on the DOM.
   *
   * <div class="alert alert-warning">
   * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
   * They must use {@link ng.directive:ngApp ngApp}.
   * </div>
   *
   * <div class="alert alert-warning">
   * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
   * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
   * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
   * causing animations to stop working and making the injector inaccessible from outside the app.
   * </div>
   *
   * ```html
   * <!doctype html>
   * <html>
   * <body>
   * <div ng-controller="WelcomeController">
   *   {{greeting}}
   * </div>
   *
   * <script src="angular.js"></script>
   * <script>
   *   var app = angular.module('demo', [])
   *   .controller('WelcomeController', function($scope) {
   *       $scope.greeting = 'Welcome!';
   *   });
   *   angular.bootstrap(document, ['demo']);
   * </script>
   * </body>
   * </html>
   * ```
   *
   * @param {DOMElement} element DOM element which is the root of AngularJS application.
   * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
   *     Each item in the array should be the name of a predefined module or a (DI annotated)
   *     function that will be invoked by the injector as a `config` block.
   *     See: {@link angular.module modules}
   * @param {Object=} config an object for defining configuration options for the application. The
   *     following keys are supported:
   *
   * * `strictDi` - disable automatic function annotation for the application. This is meant to
   *   assist in finding bugs which break minified code. Defaults to `false`.
   *
   * @returns {auto.$injector} Returns the newly created injector for this app.
   */
  function bootstrap(element, modules, config) {
    if (!isObject(config)) config = {}
    var defaultConfig = {
      strictDi: false,
    }
    config = extend(defaultConfig, config)
    var doBootstrap = function () {
      element = jqLite(element)

      if (element.injector()) {
        var tag = element[0] === window.document ? 'document' : startingTag(element)
        // Encode angle brackets to prevent input from being sanitized to empty string #8683.
        throw ngMinErr(
          'btstrpd',
          "App already bootstrapped with this element '{0}'",
          tag.replace(/</, '&lt;').replace(/>/, '&gt;')
        )
      }

      modules = modules || []
      modules.unshift([
        '$provide',
        function ($provide) {
          $provide.value('$rootElement', element)
        },
      ])

      if (config.debugInfoEnabled) {
        // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
        modules.push([
          '$compileProvider',
          function ($compileProvider) {
            $compileProvider.debugInfoEnabled(true)
          },
        ])
      }

      modules.unshift('ng')
      var injector = createInjector(modules, config.strictDi)
      injector.invoke([
        '$rootScope',
        '$rootElement',
        '$compile',
        '$injector',
        function bootstrapApply(scope, element, compile, injector) {
          scope.$apply(function () {
            element.data('$injector', injector)
            compile(element)(scope)
          })
        },
      ])
      return injector
    }

    var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/

    if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
      config.debugInfoEnabled = true
      window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '')
    }

    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap()
    }

    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '')
    angular.resumeBootstrap = function (extraModules) {
      forEach(extraModules, function (module) {
        modules.push(module)
      })
      return doBootstrap()
    }

    if (isFunction(angular.resumeDeferredBootstrap)) {
      angular.resumeDeferredBootstrap()
    }
  }

  /**
   * @ngdoc function
   * @name angular.reloadWithDebugInfo
   * @module ng
   * @description
   * Use this function to reload the current application with debug information turned on.
   * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
   *
   * See {@link ng.$compileProvider#debugInfoEnabled} for more.
   */
  function reloadWithDebugInfo() {
    window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name
    window.location.reload()
  }

  /**
   * @name angular.getTestability
   * @module ng
   * @description
   * Get the testability service for the instance of AngularJS on the given
   * element.
   * @param {DOMElement} element DOM element which is the root of AngularJS application.
   */
  function getTestability(rootElement) {
    var injector = angular.element(rootElement).injector()
    if (!injector) {
      throw ngMinErr('test', 'no injector found for element argument to getTestability')
    }
    return injector.get('$$testability')
  }

  var SNAKE_CASE_REGEXP = /[A-Z]/g
  function snake_case(name, separator) {
    separator = separator || '_'
    return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase()
    })
  }

  var bindJQueryFired = false
  function bindJQuery() {
    var originalCleanData

    if (bindJQueryFired) {
      return
    }

    // bind to jQuery if present;
    var jqName = jq()
    jQuery = isUndefined(jqName)
      ? window.jQuery // use jQuery (if present)
      : !jqName
      ? undefined // use jqLite
      : window[jqName] // use jQuery specified by `ngJq`

    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // AngularJS 1.2+ requires jQuery 1.7+ for on()/off() support.
    // AngularJS 1.3+ technically requires at least jQuery 2.1+ but it may work with older
    // versions. It will not work for sure with jQuery <1.7, though.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: /** @type {?} */ (JQLitePrototype).controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData,
      })
    } else {
      jqLite = JQLite
    }

    // All nodes removed from the DOM via various jqLite/jQuery APIs like .remove()
    // are passed through jqLite/jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jqLite.cleanData
    jqLite.cleanData = function (elems) {
      var events
      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
        events = (jqLite._data(elem) || {}).events
        if (events && events.$destroy) {
          jqLite(elem).triggerHandler('$destroy')
        }
      }
      originalCleanData(elems)
    }

    angular.element = jqLite

    // Prevent double-proxying.
    bindJQueryFired = true
  }

  /**
 * @ngdoc function
 * @name angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement
 * @module ng
 * @kind function
 *
 * @description
 * Restores the pre-1.8 behavior of jqLite that turns XHTML-like strings like
 * `<div /><span />` to `<div></div><span></span>` instead of `<div><span></span></div>`.
 * The new behavior is a security fix. Thus, if you need to call this function, please try to adjust
 * your code for this change and remove your use of this function as soon as possible.

 * Note that this only patches jqLite. If you use jQuery 3.5.0 or newer, please read the
 * [jQuery 3.5 upgrade guide](https://jquery.com/upgrade-guide/3.5/) for more details
 * about the workarounds.
 */
  function UNSAFE_restoreLegacyJqLiteXHTMLReplacement() {
    JQLite.legacyXHTMLReplacement = true
  }

  /**
   * throw error if the argument is falsy.
   */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', "Argument '{0}' is {1}", name || '?', reason || 'required')
    }
    return arg
  }

  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1]
    }

    assertArg(
      isFunction(arg),
      name,
      'not a function, got ' +
        (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg)
    )
    return arg
  }

  /**
   * throw error if the name given is hasOwnProperty
   * @param  {String} name    the name to test
   * @param  {String} context the context in which the name is used, such as module or directive
   */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context)
    }
  }

  /**
   * Return the value accessible from the object by path. Any undefined traversals are ignored
   * @param {Object} obj starting object
   * @param {String} path path to traverse
   * @param {boolean} [bindFnToScope=true]
   * @returns {Object} value as accessible by path
   */
  //TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path) return obj
    var keys = path.split('.')
    var key
    var lastInstance = obj
    var len = keys.length

    for (var i = 0; i < len; i++) {
      key = keys[i]
      if (obj) {
        obj = (lastInstance = obj)[key]
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj)
    }
    return obj
  }

  /**
   * Return the DOM siblings between the first and last node in the given array.
   * @param {Array} array like object
   * @returns {Array} the inputted object or a jqLite collection containing the nodes
   */
  function getBlockNodes(nodes) {
    // TODO(perf): update `nodes` instead of creating a new object?
    var node = nodes[0]
    var endNode = nodes[nodes.length - 1]
    var blockNodes

    for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
      if (blockNodes || nodes[i] !== node) {
        if (!blockNodes) {
          blockNodes = jqLite(slice.call(nodes, 0, i))
        }
        blockNodes.push(node)
      }
    }

    return blockNodes || nodes
  }

  /**
   * Creates a new object without a prototype. This object is useful for lookup without having to
   * guard against prototypically inherited properties via hasOwnProperty.
   *
   * Related micro-benchmarks:
   * - http://jsperf.com/object-create2
   * - http://jsperf.com/proto-map-lookup/2
   * - http://jsperf.com/for-in-vs-object-keys2
   *
   * @returns {Object}
   */
  function createMap() {
    return Object.create(null)
  }

  function stringify(value) {
    if (value == null) {
      // null || undefined
      return ''
    }
    switch (typeof value) {
      case 'string':
        break
      case 'number':
        value = '' + value
        break
      default:
        if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
          value = value.toString()
        } else {
          value = toJson(value)
        }
    }

    return value
  }

  var NODE_TYPE_ELEMENT = 1
  var NODE_TYPE_ATTRIBUTE = 2
  var NODE_TYPE_TEXT = 3
  var NODE_TYPE_COMMENT = 8
  var NODE_TYPE_DOCUMENT = 9
  var NODE_TYPE_DOCUMENT_FRAGMENT = 11

  /**
   * @ngdoc type
   * @name angular.Module
   * @module ng
   * @description
   *
   * Interface for configuring AngularJS {@link angular.module modules}.
   */

  function setupModuleLoader(window) {
    var $injectorMinErr = minErr('$injector')
    var ngMinErr = minErr('ng')

    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory())
    }

    var angular = ensure(window, 'angular', Object)

    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr

    return ensure(angular, 'module', function () {
      /** @type {Object.<string, angular.Module>} */
      var modules = {}

      /**
       * @ngdoc function
       * @name angular.module
       * @module ng
       * @description
       *
       * The `angular.module` is a global place for creating, registering and retrieving AngularJS
       * modules.
       * All modules (AngularJS core or 3rd party) that should be available to an application must be
       * registered using this mechanism.
       *
       * Passing one argument retrieves an existing {@link angular.Module},
       * whereas passing more than one argument creates a new {@link angular.Module}
       *
       *
       * # Module
       *
       * A module is a collection of services, directives, controllers, filters, and configuration information.
       * `angular.module` is used to configure the {@link auto.$injector $injector}.
       *
       * ```js
       * // Create a new module
       * var myModule = angular.module('myModule', []);
       *
       * // register a new service
       * myModule.value('appName', 'MyCoolApp');
       *
       * // configure existing services inside initialization blocks.
       * myModule.config(['$locationProvider', function($locationProvider) {
       *   // Configure existing providers
       *   $locationProvider.hashPrefix('!');
       * }]);
       * ```
       *
       * Then you can create an injector and load your modules like this:
       *
       * ```js
       * var injector = angular.injector(['ng', 'myModule'])
       * ```
       *
       * However it's more likely that you'll just use
       * {@link ng.directive:ngApp ngApp} or
       * {@link angular.bootstrap} to simplify this process for you.
       *
       * @param {!string} name The name of the module to create or retrieve.
       * @param {!Array.<string>=} requires If specified then new module is being created. If
       *        unspecified then the module is being retrieved for further configuration.
       * @param {Function=} configFn Optional configuration function for the module. Same as
       *        {@link angular.Module#config Module#config()}.
       * @returns {angular.Module} new module with the {@link angular.Module} api.
       */
      return function module(name, requires, configFn) {
        var info = {}

        var assertNotHasOwnProperty = function (name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context)
          }
        }

        assertNotHasOwnProperty(name, 'module')
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null
        }
        return ensure(modules, name, function () {
          if (!requires) {
            throw $injectorMinErr(
              'nomod',
              "Module '{0}' is not available! You either misspelled " +
                'the module name or forgot to load it. If registering a module ensure that you ' +
                'specify the dependencies as the second argument.',
              name
            )
          }

          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = []

          /** @type {!Array.<Function>} */
          var configBlocks = []

          /** @type {!Array.<Function>} */
          var runBlocks = []

          var config = invokeLater('$injector', 'invoke', 'push', configBlocks)

          /** @type {angular.Module} */
          var moduleInstance = {
            // Private state
            _invokeQueue: invokeQueue,
            _configBlocks: configBlocks,
            _runBlocks: runBlocks,

            /**
             * @ngdoc method
             * @name angular.Module#info
             * @module ng
             *
             * @param {Object=} info Information about the module
             * @returns {Object|Module} The current info object for this module if called as a getter,
             *                          or `this` if called as a setter.
             *
             * @description
             * Read and write custom information about this module.
             * For example you could put the version of the module in here.
             *
             * ```js
             * angular.module('myModule', []).info({ version: '1.0.0' });
             * ```
             *
             * The version could then be read back out by accessing the module elsewhere:
             *
             * ```
             * var version = angular.module('myModule').info().version;
             * ```
             *
             * You can also retrieve this information during runtime via the
             * {@link $injector#modules `$injector.modules`} property:
             *
             * ```js
             * var version = $injector.modules['myModule'].info().version;
             * ```
             */
            info: function (value) {
              if (isDefined(value)) {
                if (!isObject(value))
                  throw ngMinErr('aobj', "Argument '{0}' must be an object", 'value')
                info = value
                return this
              }
              return info
            },

            /**
             * @ngdoc property
             * @name angular.Module#requires
             * @module ng
             *
             * @description
             * Holds the list of modules which the injector will load before the current module is
             * loaded.
             */
            requires: requires,

            /**
             * @ngdoc property
             * @name angular.Module#name
             * @module ng
             *
             * @description
             * Name of the module.
             */
            name: name,

            /**
             * @ngdoc method
             * @name angular.Module#provider
             * @module ng
             * @param {string} name service name
             * @param {Function} providerType Construction function for creating new instance of the
             *                                service.
             * @description
             * See {@link auto.$provide#provider $provide.provider()}.
             */
            provider: invokeLaterAndSetModuleName('$provide', 'provider'),

            /**
             * @ngdoc method
             * @name angular.Module#factory
             * @module ng
             * @param {string} name service name
             * @param {Function} providerFunction Function for creating new instance of the service.
             * @description
             * See {@link auto.$provide#factory $provide.factory()}.
             */
            factory: invokeLaterAndSetModuleName('$provide', 'factory'),

            /**
             * @ngdoc method
             * @name angular.Module#service
             * @module ng
             * @param {string} name service name
             * @param {Function} constructor A constructor function that will be instantiated.
             * @description
             * See {@link auto.$provide#service $provide.service()}.
             */
            service: invokeLaterAndSetModuleName('$provide', 'service'),

            /**
             * @ngdoc method
             * @name angular.Module#value
             * @module ng
             * @param {string} name service name
             * @param {*} object Service instance object.
             * @description
             * See {@link auto.$provide#value $provide.value()}.
             */
            value: invokeLater('$provide', 'value'),

            /**
             * @ngdoc method
             * @name angular.Module#constant
             * @module ng
             * @param {string} name constant name
             * @param {*} object Constant value.
             * @description
             * Because the constants are fixed, they get applied before other provide methods.
             * See {@link auto.$provide#constant $provide.constant()}.
             */
            constant: invokeLater('$provide', 'constant', 'unshift'),

            /**
             * @ngdoc method
             * @name angular.Module#decorator
             * @module ng
             * @param {string} name The name of the service to decorate.
             * @param {Function} decorFn This function will be invoked when the service needs to be
             *                           instantiated and should return the decorated service instance.
             * @description
             * See {@link auto.$provide#decorator $provide.decorator()}.
             */
            decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),

            /**
             * @ngdoc method
             * @name angular.Module#animation
             * @module ng
             * @param {string} name animation name
             * @param {Function} animationFactory Factory function for creating new instance of an
             *                                    animation.
             * @description
             *
             * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
             *
             *
             * Defines an animation hook that can be later used with
             * {@link $animate $animate} service and directives that use this service.
             *
             * ```js
             * module.animation('.animation-name', function($inject1, $inject2) {
             *   return {
             *     eventName : function(element, done) {
             *       //code to run the animation
             *       //once complete, then run done()
             *       return function cancellationFunction(element) {
             *         //code to cancel the animation
             *       }
             *     }
             *   }
             * })
             * ```
             *
             * See {@link ng.$animateProvider#register $animateProvider.register()} and
             * {@link ngAnimate ngAnimate module} for more information.
             */
            animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#filter
             * @module ng
             * @param {string} name Filter name - this must be a valid AngularJS expression identifier
             * @param {Function} filterFactory Factory function for creating new instance of filter.
             * @description
             * See {@link ng.$filterProvider#register $filterProvider.register()}.
             *
             * <div class="alert alert-warning">
             * **Note:** Filter names must be valid AngularJS {@link expression} identifiers, such as `uppercase` or `orderBy`.
             * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
             * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
             * (`myapp_subsection_filterx`).
             * </div>
             */
            filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#controller
             * @module ng
             * @param {string|Object} name Controller name, or an object map of controllers where the
             *    keys are the names and the values are the constructors.
             * @param {Function} constructor Controller constructor function.
             * @description
             * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
             */
            controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),

            /**
             * @ngdoc method
             * @name angular.Module#directive
             * @module ng
             * @param {string|Object} name Directive name, or an object map of directives where the
             *    keys are the names and the values are the factories.
             * @param {Function} directiveFactory Factory function for creating new instance of
             * directives.
             * @description
             * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
             */
            directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),

            /**
             * @ngdoc method
             * @name angular.Module#component
             * @module ng
             * @param {string|Object} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`),
             *    or an object map of components where the keys are the names and the values are the component definition objects.
             * @param {Object} options Component definition object (a simplified
             *    {@link ng.$compile#directive-definition-object directive definition object})
             *
             * @description
             * See {@link ng.$compileProvider#component $compileProvider.component()}.
             */
            component: invokeLaterAndSetModuleName('$compileProvider', 'component'),

            /**
             * @ngdoc method
             * @name angular.Module#config
             * @module ng
             * @param {Function} configFn Execute this function on module load. Useful for service
             *    configuration.
             * @description
             * Use this method to configure services by injecting their
             * {@link angular.Module#provider `providers`}, e.g. for adding routes to the
             * {@link ngRoute.$routeProvider $routeProvider}.
             *
             * Note that you can only inject {@link angular.Module#provider `providers`} and
             * {@link angular.Module#constant `constants`} into this function.
             *
             * For more about how to configure services, see
             * {@link providers#provider-recipe Provider Recipe}.
             */
            config: config,

            /**
             * @ngdoc method
             * @name angular.Module#run
             * @module ng
             * @param {Function} initializationFn Execute this function after injector creation.
             *    Useful for application initialization.
             * @description
             * Use this method to register work which should be performed when the injector is done
             * loading all modules.
             */
            run: function (block) {
              runBlocks.push(block)
              return this
            },
          }

          if (configFn) {
            config(configFn)
          }

          return moduleInstance

          /**
           * @param {string} provider
           * @param {string} method
           * @param {String=} insertMethod
           * @returns {angular.Module}
           */
          function invokeLater(provider, method, insertMethod, queue) {
            if (!queue) queue = invokeQueue
            return function () {
              queue[insertMethod || 'push']([provider, method, arguments])
              return moduleInstance
            }
          }

          /**
           * @param {string} provider
           * @param {string} method
           * @returns {angular.Module}
           */
          function invokeLaterAndSetModuleName(provider, method, queue) {
            if (!queue) queue = invokeQueue
            return function (recipeName, factoryFunction) {
              if (factoryFunction && isFunction(factoryFunction))
                factoryFunction.$$moduleName = name
              queue.push([provider, method, arguments])
              return moduleInstance
            }
          }
        })
      }
    })
  }

  /* global shallowCopy: true */

  /**
   * Creates a shallow copy of an object, an array or a primitive.
   *
   * Assumes that there are no proto properties for objects.
   */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || []

      for (var i = 0, ii = src.length; i < ii; i++) {
        dst[i] = src[i]
      }
    } else if (isObject(src)) {
      dst = dst || {}

      for (var key in src) {
        if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key]
        }
      }
    }

    return dst || src
  }

  /* exported toDebugString */

  function serializeObject(obj, maxDepth) {
    var seen = []

    // There is no direct way to stringify object until reaching a specific depth
    // and a very deep object can cause a performance issue, so we copy the object
    // based on this specific depth and then stringify it.
    if (isValidObjectMaxDepth(maxDepth)) {
      // This file is also included in `angular-loader`, so `copy()` might not always be available in
      // the closure. Therefore, it is lazily retrieved as `angular.copy()` when needed.
      obj = angular.copy(obj, null, maxDepth)
    }
    return JSON.stringify(obj, function (key, val) {
      val = toJsonReplacer(key, val)
      if (isObject(val)) {
        if (seen.indexOf(val) >= 0) return '...'

        seen.push(val)
      }
      return val
    })
  }

  function toDebugString(obj, maxDepth) {
    if (typeof obj === 'function') {
      return obj.toString().replace(/ \{[\s\S]*$/, '')
    } else if (isUndefined(obj)) {
      return 'undefined'
    } else if (typeof obj !== 'string') {
      return serializeObject(obj, maxDepth)
    }
    return obj
  }

  /* global angularModule: true,
  version: true,

  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  hiddenInputBrowserCacheDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRefDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $CoreAnimateCssProvider,
  $$CoreAnimateJsProvider,
  $$CoreAnimateQueueProvider,
  $$AnimateRunnerFactoryProvider,
  $$AnimateAsyncRunFactoryProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DateProvider,
  $DocumentProvider,
  $$IsDocumentHiddenProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $$ForceReflowProvider,
  $InterpolateProvider,
  $$IntervalFactoryProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpParamSerializerProvider,
  $HttpParamSerializerJQLikeProvider,
  $HttpBackendProvider,
  $xhrFactoryProvider,
  $jsonpCallbacksProvider,
  $LocationProvider,
  $LogProvider,
  $$MapProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $$TaskTrackerFactoryProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $WindowProvider,
  $$jqLiteProvider,
  $$CookieReaderProvider
*/

  /**
   * @ngdoc object
   * @name angular.version
   * @module ng
   * @description
   * An object that contains information about the current AngularJS version.
   *
   * This object has the following properties:
   *
   * - `full` – `{string}` – Full version string, such as "0.9.18".
   * - `major` – `{number}` – Major version number, such as "0".
   * - `minor` – `{number}` – Minor version number, such as "9".
   * - `dot` – `{number}` – Dot version number, such as "18".
   * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
   */
  var version = {
    // These placeholder strings will be replaced by grunt's `build` task.
    // They need to be double- or single-quoted.
    full: '1.8.2',
    major: 1,
    minor: 8,
    dot: 2,
    codeName: 'meteoric-mining',
  }

  function publishExternalAPI(angular) {
    extend(angular, {
      errorHandlingConfig: errorHandlingConfig,
      bootstrap: bootstrap,
      copy: copy,
      extend: extend,
      merge: merge,
      equals: equals,
      element: jqLite,
      forEach: forEach,
      injector: createInjector,
      noop: noop,
      bind: bind,
      toJson: toJson,
      fromJson: fromJson,
      identity: identity,
      isUndefined: isUndefined,
      isDefined: isDefined,
      isString: isString,
      isFunction: isFunction,
      isObject: isObject,
      isNumber: isNumber,
      isElement: isElement,
      isArray: isArray,
      version: version,
      isDate: isDate,
      callbacks: { $$counter: 0 },
      getTestability: getTestability,
      reloadWithDebugInfo: reloadWithDebugInfo,
      UNSAFE_restoreLegacyJqLiteXHTMLReplacement: UNSAFE_restoreLegacyJqLiteXHTMLReplacement,
      $$minErr: minErr,
      $$csp: csp,
      $$encodeUriSegment: encodeUriSegment,
      $$encodeUriQuery: encodeUriQuery,
      $$lowercase: lowercase,
      $$stringify: stringify,
      $$uppercase: uppercase,
    })

    angularModule = setupModuleLoader(window)

    angularModule(
      'ng',
      ['ngLocale'],
      [
        '$provide',
        function ngModule($provide) {
          // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
          $provide.provider({
            $$sanitizeUri: $$SanitizeUriProvider,
          })
          $provide
            .provider('$compile', $CompileProvider)
            .directive({
              a: htmlAnchorDirective,
              input: inputDirective,
              textarea: inputDirective,
              form: formDirective,
              script: scriptDirective,
              select: selectDirective,
              option: optionDirective,
              ngBind: ngBindDirective,
              ngBindHtml: ngBindHtmlDirective,
              ngBindTemplate: ngBindTemplateDirective,
              ngClass: ngClassDirective,
              ngClassEven: ngClassEvenDirective,
              ngClassOdd: ngClassOddDirective,
              ngCloak: ngCloakDirective,
              ngController: ngControllerDirective,
              ngForm: ngFormDirective,
              ngHide: ngHideDirective,
              ngIf: ngIfDirective,
              ngInclude: ngIncludeDirective,
              ngInit: ngInitDirective,
              ngNonBindable: ngNonBindableDirective,
              ngPluralize: ngPluralizeDirective,
              ngRef: ngRefDirective,
              ngRepeat: ngRepeatDirective,
              ngShow: ngShowDirective,
              ngStyle: ngStyleDirective,
              ngSwitch: ngSwitchDirective,
              ngSwitchWhen: ngSwitchWhenDirective,
              ngSwitchDefault: ngSwitchDefaultDirective,
              ngOptions: ngOptionsDirective,
              ngTransclude: ngTranscludeDirective,
              ngModel: ngModelDirective,
              ngList: ngListDirective,
              ngChange: ngChangeDirective,
              pattern: patternDirective,
              ngPattern: patternDirective,
              required: requiredDirective,
              ngRequired: requiredDirective,
              minlength: minlengthDirective,
              ngMinlength: minlengthDirective,
              maxlength: maxlengthDirective,
              ngMaxlength: maxlengthDirective,
              ngValue: ngValueDirective,
              ngModelOptions: ngModelOptionsDirective,
            })
            .directive({
              ngInclude: ngIncludeFillContentDirective,
              input: hiddenInputBrowserCacheDirective,
            })
            .directive(ngAttributeAliasDirectives)
            .directive(ngEventDirectives)
          $provide.provider({
            $anchorScroll: $AnchorScrollProvider,
            $animate: $AnimateProvider,
            $animateCss: $CoreAnimateCssProvider,
            $$animateJs: $$CoreAnimateJsProvider,
            $$animateQueue: $$CoreAnimateQueueProvider,
            $$AnimateRunner: $$AnimateRunnerFactoryProvider,
            $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
            $browser: $BrowserProvider,
            $cacheFactory: $CacheFactoryProvider,
            $controller: $ControllerProvider,
            $document: $DocumentProvider,
            $$isDocumentHidden: $$IsDocumentHiddenProvider,
            $exceptionHandler: $ExceptionHandlerProvider,
            $filter: $FilterProvider,
            $$forceReflow: $$ForceReflowProvider,
            $interpolate: $InterpolateProvider,
            $interval: $IntervalProvider,
            $$intervalFactory: $$IntervalFactoryProvider,
            $http: $HttpProvider,
            $httpParamSerializer: $HttpParamSerializerProvider,
            $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
            $httpBackend: $HttpBackendProvider,
            $xhrFactory: $xhrFactoryProvider,
            $jsonpCallbacks: $jsonpCallbacksProvider,
            $location: $LocationProvider,
            $log: $LogProvider,
            $parse: $ParseProvider,
            $rootScope: $RootScopeProvider,
            $q: $QProvider,
            $$q: $$QProvider,
            $sce: $SceProvider,
            $sceDelegate: $SceDelegateProvider,
            $sniffer: $SnifferProvider,
            $$taskTrackerFactory: $$TaskTrackerFactoryProvider,
            $templateCache: $TemplateCacheProvider,
            $templateRequest: $TemplateRequestProvider,
            $$testability: $$TestabilityProvider,
            $timeout: $TimeoutProvider,
            $window: $WindowProvider,
            $$rAF: $$RAFProvider,
            $$jqLite: $$jqLiteProvider,
            $$Map: $$MapProvider,
            $$cookieReader: $$CookieReaderProvider,
          })
        },
      ]
    ).info({ angularVersion: '1.8.2' })
  }

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /* global
  JQLitePrototype: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true
*/

  //////////////////////////////////
  //JQLite
  //////////////////////////////////

  /**
   * @ngdoc function
   * @name angular.element
   * @module ng
   * @kind function
   *
   * @description
   * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
   *
   * If jQuery is available, `angular.element` is an alias for the
   * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
   * delegates to AngularJS's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
   *
   * jqLite is a tiny, API-compatible subset of jQuery that allows
   * AngularJS to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
   * commonly needed functionality with the goal of having a very small footprint.
   *
   * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
   * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
   * specific version of jQuery if multiple versions exist on the page.
   *
   * <div class="alert alert-info">**Note:** All element references in AngularJS are always wrapped with jQuery or
   * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
   *
   * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
   * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
   * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
   *
   * ## AngularJS's jqLite
   * jqLite provides only the following jQuery methods:
   *
   * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
   * - [`after()`](http://api.jquery.com/after/)
   * - [`append()`](http://api.jquery.com/append/) - Contrary to jQuery, this doesn't clone elements
   *   so will not work correctly when invoked on a jqLite object containing more than one DOM node
   * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
   * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
   * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
   * - [`clone()`](http://api.jquery.com/clone/)
   * - [`contents()`](http://api.jquery.com/contents/)
   * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
   *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
   * - [`data()`](http://api.jquery.com/data/)
   * - [`detach()`](http://api.jquery.com/detach/)
   * - [`empty()`](http://api.jquery.com/empty/)
   * - [`eq()`](http://api.jquery.com/eq/)
   * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
   * - [`hasClass()`](http://api.jquery.com/hasClass/)
   * - [`html()`](http://api.jquery.com/html/)
   * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
   * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
   * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
   * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
   * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
   * - [`prepend()`](http://api.jquery.com/prepend/)
   * - [`prop()`](http://api.jquery.com/prop/)
   * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
   * - [`remove()`](http://api.jquery.com/remove/)
   * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
   * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
   * - [`removeData()`](http://api.jquery.com/removeData/)
   * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
   * - [`text()`](http://api.jquery.com/text/)
   * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
   * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
   * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
   * - [`val()`](http://api.jquery.com/val/)
   * - [`wrap()`](http://api.jquery.com/wrap/)
   *
   * jqLite also provides a method restoring pre-1.8 insecure treatment of XHTML-like tags.
   * This legacy behavior turns input like `<div /><span />` to `<div></div><span></span>`
   * instead of `<div><span></span></div>` like version 1.8 & newer do. To restore it, invoke:
   * ```js
   * angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement();
   * ```
   * Note that this only patches jqLite. If you use jQuery 3.5.0 or newer, please read the
   * [jQuery 3.5 upgrade guide](https://jquery.com/upgrade-guide/3.5/) for more details
   * about the workarounds.
   *
   * ## jQuery/jqLite Extras
   * AngularJS also provides the following additional methods and events to both jQuery and jqLite:
   *
   * ### Events
   * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
   *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
   *    element before it is removed.
   *
   * ### Methods
   * - `controller(name)` - retrieves the controller of the current element or its parent. By default
   *   retrieves controller associated with the `ngController` directive. If `name` is provided as
   *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
   *   `'ngModel'`).
   * - `injector()` - retrieves the injector of the current element or its parent.
   * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
   *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
   *   be enabled.
   * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
   *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
   *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
   *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
   * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
   *   parent element is reached.
   *
   * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
   * https://github.com/angular/angular.js/issues/14251 for more information.
   *
   * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
   * @returns {Object} jQuery object.
   */

  JQLite.expando = 'ng339'

  var jqCache = (JQLite.cache = {}),
    jqId = 1

  /*
   * !!! This is an undocumented "private" function !!!
   */
  JQLite._data = function (node) {
    //jQuery always returns an object on cache miss
    return this.cache[node[this.expando]] || {}
  }

  function jqNextId() {
    return ++jqId
  }

  var DASH_LOWERCASE_REGEXP = /-([a-z])/g
  var MS_HACK_REGEXP = /^-ms-/
  var MOUSE_EVENT_MAP = { mouseleave: 'mouseout', mouseenter: 'mouseover' }
  var jqLiteMinErr = minErr('jqLite')

  /**
   * Converts kebab-case to camelCase.
   * There is also a special case for the ms prefix starting with a lowercase letter.
   * @param name Name to normalize
   */
  function cssKebabToCamel(name) {
    return kebabToCamel(name.replace(MS_HACK_REGEXP, 'ms-'))
  }

  function fnCamelCaseReplace(all, letter) {
    return letter.toUpperCase()
  }

  /**
   * Converts kebab-case to camelCase.
   * @param name Name to normalize
   */
  function kebabToCamel(name) {
    return name.replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace)
  }

  var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/
  var HTML_REGEXP = /<|&#?\w+;/
  var TAG_NAME_REGEXP = /<([\w:-]+)/
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi

  // Table parts need to be wrapped with `<table>` or they're
  // stripped to their contents when put in a div.
  // XHTML parsers do not magically insert elements in the
  // same way that tag soup parsers do, so we cannot shorten
  // this by omitting <tbody> or other required elements.
  var wrapMap = {
    thead: ['table'],
    col: ['colgroup', 'table'],
    tr: ['tbody', 'table'],
    td: ['tr', 'tbody', 'table'],
  }

  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead
  wrapMap.th = wrapMap.td

  // Support: IE <10 only
  // IE 9 requires an option wrapper & it needs to have the whole table structure
  // set up in advance; assigning `"<td></td>"` to `tr.innerHTML` doesn't work, etc.
  var wrapMapIE9 = {
    option: [1, '<select multiple="multiple">', '</select>'],
    _default: [0, '', ''],
  }

  for (var key in wrapMap) {
    var wrapMapValueClosing = wrapMap[key]
    var wrapMapValue = wrapMapValueClosing.slice().reverse()
    wrapMapIE9[key] = [
      wrapMapValue.length,
      '<' + wrapMapValue.join('><') + '>',
      '</' + wrapMapValueClosing.join('></') + '>',
    ]
  }

  wrapMapIE9.optgroup = wrapMapIE9.option

  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html)
  }

  function jqLiteAcceptsData(node) {
    // The window object can accept data but has no nodeType
    // Otherwise we are only interested in elements (1) and documents (9)
    var nodeType = node.nodeType
    return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT
  }

  function jqLiteHasData(node) {
    for (var key in jqCache[node.ng339]) {
      return true
    }
    return false
  }

  function jqLiteBuildFragment(html, context) {
    var tmp,
      tag,
      wrap,
      finalHtml,
      fragment = context.createDocumentFragment(),
      nodes = [],
      i

    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html))
    } else {
      // Convert html into DOM nodes
      tmp = fragment.appendChild(context.createElement('div'))
      tag = (TAG_NAME_REGEXP.exec(html) || ['', ''])[1].toLowerCase()
      finalHtml = JQLite.legacyXHTMLReplacement ? html.replace(XHTML_TAG_REGEXP, '<$1></$2>') : html

      if (msie < 10) {
        wrap = wrapMapIE9[tag] || wrapMapIE9._default
        tmp.innerHTML = wrap[1] + finalHtml + wrap[2]

        // Descend through wrappers to the right content
        i = wrap[0]
        while (i--) {
          tmp = tmp.firstChild
        }
      } else {
        wrap = wrapMap[tag] || []

        // Create wrappers & descend into them
        i = wrap.length
        while (--i > -1) {
          tmp.appendChild(window.document.createElement(wrap[i]))
          tmp = tmp.firstChild
        }

        tmp.innerHTML = finalHtml
      }

      nodes = concat(nodes, tmp.childNodes)

      tmp = fragment.firstChild
      tmp.textContent = ''
    }

    // Remove wrapper from fragment
    fragment.textContent = ''
    fragment.innerHTML = '' // Clear inner HTML
    forEach(nodes, function (node) {
      fragment.appendChild(node)
    })

    return fragment
  }

  function jqLiteParseHTML(html, context) {
    context = context || window.document
    var parsed

    if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
      return [context.createElement(parsed[1])]
    }

    if ((parsed = jqLiteBuildFragment(html, context))) {
      return parsed.childNodes
    }

    return []
  }

  function jqLiteWrapNode(node, wrapper) {
    var parent = node.parentNode

    if (parent) {
      parent.replaceChild(wrapper, node)
    }

    wrapper.appendChild(node)
  }

  // IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
  var jqLiteContains =
    window.Node.prototype.contains ||
    /** @this */ function (arg) {
      // eslint-disable-next-line no-bitwise
      return !!(this.compareDocumentPosition(arg) & 16)
    }

  /////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element
    }

    var argIsString

    if (isString(element)) {
      element = trim(element)
      argIsString = true
    }
    if (!(this instanceof JQLite)) {
      if (argIsString && element.charAt(0) !== '<') {
        throw jqLiteMinErr(
          'nosel',
          'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element'
        )
      }
      return new JQLite(element)
    }

    if (argIsString) {
      jqLiteAddNodes(this, jqLiteParseHTML(element))
    } else if (isFunction(element)) {
      jqLiteReady(element)
    } else {
      jqLiteAddNodes(this, element)
    }
  }

  function jqLiteClone(element) {
    return element.cloneNode(true)
  }

  function jqLiteDealoc(element, onlyDescendants) {
    if (!onlyDescendants && jqLiteAcceptsData(element)) jqLite.cleanData([element])

    if (element.querySelectorAll) {
      jqLite.cleanData(element.querySelectorAll('*'))
    }
  }

  function isEmptyObject(obj) {
    var name

    for (name in obj) {
      return false
    }
    return true
  }

  function removeIfEmptyData(element) {
    var expandoId = element.ng339
    var expandoStore = expandoId && jqCache[expandoId]

    var events = expandoStore && expandoStore.events
    var data = expandoStore && expandoStore.data

    if ((!data || isEmptyObject(data)) && (!events || isEmptyObject(events))) {
      delete jqCache[expandoId]
      element.ng339 = undefined // don't delete DOM expandos. IE and Chrome don't like it
    }
  }

  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported))
      throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument')

    var expandoStore = jqLiteExpandoStore(element)
    var events = expandoStore && expandoStore.events
    var handle = expandoStore && expandoStore.handle

    if (!handle) return //no listeners registered

    if (!type) {
      for (type in events) {
        if (type !== '$destroy') {
          element.removeEventListener(type, handle)
        }
        delete events[type]
      }
    } else {
      var removeHandler = function (type) {
        var listenerFns = events[type]
        if (isDefined(fn)) {
          arrayRemove(listenerFns || [], fn)
        }
        if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
          element.removeEventListener(type, handle)
          delete events[type]
        }
      }

      forEach(type.split(' '), function (type) {
        removeHandler(type)
        if (MOUSE_EVENT_MAP[type]) {
          removeHandler(MOUSE_EVENT_MAP[type])
        }
      })
    }

    removeIfEmptyData(element)
  }

  function jqLiteRemoveData(element, name) {
    var expandoId = element.ng339
    var expandoStore = expandoId && jqCache[expandoId]

    if (expandoStore) {
      if (name) {
        delete expandoStore.data[name]
      } else {
        expandoStore.data = {}
      }

      removeIfEmptyData(element)
    }
  }

  function jqLiteExpandoStore(element, createIfNecessary) {
    var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId]

    if (createIfNecessary && !expandoStore) {
      element.ng339 = expandoId = jqNextId()
      expandoStore = jqCache[expandoId] = { events: {}, data: {}, handle: undefined }
    }

    return expandoStore
  }

  function jqLiteData(element, key, value) {
    if (jqLiteAcceptsData(element)) {
      var prop

      var isSimpleSetter = isDefined(value)
      var isSimpleGetter = !isSimpleSetter && key && !isObject(key)
      var massGetter = !key
      var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter)
      var data = expandoStore && expandoStore.data

      if (isSimpleSetter) {
        // data('key', value)
        data[kebabToCamel(key)] = value
      } else {
        if (massGetter) {
          // data()
          return data
        } else {
          if (isSimpleGetter) {
            // data('key')
            // don't force creation of expandoStore if it doesn't exist yet
            return data && data[kebabToCamel(key)]
          } else {
            // mass-setter: data({key1: val1, key2: val2})
            for (prop in key) {
              data[kebabToCamel(prop)] = key[prop]
            }
          }
        }
      }
    }
  }

  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute) return false
    return (
      (' ' + (element.getAttribute('class') || '') + ' ')
        .replace(/[\n\t]/g, ' ')
        .indexOf(' ' + selector + ' ') > -1
    )
  }

  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(
        /[\n\t]/g,
        ' '
      )
      var newClasses = existingClasses

      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass)
        newClasses = newClasses.replace(' ' + cssClass + ' ', ' ')
      })

      if (newClasses !== existingClasses) {
        element.setAttribute('class', trim(newClasses))
      }
    }
  }

  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(
        /[\n\t]/g,
        ' '
      )
      var newClasses = existingClasses

      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass)
        if (newClasses.indexOf(' ' + cssClass + ' ') === -1) {
          newClasses += cssClass + ' '
        }
      })

      if (newClasses !== existingClasses) {
        element.setAttribute('class', trim(newClasses))
      }
    }
  }

  function jqLiteAddNodes(root, elements) {
    // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

    if (elements) {
      // if a Node (the most common case)
      if (elements.nodeType) {
        root[root.length++] = elements
      } else {
        var length = elements.length

        // if an Array or NodeList and not a Window
        if (typeof length === 'number' && elements.window !== elements) {
          if (length) {
            for (var i = 0; i < length; i++) {
              root[root.length++] = elements[i]
            }
          }
        } else {
          root[root.length++] = elements
        }
      }
    }
  }

  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller')
  }

  function jqLiteInheritedData(element, name, value) {
    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if (element.nodeType === NODE_TYPE_DOCUMENT) {
      element = element.documentElement
    }
    var names = isArray(name) ? name : [name]

    while (element) {
      for (var i = 0, ii = names.length; i < ii; i++) {
        if (isDefined((value = jqLite.data(element, names[i])))) return value
      }

      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element =
        element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host)
    }
  }

  function jqLiteEmpty(element) {
    jqLiteDealoc(element, true)
    while (element.firstChild) {
      element.removeChild(element.firstChild)
    }
  }

  function jqLiteRemove(element, keepData) {
    if (!keepData) jqLiteDealoc(element)
    var parent = element.parentNode
    if (parent) parent.removeChild(element)
  }

  function jqLiteDocumentLoaded(action, win) {
    win = win || window
    if (win.document.readyState === 'complete') {
      // Force the action to be run async for consistent behavior
      // from the action's point of view
      // i.e. it will definitely not be in a $apply
      win.setTimeout(action)
    } else {
      // No need to unbind this handler as load is only ever called once
      jqLite(win).on('load', action)
    }
  }

  function jqLiteReady(fn) {
    function trigger() {
      window.document.removeEventListener('DOMContentLoaded', trigger)
      window.removeEventListener('load', trigger)
      fn()
    }

    // check if document is already loaded
    if (window.document.readyState === 'complete') {
      window.setTimeout(fn)
    } else {
      // We can not use jqLite since we are not done loading and jQuery could be loaded later.

      // Works for modern browsers and IE9
      window.document.addEventListener('DOMContentLoaded', trigger)

      // Fallback to window.onload for others
      window.addEventListener('load', trigger)
    }
  }

  //////////////////////////////////////////
  // Functions which are declared directly.
  //////////////////////////////////////////
  var JQLitePrototype = (JQLite.prototype = {
    ready: jqLiteReady,
    toString: function () {
      var value = []
      forEach(this, function (e) {
        value.push('' + e)
      })
      return '[' + value.join(', ') + ']'
    },

    eq: function (index) {
      return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index])
    },

    length: 0,
    push: push,
    sort: [].sort,
    splice: [].splice,
  })

  //////////////////////////////////////////
  // Functions iterating getter/setters.
  // these functions return self on setter and
  // value on get.
  //////////////////////////////////////////
  var BOOLEAN_ATTR = {}
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
    BOOLEAN_ATTR[lowercase(value)] = value
  })
  var BOOLEAN_ELEMENTS = {}
  forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
    BOOLEAN_ELEMENTS[value] = true
  })
  var ALIASED_ATTR = {
    ngMinlength: 'minlength',
    ngMaxlength: 'maxlength',
    ngMin: 'min',
    ngMax: 'max',
    ngPattern: 'pattern',
    ngStep: 'step',
  }

  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()]

    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr
  }

  function getAliasedAttrName(name) {
    return ALIASED_ATTR[name]
  }

  forEach(
    {
      data: jqLiteData,
      removeData: jqLiteRemoveData,
      hasData: jqLiteHasData,
      cleanData: function jqLiteCleanData(nodes) {
        for (var i = 0, ii = nodes.length; i < ii; i++) {
          jqLiteRemoveData(nodes[i])
          jqLiteOff(nodes[i])
        }
      },
    },
    function (fn, name) {
      JQLite[name] = fn
    }
  )

  forEach(
    {
      data: jqLiteData,
      inheritedData: jqLiteInheritedData,

      scope: function (element) {
        // Can't use jqLiteData here directly so we stay compatible with jQuery!
        return (
          jqLite.data(element, '$scope') ||
          jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope'])
        )
      },

      isolateScope: function (element) {
        // Can't use jqLiteData here directly so we stay compatible with jQuery!
        return (
          jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate')
        )
      },

      controller: jqLiteController,

      injector: function (element) {
        return jqLiteInheritedData(element, '$injector')
      },

      removeAttr: function (element, name) {
        element.removeAttribute(name)
      },

      hasClass: jqLiteHasClass,

      css: function (element, name, value) {
        name = cssKebabToCamel(name)

        if (isDefined(value)) {
          element.style[name] = value
        } else {
          return element.style[name]
        }
      },

      attr: function (element, name, value) {
        var ret
        var nodeType = element.nodeType
        if (
          nodeType === NODE_TYPE_TEXT ||
          nodeType === NODE_TYPE_ATTRIBUTE ||
          nodeType === NODE_TYPE_COMMENT ||
          !element.getAttribute
        ) {
          return
        }

        var lowercasedName = lowercase(name)
        var isBooleanAttr = BOOLEAN_ATTR[lowercasedName]

        if (isDefined(value)) {
          // setter

          if (value === null || (value === false && isBooleanAttr)) {
            element.removeAttribute(name)
          } else {
            element.setAttribute(name, isBooleanAttr ? lowercasedName : value)
          }
        } else {
          // getter

          ret = element.getAttribute(name)

          if (isBooleanAttr && ret !== null) {
            ret = lowercasedName
          }
          // Normalize non-existing attributes to undefined (as jQuery).
          return ret === null ? undefined : ret
        }
      },

      prop: function (element, name, value) {
        if (isDefined(value)) {
          element[name] = value
        } else {
          return element[name]
        }
      },

      text: (function () {
        getText.$dv = ''
        return getText

        function getText(element, value) {
          if (isUndefined(value)) {
            var nodeType = element.nodeType
            return nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT
              ? element.textContent
              : ''
          }
          element.textContent = value
        }
      })(),

      val: function (element, value) {
        if (isUndefined(value)) {
          if (element.multiple && nodeName_(element) === 'select') {
            var result = []
            forEach(element.options, function (option) {
              if (option.selected) {
                result.push(option.value || option.text)
              }
            })
            return result
          }
          return element.value
        }
        element.value = value
      },

      html: function (element, value) {
        if (isUndefined(value)) {
          return element.innerHTML
        }
        jqLiteDealoc(element, true)
        element.innerHTML = value
      },

      empty: jqLiteEmpty,
    },
    function (fn, name) {
      /**
       * Properties: writes return selection, reads return first value
       */
      JQLite.prototype[name] = function (arg1, arg2) {
        var i, key
        var nodeCount = this.length

        // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
        // in a way that survives minification.
        // jqLiteEmpty takes no arguments but is a setter.
        if (
          fn !== jqLiteEmpty &&
          isUndefined(
            fn.length === 2 && fn !== jqLiteHasClass && fn !== jqLiteController ? arg1 : arg2
          )
        ) {
          if (isObject(arg1)) {
            // we are a write, but the object properties are the key/values
            for (i = 0; i < nodeCount; i++) {
              if (fn === jqLiteData) {
                // data() takes the whole object in jQuery
                fn(this[i], arg1)
              } else {
                for (key in arg1) {
                  fn(this[i], key, arg1[key])
                }
              }
            }
            // return self for chaining
            return this
          } else {
            // we are a read, so read the first child.
            // TODO: do we still need this?
            var value = fn.$dv
            // Only if we have $dv do we iterate over all, otherwise it is just the first element.
            var jj = isUndefined(value) ? Math.min(nodeCount, 1) : nodeCount
            for (var j = 0; j < jj; j++) {
              var nodeValue = fn(this[j], arg1, arg2)
              value = value ? value + nodeValue : nodeValue
            }
            return value
          }
        } else {
          // we are a write, so apply to all children
          for (i = 0; i < nodeCount; i++) {
            fn(this[i], arg1, arg2)
          }
          // return self for chaining
          return this
        }
      }
    }
  )

  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      // jQuery specific api
      event.isDefaultPrevented = function () {
        return event.defaultPrevented
      }

      var eventFns = events[type || event.type]
      var eventFnsLength = eventFns ? eventFns.length : 0

      if (!eventFnsLength) return

      if (isUndefined(event.immediatePropagationStopped)) {
        var originalStopImmediatePropagation = event.stopImmediatePropagation
        event.stopImmediatePropagation = function () {
          event.immediatePropagationStopped = true

          if (event.stopPropagation) {
            event.stopPropagation()
          }

          if (originalStopImmediatePropagation) {
            originalStopImmediatePropagation.call(event)
          }
        }
      }

      event.isImmediatePropagationStopped = function () {
        return event.immediatePropagationStopped === true
      }

      // Some events have special handlers that wrap the real handler
      var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper

      // Copy event handlers in case event handlers array is modified during execution.
      if (eventFnsLength > 1) {
        eventFns = shallowCopy(eventFns)
      }

      for (var i = 0; i < eventFnsLength; i++) {
        if (!event.isImmediatePropagationStopped()) {
          handlerWrapper(element, event, eventFns[i])
        }
      }
    }

    // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
    //       events on `element`
    eventHandler.elem = element
    return eventHandler
  }

  function defaultHandlerWrapper(element, event, handler) {
    handler.call(element, event)
  }

  function specialMouseHandlerWrapper(target, event, handler) {
    // Refer to jQuery's implementation of mouseenter & mouseleave
    // Read about mouseenter and mouseleave:
    // http://www.quirksmode.org/js/events_mouse.html#link8
    var related = event.relatedTarget
    // For mousenter/leave call the handler if related is outside the target.
    // NB: No relatedTarget if the mouse left/entered the browser window
    if (!related || (related !== target && !jqLiteContains.call(target, related))) {
      handler.call(target, event)
    }
  }

  //////////////////////////////////////////
  // Functions iterating traversal.
  // These functions chain results into a single
  // selector.
  //////////////////////////////////////////
  forEach(
    {
      removeData: jqLiteRemoveData,

      on: function jqLiteOn(element, type, fn, unsupported) {
        if (isDefined(unsupported))
          throw jqLiteMinErr(
            'onargs',
            'jqLite#on() does not support the `selector` or `eventData` parameters'
          )

        // Do not add event handlers to non-elements because they will not be cleaned up.
        if (!jqLiteAcceptsData(element)) {
          return
        }

        var expandoStore = jqLiteExpandoStore(element, true)
        var events = expandoStore.events
        var handle = expandoStore.handle

        if (!handle) {
          handle = expandoStore.handle = createEventHandler(element, events)
        }

        // http://jsperf.com/string-indexof-vs-split
        var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type]
        var i = types.length

        var addHandler = function (type, specialHandlerWrapper, noEventListener) {
          var eventFns = events[type]

          if (!eventFns) {
            eventFns = events[type] = []
            eventFns.specialHandlerWrapper = specialHandlerWrapper
            if (type !== '$destroy' && !noEventListener) {
              element.addEventListener(type, handle)
            }
          }

          eventFns.push(fn)
        }

        while (i--) {
          type = types[i]
          if (MOUSE_EVENT_MAP[type]) {
            addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper)
            addHandler(type, undefined, true)
          } else {
            addHandler(type)
          }
        }
      },

      off: jqLiteOff,

      one: function (element, type, fn) {
        element = jqLite(element)

        //add the listener twice so that when it is called
        //you can remove the original function and still be
        //able to call element.off(ev, fn) normally
        element.on(type, function onFn() {
          element.off(type, fn)
          element.off(type, onFn)
        })
        element.on(type, fn)
      },

      replaceWith: function (element, replaceNode) {
        var index,
          parent = element.parentNode
        jqLiteDealoc(element)
        forEach(new JQLite(replaceNode), function (node) {
          if (index) {
            parent.insertBefore(node, index.nextSibling)
          } else {
            parent.replaceChild(node, element)
          }
          index = node
        })
      },

      children: function (element) {
        var children = []
        forEach(element.childNodes, function (element) {
          if (element.nodeType === NODE_TYPE_ELEMENT) {
            children.push(element)
          }
        })
        return children
      },

      contents: function (element) {
        return element.contentDocument || element.childNodes || []
      },

      append: function (element, node) {
        var nodeType = element.nodeType
        if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return

        node = new JQLite(node)

        for (var i = 0, ii = node.length; i < ii; i++) {
          var child = node[i]
          element.appendChild(child)
        }
      },

      prepend: function (element, node) {
        if (element.nodeType === NODE_TYPE_ELEMENT) {
          var index = element.firstChild
          forEach(new JQLite(node), function (child) {
            element.insertBefore(child, index)
          })
        }
      },

      wrap: function (element, wrapNode) {
        jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0])
      },

      remove: jqLiteRemove,

      detach: function (element) {
        jqLiteRemove(element, true)
      },

      after: function (element, newElement) {
        var index = element,
          parent = element.parentNode

        if (parent) {
          newElement = new JQLite(newElement)

          for (var i = 0, ii = newElement.length; i < ii; i++) {
            var node = newElement[i]
            parent.insertBefore(node, index.nextSibling)
            index = node
          }
        }
      },

      addClass: jqLiteAddClass,
      removeClass: jqLiteRemoveClass,

      toggleClass: function (element, selector, condition) {
        if (selector) {
          forEach(selector.split(' '), function (className) {
            var classCondition = condition
            if (isUndefined(classCondition)) {
              classCondition = !jqLiteHasClass(element, className)
            }
            ;(classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className)
          })
        }
      },

      parent: function (element) {
        var parent = element.parentNode
        return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null
      },

      next: function (element) {
        return element.nextElementSibling
      },

      find: function (element, selector) {
        if (element.getElementsByTagName) {
          return element.getElementsByTagName(selector)
        } else {
          return []
        }
      },

      clone: jqLiteClone,

      triggerHandler: function (element, event, extraParameters) {
        var dummyEvent, eventFnsCopy, handlerArgs
        var eventName = event.type || event
        var expandoStore = jqLiteExpandoStore(element)
        var events = expandoStore && expandoStore.events
        var eventFns = events && events[eventName]

        if (eventFns) {
          // Create a dummy event to pass to the handlers
          dummyEvent = {
            preventDefault: function () {
              this.defaultPrevented = true
            },
            isDefaultPrevented: function () {
              return this.defaultPrevented === true
            },
            stopImmediatePropagation: function () {
              this.immediatePropagationStopped = true
            },
            isImmediatePropagationStopped: function () {
              return this.immediatePropagationStopped === true
            },
            stopPropagation: noop,
            type: eventName,
            target: element,
          }

          // If a custom event was provided then extend our dummy event with it
          if (event.type) {
            dummyEvent = extend(dummyEvent, event)
          }

          // Copy event handlers in case event handlers array is modified during execution.
          eventFnsCopy = shallowCopy(eventFns)
          handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent]

          forEach(eventFnsCopy, function (fn) {
            if (!dummyEvent.isImmediatePropagationStopped()) {
              fn.apply(element, handlerArgs)
            }
          })
        }
      },
    },
    function (fn, name) {
      /**
       * chaining functions
       */
      JQLite.prototype[name] = function (arg1, arg2, arg3) {
        var value

        for (var i = 0, ii = this.length; i < ii; i++) {
          if (isUndefined(value)) {
            value = fn(this[i], arg1, arg2, arg3)
            if (isDefined(value)) {
              // any function which returns a value needs to be wrapped
              value = jqLite(value)
            }
          } else {
            jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3))
          }
        }
        return isDefined(value) ? value : this
      }
    }
  )

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on
  JQLite.prototype.unbind = JQLite.prototype.off

  // Provider for private $$jqLite service
  /** @this */
  function $$jqLiteProvider() {
    this.$get = function $$jqLite() {
      return extend(JQLite, {
        hasClass: function (node, classes) {
          if (node.attr) node = node[0]
          return jqLiteHasClass(node, classes)
        },
        addClass: function (node, classes) {
          if (node.attr) node = node[0]
          return jqLiteAddClass(node, classes)
        },
        removeClass: function (node, classes) {
          if (node.attr) node = node[0]
          return jqLiteRemoveClass(node, classes)
        },
      })
    }
  }

  /**
   * Computes a hash of an 'obj'.
   * Hash of a:
   *  string is string
   *  number is number as string
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,
   *         that is also assigned to the $$hashKey property of the object.
   *
   * @param obj
   * @returns {string} hash string such that the same input will have the same hash string.
   *         The resulting string key is in 'type:hashKey' format.
   */
  function hashKey(obj, nextUidFn) {
    var key = obj && obj.$$hashKey

    if (key) {
      if (typeof key === 'function') {
        key = obj.$$hashKey()
      }
      return key
    }

    var objType = typeof obj
    if (objType === 'function' || (objType === 'object' && obj !== null)) {
      key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)()
    } else {
      key = objType + ':' + obj
    }

    return key
  }

  // A minimal ES2015 Map implementation.
  // Should be bug/feature equivalent to the native implementations of supported browsers
  // (for the features required in Angular).
  // See https://kangax.github.io/compat-table/es6/#test-Map
  var nanKey = Object.create(null)
  function NgMapShim() {
    this._keys = []
    this._values = []
    this._lastKey = NaN
    this._lastIndex = -1
  }
  NgMapShim.prototype = {
    _idx: function (key) {
      if (key !== this._lastKey) {
        this._lastKey = key
        this._lastIndex = this._keys.indexOf(key)
      }
      return this._lastIndex
    },
    _transformKey: function (key) {
      return isNumberNaN(key) ? nanKey : key
    },
    get: function (key) {
      key = this._transformKey(key)
      var idx = this._idx(key)
      if (idx !== -1) {
        return this._values[idx]
      }
    },
    has: function (key) {
      key = this._transformKey(key)
      var idx = this._idx(key)
      return idx !== -1
    },
    set: function (key, value) {
      key = this._transformKey(key)
      var idx = this._idx(key)
      if (idx === -1) {
        idx = this._lastIndex = this._keys.length
      }
      this._keys[idx] = key
      this._values[idx] = value

      // Support: IE11
      // Do not `return this` to simulate the partial IE11 implementation
    },
    delete: function (key) {
      key = this._transformKey(key)
      var idx = this._idx(key)
      if (idx === -1) {
        return false
      }
      this._keys.splice(idx, 1)
      this._values.splice(idx, 1)
      this._lastKey = NaN
      this._lastIndex = -1
      return true
    },
  }

  // For now, always use `NgMapShim`, even if `window.Map` is available. Some native implementations
  // are still buggy (often in subtle ways) and can cause hard-to-debug failures. When native `Map`
  // implementations get more stable, we can reconsider switching to `window.Map` (when available).
  var NgMap = NgMapShim

  var $$MapProvider = [
    /** @this */ function () {
      this.$get = [
        function () {
          return NgMap
        },
      ]
    },
  ]

  /**
   * @ngdoc function
   * @module ng
   * @name angular.injector
   * @kind function
   *
   * @description
   * Creates an injector object that can be used for retrieving services as well as for
   * dependency injection (see {@link guide/di dependency injection}).
   *
   * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
   *     {@link angular.module}. The `ng` module must be explicitly added.
   * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
   *     disallows argument name annotation inference.
   * @returns {injector} Injector object. See {@link auto.$injector $injector}.
   *
   * @example
   * Typical usage
   * ```js
   *   // create an injector
   *   var $injector = angular.injector(['ng']);
   *
   *   // use the injector to kick off your application
   *   // use the type inference to auto inject arguments, or use implicit injection
   *   $injector.invoke(function($rootScope, $compile, $document) {
   *     $compile($document)($rootScope);
   *     $rootScope.$digest();
   *   });
   * ```
   *
   * Sometimes you want to get access to the injector of a currently running AngularJS app
   * from outside AngularJS. Perhaps, you want to inject and compile some markup after the
   * application has been bootstrapped. You can do this using the extra `injector()` added
   * to JQuery/jqLite elements. See {@link angular.element}.
   *
   * *This is fairly rare but could be the case if a third party library is injecting the
   * markup.*
   *
   * In the following example a new block of HTML containing a `ng-controller`
   * directive is added to the end of the document body by JQuery. We then compile and link
   * it into the current AngularJS scope.
   *
   * ```js
   * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
   * $(document.body).append($div);
   *
   * angular.element(document).injector().invoke(function($compile) {
   *   var scope = angular.element($div).scope();
   *   $compile($div)(scope);
   * });
   * ```
   */

  /**
   * @ngdoc module
   * @name auto
   * @installation
   * @description
   *
   * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
   */

  var ARROW_ARG = /^([^(]+?)=>/
  var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m
  var FN_ARG_SPLIT = /,/
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm
  var $injectorMinErr = minErr('$injector')

  function stringifyFn(fn) {
    return Function.prototype.toString.call(fn)
  }

  function extractArgs(fn) {
    var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS)
    return args
  }

  function anonFn(fn) {
    // For anonymous functions, showing at the very least the function signature can help in
    // debugging.
    var args = extractArgs(fn)
    if (args) {
      return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')'
    }
    return 'fn'
  }

  function annotate(fn, strictDi, name) {
    var $inject, argDecl, last

    if (typeof fn === 'function') {
      if (!($inject = fn.$inject)) {
        $inject = []
        if (fn.length) {
          if (strictDi) {
            if (!isString(name) || !name) {
              name = fn.name || anonFn(fn)
            }
            throw $injectorMinErr(
              'strictdi',
              '{0} is not using explicit annotation and cannot be invoked in strict mode',
              name
            )
          }
          argDecl = extractArgs(fn)
          forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
            arg.replace(FN_ARG, function (all, underscore, name) {
              $inject.push(name)
            })
          })
        }
        fn.$inject = $inject
      }
    } else if (isArray(fn)) {
      last = fn.length - 1
      assertArgFn(fn[last], 'fn')
      $inject = fn.slice(0, last)
    } else {
      assertArgFn(fn, 'fn', true)
    }
    return $inject
  }

  ///////////////////////////////////////

  /**
   * @ngdoc service
   * @name $injector
   *
   * @description
   *
   * `$injector` is used to retrieve object instances as defined by
   * {@link auto.$provide provider}, instantiate types, invoke methods,
   * and load modules.
   *
   * The following always holds true:
   *
   * ```js
   *   var $injector = angular.injector();
   *   expect($injector.get('$injector')).toBe($injector);
   *   expect($injector.invoke(function($injector) {
   *     return $injector;
   *   })).toBe($injector);
   * ```
   *
   * ## Injection Function Annotation
   *
   * JavaScript does not have annotations, and annotations are needed for dependency injection. The
   * following are all valid ways of annotating function with injection arguments and are equivalent.
   *
   * ```js
   *   // inferred (only works if code not minified/obfuscated)
   *   $injector.invoke(function(serviceA){});
   *
   *   // annotated
   *   function explicit(serviceA) {};
   *   explicit.$inject = ['serviceA'];
   *   $injector.invoke(explicit);
   *
   *   // inline
   *   $injector.invoke(['serviceA', function(serviceA){}]);
   * ```
   *
   * ### Inference
   *
   * In JavaScript calling `toString()` on a function returns the function definition. The definition
   * can then be parsed and the function arguments can be extracted. This method of discovering
   * annotations is disallowed when the injector is in strict mode.
   * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
   * argument names.
   *
   * ### `$inject` Annotation
   * By adding an `$inject` property onto a function the injection parameters can be specified.
   *
   * ### Inline
   * As an array of injection names, where the last item in the array is the function to call.
   */

  /**
   * @ngdoc property
   * @name $injector#modules
   * @type {Object}
   * @description
   * A hash containing all the modules that have been loaded into the
   * $injector.
   *
   * You can use this property to find out information about a module via the
   * {@link angular.Module#info `myModule.info(...)`} method.
   *
   * For example:
   *
   * ```
   * var info = $injector.modules['ngAnimate'].info();
   * ```
   *
   * **Do not use this property to attempt to modify the modules after the application
   * has been bootstrapped.**
   */

  /**
   * @ngdoc method
   * @name $injector#get
   *
   * @description
   * Return an instance of the service.
   *
   * @param {string} name The name of the instance to retrieve.
   * @param {string=} caller An optional string to provide the origin of the function call for error messages.
   * @return {*} The instance.
   */

  /**
   * @ngdoc method
   * @name $injector#invoke
   *
   * @description
   * Invoke the method and supply the method arguments from the `$injector`.
   *
   * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
   *   injected according to the {@link guide/di $inject Annotation} rules.
   * @param {Object=} self The `this` for the invoked method.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   *                         object first, before the `$injector` is consulted.
   * @returns {*} the value returned by the invoked `fn` function.
   */

  /**
   * @ngdoc method
   * @name $injector#has
   *
   * @description
   * Allows the user to query if the particular service exists.
   *
   * @param {string} name Name of the service to query.
   * @returns {boolean} `true` if injector has given service.
   */

  /**
   * @ngdoc method
   * @name $injector#instantiate
   * @description
   * Create a new instance of JS type. The method takes a constructor function, invokes the new
   * operator, and supplies all of the arguments to the constructor function as specified by the
   * constructor annotation.
   *
   * @param {Function} Type Annotated constructor function.
   * @param {Object=} locals Optional object. If preset then any argument names are read from this
   * object first, before the `$injector` is consulted.
   * @returns {Object} new instance of `Type`.
   */

  /**
   * @ngdoc method
   * @name $injector#annotate
   *
   * @description
   * Returns an array of service names which the function is requesting for injection. This API is
   * used by the injector to determine which services need to be injected into the function when the
   * function is invoked. There are three ways in which the function can be annotated with the needed
   * dependencies.
   *
   * #### Argument names
   *
   * The simplest form is to extract the dependencies from the arguments of the function. This is done
   * by converting the function into a string using `toString()` method and extracting the argument
   * names.
   * ```js
   *   // Given
   *   function MyController($scope, $route) {
   *     // ...
   *   }
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * You can disallow this method by using strict injection mode.
   *
   * This method does not work with code minification / obfuscation. For this reason the following
   * annotation strategies are supported.
   *
   * #### The `$inject` property
   *
   * If a function has an `$inject` property and its value is an array of strings, then the strings
   * represent names of services to be injected into the function.
   * ```js
   *   // Given
   *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
   *     // ...
   *   }
   *   // Define function dependencies
   *   MyController['$inject'] = ['$scope', '$route'];
   *
   *   // Then
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
   * ```
   *
   * #### The array notation
   *
   * It is often desirable to inline Injected functions and that's when setting the `$inject` property
   * is very inconvenient. In these situations using the array notation to specify the dependencies in
   * a way that survives minification is a better choice:
   *
   * ```js
   *   // We wish to write this (not minification / obfuscation safe)
   *   injector.invoke(function($compile, $rootScope) {
   *     // ...
   *   });
   *
   *   // We are forced to write break inlining
   *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
   *     // ...
   *   };
   *   tmpFn.$inject = ['$compile', '$rootScope'];
   *   injector.invoke(tmpFn);
   *
   *   // To better support inline function the inline annotation is supported
   *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
   *     // ...
   *   }]);
   *
   *   // Therefore
   *   expect(injector.annotate(
   *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
   *    ).toEqual(['$compile', '$rootScope']);
   * ```
   *
   * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
   * be retrieved as described above.
   *
   * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
   *
   * @returns {Array.<string>} The names of the services which the function requires.
   */
  /**
   * @ngdoc method
   * @name $injector#loadNewModules
   *
   * @description
   *
   * **This is a dangerous API, which you use at your own risk!**
   *
   * Add the specified modules to the current injector.
   *
   * This method will add each of the injectables to the injector and execute all of the config and run
   * blocks for each module passed to the method.
   *
   * If a module has already been loaded into the injector then it will not be loaded again.
   *
   * * The application developer is responsible for loading the code containing the modules; and for
   * ensuring that lazy scripts are not downloaded and executed more often that desired.
   * * Previously compiled HTML will not be affected by newly loaded directives, filters and components.
   * * Modules cannot be unloaded.
   *
   * You can use {@link $injector#modules `$injector.modules`} to check whether a module has been loaded
   * into the injector, which may indicate whether the script has been executed already.
   *
   * @example
   * Here is an example of loading a bundle of modules, with a utility method called `getScript`:
   *
   * ```javascript
   * app.factory('loadModule', function($injector) {
   *   return function loadModule(moduleName, bundleUrl) {
   *     return getScript(bundleUrl).then(function() { $injector.loadNewModules([moduleName]); });
   *   };
   * })
   * ```
   *
   * @param {Array<String|Function|Array>=} mods an array of modules to load into the application.
   *     Each item in the array should be the name of a predefined module or a (DI annotated)
   *     function that will be invoked by the injector as a `config` block.
   *     See: {@link angular.module modules}
   */

  /**
   * @ngdoc service
   * @name $provide
   *
   * @description
   *
   * The {@link auto.$provide $provide} service has a number of methods for registering components
   * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
   * {@link angular.Module}.
   *
   * An AngularJS **service** is a singleton object created by a **service factory**.  These **service
   * factories** are functions which, in turn, are created by a **service provider**.
   * The **service providers** are constructor functions. When instantiated they must contain a
   * property called `$get`, which holds the **service factory** function.
   *
   * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
   * correct **service provider**, instantiating it and then calling its `$get` **service factory**
   * function to get the instance of the **service**.
   *
   * Often services have no configuration options and there is no need to add methods to the service
   * provider.  The provider will be no more than a constructor function with a `$get` property. For
   * these cases the {@link auto.$provide $provide} service has additional helper methods to register
   * services without specifying a provider.
   *
   * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
   *     {@link auto.$injector $injector}
   * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
   *     providers and services.
   * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
   *     services, not providers.
   * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
   *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
   *     given factory function.
   * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
   *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
   *      a new object using the given constructor function.
   * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
   *      will be able to modify or replace the implementation of another service.
   *
   * See the individual methods for more information and examples.
   */

  /**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * It is possible to inject other providers into the provider function,
 * but the injected provider must have been defined before the one that requires it.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

  /**
   * @ngdoc method
   * @name $provide#factory
   * @description
   *
   * Register a **service factory**, which will be called to return the service instance.
   * This is short for registering a service where its provider consists of only a `$get` property,
   * which is the given service factory function.
   * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
   * configure your service in a provider.
   *
   * @param {string} name The name of the instance.
   * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
   *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service
   * ```js
   *   $provide.factory('ping', ['$http', function($http) {
   *     return function ping() {
   *       return $http.send('/ping');
   *     };
   *   }]);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
   *     ping();
   *   }]);
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#service
   * @description
   *
   * Register a **service constructor**, which will be invoked with `new` to create the service
   * instance.
   * This is short for registering a service where its provider's `$get` property is a factory
   * function that returns an instance instantiated by the injector from the service constructor
   * function.
   *
   * Internally it looks a bit like this:
   *
   * ```
   * {
   *   $get: function() {
   *     return $injector.instantiate(constructor);
   *   }
   * }
   * ```
   *
   *
   * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
   * as a type/class.
   *
   * @param {string} name The name of the instance.
   * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
   *     that will be instantiated.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here is an example of registering a service using
   * {@link auto.$provide#service $provide.service(class)}.
   * ```js
   *   var Ping = function($http) {
   *     this.$http = $http;
   *   };
   *
   *   Ping.$inject = ['$http'];
   *
   *   Ping.prototype.send = function() {
   *     return this.$http.get('/ping');
   *   };
   *   $provide.service('ping', Ping);
   * ```
   * You would then inject and use this service like this:
   * ```js
   *   someModule.controller('Ctrl', ['ping', function(ping) {
   *     ping.send();
   *   }]);
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#value
   * @description
   *
   * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
   * number, an array, an object or a function. This is short for registering a service where its
   * provider's `$get` property is a factory function that takes no arguments and returns the **value
   * service**. That also means it is not possible to inject other services into a value service.
   *
   * Value services are similar to constant services, except that they cannot be injected into a
   * module configuration function (see {@link angular.Module#config}) but they can be overridden by
   * an AngularJS {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the instance.
   * @param {*} value The value.
   * @returns {Object} registered provider instance
   *
   * @example
   * Here are some examples of creating value services.
   * ```js
   *   $provide.value('ADMIN_USER', 'admin');
   *
   *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
   *
   *   $provide.value('halfOf', function(value) {
   *     return value / 2;
   *   });
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#constant
   * @description
   *
   * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
   * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
   * possible to inject other services into a constant.
   *
   * But unlike {@link auto.$provide#value value}, a constant can be
   * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
   * be overridden by an AngularJS {@link auto.$provide#decorator decorator}.
   *
   * @param {string} name The name of the constant.
   * @param {*} value The constant value.
   * @returns {Object} registered instance
   *
   * @example
   * Here a some examples of creating constants:
   * ```js
   *   $provide.constant('SHARD_HEIGHT', 306);
   *
   *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
   *
   *   $provide.constant('double', function(value) {
   *     return value * 2;
   *   });
   * ```
   */

  /**
   * @ngdoc method
   * @name $provide#decorator
   * @description
   *
   * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
   * intercepts the creation of a service, allowing it to override or modify the behavior of the
   * service. The return value of the decorator function may be the original service, or a new service
   * that replaces (or wraps and delegates to) the original service.
   *
   * You can find out more about using decorators in the {@link guide/decorators} guide.
   *
   * @param {string} name The name of the service to decorate.
   * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
   *    provided and should return the decorated service instance. The function is called using
   *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
   *    Local injection arguments:
   *
   *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
   *      decorated or delegated to.
   *
   * @example
   * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
   * calls to {@link ng.$log#error $log.warn()}.
   * ```js
   *   $provide.decorator('$log', ['$delegate', function($delegate) {
   *     $delegate.warn = $delegate.error;
   *     return $delegate;
   *   }]);
   * ```
   */

  function createInjector(modulesToLoad, strictDi) {
    strictDi = strictDi === true
    var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new NgMap(),
      providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator,
        },
      },
      providerInjector = (providerCache.$injector = createInternalInjector(
        providerCache,
        function (serviceName, caller) {
          if (angular.isString(caller)) {
            path.push(caller)
          }
          throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '))
        }
      )),
      instanceCache = {},
      protoInstanceInjector = createInternalInjector(instanceCache, function (serviceName, caller) {
        var provider = providerInjector.get(serviceName + providerSuffix, caller)
        return instanceInjector.invoke(provider.$get, provider, undefined, serviceName)
      }),
      instanceInjector = protoInstanceInjector

    providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) }
    instanceInjector.modules = providerInjector.modules = createMap()
    var runBlocks = loadModules(modulesToLoad)
    instanceInjector = protoInstanceInjector.get('$injector')
    instanceInjector.strictDi = strictDi
    forEach(runBlocks, function (fn) {
      if (fn) instanceInjector.invoke(fn)
    })

    instanceInjector.loadNewModules = function (mods) {
      forEach(loadModules(mods), function (fn) {
        if (fn) instanceInjector.invoke(fn)
      })
    }

    return instanceInjector

    ////////////////////////////////////
    // $provider
    ////////////////////////////////////

    function supportObject(delegate) {
      return function (key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate))
        } else {
          return delegate(key, value)
        }
      }
    }

    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service')
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_)
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name)
      }
      return (providerCache[name + providerSuffix] = provider_)
    }

    function enforceReturnValue(name, factory) {
      return /** @this */ function enforcedReturnValue() {
        var result = instanceInjector.invoke(factory, this)
        if (isUndefined(result)) {
          throw $injectorMinErr(
            'undef',
            "Provider '{0}' must return a value from $get factory method.",
            name
          )
        }
        return result
      }
    }

    function factory(name, factoryFn, enforce) {
      return provider(name, {
        $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn,
      })
    }

    function service(name, constructor) {
      return factory(name, [
        '$injector',
        function ($injector) {
          return $injector.instantiate(constructor)
        },
      ])
    }

    function value(name, val) {
      return factory(name, valueFn(val), false)
    }

    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant')
      providerCache[name] = value
      instanceCache[name] = value
    }

    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get

      origProvider.$get = function () {
        var origInstance = instanceInjector.invoke(orig$get, origProvider)
        return instanceInjector.invoke(decorFn, null, { $delegate: origInstance })
      }
    }

    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad) {
      assertArg(
        isUndefined(modulesToLoad) || isArray(modulesToLoad),
        'modulesToLoad',
        'not an array'
      )
      var runBlocks = [],
        moduleFn
      forEach(modulesToLoad, function (module) {
        if (loadedModules.get(module)) return
        loadedModules.set(module, true)

        function runInvokeQueue(queue) {
          var i, ii
          for (i = 0, ii = queue.length; i < ii; i++) {
            var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0])

            provider[invokeArgs[1]].apply(provider, invokeArgs[2])
          }
        }

        try {
          if (isString(module)) {
            moduleFn = angularModule(module)
            instanceInjector.modules[module] = moduleFn
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks)
            runInvokeQueue(moduleFn._invokeQueue)
            runInvokeQueue(moduleFn._configBlocks)
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module))
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module))
          } else {
            assertArgFn(module, 'module')
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1]
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            // eslint-disable-next-line no-ex-assign
            e = e.message + '\n' + e.stack
          }
          throw $injectorMinErr(
            'modulerr',
            'Failed to instantiate module {0} due to:\n{1}',
            module,
            e.stack || e.message || e
          )
        }
      })
      return runBlocks
    }

    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////

    function createInternalInjector(cache, factory) {
      function getService(serviceName, caller) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr(
              'cdep',
              'Circular dependency found: {0}',
              serviceName + ' <- ' + path.join(' <- ')
            )
          }
          return cache[serviceName]
        } else {
          try {
            path.unshift(serviceName)
            cache[serviceName] = INSTANTIATING
            cache[serviceName] = factory(serviceName, caller)
            return cache[serviceName]
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName]
            }
            throw err
          } finally {
            path.shift()
          }
        }
      }

      function injectionArgs(fn, locals, serviceName) {
        var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName)

        for (var i = 0, length = $inject.length; i < length; i++) {
          var key = $inject[i]
          if (typeof key !== 'string') {
            throw $injectorMinErr(
              'itkn',
              'Incorrect injection token! Expected service name as string, got {0}',
              key
            )
          }
          args.push(
            locals && locals.hasOwnProperty(key) ? locals[key] : getService(key, serviceName)
          )
        }
        return args
      }

      function isClass(func) {
        // Support: IE 9-11 only
        // IE 9-11 do not support classes and IE9 leaks with the code below.
        if (msie || typeof func !== 'function') {
          return false
        }
        var result = func.$$ngIsClass
        if (!isBoolean(result)) {
          result = func.$$ngIsClass = /^class\b/.test(stringifyFn(func))
        }
        return result
      }

      function invoke(fn, self, locals, serviceName) {
        if (typeof locals === 'string') {
          serviceName = locals
          locals = null
        }

        var args = injectionArgs(fn, locals, serviceName)
        if (isArray(fn)) {
          fn = fn[fn.length - 1]
        }

        if (!isClass(fn)) {
          // http://jsperf.com/angularjs-invoke-apply-vs-switch
          // #5388
          return fn.apply(self, args)
        } else {
          args.unshift(null)
          return new (Function.prototype.bind.apply(fn, args))()
        }
      }

      function instantiate(Type, locals, serviceName) {
        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        var ctor = isArray(Type) ? Type[Type.length - 1] : Type
        var args = injectionArgs(Type, locals, serviceName)
        // Empty object at position 0 is ignored for invocation with `new`, but required.
        args.unshift(null)
        return new (Function.prototype.bind.apply(ctor, args))()
      }

      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: createInjector.$$annotate,
        has: function (name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name)
        },
      }
    }
  }

  createInjector.$$annotate = annotate

  /**
   * @ngdoc provider
   * @name $anchorScrollProvider
   * @this
   *
   * @description
   * Use `$anchorScrollProvider` to disable automatic scrolling whenever
   * {@link ng.$location#hash $location.hash()} changes.
   */
  function $AnchorScrollProvider() {
    var autoScrollingEnabled = true

    /**
     * @ngdoc method
     * @name $anchorScrollProvider#disableAutoScrolling
     *
     * @description
     * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
     * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
     * Use this method to disable automatic scrolling.
     *
     * If automatic scrolling is disabled, one must explicitly call
     * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
     * current hash.
     */
    this.disableAutoScrolling = function () {
      autoScrollingEnabled = false
    }

    /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
   * in the
   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
   *                       {@link ng.$location#hash $location.hash()} will be used.
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample" name="anchor-scroll">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
    this.$get = [
      '$window',
      '$location',
      '$rootScope',
      function ($window, $location, $rootScope) {
        var document = $window.document

        // Helper function to get first anchor from a NodeList
        // (using `Array#some()` instead of `angular#forEach()` since it's more performant
        //  and working in all supported browsers.)
        function getFirstAnchor(list) {
          var result = null
          Array.prototype.some.call(list, function (element) {
            if (nodeName_(element) === 'a') {
              result = element
              return true
            }
          })
          return result
        }

        function getYOffset() {
          var offset = scroll.yOffset

          if (isFunction(offset)) {
            offset = offset()
          } else if (isElement(offset)) {
            var elem = offset[0]
            var style = $window.getComputedStyle(elem)
            if (style.position !== 'fixed') {
              offset = 0
            } else {
              offset = elem.getBoundingClientRect().bottom
            }
          } else if (!isNumber(offset)) {
            offset = 0
          }

          return offset
        }

        function scrollTo(elem) {
          if (elem) {
            elem.scrollIntoView()

            var offset = getYOffset()

            if (offset) {
              // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
              // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
              // top of the viewport.
              //
              // IF the number of pixels from the top of `elem` to the end of the page's content is less
              // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
              // way down the page.
              //
              // This is often the case for elements near the bottom of the page.
              //
              // In such cases we do not need to scroll the whole `offset` up, just the difference between
              // the top of the element and the offset, which is enough to align the top of `elem` at the
              // desired position.
              var elemTop = elem.getBoundingClientRect().top
              $window.scrollBy(0, elemTop - offset)
            }
          } else {
            $window.scrollTo(0, 0)
          }
        }

        function scroll(hash) {
          // Allow numeric hashes
          hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash()
          var elm

          // empty hash, scroll to the top of the page
          if (!hash) scrollTo(null)
          // element with given id
          else if ((elm = document.getElementById(hash))) scrollTo(elm)
          // first anchor with given name :-D
          else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm)
          // no element and hash === 'top', scroll to the top of the page
          else if (hash === 'top') scrollTo(null)
        }

        // does not scroll when user clicks on anchor link that is currently on
        // (no url change, no $location.hash() change), browser native does scroll
        if (autoScrollingEnabled) {
          $rootScope.$watch(
            function autoScrollWatch() {
              return $location.hash()
            },
            function autoScrollWatchAction(newVal, oldVal) {
              // skip the initial scroll if $location.hash is empty
              if (newVal === oldVal && newVal === '') return

              jqLiteDocumentLoaded(function () {
                $rootScope.$evalAsync(scroll)
              })
            }
          )
        }

        return scroll
      },
    ]
  }

  var $animateMinErr = minErr('$animate')
  var ELEMENT_NODE = 1
  var NG_ANIMATE_CLASSNAME = 'ng-animate'

  function mergeClasses(a, b) {
    if (!a && !b) return ''
    if (!a) return b
    if (!b) return a
    if (isArray(a)) a = a.join(' ')
    if (isArray(b)) b = b.join(' ')
    return a + ' ' + b
  }

  function extractElementNode(element) {
    for (var i = 0; i < element.length; i++) {
      var elm = element[i]
      if (elm.nodeType === ELEMENT_NODE) {
        return elm
      }
    }
  }

  function splitClasses(classes) {
    if (isString(classes)) {
      classes = classes.split(' ')
    }

    // Use createMap() to prevent class assumptions involving property names in
    // Object.prototype
    var obj = createMap()
    forEach(classes, function (klass) {
      // sometimes the split leaves empty string values
      // incase extra spaces were applied to the options
      if (klass.length) {
        obj[klass] = true
      }
    })
    return obj
  }

  // if any other type of options value besides an Object value is
  // passed into the $animate.method() animation then this helper code
  // will be run which will ignore it. While this patch is not the
  // greatest solution to this, a lot of existing plugins depend on
  // $animate to either call the callback (< 1.2) or return a promise
  // that can be changed. This helper function ensures that the options
  // are wiped clean incase a callback function is provided.
  function prepareAnimateOptions(options) {
    return isObject(options) ? options : {}
  }

  var $$CoreAnimateJsProvider = /** @this */ function () {
    this.$get = noop
  }

  // this is prefixed with Core since it conflicts with
  // the animateQueueProvider defined in ngAnimate/animateQueue.js
  var $$CoreAnimateQueueProvider = /** @this */ function () {
    var postDigestQueue = new NgMap()
    var postDigestElements = []

    this.$get = [
      '$$AnimateRunner',
      '$rootScope',
      function ($$AnimateRunner, $rootScope) {
        return {
          enabled: noop,
          on: noop,
          off: noop,
          pin: noop,

          push: function (element, event, options, domOperation) {
            if (domOperation) {
              domOperation()
            }

            options = options || {}
            if (options.from) {
              element.css(options.from)
            }
            if (options.to) {
              element.css(options.to)
            }

            if (options.addClass || options.removeClass) {
              addRemoveClassesPostDigest(element, options.addClass, options.removeClass)
            }

            var runner = new $$AnimateRunner()

            // since there are no animations to run the runner needs to be
            // notified that the animation call is complete.
            runner.complete()
            return runner
          },
        }

        function updateData(data, classes, value) {
          var changed = false
          if (classes) {
            classes = isString(classes) ? classes.split(' ') : isArray(classes) ? classes : []
            forEach(classes, function (className) {
              if (className) {
                changed = true
                data[className] = value
              }
            })
          }
          return changed
        }

        function handleCSSClassChanges() {
          forEach(postDigestElements, function (element) {
            var data = postDigestQueue.get(element)
            if (data) {
              var existing = splitClasses(element.attr('class'))
              var toAdd = ''
              var toRemove = ''
              forEach(data, function (status, className) {
                var hasClass = !!existing[className]
                if (status !== hasClass) {
                  if (status) {
                    toAdd += (toAdd.length ? ' ' : '') + className
                  } else {
                    toRemove += (toRemove.length ? ' ' : '') + className
                  }
                }
              })

              forEach(element, function (elm) {
                if (toAdd) {
                  jqLiteAddClass(elm, toAdd)
                }
                if (toRemove) {
                  jqLiteRemoveClass(elm, toRemove)
                }
              })
              postDigestQueue.delete(element)
            }
          })
          postDigestElements.length = 0
        }

        function addRemoveClassesPostDigest(element, add, remove) {
          var data = postDigestQueue.get(element) || {}

          var classesAdded = updateData(data, add, true)
          var classesRemoved = updateData(data, remove, false)

          if (classesAdded || classesRemoved) {
            postDigestQueue.set(element, data)
            postDigestElements.push(element)

            if (postDigestElements.length === 1) {
              $rootScope.$$postDigest(handleCSSClassChanges)
            }
          }
        }
      },
    ]
  }

  /**
   * @ngdoc provider
   * @name $animateProvider
   *
   * @description
   * Default implementation of $animate that doesn't perform any animations, instead just
   * synchronously performs DOM updates and resolves the returned runner promise.
   *
   * In order to enable animations the `ngAnimate` module has to be loaded.
   *
   * To see the functional implementation check out `src/ngAnimate/animate.js`.
   */
  var $AnimateProvider = [
    '$provide',
    /** @this */ function ($provide) {
      var provider = this
      var classNameFilter = null
      var customFilter = null

      this.$$registeredAnimations = Object.create(null)

      /**
       * @ngdoc method
       * @name $animateProvider#register
       *
       * @description
       * Registers a new injectable animation factory function. The factory function produces the
       * animation object which contains callback functions for each event that is expected to be
       * animated.
       *
       *   * `eventFn`: `function(element, ... , doneFunction, options)`
       *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
       *   on the type of animation additional arguments will be injected into the animation function. The
       *   list below explains the function signatures for the different animation methods:
       *
       *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
       *   - addClass: function(element, addedClasses, doneFunction, options)
       *   - removeClass: function(element, removedClasses, doneFunction, options)
       *   - enter, leave, move: function(element, doneFunction, options)
       *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
       *
       *   Make sure to trigger the `doneFunction` once the animation is fully complete.
       *
       * ```js
       *   return {
       *     //enter, leave, move signature
       *     eventFn : function(element, done, options) {
       *       //code to run the animation
       *       //once complete, then run done()
       *       return function endFunction(wasCancelled) {
       *         //code to cancel the animation
       *       }
       *     }
       *   }
       * ```
       *
       * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
       * @param {Function} factory The factory function that will be executed to return the animation
       *                           object.
       */
      this.register = function (name, factory) {
        if (name && name.charAt(0) !== '.') {
          throw $animateMinErr(
            'notcsel',
            "Expecting class selector starting with '.' got '{0}'.",
            name
          )
        }

        var key = name + '-animation'
        provider.$$registeredAnimations[name.substr(1)] = key
        $provide.factory(key, factory)
      }

      /**
       * @ngdoc method
       * @name $animateProvider#customFilter
       *
       * @description
       * Sets and/or returns the custom filter function that is used to "filter" animations, i.e.
       * determine if an animation is allowed or not. When no filter is specified (the default), no
       * animation will be blocked. Setting the `customFilter` value will only allow animations for
       * which the filter function's return value is truthy.
       *
       * This allows to easily create arbitrarily complex rules for filtering animations, such as
       * allowing specific events only, or enabling animations on specific subtrees of the DOM, etc.
       * Filtering animations can also boost performance for low-powered devices, as well as
       * applications containing a lot of structural operations.
       *
       * <div class="alert alert-success">
       *   **Best Practice:**
       *   Keep the filtering function as lean as possible, because it will be called for each DOM
       *   action (e.g. insertion, removal, class change) performed by "animation-aware" directives.
       *   See {@link guide/animations#which-directives-support-animations- here} for a list of built-in
       *   directives that support animations.
       *   Performing computationally expensive or time-consuming operations on each call of the
       *   filtering function can make your animations sluggish.
       * </div>
       *
       * **Note:** If present, `customFilter` will be checked before
       * {@link $animateProvider#classNameFilter classNameFilter}.
       *
       * @param {Function=} filterFn - The filter function which will be used to filter all animations.
       *   If a falsy value is returned, no animation will be performed. The function will be called
       *   with the following arguments:
       *   - **node** `{DOMElement}` - The DOM element to be animated.
       *   - **event** `{String}` - The name of the animation event (e.g. `enter`, `leave`, `addClass`
       *     etc).
       *   - **options** `{Object}` - A collection of options/styles used for the animation.
       * @return {Function} The current filter function or `null` if there is none set.
       */
      this.customFilter = function (filterFn) {
        if (arguments.length === 1) {
          customFilter = isFunction(filterFn) ? filterFn : null
        }

        return customFilter
      }

      /**
       * @ngdoc method
       * @name $animateProvider#classNameFilter
       *
       * @description
       * Sets and/or returns the CSS class regular expression that is checked when performing
       * an animation. Upon bootstrap the classNameFilter value is not set at all and will
       * therefore enable $animate to attempt to perform an animation on any element that is triggered.
       * When setting the `classNameFilter` value, animations will only be performed on elements
       * that successfully match the filter expression. This in turn can boost performance
       * for low-powered devices as well as applications containing a lot of structural operations.
       *
       * **Note:** If present, `classNameFilter` will be checked after
       * {@link $animateProvider#customFilter customFilter}. If `customFilter` is present and returns
       * false, `classNameFilter` will not be checked.
       *
       * @param {RegExp=} expression The className expression which will be checked against all animations
       * @return {RegExp} The current CSS className expression value. If null then there is no expression value
       */
      this.classNameFilter = function (expression) {
        if (arguments.length === 1) {
          classNameFilter = expression instanceof RegExp ? expression : null
          if (classNameFilter) {
            var reservedRegex = new RegExp('[(\\s|\\/)]' + NG_ANIMATE_CLASSNAME + '[(\\s|\\/)]')
            if (reservedRegex.test(classNameFilter.toString())) {
              classNameFilter = null
              throw $animateMinErr(
                'nongcls',
                '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',
                NG_ANIMATE_CLASSNAME
              )
            }
          }
        }
        return classNameFilter
      }

      this.$get = [
        '$$animateQueue',
        function ($$animateQueue) {
          function domInsert(element, parentElement, afterElement) {
            // if for some reason the previous element was removed
            // from the dom sometime before this code runs then let's
            // just stick to using the parent element as the anchor
            if (afterElement) {
              var afterNode = extractElementNode(afterElement)
              if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
                afterElement = null
              }
            }
            if (afterElement) {
              afterElement.after(element)
            } else {
              parentElement.prepend(element)
            }
          }

          /**
           * @ngdoc service
           * @name $animate
           * @description The $animate service exposes a series of DOM utility methods that provide support
           * for animation hooks. The default behavior is the application of DOM operations, however,
           * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
           * to ensure that animation runs with the triggered DOM operation.
           *
           * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
           * included and only when it is active then the animation hooks that `$animate` triggers will be
           * functional. Once active then all structural `ng-` directives will trigger animations as they perform
           * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
           * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
           *
           * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
           *
           * To learn more about enabling animation support, click here to visit the
           * {@link ngAnimate ngAnimate module page}.
           */
          return {
            // we don't call it directly since non-existant arguments may
            // be interpreted as null within the sub enabled function

            /**
             *
             * @ngdoc method
             * @name $animate#on
             * @kind function
             * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
             *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
             *    is fired with the following params:
             *
             * ```js
             * $animate.on('enter', container,
             *    function callback(element, phase) {
             *      // cool we detected an enter animation within the container
             *    }
             * );
             * ```
             *
             * <div class="alert alert-warning">
             * **Note**: Generally, the events that are fired correspond 1:1 to `$animate` method names,
             * e.g. {@link ng.$animate#addClass addClass()} will fire `addClass`, and {@link ng.ngClass}
             * will fire `addClass` if classes are added, and `removeClass` if classes are removed.
             * However, there are two exceptions:
             *
             * <ul>
             *   <li>if both an {@link ng.$animate#addClass addClass()} and a
             *   {@link ng.$animate#removeClass removeClass()} action are performed during the same
             *   animation, the event fired will be `setClass`. This is true even for `ngClass`.</li>
             *   <li>an {@link ng.$animate#animate animate()} call that adds and removes classes will fire
             *   the `setClass` event, but if it either removes or adds classes,
             *   it will fire `animate` instead.</li>
             * </ul>
             *
             * </div>
             *
             * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
             * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
             *     as well as among its children
             * @param {Function} callback the callback function that will be fired when the listener is triggered.
             *
             * The arguments present in the callback function are:
             * * `element` - The captured DOM element that the animation was fired on.
             * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
             * * `data` - an object with these properties:
             *     * addClass - `{string|null}` - space-separated CSS classes to add to the element
             *     * removeClass - `{string|null}` - space-separated CSS classes to remove from the element
             *     * from - `{Object|null}` - CSS properties & values at the beginning of the animation
             *     * to - `{Object|null}` - CSS properties & values at the end of the animation
             *
             * Note that the callback does not trigger a scope digest. Wrap your call into a
             * {@link $rootScope.Scope#$apply scope.$apply} to propagate changes to the scope.
             */
            on: $$animateQueue.on,

            /**
             *
             * @ngdoc method
             * @name $animate#off
             * @kind function
             * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
             * can be used in three different ways depending on the arguments:
             *
             * ```js
             * // remove all the animation event listeners listening for `enter`
             * $animate.off('enter');
             *
             * // remove listeners for all animation events from the container element
             * $animate.off(container);
             *
             * // remove all the animation event listeners listening for `enter` on the given element and its children
             * $animate.off('enter', container);
             *
             * // remove the event listener function provided by `callback` that is set
             * // to listen for `enter` on the given `container` as well as its children
             * $animate.off('enter', container, callback);
             * ```
             *
             * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
             * addClass, removeClass, etc...), or the container element. If it is the element, all other
             * arguments are ignored.
             * @param {DOMElement=} container the container element the event listener was placed on
             * @param {Function=} callback the callback function that was registered as the listener
             */
            off: $$animateQueue.off,

            /**
             * @ngdoc method
             * @name $animate#pin
             * @kind function
             * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
             *    outside of the DOM structure of the AngularJS application. By doing so, any animation triggered via `$animate` can be issued on the
             *    element despite being outside the realm of the application or within another application. Say for example if the application
             *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
             *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
             *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
             *
             *    Note that this feature is only active when the `ngAnimate` module is used.
             *
             * @param {DOMElement} element the external element that will be pinned
             * @param {DOMElement} parentElement the host parent element that will be associated with the external element
             */
            pin: $$animateQueue.pin,

            /**
             *
             * @ngdoc method
             * @name $animate#enabled
             * @kind function
             * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
             * function can be called in four ways:
             *
             * ```js
             * // returns true or false
             * $animate.enabled();
             *
             * // changes the enabled state for all animations
             * $animate.enabled(false);
             * $animate.enabled(true);
             *
             * // returns true or false if animations are enabled for an element
             * $animate.enabled(element);
             *
             * // changes the enabled state for an element and its children
             * $animate.enabled(element, true);
             * $animate.enabled(element, false);
             * ```
             *
             * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
             * @param {boolean=} enabled whether or not the animations will be enabled for the element
             *
             * @return {boolean} whether or not animations are enabled
             */
            enabled: $$animateQueue.enabled,

            /**
       * @ngdoc method
       * @name $animate#cancel
       * @kind function
       * @description Cancels the provided animation and applies the end state of the animation.
       * Note that this does not cancel the underlying operation, e.g. the setting of classes or
       * adding the element to the DOM.
       *
       * @param {animationRunner} animationRunner An animation runner returned by an $animate function.
       *
       * @example
        <example module="animationExample" deps="angular-animate.js" animations="true" name="animate-cancel">
          <file name="app.js">
            angular.module('animationExample', ['ngAnimate']).component('cancelExample', {
              templateUrl: 'template.html',
              controller: function($element, $animate) {
                this.runner = null;

                this.addClass = function() {
                  this.runner = $animate.addClass($element.find('div'), 'red');
                  var ctrl = this;
                  this.runner.finally(function() {
                    ctrl.runner = null;
                  });
                };

                this.removeClass = function() {
                  this.runner = $animate.removeClass($element.find('div'), 'red');
                  var ctrl = this;
                  this.runner.finally(function() {
                    ctrl.runner = null;
                  });
                };

                this.cancel = function() {
                  $animate.cancel(this.runner);
                };
              }
            });
          </file>
          <file name="template.html">
            <p>
              <button id="add" ng-click="$ctrl.addClass()">Add</button>
              <button ng-click="$ctrl.removeClass()">Remove</button>
              <br>
              <button id="cancel" ng-click="$ctrl.cancel()" ng-disabled="!$ctrl.runner">Cancel</button>
              <br>
              <div id="target">CSS-Animated Text</div>
            </p>
          </file>
          <file name="index.html">
            <cancel-example></cancel-example>
          </file>
          <file name="style.css">
            .red-add, .red-remove {
              transition: all 4s cubic-bezier(0.250, 0.460, 0.450, 0.940);
            }

            .red,
            .red-add.red-add-active {
              color: #FF0000;
              font-size: 40px;
            }

            .red-remove.red-remove-active {
              font-size: 10px;
              color: black;
            }

          </file>
        </example>
       */
            cancel: function (runner) {
              if (runner.cancel) {
                runner.cancel()
              }
            },

            /**
             *
             * @ngdoc method
             * @name $animate#enter
             * @kind function
             * @description Inserts the element into the DOM either after the `after` element (if provided) or
             *   as the first child within the `parent` element and then triggers an animation.
             *   A promise is returned that will be resolved during the next digest once the animation
             *   has completed.
             *
             * @param {DOMElement} element the element which will be inserted into the DOM
             * @param {DOMElement} parent the parent element which will append the element as
             *   a child (so long as the after element is not present)
             * @param {DOMElement=} after the sibling element after which the element will be appended
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            enter: function (element, parent, after, options) {
              parent = parent && jqLite(parent)
              after = after && jqLite(after)
              parent = parent || after.parent()
              domInsert(element, parent, after)
              return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options))
            },

            /**
             *
             * @ngdoc method
             * @name $animate#move
             * @kind function
             * @description Inserts (moves) the element into its new position in the DOM either after
             *   the `after` element (if provided) or as the first child within the `parent` element
             *   and then triggers an animation. A promise is returned that will be resolved
             *   during the next digest once the animation has completed.
             *
             * @param {DOMElement} element the element which will be moved into the new DOM position
             * @param {DOMElement} parent the parent element which will append the element as
             *   a child (so long as the after element is not present)
             * @param {DOMElement=} after the sibling element after which the element will be appended
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            move: function (element, parent, after, options) {
              parent = parent && jqLite(parent)
              after = after && jqLite(after)
              parent = parent || after.parent()
              domInsert(element, parent, after)
              return $$animateQueue.push(element, 'move', prepareAnimateOptions(options))
            },

            /**
             * @ngdoc method
             * @name $animate#leave
             * @kind function
             * @description Triggers an animation and then removes the element from the DOM.
             * When the function is called a promise is returned that will be resolved during the next
             * digest once the animation has completed.
             *
             * @param {DOMElement} element the element which will be removed from the DOM
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            leave: function (element, options) {
              return $$animateQueue.push(
                element,
                'leave',
                prepareAnimateOptions(options),
                function () {
                  element.remove()
                }
              )
            },

            /**
             * @ngdoc method
             * @name $animate#addClass
             * @kind function
             *
             * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
             *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
             *   animation if element already contains the CSS class or if the class is removed at a later step.
             *   Note that class-based animations are treated differently compared to structural animations
             *   (like enter, move and leave) since the CSS classes may be added/removed at different points
             *   depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} animationRunner the animation runner
             */
            addClass: function (element, className, options) {
              options = prepareAnimateOptions(options)
              options.addClass = mergeClasses(options.addclass, className)
              return $$animateQueue.push(element, 'addClass', options)
            },

            /**
             * @ngdoc method
             * @name $animate#removeClass
             * @kind function
             *
             * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
             *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
             *   animation if element does not contain the CSS class or if the class is added at a later step.
             *   Note that class-based animations are treated differently compared to structural animations
             *   (like enter, move and leave) since the CSS classes may be added/removed at different points
             *   depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            removeClass: function (element, className, options) {
              options = prepareAnimateOptions(options)
              options.removeClass = mergeClasses(options.removeClass, className)
              return $$animateQueue.push(element, 'removeClass', options)
            },

            /**
             * @ngdoc method
             * @name $animate#setClass
             * @kind function
             *
             * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
             *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
             *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
             *    passed. Note that class-based animations are treated differently compared to structural animations
             *    (like enter, move and leave) since the CSS classes may be added/removed at different points
             *    depending if CSS or JavaScript animations are used.
             *
             * @param {DOMElement} element the element which the CSS classes will be applied to
             * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
             * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            setClass: function (element, add, remove, options) {
              options = prepareAnimateOptions(options)
              options.addClass = mergeClasses(options.addClass, add)
              options.removeClass = mergeClasses(options.removeClass, remove)
              return $$animateQueue.push(element, 'setClass', options)
            },

            /**
             * @ngdoc method
             * @name $animate#animate
             * @kind function
             *
             * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
             * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
             * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
             * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
             * style in `to`, the style in `from` is applied immediately, and no animation is run.
             * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
             * method (or as part of the `options` parameter):
             *
             * ```js
             * ngModule.animation('.my-inline-animation', function() {
             *   return {
             *     animate : function(element, from, to, done, options) {
             *       //animation
             *       done();
             *     }
             *   }
             * });
             * ```
             *
             * @param {DOMElement} element the element which the CSS styles will be applied to
             * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
             * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
             * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
             *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
             *    (Note that if no animation is detected then this value will not be applied to the element.)
             * @param {object=} options an optional collection of options/styles that will be applied to the element.
             *   The object can have the following properties:
             *
             *   - **addClass** - `{string}` - space-separated CSS classes to add to element
             *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
             *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
             *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
             *
             * @return {Runner} the animation runner
             */
            animate: function (element, from, to, className, options) {
              options = prepareAnimateOptions(options)
              options.from = options.from ? extend(options.from, from) : from
              options.to = options.to ? extend(options.to, to) : to

              className = className || 'ng-inline-animate'
              options.tempClasses = mergeClasses(options.tempClasses, className)
              return $$animateQueue.push(element, 'animate', options)
            },
          }
        },
      ]
    },
  ]

  var $$AnimateAsyncRunFactoryProvider = /** @this */ function () {
    this.$get = [
      '$$rAF',
      function ($$rAF) {
        var waitQueue = []

        function waitForTick(fn) {
          waitQueue.push(fn)
          if (waitQueue.length > 1) return
          $$rAF(function () {
            for (var i = 0; i < waitQueue.length; i++) {
              waitQueue[i]()
            }
            waitQueue = []
          })
        }

        return function () {
          var passed = false
          waitForTick(function () {
            passed = true
          })
          return function (callback) {
            if (passed) {
              callback()
            } else {
              waitForTick(callback)
            }
          }
        }
      },
    ]
  }

  var $$AnimateRunnerFactoryProvider = /** @this */ function () {
    this.$get = [
      '$q',
      '$sniffer',
      '$$animateAsyncRun',
      '$$isDocumentHidden',
      '$timeout',
      function ($q, $sniffer, $$animateAsyncRun, $$isDocumentHidden, $timeout) {
        var INITIAL_STATE = 0
        var DONE_PENDING_STATE = 1
        var DONE_COMPLETE_STATE = 2

        AnimateRunner.chain = function (chain, callback) {
          var index = 0

          next()
          function next() {
            if (index === chain.length) {
              callback(true)
              return
            }

            chain[index](function (response) {
              if (response === false) {
                callback(false)
                return
              }
              index++
              next()
            })
          }
        }

        AnimateRunner.all = function (runners, callback) {
          var count = 0
          var status = true
          forEach(runners, function (runner) {
            runner.done(onProgress)
          })

          function onProgress(response) {
            status = status && response
            if (++count === runners.length) {
              callback(status)
            }
          }
        }

        function AnimateRunner(host) {
          this.setHost(host)

          var rafTick = $$animateAsyncRun()
          var timeoutTick = function (fn) {
            $timeout(fn, 0, false)
          }

          this._doneCallbacks = []
          this._tick = function (fn) {
            if ($$isDocumentHidden()) {
              timeoutTick(fn)
            } else {
              rafTick(fn)
            }
          }
          this._state = 0
        }

        AnimateRunner.prototype = {
          setHost: function (host) {
            this.host = host || {}
          },

          done: function (fn) {
            if (this._state === DONE_COMPLETE_STATE) {
              fn()
            } else {
              this._doneCallbacks.push(fn)
            }
          },

          progress: noop,

          getPromise: function () {
            if (!this.promise) {
              var self = this
              this.promise = $q(function (resolve, reject) {
                self.done(function (status) {
                  if (status === false) {
                    reject()
                  } else {
                    resolve()
                  }
                })
              })
            }
            return this.promise
          },

          then: function (resolveHandler, rejectHandler) {
            return this.getPromise().then(resolveHandler, rejectHandler)
          },

          catch: function (handler) {
            return this.getPromise()['catch'](handler)
          },

          finally: function (handler) {
            return this.getPromise()['finally'](handler)
          },

          pause: function () {
            if (this.host.pause) {
              this.host.pause()
            }
          },

          resume: function () {
            if (this.host.resume) {
              this.host.resume()
            }
          },

          end: function () {
            if (this.host.end) {
              this.host.end()
            }
            this._resolve(true)
          },

          cancel: function () {
            if (this.host.cancel) {
              this.host.cancel()
            }
            this._resolve(false)
          },

          complete: function (response) {
            var self = this
            if (self._state === INITIAL_STATE) {
              self._state = DONE_PENDING_STATE
              self._tick(function () {
                self._resolve(response)
              })
            }
          },

          _resolve: function (response) {
            if (this._state !== DONE_COMPLETE_STATE) {
              forEach(this._doneCallbacks, function (fn) {
                fn(response)
              })
              this._doneCallbacks.length = 0
              this._state = DONE_COMPLETE_STATE
            }
          },
        }

        return AnimateRunner
      },
    ]
  }

  /* exported $CoreAnimateCssProvider */

  /**
   * @ngdoc service
   * @name $animateCss
   * @kind object
   * @this
   *
   * @description
   * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
   * then the `$animateCss` service will actually perform animations.
   *
   * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
   */
  var $CoreAnimateCssProvider = function () {
    this.$get = [
      '$$rAF',
      '$q',
      '$$AnimateRunner',
      function ($$rAF, $q, $$AnimateRunner) {
        return function (element, initialOptions) {
          // all of the animation functions should create
          // a copy of the options data, however, if a
          // parent service has already created a copy then
          // we should stick to using that
          var options = initialOptions || {}
          if (!options.$$prepared) {
            options = copy(options)
          }

          // there is no point in applying the styles since
          // there is no animation that goes on at all in
          // this version of $animateCss.
          if (options.cleanupStyles) {
            options.from = options.to = null
          }

          if (options.from) {
            element.css(options.from)
            options.from = null
          }

          var closed,
            runner = new $$AnimateRunner()
          return {
            start: run,
            end: run,
          }

          function run() {
            $$rAF(function () {
              applyAnimationContents()
              if (!closed) {
                runner.complete()
              }
              closed = true
            })
            return runner
          }

          function applyAnimationContents() {
            if (options.addClass) {
              element.addClass(options.addClass)
              options.addClass = null
            }
            if (options.removeClass) {
              element.removeClass(options.removeClass)
              options.removeClass = null
            }
            if (options.to) {
              element.css(options.to)
              options.to = null
            }
          }
        }
      },
    ]
  }

  /* global getHash: true, stripHash: false */

  function getHash(url) {
    var index = url.indexOf('#')
    return index === -1 ? '' : url.substr(index)
  }

  function trimEmptyHash(url) {
    return url.replace(/#$/, '')
  }

  /**
   * ! This is a private undocumented service !
   *
   * @name $browser
   * @requires $log
   * @description
   * This object has two goals:
   *
   * - hide all the global state in the browser caused by the window object
   * - abstract away all the browser specific features and inconsistencies
   *
   * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
   * service, which can be used for convenient testing of the application without the interaction with
   * the real browser apis.
   */
  /**
   * @param {object} window The global window object.
   * @param {object} document jQuery wrapped document.
   * @param {object} $log window.console or an object with the same interface.
   * @param {object} $sniffer $sniffer service
   */
  function Browser(window, document, $log, $sniffer, $$taskTrackerFactory) {
    var self = this,
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {},
      taskTracker = $$taskTrackerFactory($log)

    self.isMock = false

    //////////////////////////////////////////////////////////////
    // Task-tracking API
    //////////////////////////////////////////////////////////////

    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = taskTracker.completeTask
    self.$$incOutstandingRequestCount = taskTracker.incTaskCount

    // TODO(vojta): prefix this method with $$ ?
    self.notifyWhenNoOutstandingRequests = taskTracker.notifyWhenNoPendingTasks

    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////

    var cachedState,
      lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      pendingLocation = null,
      getCurrentState = !$sniffer.history
        ? noop
        : function getCurrentState() {
            try {
              return history.state
            } catch (e) {
              // MSIE can reportedly throw when there is no state (UNCONFIRMED).
            }
          }

    cacheState()

    /**
     * @name $browser#url
     *
     * @description
     * GETTER:
     * Without any argument, this method just returns current value of `location.href` (with a
     * trailing `#` stripped of if the hash is empty).
     *
     * SETTER:
     * With at least one argument, this method sets url to new value.
     * If html5 history api supported, `pushState`/`replaceState` is used, otherwise
     * `location.href`/`location.replace` is used.
     * Returns its own instance to allow chaining.
     *
     * NOTE: this api is intended for use only by the `$location` service. Please use the
     * {@link ng.$location $location service} to change url.
     *
     * @param {string} url New url (when used as setter)
     * @param {boolean=} replace Should new url replace current history record?
     * @param {object=} state State object to use with `pushState`/`replaceState`
     */
    self.url = function (url, replace, state) {
      // In modern browsers `history.state` is `null` by default; treating it separately
      // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
      // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
      if (isUndefined(state)) {
        state = null
      }

      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location) location = window.location
      if (history !== window.history) history = window.history

      // setter
      if (url) {
        var sameState = lastHistoryState === state

        // Normalize the inputted URL
        url = urlResolve(url).href

        // Don't change anything if previous and current URLs and states match. This also prevents
        // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
        // See https://github.com/angular/angular.js/commit/ffb2701
        if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
          return self
        }
        var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url)
        lastBrowserUrl = url
        lastHistoryState = state
        // Don't use history API if only the hash changed
        // due to a bug in IE10/IE11 which leads
        // to not firing a `hashchange` nor `popstate` event
        // in some cases (see #9143).
        if ($sniffer.history && (!sameBase || !sameState)) {
          history[replace ? 'replaceState' : 'pushState'](state, '', url)
          cacheState()
        } else {
          if (!sameBase) {
            pendingLocation = url
          }
          if (replace) {
            location.replace(url)
          } else if (!sameBase) {
            location.href = url
          } else {
            location.hash = getHash(url)
          }
          if (location.href !== url) {
            pendingLocation = url
          }
        }
        if (pendingLocation) {
          pendingLocation = url
        }
        return self
        // getter
      } else {
        // - pendingLocation is needed as browsers don't allow to read out
        //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
        //   https://openradar.appspot.com/22186109).
        return trimEmptyHash(pendingLocation || location.href)
      }
    }

    /**
     * @name $browser#state
     *
     * @description
     * This method is a getter.
     *
     * Return history.state or null if history.state is undefined.
     *
     * @returns {object} state
     */
    self.state = function () {
      return cachedState
    }

    var urlChangeListeners = [],
      urlChangeInit = false

    function cacheStateAndFireUrlChange() {
      pendingLocation = null
      fireStateOrUrlChange()
    }

    // This variable should be used *only* inside the cacheState function.
    var lastCachedState = null
    function cacheState() {
      // This should be the only place in $browser where `history.state` is read.
      cachedState = getCurrentState()
      cachedState = isUndefined(cachedState) ? null : cachedState

      // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
      if (equals(cachedState, lastCachedState)) {
        cachedState = lastCachedState
      }

      lastCachedState = cachedState
      lastHistoryState = cachedState
    }

    function fireStateOrUrlChange() {
      var prevLastHistoryState = lastHistoryState
      cacheState()

      if (lastBrowserUrl === self.url() && prevLastHistoryState === cachedState) {
        return
      }

      lastBrowserUrl = self.url()
      lastHistoryState = cachedState
      forEach(urlChangeListeners, function (listener) {
        listener(self.url(), cachedState)
      })
    }

    /**
     * @name $browser#onUrlChange
     *
     * @description
     * Register callback function that will be called, when url changes.
     *
     * It's only called when the url is changed from outside of AngularJS:
     * - user types different url into address bar
     * - user clicks on history (forward/back) button
     * - user clicks on a link
     *
     * It's not called when url is changed by $browser.url() method
     *
     * The listener gets called with new url as parameter.
     *
     * NOTE: this api is intended for use only by the $location service. Please use the
     * {@link ng.$location $location service} to monitor url changes in AngularJS apps.
     *
     * @param {function(string)} listener Listener function to be called when url changes.
     * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
     */
    self.onUrlChange = function (callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers don't
        // fire popstate when user changes the address bar and don't fire hashchange when url
        // changed by push/replaceState

        // html5 history api - popstate event
        if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange)
        // hashchange event
        jqLite(window).on('hashchange', cacheStateAndFireUrlChange)

        urlChangeInit = true
      }

      urlChangeListeners.push(callback)
      return callback
    }

    /**
     * @private
     * Remove popstate and hashchange handler from window.
     *
     * NOTE: this api is intended for use only by $rootScope.
     */
    self.$$applicationDestroyed = function () {
      jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange)
    }

    /**
     * Checks whether the url has changed outside of AngularJS.
     * Needs to be exported to be able to check for changes that have been done in sync,
     * as hashchange/popstate events fire in async.
     */
    self.$$checkUrlChange = fireStateOrUrlChange

    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////

    /**
     * @name $browser#baseHref
     *
     * @description
     * Returns current <base href>
     * (always relative - without domain)
     *
     * @returns {string} The current base href
     */
    self.baseHref = function () {
      var href = baseElement.attr('href')
      return href ? href.replace(/^(https?:)?\/\/[^/]*/, '') : ''
    }

    /**
     * @name $browser#defer
     * @param {function()} fn A function, who's execution should be deferred.
     * @param {number=} [delay=0] Number of milliseconds to defer the function execution.
     * @param {string=} [taskType=DEFAULT_TASK_TYPE] The type of task that is deferred.
     * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
     *
     * @description
     * Executes a fn asynchronously via `setTimeout(fn, delay)`.
     *
     * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
     * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
     * via `$browser.defer.flush()`.
     *
     */
    self.defer = function (fn, delay, taskType) {
      var timeoutId

      delay = delay || 0
      taskType = taskType || taskTracker.DEFAULT_TASK_TYPE

      taskTracker.incTaskCount(taskType)
      timeoutId = setTimeout(function () {
        delete pendingDeferIds[timeoutId]
        taskTracker.completeTask(fn, taskType)
      }, delay)
      pendingDeferIds[timeoutId] = taskType

      return timeoutId
    }

    /**
     * @name $browser#defer.cancel
     *
     * @description
     * Cancels a deferred task identified with `deferId`.
     *
     * @param {*} deferId Token returned by the `$browser.defer` function.
     * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
     *                    canceled.
     */
    self.defer.cancel = function (deferId) {
      if (pendingDeferIds.hasOwnProperty(deferId)) {
        var taskType = pendingDeferIds[deferId]
        delete pendingDeferIds[deferId]
        clearTimeout(deferId)
        taskTracker.completeTask(noop, taskType)
        return true
      }
      return false
    }
  }

  /** @this */
  function $BrowserProvider() {
    this.$get = [
      '$window',
      '$log',
      '$sniffer',
      '$document',
      '$$taskTrackerFactory',
      function ($window, $log, $sniffer, $document, $$taskTrackerFactory) {
        return new Browser($window, $document, $log, $sniffer, $$taskTrackerFactory)
      },
    ]
  }

  /**
 * @ngdoc service
 * @name $cacheFactory
 * @this
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp" name="cache-factory">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if (angular.isUndefined($scope.cache.get(key))) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
  function $CacheFactoryProvider() {
    this.$get = function () {
      var caches = {}

      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId)
        }

        var size = 0,
          stats = extend({}, options, { id: cacheId }),
          data = createMap(),
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = createMap(),
          freshEnd = null,
          staleEnd = null

        /**
         * @ngdoc type
         * @name $cacheFactory.Cache
         *
         * @description
         * A cache object used to store and retrieve data, primarily used by
         * {@link $templateRequest $templateRequest} and the {@link ng.directive:script script}
         * directive to cache templates and other data.
         *
         * ```js
         *  angular.module('superCache')
         *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
         *      return $cacheFactory('super-cache');
         *    }]);
         * ```
         *
         * Example test:
         *
         * ```js
         *  it('should behave like a cache', inject(function(superCache) {
         *    superCache.put('key', 'value');
         *    superCache.put('another key', 'another value');
         *
         *    expect(superCache.info()).toEqual({
         *      id: 'super-cache',
         *      size: 2
         *    });
         *
         *    superCache.remove('another key');
         *    expect(superCache.get('another key')).toBeUndefined();
         *
         *    superCache.removeAll();
         *    expect(superCache.info()).toEqual({
         *      id: 'super-cache',
         *      size: 0
         *    });
         *  }));
         * ```
         */
        return (caches[cacheId] = {
          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#put
           * @kind function
           *
           * @description
           * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
           * retrieved later, and incrementing the size of the cache if the key was not already
           * present in the cache. If behaving like an LRU cache, it will also remove stale
           * entries from the set.
           *
           * It will not insert undefined values into the cache.
           *
           * @param {string} key the key under which the cached data is stored.
           * @param {*} value the value to store alongside the key. If it is undefined, the key
           *    will not be stored.
           * @returns {*} the value stored.
           */
          put: function (key, value) {
            if (isUndefined(value)) return
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = { key: key })

              refresh(lruEntry)
            }

            if (!(key in data)) size++
            data[key] = value

            if (size > capacity) {
              this.remove(staleEnd.key)
            }

            return value
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#get
           * @kind function
           *
           * @description
           * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the data to be retrieved
           * @returns {*} the value stored.
           */
          get: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key]

              if (!lruEntry) return

              refresh(lruEntry)
            }

            return data[key]
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#remove
           * @kind function
           *
           * @description
           * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
           *
           * @param {string} key the key of the entry to be removed
           */
          remove: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key]

              if (!lruEntry) return

              if (lruEntry === freshEnd) freshEnd = lruEntry.p
              if (lruEntry === staleEnd) staleEnd = lruEntry.n
              link(lruEntry.n, lruEntry.p)

              delete lruHash[key]
            }

            if (!(key in data)) return

            delete data[key]
            size--
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#removeAll
           * @kind function
           *
           * @description
           * Clears the cache object of any entries.
           */
          removeAll: function () {
            data = createMap()
            size = 0
            lruHash = createMap()
            freshEnd = staleEnd = null
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#destroy
           * @kind function
           *
           * @description
           * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
           * removing it from the {@link $cacheFactory $cacheFactory} set.
           */
          destroy: function () {
            data = null
            stats = null
            lruHash = null
            delete caches[cacheId]
          },

          /**
           * @ngdoc method
           * @name $cacheFactory.Cache#info
           * @kind function
           *
           * @description
           * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
           *
           * @returns {object} an object with the following properties:
           *   <ul>
           *     <li>**id**: the id of the cache instance</li>
           *     <li>**size**: the number of entries kept in the cache instance</li>
           *     <li>**...**: any additional properties from the options object when creating the
           *       cache.</li>
           *   </ul>
           */
          info: function () {
            return extend({}, stats, { size: size })
          },
        })

        /**
         * makes the `entry` the freshEnd of the LRU linked list
         */
        function refresh(entry) {
          if (entry !== freshEnd) {
            if (!staleEnd) {
              staleEnd = entry
            } else if (staleEnd === entry) {
              staleEnd = entry.n
            }

            link(entry.n, entry.p)
            link(entry, freshEnd)
            freshEnd = entry
            freshEnd.n = null
          }
        }

        /**
         * bidirectionally links two entries of the LRU linked list
         */
        function link(nextEntry, prevEntry) {
          if (nextEntry !== prevEntry) {
            if (nextEntry) nextEntry.p = prevEntry //p stands for previous, 'prev' didn't minify
            if (prevEntry) prevEntry.n = nextEntry //n stands for next, 'next' didn't minify
          }
        }
      }

      /**
       * @ngdoc method
       * @name $cacheFactory#info
       *
       * @description
       * Get information about all the caches that have been created
       *
       * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
       */
      cacheFactory.info = function () {
        var info = {}
        forEach(caches, function (cache, cacheId) {
          info[cacheId] = cache.info()
        })
        return info
      }

      /**
       * @ngdoc method
       * @name $cacheFactory#get
       *
       * @description
       * Get access to a cache object by the `cacheId` used when it was created.
       *
       * @param {string} cacheId Name or id of a cache to access.
       * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
       */
      cacheFactory.get = function (cacheId) {
        return caches[cacheId]
      }

      return cacheFactory
    }
  }

  /**
   * @ngdoc service
   * @name $templateCache
   * @this
   *
   * @description
   * `$templateCache` is a {@link $cacheFactory.Cache Cache object} created by the
   * {@link ng.$cacheFactory $cacheFactory}.
   *
   * The first time a template is used, it is loaded in the template cache for quick retrieval. You
   * can load templates directly into the cache in a `script` tag, by using {@link $templateRequest},
   * or by consuming the `$templateCache` service directly.
   *
   * Adding via the `script` tag:
   *
   * ```html
   *   <script type="text/ng-template" id="templateId.html">
   *     <p>This is the content of the template</p>
   *   </script>
   * ```
   *
   * **Note:** the `script` tag containing the template does not need to be included in the `head` of
   * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (e.g.
   * element with {@link ngApp} attribute), otherwise the template will be ignored.
   *
   * Adding via the `$templateCache` service:
   *
   * ```js
   * var myApp = angular.module('myApp', []);
   * myApp.run(function($templateCache) {
   *   $templateCache.put('templateId.html', 'This is the content of the template');
   * });
   * ```
   *
   * To retrieve the template later, simply use it in your component:
   * ```js
   * myApp.component('myComponent', {
   *    templateUrl: 'templateId.html'
   * });
   * ```
   *
   * or get it via the `$templateCache` service:
   * ```js
   * $templateCache.get('templateId.html')
   * ```
   *
   */
  function $TemplateCacheProvider() {
    this.$get = [
      '$cacheFactory',
      function ($cacheFactory) {
        return $cacheFactory('templates')
      },
    ]
  }

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables like document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
   *
   * DOM-related variables:
   *
   * - "node" - DOM Node
   * - "element" - DOM Element or Node
   * - "$node" or "$element" - jqLite-wrapped node or element
   *
   *
   * Compiler related stuff:
   *
   * - "linkFn" - linking fn of a single directive
   * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
   * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
   * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
   */

  /**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
 * that defines the directive properties, or just the `postLink` function (all other properties will have
 * the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       {@link $compile#-priority- priority}: 0,
 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       {@link $compile#-transclude- transclude}: false,
 *       {@link $compile#-restrict- restrict}: 'A',
 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
 *       {@link $compile#-scope- scope}: false,
 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
 *       {@link $compile#-bindtocontroller- bindToController}: false,
 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       {@link $compile#-multielement- multiElement}: false,
 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
 *         return {
 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // {@link $compile#-link- link}: {
 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 * ### Life-cycle hooks
 * Directive controllers can provide the following methods that are called by AngularJS at points in the life-cycle of the
 * directive:
 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
 *   this element). This is a good place to put initialization code for your controller.
 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
 *   component such as cloning the bound value to prevent accidental mutation of the outer value. Note that this will
 *   also be called when your bindings are initialized.
 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
 *   changes. Any actions that you wish to take in response to the changes that you detect must be
 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
 *   be detected by AngularJS's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
 *   components will have their `$onDestroy()` hook called before child components.
 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
 *   suspended until that occurs.
 *
 * #### Comparison with life-cycle hooks in the new Angular
 * The new Angular also uses life-cycle hooks for its components. While the AngularJS life-cycle hooks are similar there are
 * some differences that you should be aware of, especially when it comes to moving your code from AngularJS to Angular:
 *
 * * AngularJS hooks are prefixed with `$`, such as `$onInit`. Angular hooks are prefixed with `ng`, such as `ngOnInit`.
 * * AngularJS hooks can be defined on the controller prototype or added to the controller inside its constructor.
 *   In Angular you can only define hooks on the prototype of the Component class.
 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in AngularJS than you would to
 *   `ngDoCheck` in Angular.
 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
 *   propagated throughout the application.
 *   Angular does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
 *   error or do nothing depending upon the state of `enableProdMode()`.
 *
 * #### Life-cycle hook examples
 *
 * This example shows how you can check for mutations to a Date object even though the identity of the object
 * has not changed.
 *
 * <example name="doCheckDateExample" module="do-check-module">
 *   <file name="app.js">
 *     angular.module('do-check-module', [])
 *       .component('app', {
 *         template:
 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
 *           'Date: {{ $ctrl.date }}' +
 *           '<test date="$ctrl.date"></test>',
 *         controller: function() {
 *           this.date = new Date();
 *           this.month = this.date.getMonth();
 *           this.updateDate = function() {
 *             this.date.setMonth(this.month);
 *           };
 *         }
 *       })
 *       .component('test', {
 *         bindings: { date: '<' },
 *         template:
 *           '<pre>{{ $ctrl.log | json }}</pre>',
 *         controller: function() {
 *           var previousValue;
 *           this.log = [];
 *           this.$doCheck = function() {
 *             var currentValue = this.date && this.date.valueOf();
 *             if (previousValue !== currentValue) {
 *               this.log.push('doCheck: date mutated: ' + this.date);
 *               previousValue = currentValue;
 *             }
 *           };
 *         }
 *       });
 *   </file>
 *   <file name="index.html">
 *     <app></app>
 *   </file>
 * </example>
 *
 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
 * arrays or objects can have a negative impact on your application performance.)
 *
 * <example name="doCheckArrayExample" module="do-check-module">
 *   <file name="index.html">
 *     <div ng-init="items = []">
 *       <button ng-click="items.push(items.length)">Add Item</button>
 *       <button ng-click="items = []">Reset Items</button>
 *       <pre>{{ items }}</pre>
 *       <test items="items"></test>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *      angular.module('do-check-module', [])
 *        .component('test', {
 *          bindings: { items: '<' },
 *          template:
 *            '<pre>{{ $ctrl.log | json }}</pre>',
 *          controller: function() {
 *            this.log = [];
 *
 *            this.$doCheck = function() {
 *              if (this.items_ref !== this.items) {
 *                this.log.push('doCheck: items changed');
 *                this.items_ref = this.items;
 *              }
 *              if (!angular.equals(this.items_clone, this.items)) {
 *                this.log.push('doCheck: items mutated');
 *                this.items_clone = angular.copy(this.items);
 *              }
 *            };
 *          }
 *        });
 *   </file>
 * </example>
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioral (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * The scope property can be `false`, `true`, or an object:
 *
 * * **`false` (default):** No scope will be created for the directive. The directive will use its
 * parent's scope.
 *
 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
 * the directive's element. If multiple directives on the same element request a new scope,
 * only one new scope is created.
 *
 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's template.
 * The 'isolate' scope differs from normal scope in that it does not prototypically
 * inherit from its parent scope. This is useful when creating reusable components, which should not
 * accidentally read or modify data in the parent scope. Note that an isolate scope
 * directive without a `template` or `templateUrl` will not apply the isolate scope
 * to its children elements.
 *
 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
 * directive's element. These local properties are useful for aliasing values for templates. The keys in
 * the object hash map to the name of the property on the isolate scope; the values define how the property
 * is bound to the parent scope, via matching attributes on the directive's element:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
 *   attribute name is assumed to be the same as the local name. Given `<my-component
 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
 *   the directive's scope property `localName` will reflect the interpolated value of `hello
 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
 *   scope. The `name` is read from the parent scope (not the directive's scope).
 *
 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
 *   `localModel` and vice versa. If the binding expression is non-assignable, or if the attribute
 *   isn't  optional and doesn't exist, an exception
 *   ({@link error/$compile/nonassign `$compile:nonassign`}) will be thrown upon discovering changes
 *   to the local value, since it will be impossible to sync them back to the parent scope.
 *
 *   By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
 *   method is used for tracking changes, and the equality check is based on object identity.
 *   However, if an object literal or an array literal is passed as the binding expression, the
 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
 *   `$watchCollection`}: use `=*` or `=*attr`
 *
  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name.
 *
 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
 *   two caveats:
 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
 *     sets the same value. That means if your bound value is an object, changes to its properties
 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
 *     to the value has changed. In most cases, this should not be of concern, but can be important
 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
 *     If you now change a property of the object in your parent scope, the change will not be
 *     propagated to the isolated scope, because the identity of the object on the parent scope
 *     has not changed. Instead you must assign a new object.
 *
 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
 *   back to the parent. However, it does not make this completely impossible.
 *
 *   By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
 *   method is used for tracking changes, and the equality check is based on object identity.
 *   It's also possible to watch the evaluated value shallowly with
 *   {@link ng.$rootScope.Scope#$watchCollection `$watchCollection`}: use `<*` or `<*attr`
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
 *   via an expression to the parent scope. This can be done by passing a map of local variable names
 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
 *
 * All 4 kinds of bindings (`@`, `=`, `<`, and `&`) can be made optional by adding `?` to the expression.
 * The marker must come after the mode and before the attribute name.
 * See the {@link error/$compile/iscp Invalid Isolate Scope Definition error} for definition examples.
 * This is useful to refine the interface directives provide.
 * One subtle difference between optional and non-optional happens **when the binding attribute is not
 * set**:
 * - the binding is optional: the property will not be defined
 * - the binding is not optional: the property is defined
 *
 * ```js
 *app.directive('testDir', function() {
    return {
      scope: {
        notoptional: '=',
        optional: '=?',
      },
      bindToController: true,
      controller: function() {
        this.$onInit = function() {
          console.log(this.hasOwnProperty('notoptional')) // true
          console.log(this.hasOwnProperty('optional')) // false
        }
      }
    }
  })
 *```
 *
 *
 * ##### Combining directives with different scope defintions
 *
 * In general it's possible to apply more than one directive to one element, but there might be limitations
 * depending on the type of scope required by the directives. The following points will help explain these limitations.
 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
 *
 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
 * * **child scope** + **no scope** =>  Both directives will share one single child scope
 * * **child scope** + **child scope** =>  Both directives will share one single child scope
 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
 * its parent's scope
 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
 * be applied to the same element.
 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
 * cannot be applied to the same element.
 *
 *
 * #### `bindToController`
 * This property is used to bind scope properties directly to the controller. It can be either
 * `true` or an object hash with the same format as the `scope` property.
 *
 * When an isolate scope is used for a directive (see above), `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope.
 *
 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
 * properties. You can access these bindings once they have been initialized by providing a controller method called
 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
 * initialized.
 *
 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
 * scope (useful for component directives).
 *
 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and can be accessed by other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
 *    * `scope`: (optional) override the scope.
 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
 *    * `futureParentElement` (optional):
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkingFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
 *      then the default transclusion is provided.
 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` property can be a string, an array or an object:
 * * a **string** containing the name of the directive to pass to the linking function
 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
 * linking function will be an array of controllers in the same order as the names in the `require` property
 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
 * controllers.
 *
 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
 * have been constructed but before `$onInit` is called.
 * If the name of the required controller is the same as the local name (the key), the name can be
 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
 * See the {@link $compileProvider#component} helper for an example of how this can be used.
 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
 * raised (unless no link function is specified and the required controllers are not being bound to the directive
 * controller, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Identifier name for a reference to the controller in the directive's scope.
 * This allows the controller to be referenced from the directive template. This is especially
 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}.
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace`
 * <div class="alert alert-danger">
 * **Note:** `replace` is deprecated in AngularJS and has been removed in the new Angular (v2+).
 * </div>
 *
 * Specifies what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and
 * stack overflow errors.
 *
 * This can be avoided by manually using `$compile` in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-danger">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *     Note that you can also require the directive's own controller - it will be made available like
 *     any other controller.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude` parameter of directive controllers,
 *     see {@link ng.$compile#-controller- the controller section for details}.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element, the entire element or multiple parts of the element contents:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that are defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
 *
 * **Multi-slot transclusion** is declared by providing an object for the `transclude` property.
 *
 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
 *
 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}.
 *
 * If the element selector is prefixed with a `?` then that slot is optional.
 *
 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
 *
 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
 * injectable into the directive's controller.
 *
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
   ```
   - $rootScope
     - isolate
       - transclusion
   ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
   ```
   - $rootScope
     - transclusion
   - isolate
   ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * * *Accessing normalized attribute names:* Directives like `ngBind` can be expressed in many ways:
 *   `ng:bind`, `data-ng-bind`, or `x-ng-bind`. The attributes object allows for normalized access
 *   to the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample" name="compile">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // Configure new 'compile' directive by passing a directive
        // factory function. The factory function injects '$compile'.
        $compileProvider.directive('compile', function($compile) {
          // The directive factory creates a link function.
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                // Watch the 'compile' expression for changes.
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // When the 'compile' expression changes
                // assign it into the current DOM.
                element.html(value);

                // Compile the new DOM and link it to the current scope.
                // NOTE: we only compile '.childNodes' so that we
                // don't get into an infinite loop compiling ourselves.
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'AngularJS';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br/>
      <textarea ng-model="html"></textarea> <br/>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello AngularJS'.
       expect(output.getText()).toBe('Hello AngularJS');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('AngularJS!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-danger">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to a hash with the key `instance`, which maps to the controller instance;
 *        if given, it will make the controllers available to directives on the compileNode:
 *        ```
 *        {
 *          parent: {
 *            instance: parentControllerInstance
 *          }
 *        }
 *        ```
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non HTML
 *        elements (e.g. SVG elements). See also the `directive.controller` property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to `$digest`, which typically is done by
 * AngularJS automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = angular.element('<p>{{total}}</p>');
 *     $compile(element)(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone either via the `cloneAttachFn` or the value returned by the
 *   linking function:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>');
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       // Attach the clone to DOM document at the right place.
 *     });
 *
 *     // Now we have reference to the cloned DOM via `clonedElement`.
 *     // NOTE: The `clonedElement` returned by the linking function is the same as the
 *     //       `clonedElement` passed to `cloneAttachFn`.
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler AngularJS HTML Compiler} section of the Developer Guide.
 *
 * @knownIssue
 *
 * ### Double Compilation
 *
   Double compilation occurs when an already compiled part of the DOM gets
   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
   section on double compilation} for an in-depth explanation and ways to avoid it.

 * @knownIssue

   ### Issues with `replace: true`
 *
 * <div class="alert alert-danger">
 *   **Note**: {@link $compile#-replace- `replace: true`} is deprecated and not recommended to use,
 *   mainly due to the issues listed here. It has been completely removed in the new Angular.
 * </div>
 *
 * #### Attribute values are not merged
 *
 * When a `replace` directive encounters the same attribute on the original and the replace node,
 * it will simply deduplicate the attribute and join the values with a space or with a `;` in case of
 * the `style` attribute.
 * ```html
 * Original Node: <span class="original" style="color: red;"></span>
 * Replace Template: <span class="replaced" style="background: blue;"></span>
 * Result: <span class="original replaced" style="color: red; background: blue;"></span>
 * ```
 *
 * That means attributes that contain AngularJS expressions will not be merged correctly, e.g.
 * {@link ngShow} or {@link ngClass} will cause a {@link $parse} error:
 *
 * ```html
 * Original Node: <span ng-class="{'something': something}" ng-show="!condition"></span>
 * Replace Template: <span ng-class="{'else': else}" ng-show="otherCondition"></span>
 * Result: <span ng-class="{'something': something} {'else': else}" ng-show="!condition otherCondition"></span>
 * ```
 *
 * See issue [#5695](https://github.com/angular/angular.js/issues/5695).
 *
 * #### Directives are not deduplicated before compilation
 *
 * When the original node and the replace template declare the same directive(s), they will be
 * {@link guide/compiler#double-compilation-and-how-to-avoid-it compiled twice} because the compiler
 * does not deduplicate them. In many cases, this is not noticeable, but e.g. {@link ngModel} will
 * attach `$formatters` and `$parsers` twice.
 *
 * See issue [#2573](https://github.com/angular/angular.js/issues/2573).
 *
 * #### `transclude: element` in the replace template root can have unexpected effects
 *
 * When the replace template has a directive at the root node that uses
 * {@link $compile#-transclude- `transclude: element`}, e.g.
 * {@link ngIf} or {@link ngRepeat}, the DOM structure or scope inheritance can be incorrect.
 * See the following issues:
 *
 * - Incorrect scope on replaced element:
 * [#9837](https://github.com/angular/angular.js/issues/9837)
 * - Different DOM between `template` and `templateUrl`:
 * [#10612](https://github.com/angular/angular.js/issues/14326)
 *
 */

  /**
   * @ngdoc directive
   * @name ngProp
   * @restrict A
   * @element ANY
   *
   * @usage
   *
   * ```html
   * <ANY ng-prop-propname="expression">
   * </ANY>
   * ```
   *
   * or with uppercase letters in property (e.g. "propName"):
   *
   *
   * ```html
   * <ANY ng-prop-prop_name="expression">
   * </ANY>
   * ```
   *
   *
   * @description
   * The `ngProp` directive binds an expression to a DOM element property.
   * `ngProp` allows writing to arbitrary properties by including
   * the property name in the attribute, e.g. `ng-prop-value="'my value'"` binds 'my value' to
   * the `value` property.
   *
   * Usually, it's not necessary to write to properties in AngularJS, as the built-in directives
   * handle the most common use cases (instead of the above example, you would use {@link ngValue}).
   *
   * However, [custom elements](https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements)
   * often use custom properties to hold data, and `ngProp` can be used to provide input to these
   * custom elements.
   *
   * ## Binding to camelCase properties
   *
   * Since HTML attributes are case-insensitive, camelCase properties like `innerHTML` must be escaped.
   * AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so
   * `innerHTML`  must be written as `ng-prop-inner_h_t_m_l="expression"` (Note that this is just an
   * example, and for binding HTML {@link ngBindHtml} should be used.
   *
   * ## Security
   *
   * Binding expressions to arbitrary properties poses a security risk, as  properties like `innerHTML`
   * can insert potentially dangerous HTML into the application, e.g. script tags that execute
   * malicious code.
   * For this reason, `ngProp` applies Strict Contextual Escaping with the {@link ng.$sce $sce service}.
   * This means vulnerable properties require their content to be "trusted", based on the
   * context of the property. For example, the `innerHTML` is in the `HTML` context, and the
   * `iframe.src` property is in the `RESOURCE_URL` context, which requires that values written to
   * this property are trusted as a `RESOURCE_URL`.
   *
   * This can be set explicitly by calling $sce.trustAs(type, value) on the value that is
   * trusted before passing it to the `ng-prop-*` directive. There are exist shorthand methods for
   * each context type in the form of {@link ng.$sce#trustAsResourceUrl $sce.trustAsResourceUrl()} et al.
   *
   * In some cases you can also rely upon automatic sanitization of untrusted values - see below.
   *
   * Based on the context, other options may exist to mark a value as trusted / configure the behavior
   * of {@link ng.$sce}. For example, to restrict the `RESOURCE_URL` context to specific origins, use
   * the {@link $sceDelegateProvider#trustedResourceUrlList trustedResourceUrlList()}
   * and {@link $sceDelegateProvider#bannedResourceUrlList bannedResourceUrlList()}.
   *
   * {@link ng.$sce#what-trusted-context-types-are-supported- Find out more about the different context types}.
   *
   * ### HTML Sanitization
   *
   * By default, `$sce` will throw an error if it detects untrusted HTML content, and will not bind the
   * content.
   * However, if you include the {@link ngSanitize ngSanitize module}, it will try to sanitize the
   * potentially dangerous HTML, e.g. strip non-trusted tags and attributes when binding to
   * `innerHTML`.
   *
   * @example
   * ### Binding to different contexts
   *
   * <example name="ngProp" module="exampleNgProp">
   *   <file name="app.js">
   *     angular.module('exampleNgProp', [])
   *       .component('main', {
   *         templateUrl: 'main.html',
   *         controller: function($sce) {
   *           this.safeContent = '<strong>Safe content</strong>';
   *           this.unsafeContent = '<button onclick="alert(\'Hello XSS!\')">Click for XSS</button>';
   *           this.trustedUnsafeContent = $sce.trustAsHtml(this.unsafeContent);
   *         }
   *       });
   *   </file>
   *   <file name="main.html">
   *     <div>
   *       <div class="prop-unit">
   *         Binding to a property without security context:
   *         <div class="prop-binding" ng-prop-inner_text="$ctrl.safeContent"></div>
   *         <span class="prop-note">innerText</span> (safeContent)
   *       </div>
   *
   *       <div class="prop-unit">
   *         "Safe" content that requires a security context will throw because the contents could potentially be dangerous ...
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.safeContent"></div>
   *         <span class="prop-note">innerHTML</span> (safeContent)
   *       </div>
   *
   *       <div class="prop-unit">
   *         ... so that actually dangerous content cannot be executed:
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.unsafeContent"></div>
   *         <span class="prop-note">innerHTML</span> (unsafeContent)
   *       </div>
   *
   *       <div class="prop-unit">
   *         ... but unsafe Content that has been trusted explicitly works - only do this if you are 100% sure!
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.trustedUnsafeContent"></div>
   *         <span class="prop-note">innerHTML</span> (trustedUnsafeContent)
   *       </div>
   *     </div>
   *   </file>
   *   <file name="index.html">
   *     <main></main>
   *   </file>
   *   <file name="styles.css">
   *     .prop-unit {
   *       margin-bottom: 10px;
   *     }
   *
   *     .prop-binding {
   *       min-height: 30px;
   *       border: 1px solid blue;
   *     }
   *
   *     .prop-note {
   *       font-family: Monospace;
   *     }
   *   </file>
   * </example>
   *
   *
   * @example
   * ### Binding to innerHTML with ngSanitize
   *
   * <example name="ngProp" module="exampleNgProp" deps="angular-sanitize.js">
   *   <file name="app.js">
   *     angular.module('exampleNgProp', ['ngSanitize'])
   *       .component('main', {
   *         templateUrl: 'main.html',
   *         controller: function($sce) {
   *           this.safeContent = '<strong>Safe content</strong>';
   *           this.unsafeContent = '<button onclick="alert(\'Hello XSS!\')">Click for XSS</button>';
   *           this.trustedUnsafeContent = $sce.trustAsHtml(this.unsafeContent);
   *         }
   *       });
   *   </file>
   *   <file name="main.html">
   *     <div>
   *       <div class="prop-unit">
   *         "Safe" content will be sanitized ...
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.safeContent"></div>
   *         <span class="prop-note">innerHTML</span> (safeContent)
   *       </div>
   *
   *       <div class="prop-unit">
   *         ... as will dangerous content:
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.unsafeContent"></div>
   *         <span class="prop-note">innerHTML</span> (unsafeContent)
   *       </div>
   *
   *       <div class="prop-unit">
   *         ... and content that has been trusted explicitly works the same as without ngSanitize:
   *         <div class="prop-binding" ng-prop-inner_h_t_m_l="$ctrl.trustedUnsafeContent"></div>
   *         <span class="prop-note">innerHTML</span> (trustedUnsafeContent)
   *       </div>
   *     </div>
   *   </file>
   *   <file name="index.html">
   *     <main></main>
   *   </file>
   *   <file name="styles.css">
   *     .prop-unit {
   *       margin-bottom: 10px;
   *     }
   *
   *     .prop-binding {
   *       min-height: 30px;
   *       border: 1px solid blue;
   *     }
   *
   *     .prop-note {
   *       font-family: Monospace;
   *     }
   *   </file>
   * </example>
   *
   */

  /** @ngdoc directive
 * @name ngOn
 * @restrict A
 * @element ANY
 *
 * @usage
 *
 * ```html
 * <ANY ng-on-eventname="expression">
 * </ANY>
 * ```
 *
 * or with uppercase letters in property (e.g. "eventName"):
 *
 *
 * ```html
 * <ANY ng-on-event_name="expression">
 * </ANY>
 * ```
 *
 * @description
 * The `ngOn` directive adds an event listener to a DOM element via
 * {@link angular.element angular.element().on()}, and evaluates an expression when the event is
 * fired.
 * `ngOn` allows adding listeners for arbitrary events by including
 * the event name in the attribute, e.g. `ng-on-drop="onDrop()"` executes the 'onDrop()' expression
 * when the `drop` event is fired.
 *
 * AngularJS provides specific directives for many events, such as {@link ngClick}, so in most
 * cases it is not necessary to use `ngOn`. However, AngularJS does not support all events
 * (e.g. the `drop` event in the example above), and new events might be introduced in later DOM
 * standards.
 *
 * Another use-case for `ngOn` is listening to
 * [custom events](https://developer.mozilla.org/docs/Web/Guide/Events/Creating_and_triggering_events)
 * fired by
 * [custom elements](https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements).
 *
 * ## Binding to camelCase properties
 *
 * Since HTML attributes are case-insensitive, camelCase properties like `myEvent` must be escaped.
 * AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so
 * `myEvent` must be written as `ng-on-my_event="expression"`.
 *
 * @example
 * ### Bind to built-in DOM events
 *
 * <example name="ngOn" module="exampleNgOn">
 *   <file name="app.js">
 *     angular.module('exampleNgOn', [])
 *       .component('main', {
 *         templateUrl: 'main.html',
 *         controller: function() {
 *           this.clickCount = 0;
 *           this.mouseoverCount = 0;
 *
 *           this.loadingState = 0;
 *         }
 *       });
 *   </file>
 *   <file name="main.html">
 *     <div>
 *       This is equivalent to `ngClick` and `ngMouseover`:<br>
 *       <button
 *         ng-on-click="$ctrl.clickCount = $ctrl.clickCount + 1"
 *         ng-on-mouseover="$ctrl.mouseoverCount = $ctrl.mouseoverCount + 1">Click or mouseover</button><br>
 *       clickCount: {{$ctrl.clickCount}}<br>
 *       mouseover: {{$ctrl.mouseoverCount}}
 *
 *       <hr>
 *
 *       For the `error` and `load` event on images no built-in AngularJS directives exist:<br>
 *       <img src="thisimagedoesnotexist.png" ng-on-error="$ctrl.loadingState = -1" ng-on-load="$ctrl.loadingState = 1"><br>
 *       <div ng-switch="$ctrl.loadingState">
 *         <span ng-switch-when="0">Image is loading</span>
 *         <span ng-switch-when="-1">Image load error</span>
 *         <span ng-switch-when="1">Image loaded successfully</span>
 *       </div>
 *     </div>
 *   </file>
 *   <file name="index.html">
 *     <main></main>
 *   </file>
 * </example>
 *
 *
 * @example
 * ### Bind to custom DOM events
 *
 * <example name="ngOnCustom" module="exampleNgOn">
 *   <file name="app.js">
 *     angular.module('exampleNgOn', [])
 *       .component('main', {
 *         templateUrl: 'main.html',
 *         controller: function() {
 *           this.eventLog = '';
 *
 *           this.listener = function($event) {
 *             this.eventLog = 'Event with type "' + $event.type + '" fired at ' + $event.detail;
 *           };
 *         }
 *       })
 *       .component('childComponent', {
 *         templateUrl: 'child.html',
 *         controller: function($element) {
 *           this.fireEvent = function() {
 *             var event = new CustomEvent('customtype', { detail: new Date()});
 *
 *             $element[0].dispatchEvent(event);
 *           };
 *         }
 *       });
 *   </file>
 *   <file name="main.html">
 *     <child-component ng-on-customtype="$ctrl.listener($event)"></child-component><br>
 *     <span>Event log: {{$ctrl.eventLog}}</span>
 *   </file>
 *   <file name="child.html">
      <button ng-click="$ctrl.fireEvent()">Fire custom event</button>
 *   </file>
 *   <file name="index.html">
 *     <main></main>
 *   </file>
 * </example>
 */

  var $compileMinErr = minErr('$compile')

  function UNINITIALIZED_VALUE() {}
  var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE()

  /**
   * @ngdoc provider
   * @name $compileProvider
   *
   * @description
   */
  $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider']
  /** @this */
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/

    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/
    var bindingCache = createMap()

    function parseIsolateBindings(scope, directiveName, isController) {
      var LOCAL_REGEXP = /^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/

      var bindings = createMap()

      forEach(scope, function (definition, scopeName) {
        definition = definition.trim()

        if (definition in bindingCache) {
          bindings[scopeName] = bindingCache[definition]
          return
        }
        var match = definition.match(LOCAL_REGEXP)

        if (!match) {
          throw $compileMinErr(
            'iscp',
            "Invalid {3} for directive '{0}'." + " Definition: {... {1}: '{2}' ...}",
            directiveName,
            scopeName,
            definition,
            isController ? 'controller bindings definition' : 'isolate scope definition'
          )
        }

        bindings[scopeName] = {
          mode: match[1][0],
          collection: match[2] === '*',
          optional: match[3] === '?',
          attrName: match[4] || scopeName,
        }
        if (match[4]) {
          bindingCache[definition] = bindings[scopeName]
        }
      })

      return bindings
    }

    function parseDirectiveBindings(directive, directiveName) {
      var bindings = {
        isolateScope: null,
        bindToController: null,
      }
      if (isObject(directive.scope)) {
        if (directive.bindToController === true) {
          bindings.bindToController = parseIsolateBindings(directive.scope, directiveName, true)
          bindings.isolateScope = {}
        } else {
          bindings.isolateScope = parseIsolateBindings(directive.scope, directiveName, false)
        }
      }
      if (isObject(directive.bindToController)) {
        bindings.bindToController = parseIsolateBindings(
          directive.bindToController,
          directiveName,
          true
        )
      }
      if (bindings.bindToController && !directive.controller) {
        // There is no controller
        throw $compileMinErr(
          'noctrl',
          "Cannot bind to controller without directive '{0}'s controller.",
          directiveName
        )
      }
      return bindings
    }

    function assertValidDirectiveName(name) {
      var letter = name.charAt(0)
      if (!letter || letter !== lowercase(letter)) {
        throw $compileMinErr(
          'baddir',
          "Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",
          name
        )
      }
      if (name !== name.trim()) {
        throw $compileMinErr(
          'baddir',
          "Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",
          name
        )
      }
    }

    function getDirectiveRequire(directive) {
      var require = directive.require || (directive.controller && directive.name)

      if (!isArray(require) && isObject(require)) {
        forEach(require, function (value, key) {
          var match = value.match(REQUIRE_PREFIX_REGEXP)
          var name = value.substring(match[0].length)
          if (!name) require[key] = match[0] + key
        })
      }

      return require
    }

    function getDirectiveRestrict(restrict, name) {
      if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
        throw $compileMinErr(
          'badrestrict',
          "Restrict property '{0}' of directive '{1}' is invalid",
          restrict,
          name
        )
      }

      return restrict || 'EA'
    }

    /**
     * @ngdoc method
     * @name $compileProvider#directive
     * @kind function
     *
     * @description
     * Register a new directive with the compiler.
     *
     * @param {string|Object} name Name of the directive in camel-case (i.e. `ngBind` which will match
     *    as `ng-bind`), or an object map of directives where the keys are the names and the values
     *    are the factories.
     * @param {Function|Array} directiveFactory An injectable directive factory function. See the
     *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
     * @returns {ng.$compileProvider} Self for chaining.
     */
    this.directive = function registerDirective(name, directiveFactory) {
      assertArg(name, 'name')
      assertNotHasOwnProperty(name, 'directive')
      if (isString(name)) {
        assertValidDirectiveName(name)
        assertArg(directiveFactory, 'directiveFactory')
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = []
          $provide.factory(name + Suffix, [
            '$injector',
            '$exceptionHandler',
            function ($injector, $exceptionHandler) {
              var directives = []
              forEach(hasDirectives[name], function (directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory)
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) }
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link)
                  }
                  directive.priority = directive.priority || 0
                  directive.index = index
                  directive.name = directive.name || name
                  directive.require = getDirectiveRequire(directive)
                  directive.restrict = getDirectiveRestrict(directive.restrict, name)
                  directive.$$moduleName = directiveFactory.$$moduleName
                  directives.push(directive)
                } catch (e) {
                  $exceptionHandler(e)
                }
              })
              return directives
            },
          ])
        }
        hasDirectives[name].push(directiveFactory)
      } else {
        forEach(name, reverseParams(registerDirective))
      }
      return this
    }

    /**
     * @ngdoc method
     * @name $compileProvider#component
     * @module ng
     * @param {string|Object} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`),
     *    or an object map of components where the keys are the names and the values are the component definition objects.
     * @param {Object} options Component definition object (a simplified
     *    {@link ng.$compile#directive-definition-object directive definition object}),
     *    with the following properties (all optional):
     *
     *    - `controller` – `{(string|function()=}` – controller constructor function that should be
     *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
     *      registered controller} if passed as a string. An empty `noop` function by default.
     *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
     *      If present, the controller will be published to scope under the `controllerAs` name.
     *      If not present, this will default to be `$ctrl`.
     *    - `template` – `{string=|function()=}` – html template as a string or a function that
     *      returns an html template as a string which should be used as the contents of this component.
     *      Empty string by default.
     *
     *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
     *      the following locals:
     *
     *      - `$element` - Current element
     *      - `$attrs` - Current attributes object for the element
     *
     *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
     *      template that should be used  as the contents of this component.
     *
     *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
     *      the following locals:
     *
     *      - `$element` - Current element
     *      - `$attrs` - Current attributes object for the element
     *
     *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
     *      Component properties are always bound to the component controller and not to the scope.
     *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
     *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
     *      Disabled by default.
     *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
     *      this component's controller. The object keys specify the property names under which the required
     *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
     *    - `$...` – additional properties to attach to the directive factory function and the controller
     *      constructor function. (This is used by the component router to annotate)
     *
     * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
     * @description
     * Register a **component definition** with the compiler. This is a shorthand for registering a special
     * type of directive, which represents a self-contained UI component in your application. Such components
     * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
     *
     * Component definitions are very simple and do not require as much configuration as defining general
     * directives. Component definitions usually consist only of a template and a controller backing it.
     *
     * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
     * `bindToController`. They always have **isolate scope** and are restricted to elements.
     *
     * Here are a few examples of how you would usually define components:
     *
     * ```js
     *   var myMod = angular.module(...);
     *   myMod.component('myComp', {
     *     template: '<div>My name is {{$ctrl.name}}</div>',
     *     controller: function() {
     *       this.name = 'shahar';
     *     }
     *   });
     *
     *   myMod.component('myComp', {
     *     template: '<div>My name is {{$ctrl.name}}</div>',
     *     bindings: {name: '@'}
     *   });
     *
     *   myMod.component('myComp', {
     *     templateUrl: 'views/my-comp.html',
     *     controller: 'MyCtrl',
     *     controllerAs: 'ctrl',
     *     bindings: {name: '@'}
     *   });
     *
     * ```
     * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
     *
     * <br />
     * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
     */
    this.component = function registerComponent(name, options) {
      if (!isString(name)) {
        forEach(name, reverseParams(bind(this, registerComponent)))
        return this
      }

      var controller = options.controller || function () {}

      function factory($injector) {
        function makeInjectable(fn) {
          if (isFunction(fn) || isArray(fn)) {
            return /** @this */ function (tElement, tAttrs) {
              return $injector.invoke(fn, this, { $element: tElement, $attrs: tAttrs })
            }
          } else {
            return fn
          }
        }

        var template = !options.template && !options.templateUrl ? '' : options.template
        var ddo = {
          controller: controller,
          controllerAs:
            identifierForController(options.controller) || options.controllerAs || '$ctrl',
          template: makeInjectable(template),
          templateUrl: makeInjectable(options.templateUrl),
          transclude: options.transclude,
          scope: {},
          bindToController: options.bindings || {},
          restrict: 'E',
          require: options.require,
        }

        // Copy annotations (starting with $) over to the DDO
        forEach(options, function (val, key) {
          if (key.charAt(0) === '$') ddo[key] = val
        })

        return ddo
      }

      // TODO(pete) remove the following `forEach` before we release 1.6.0
      // The component-router@0.2.0 looks for the annotations on the controller constructor
      // Nothing in AngularJS looks for annotations on the factory function but we can't remove
      // it from 1.5.x yet.

      // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
      // These could be used by libraries such as the new component router
      forEach(options, function (val, key) {
        if (key.charAt(0) === '$') {
          factory[key] = val
          // Don't try to copy over annotations to named controller
          if (isFunction(controller)) controller[key] = val
        }
      })

      factory.$inject = ['$injector']

      return this.directive(name, factory)
    }

    /**
     * @ngdoc method
     * @name $compileProvider#aHrefSanitizationTrustedUrlList
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for determining trusted safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at preventing XSS attacks via html links.
     *
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationTrustedUrlList`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to trust urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationTrustedUrlList = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList(regexp)
        return this
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList()
      }
    }

    /**
     * @ngdoc method
     * @name $compileProvider#aHrefSanitizationWhitelist
     * @kind function
     *
     * @deprecated
     * sinceVersion="1.8.1"
     *
     * This method is deprecated. Use {@link $compileProvider#aHrefSanitizationTrustedUrlList
     * aHrefSanitizationTrustedUrlList} instead.
     */
    Object.defineProperty(this, 'aHrefSanitizationWhitelist', {
      get: function () {
        return this.aHrefSanitizationTrustedUrlList
      },
      set: function (value) {
        this.aHrefSanitizationTrustedUrlList = value
      },
    })

    /**
     * @ngdoc method
     * @name $compileProvider#imgSrcSanitizationTrustedUrlList
     * @kind function
     *
     * @description
     * Retrieves or overrides the default regular expression that is used for determining trusted safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.
     *
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationTrustedUrlList`
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
     *
     * @param {RegExp=} regexp New regexp to trust urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationTrustedUrlList = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList(regexp)
        return this
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList()
      }
    }

    /**
     * @ngdoc method
     * @name $compileProvider#imgSrcSanitizationWhitelist
     * @kind function
     *
     * @deprecated
     * sinceVersion="1.8.1"
     *
     * This method is deprecated. Use {@link $compileProvider#imgSrcSanitizationTrustedUrlList
     * imgSrcSanitizationTrustedUrlList} instead.
     */
    Object.defineProperty(this, 'imgSrcSanitizationWhitelist', {
      get: function () {
        return this.imgSrcSanitizationTrustedUrlList
      },
      set: function (value) {
        this.imgSrcSanitizationTrustedUrlList = value
      },
    })

    /**
     * @ngdoc method
     * @name  $compileProvider#debugInfoEnabled
     *
     * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
     * current debugInfoEnabled state
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     *
     * @kind function
     *
     * @description
     * Call this method to enable/disable various debug runtime information in the compiler such as adding
     * binding information and a reference to the current scope on to DOM elements.
     * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
     * * `ng-binding` CSS class
     * * `ng-scope` and `ng-isolated-scope` CSS classes
     * * `$binding` data property containing an array of the binding expressions
     * * Data properties used by the {@link angular.element#methods `scope()`/`isolateScope()` methods} to return
     *   the element's scope.
     * * Placeholder comments will contain information about what directive and binding caused the placeholder.
     *   E.g. `<!-- ngIf: shouldShow() -->`.
     *
     * You may want to disable this in production for a significant performance boost. See
     * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
     *
     * The default value is true.
     */
    var debugInfoEnabled = true
    this.debugInfoEnabled = function (enabled) {
      if (isDefined(enabled)) {
        debugInfoEnabled = enabled
        return this
      }
      return debugInfoEnabled
    }

    /**
     * @ngdoc method
     * @name  $compileProvider#strictComponentBindingsEnabled
     *
     * @param {boolean=} enabled update the strictComponentBindingsEnabled state if provided,
     * otherwise return the current strictComponentBindingsEnabled state.
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     *
     * @kind function
     *
     * @description
     * Call this method to enable / disable the strict component bindings check. If enabled, the
     * compiler will enforce that all scope / controller bindings of a
     * {@link $compileProvider#directive directive} / {@link $compileProvider#component component}
     * that are not set as optional with `?`, must be provided when the directive is instantiated.
     * If not provided, the compiler will throw the
     * {@link error/$compile/missingattr $compile:missingattr error}.
     *
     * The default value is false.
     */
    var strictComponentBindingsEnabled = false
    this.strictComponentBindingsEnabled = function (enabled) {
      if (isDefined(enabled)) {
        strictComponentBindingsEnabled = enabled
        return this
      }
      return strictComponentBindingsEnabled
    }

    var TTL = 10
    /**
     * @ngdoc method
     * @name $compileProvider#onChangesTtl
     * @description
     *
     * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
     * assuming that the model is unstable.
     *
     * The current default is 10 iterations.
     *
     * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
     * in several iterations of calls to these hooks. However if an application needs more than the default 10
     * iterations to stabilize then you should investigate what is causing the model to continuously change during
     * the `$onChanges` hook execution.
     *
     * Increasing the TTL could have performance implications, so you should not change it without proper justification.
     *
     * @param {number} limit The number of `$onChanges` hook iterations.
     * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
     */
    this.onChangesTtl = function (value) {
      if (arguments.length) {
        TTL = value
        return this
      }
      return TTL
    }

    var commentDirectivesEnabledConfig = true
    /**
     * @ngdoc method
     * @name $compileProvider#commentDirectivesEnabled
     * @description
     *
     * It indicates to the compiler
     * whether or not directives on comments should be compiled.
     * Defaults to `true`.
     *
     * Calling this function with false disables the compilation of directives
     * on comments for the whole application.
     * This results in a compilation performance gain,
     * as the compiler doesn't have to check comments when looking for directives.
     * This should however only be used if you are sure that no comment directives are used in
     * the application (including any 3rd party directives).
     *
     * @param {boolean} enabled `false` if the compiler may ignore directives on comments
     * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
     */
    this.commentDirectivesEnabled = function (value) {
      if (arguments.length) {
        commentDirectivesEnabledConfig = value
        return this
      }
      return commentDirectivesEnabledConfig
    }

    var cssClassDirectivesEnabledConfig = true
    /**
     * @ngdoc method
     * @name $compileProvider#cssClassDirectivesEnabled
     * @description
     *
     * It indicates to the compiler
     * whether or not directives on element classes should be compiled.
     * Defaults to `true`.
     *
     * Calling this function with false disables the compilation of directives
     * on element classes for the whole application.
     * This results in a compilation performance gain,
     * as the compiler doesn't have to check element classes when looking for directives.
     * This should however only be used if you are sure that no class directives are used in
     * the application (including any 3rd party directives).
     *
     * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
     * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
     */
    this.cssClassDirectivesEnabled = function (value) {
      if (arguments.length) {
        cssClassDirectivesEnabledConfig = value
        return this
      }
      return cssClassDirectivesEnabledConfig
    }

    /**
     * The security context of DOM Properties.
     * @private
     */
    var PROP_CONTEXTS = createMap()

    /**
     * @ngdoc method
     * @name $compileProvider#addPropertySecurityContext
     * @description
     *
     * Defines the security context for DOM properties bound by ng-prop-*.
     *
     * @param {string} elementName The element name or '*' to match any element.
     * @param {string} propertyName The DOM property name.
     * @param {string} ctx The {@link $sce} security context in which this value is safe for use, e.g. `$sce.URL`
     * @returns {object} `this` for chaining
     */
    this.addPropertySecurityContext = function (elementName, propertyName, ctx) {
      var key = elementName.toLowerCase() + '|' + propertyName.toLowerCase()

      if (key in PROP_CONTEXTS && PROP_CONTEXTS[key] !== ctx) {
        throw $compileMinErr(
          'ctxoverride',
          "Property context '{0}.{1}' already set to '{2}', cannot override to '{3}'.",
          elementName,
          propertyName,
          PROP_CONTEXTS[key],
          ctx
        )
      }

      PROP_CONTEXTS[key] = ctx
      return this
    }

    /* Default property contexts.
     *
     * Copy of https://github.com/angular/angular/blob/6.0.6/packages/compiler/src/schema/dom_security_schema.ts#L31-L58
     * Changing:
     * - SecurityContext.* => SCE_CONTEXTS/$sce.*
     * - STYLE => CSS
     * - various URL => MEDIA_URL
     * - *|formAction, form|action URL => RESOURCE_URL (like the attribute)
     */
    ;(function registerNativePropertyContexts() {
      function registerContext(ctx, values) {
        forEach(values, function (v) {
          PROP_CONTEXTS[v.toLowerCase()] = ctx
        })
      }

      registerContext(SCE_CONTEXTS.HTML, ['iframe|srcdoc', '*|innerHTML', '*|outerHTML'])
      registerContext(SCE_CONTEXTS.CSS, ['*|style'])
      registerContext(SCE_CONTEXTS.URL, [
        'area|href',
        'area|ping',
        'a|href',
        'a|ping',
        'blockquote|cite',
        'body|background',
        'del|cite',
        'input|src',
        'ins|cite',
        'q|cite',
      ])
      registerContext(SCE_CONTEXTS.MEDIA_URL, [
        'audio|src',
        'img|src',
        'img|srcset',
        'source|src',
        'source|srcset',
        'track|src',
        'video|src',
        'video|poster',
      ])
      registerContext(SCE_CONTEXTS.RESOURCE_URL, [
        '*|formAction',
        'applet|code',
        'applet|codebase',
        'base|href',
        'embed|src',
        'frame|src',
        'form|action',
        'head|profile',
        'html|manifest',
        'iframe|src',
        'link|href',
        'media|src',
        'object|codebase',
        'object|data',
        'script|src',
      ])
    })()

    this.$get = [
      '$injector',
      '$interpolate',
      '$exceptionHandler',
      '$templateRequest',
      '$parse',
      '$controller',
      '$rootScope',
      '$sce',
      '$animate',
      function (
        $injector,
        $interpolate,
        $exceptionHandler,
        $templateRequest,
        $parse,
        $controller,
        $rootScope,
        $sce,
        $animate
      ) {
        var SIMPLE_ATTR_NAME = /^\w/
        var specialAttrHolder = window.document.createElement('div')

        var commentDirectivesEnabled = commentDirectivesEnabledConfig
        var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig

        var onChangesTtl = TTL
        // The onChanges hooks should all be run together in a single digest
        // When changes occur, the call to trigger their hooks will be added to this queue
        var onChangesQueue

        // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
        function flushOnChangesQueue() {
          try {
            if (!--onChangesTtl) {
              // We have hit the TTL limit so reset everything
              onChangesQueue = undefined
              throw $compileMinErr(
                'infchng',
                '{0} $onChanges() iterations reached. Aborting!\n',
                TTL
              )
            }
            // We must run this hook in an apply since the $$postDigest runs outside apply
            $rootScope.$apply(function () {
              for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
                try {
                  onChangesQueue[i]()
                } catch (e) {
                  $exceptionHandler(e)
                }
              }
              // Reset the queue to trigger a new schedule next time there is a change
              onChangesQueue = undefined
            })
          } finally {
            onChangesTtl++
          }
        }

        function sanitizeSrcset(value, invokeType) {
          if (!value) {
            return value
          }
          if (!isString(value)) {
            throw $compileMinErr(
              'srcset',
              'Can\'t pass trusted values to `{0}`: "{1}"',
              invokeType,
              value.toString()
            )
          }

          // Such values are a bit too complex to handle automatically inside $sce.
          // Instead, we sanitize each of the URIs individually, which works, even dynamically.

          // It's not possible to work around this using `$sce.trustAsMediaUrl`.
          // If you want to programmatically set explicitly trusted unsafe URLs, you should use
          // `$sce.trustAsHtml` on the whole `img` tag and inject it into the DOM using the
          // `ng-bind-html` directive.

          var result = ''

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value)
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern)

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2)
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2
            // sanitize the uri
            result += $sce.getTrustedMediaUrl(trim(rawUris[innerIdx]))
            // add the descriptor
            result += ' ' + trim(rawUris[innerIdx + 1])
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/)

          // sanitize the last uri
          result += $sce.getTrustedMediaUrl(trim(lastTuple[0]))

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += ' ' + trim(lastTuple[1])
          }
          return result
        }

        function Attributes(element, attributesToCopy) {
          if (attributesToCopy) {
            var keys = Object.keys(attributesToCopy)
            var i, l, key

            for (i = 0, l = keys.length; i < l; i++) {
              key = keys[i]
              this[key] = attributesToCopy[key]
            }
          } else {
            this.$attr = {}
          }

          this.$$element = element
        }

        Attributes.prototype = {
          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$normalize
           * @kind function
           *
           * @description
           * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
           * `data-`) to its normalized, camelCase form.
           *
           * Also there is special case for Moz prefix starting with upper case letter.
           *
           * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
           *
           * @param {string} name Name to normalize
           */
          $normalize: directiveNormalize,

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$addClass
           * @kind function
           *
           * @description
           * Adds the CSS class value specified by the classVal parameter to the element. If animations
           * are enabled then an animation will be triggered for the class addition.
           *
           * @param {string} classVal The className value that will be added to the element
           */
          $addClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal)
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$removeClass
           * @kind function
           *
           * @description
           * Removes the CSS class value specified by the classVal parameter from the element. If
           * animations are enabled then an animation will be triggered for the class removal.
           *
           * @param {string} classVal The className value that will be removed from the element
           */
          $removeClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal)
            }
          },

          /**
           * @ngdoc method
           * @name $compile.directive.Attributes#$updateClass
           * @kind function
           *
           * @description
           * Adds and removes the appropriate CSS class values to the element based on the difference
           * between the new and old CSS class values (specified as newClasses and oldClasses).
           *
           * @param {string} newClasses The current CSS className value
           * @param {string} oldClasses The former CSS className value
           */
          $updateClass: function (newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses)
            if (toAdd && toAdd.length) {
              $animate.addClass(this.$$element, toAdd)
            }

            var toRemove = tokenDifference(oldClasses, newClasses)
            if (toRemove && toRemove.length) {
              $animate.removeClass(this.$$element, toRemove)
            }
          },

          /**
           * Set a normalized attribute on the element in a way such that all directives
           * can share the attribute. This function properly handles boolean attributes.
           * @param {string} key Normalized key. (ie ngAttribute)
           * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
           * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
           *     Defaults to true.
           * @param {string=} attrName Optional none normalized name. Defaults to key.
           */
          $set: function (key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            // is set through this function since it may cause $updateClass to
            // become unstable.

            var node = this.$$element[0],
              booleanKey = getBooleanAttrName(node, key),
              aliasedKey = getAliasedAttrName(key),
              observer = key,
              nodeName

            if (booleanKey) {
              this.$$element.prop(key, value)
              attrName = booleanKey
            } else if (aliasedKey) {
              this[aliasedKey] = value
              observer = aliasedKey
            }

            this[key] = value

            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName
            } else {
              attrName = this.$attr[key]
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-')
              }
            }

            nodeName = nodeName_(this.$$element)

            // Sanitize img[srcset] values.
            if (nodeName === 'img' && key === 'srcset') {
              this[key] = value = sanitizeSrcset(value, "$set('srcset', value)")
            }

            if (writeAttr !== false) {
              if (value === null || isUndefined(value)) {
                this.$$element.removeAttr(attrName)
              } else {
                if (SIMPLE_ATTR_NAME.test(attrName)) {
                  // jQuery skips special boolean attrs treatment in XML nodes for
                  // historical reasons and hence AngularJS cannot freely call
                  // `.attr(attrName, false) with such attributes. To avoid issues
                  // in XHTML, call `removeAttr` in such cases instead.
                  // See https://github.com/jquery/jquery/issues/4249
                  if (booleanKey && value === false) {
                    this.$$element.removeAttr(attrName)
                  } else {
                    this.$$element.attr(attrName, value)
                  }
                } else {
                  setSpecialAttr(this.$$element[0], attrName, value)
                }
              }
            }

            // fire observers
            var $$observers = this.$$observers
            if ($$observers) {
              forEach($$observers[observer], function (fn) {
                try {
                  fn(value)
                } catch (e) {
                  $exceptionHandler(e)
                }
              })
            }
          },

          /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
       *        guide} for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
          $observe: function (key, fn) {
            var attrs = this,
              $$observers = attrs.$$observers || (attrs.$$observers = createMap()),
              listeners = $$observers[key] || ($$observers[key] = [])

            listeners.push(fn)
            $rootScope.$evalAsync(function () {
              if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key])
              }
            })

            return function () {
              arrayRemove(listeners, fn)
            }
          },
        }

        function setSpecialAttr(element, attrName, value) {
          // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
          // so we have to jump through some hoops to get such an attribute
          // https://github.com/angular/angular.js/pull/13318
          specialAttrHolder.innerHTML = '<span ' + attrName + '>'
          var attributes = specialAttrHolder.firstChild.attributes
          var attribute = attributes[0]
          // We have to remove the attribute from its container element before we can add it to the destination element
          attributes.removeNamedItem(attribute.name)
          attribute.value = value
          element.attributes.setNamedItem(attribute)
        }

        function safeAddClass($element, className) {
          try {
            $element.addClass(className)
          } catch (e) {
            // ignore, since it means that we are trying to set class on
            // SVG element, where class name is read-only.
          }
        }

        var startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          denormalizeTemplate =
            startSymbol === '{{' && endSymbol === '}}'
              ? identity
              : function denormalizeTemplate(template) {
                  return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol)
                },
          NG_PREFIX_BINDING = /^ng(Attr|Prop|On)([A-Z].*)$/
        var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/

        compile.$$addBindingInfo = debugInfoEnabled
          ? function $$addBindingInfo($element, binding) {
              var bindings = $element.data('$binding') || []

              if (isArray(binding)) {
                bindings = bindings.concat(binding)
              } else {
                bindings.push(binding)
              }

              $element.data('$binding', bindings)
            }
          : noop

        compile.$$addBindingClass = debugInfoEnabled
          ? function $$addBindingClass($element) {
              safeAddClass($element, 'ng-binding')
            }
          : noop

        compile.$$addScopeInfo = debugInfoEnabled
          ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
              var dataName = isolated
                ? noTemplate
                  ? '$isolateScopeNoTemplate'
                  : '$isolateScope'
                : '$scope'
              $element.data(dataName, scope)
            }
          : noop

        compile.$$addScopeClass = debugInfoEnabled
          ? function $$addScopeClass($element, isolated) {
              safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope')
            }
          : noop

        compile.$$createComment = function (directiveName, comment) {
          var content = ''
          if (debugInfoEnabled) {
            content = ' ' + (directiveName || '') + ': '
            if (comment) content += comment + ' '
          }
          return window.document.createComment(content)
        }

        return compile

        //================================

        function compile(
          $compileNodes,
          transcludeFn,
          maxPriority,
          ignoreDirective,
          previousCompileContext
        ) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes)
          }
          var compositeLinkFn = compileNodes(
            $compileNodes,
            transcludeFn,
            $compileNodes,
            maxPriority,
            ignoreDirective,
            previousCompileContext
          )
          compile.$$addScopeClass($compileNodes)
          var namespace = null
          return function publicLinkFn(scope, cloneConnectFn, options) {
            if (!$compileNodes) {
              throw $compileMinErr('multilink', 'This element has already been linked.')
            }
            assertArg(scope, 'scope')

            if (previousCompileContext && previousCompileContext.needsNewScope) {
              // A parent directive did a replace and a directive on this element asked
              // for transclusion, which caused us to lose a layer of element on which
              // we could hold the new transclusion scope, so we will create it manually
              // here.
              scope = scope.$parent.$new()
            }

            options = options || {}
            var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
              transcludeControllers = options.transcludeControllers,
              futureParentElement = options.futureParentElement

            // When `parentBoundTranscludeFn` is passed, it is a
            // `controllersBoundTransclude` function (it was previously passed
            // as `transclude` to directive.link) so we must unwrap it to get
            // its `boundTranscludeFn`
            if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
              parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude
            }

            if (!namespace) {
              namespace = detectNamespaceForChildElements(futureParentElement)
            }
            var $linkNode
            if (namespace !== 'html') {
              // When using a directive with replace:true and templateUrl the $compileNodes
              // (or a child element inside of them)
              // might change, so we need to recreate the namespace adapted compileNodes
              // for call to the link function.
              // Note: This will already clone the nodes...
              $linkNode = jqLite(
                wrapTemplate(namespace, jqLite('<div></div>').append($compileNodes).html())
              )
            } else if (cloneConnectFn) {
              // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
              // and sometimes changes the structure of the DOM.
              $linkNode = JQLitePrototype.clone.call($compileNodes)
            } else {
              $linkNode = $compileNodes
            }

            if (transcludeControllers) {
              for (var controllerName in transcludeControllers) {
                $linkNode.data(
                  '$' + controllerName + 'Controller',
                  transcludeControllers[controllerName].instance
                )
              }
            }

            compile.$$addScopeInfo($linkNode, scope)

            if (cloneConnectFn) cloneConnectFn($linkNode, scope)
            if (compositeLinkFn)
              compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn)

            if (!cloneConnectFn) {
              $compileNodes = compositeLinkFn = null
            }
            return $linkNode
          }
        }

        function detectNamespaceForChildElements(parentElement) {
          // TODO: Make this detect MathML as well...
          var node = parentElement && parentElement[0]
          if (!node) {
            return 'html'
          } else {
            return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/)
              ? 'svg'
              : 'html'
          }
        }

        /**
         * Compile function matches each node in nodeList against the directives. Once all directives
         * for a particular node are collected their compile functions are executed. The compile
         * functions return values - the linking functions - are combined into a composite linking
         * function, which is the a linking function for the node.
         *
         * @param {NodeList} nodeList an array of nodes or NodeList to compile
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *        scope argument is auto-generated to the new child of the transcluded parent scope.
         * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
         *        the rootElement must be set the jqLite collection of the compile root. This is
         *        needed so that the jqLite collection items can be replaced with widgets.
         * @param {number=} maxPriority Max directive priority.
         * @returns {Function} A composite linking function of all of the matched directives or null.
         */
        function compileNodes(
          nodeList,
          transcludeFn,
          $rootElement,
          maxPriority,
          ignoreDirective,
          previousCompileContext
        ) {
          var linkFns = [],
            // `nodeList` can be either an element's `.childNodes` (live NodeList)
            // or a jqLite/jQuery collection or an array
            notLiveList = isArray(nodeList) || nodeList instanceof jqLite,
            attrs,
            directives,
            nodeLinkFn,
            childNodes,
            childLinkFn,
            linkFnFound,
            nodeLinkFnFound

          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes()

            // Support: IE 11 only
            // Workaround for #11781 and #14924
            if (msie === 11) {
              mergeConsecutiveTextNodes(nodeList, i, notLiveList)
            }

            // We must always refer to `nodeList[i]` hereafter,
            // since the nodes can be replaced underneath us.
            directives = collectDirectives(
              nodeList[i],
              [],
              attrs,
              i === 0 ? maxPriority : undefined,
              ignoreDirective
            )

            nodeLinkFn = directives.length
              ? applyDirectivesToNode(
                  directives,
                  nodeList[i],
                  attrs,
                  transcludeFn,
                  $rootElement,
                  null,
                  [],
                  [],
                  previousCompileContext
                )
              : null

            if (nodeLinkFn && nodeLinkFn.scope) {
              compile.$$addScopeClass(attrs.$$element)
            }

            childLinkFn =
              (nodeLinkFn && nodeLinkFn.terminal) ||
              !(childNodes = nodeList[i].childNodes) ||
              !childNodes.length
                ? null
                : compileNodes(
                    childNodes,
                    nodeLinkFn
                      ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) &&
                          nodeLinkFn.transclude
                      : transcludeFn
                  )

            if (nodeLinkFn || childLinkFn) {
              linkFns.push(i, nodeLinkFn, childLinkFn)
              linkFnFound = true
              nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn
            }

            //use the previous context only for the first element in the virtual group
            previousCompileContext = null
          }

          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null

          function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn
            var stableNodeList

            if (nodeLinkFnFound) {
              // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
              // offsets don't get screwed up
              var nodeListLength = nodeList.length
              stableNodeList = new Array(nodeListLength)

              // create a sparse array by only copying the elements which have a linkFn
              for (i = 0; i < linkFns.length; i += 3) {
                idx = linkFns[i]
                stableNodeList[idx] = nodeList[idx]
              }
            } else {
              stableNodeList = nodeList
            }

            for (i = 0, ii = linkFns.length; i < ii; ) {
              node = stableNodeList[linkFns[i++]]
              nodeLinkFn = linkFns[i++]
              childLinkFn = linkFns[i++]

              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new()
                  compile.$$addScopeInfo(jqLite(node), childScope)
                } else {
                  childScope = scope
                }

                if (nodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(
                    scope,
                    nodeLinkFn.transclude,
                    parentBoundTranscludeFn
                  )
                } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                  childBoundTranscludeFn = parentBoundTranscludeFn
                } else if (!parentBoundTranscludeFn && transcludeFn) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn)
                } else {
                  childBoundTranscludeFn = null
                }

                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn)
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn)
              }
            }
          }
        }

        function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
          var node = nodeList[idx]
          var parent = node.parentNode
          var sibling

          if (node.nodeType !== NODE_TYPE_TEXT) {
            return
          }

          while (true) {
            sibling = parent ? node.nextSibling : nodeList[idx + 1]
            if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
              break
            }

            node.nodeValue = node.nodeValue + sibling.nodeValue

            if (sibling.parentNode) {
              sibling.parentNode.removeChild(sibling)
            }
            if (notLiveList && sibling === nodeList[idx + 1]) {
              nodeList.splice(idx + 1, 1)
            }
          }
        }

        function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
          function boundTranscludeFn(
            transcludedScope,
            cloneFn,
            controllers,
            futureParentElement,
            containingScope
          ) {
            if (!transcludedScope) {
              transcludedScope = scope.$new(false, containingScope)
              transcludedScope.$$transcluded = true
            }

            return transcludeFn(transcludedScope, cloneFn, {
              parentBoundTranscludeFn: previousBoundTranscludeFn,
              transcludeControllers: controllers,
              futureParentElement: futureParentElement,
            })
          }

          // We need  to attach the transclusion slots onto the `boundTranscludeFn`
          // so that they are available inside the `controllersBoundTransclude` function
          var boundSlots = (boundTranscludeFn.$$slots = createMap())
          for (var slotName in transcludeFn.$$slots) {
            if (transcludeFn.$$slots[slotName]) {
              boundSlots[slotName] = createBoundTranscludeFn(
                scope,
                transcludeFn.$$slots[slotName],
                previousBoundTranscludeFn
              )
            } else {
              boundSlots[slotName] = null
            }
          }

          return boundTranscludeFn
        }

        /**
         * Looks for directives on the given node and adds them to the directive collection which is
         * sorted.
         *
         * @param node Node to search.
         * @param directives An array to which the directives are added to. This array is sorted before
         *        the function returns.
         * @param attrs The shared attrs object which is used to populate the normalized attributes.
         * @param {number=} maxPriority Max directive priority.
         */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType,
            attrsMap = attrs.$attr,
            match,
            nodeName,
            className

          switch (nodeType) {
            case NODE_TYPE_ELEMENT /* Element */:
              nodeName = nodeName_(node)

              // use the node name: <directive>
              addDirective(
                directives,
                directiveNormalize(nodeName),
                'E',
                maxPriority,
                ignoreDirective
              )

              // iterate over the attributes
              for (
                var attr,
                  name,
                  nName,
                  value,
                  ngPrefixMatch,
                  nAttrs = node.attributes,
                  j = 0,
                  jj = nAttrs && nAttrs.length;
                j < jj;
                j++
              ) {
                var attrStartName = false
                var attrEndName = false

                var isNgAttr = false,
                  isNgProp = false,
                  isNgEvent = false
                var multiElementMatch

                attr = nAttrs[j]
                name = attr.name
                value = attr.value

                nName = directiveNormalize(name.toLowerCase())

                // Support ng-attr-*, ng-prop-* and ng-on-*
                if ((ngPrefixMatch = nName.match(NG_PREFIX_BINDING))) {
                  isNgAttr = ngPrefixMatch[1] === 'Attr'
                  isNgProp = ngPrefixMatch[1] === 'Prop'
                  isNgEvent = ngPrefixMatch[1] === 'On'

                  // Normalize the non-prefixed name
                  name = name
                    .replace(PREFIX_REGEXP, '')
                    .toLowerCase()
                    .substr(4 + ngPrefixMatch[1].length)
                    .replace(/_(.)/g, function (match, letter) {
                      return letter.toUpperCase()
                    })

                  // Support *-start / *-end multi element directives
                } else if (
                  (multiElementMatch = nName.match(MULTI_ELEMENT_DIR_RE)) &&
                  directiveIsMultiElement(multiElementMatch[1])
                ) {
                  attrStartName = name
                  attrEndName = name.substr(0, name.length - 5) + 'end'
                  name = name.substr(0, name.length - 6)
                }

                if (isNgProp || isNgEvent) {
                  attrs[nName] = value
                  attrsMap[nName] = attr.name

                  if (isNgProp) {
                    addPropertyDirective(node, directives, nName, name)
                  } else {
                    addEventDirective(directives, nName, name)
                  }
                } else {
                  // Update nName for cases where a prefix was removed
                  // NOTE: the .toLowerCase() is unnecessary and causes https://github.com/angular/angular.js/issues/16624 for ng-attr-*
                  nName = directiveNormalize(name.toLowerCase())
                  attrsMap[nName] = name

                  if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                    attrs[nName] = value
                    if (getBooleanAttrName(node, nName)) {
                      attrs[nName] = true // presence means true
                    }
                  }

                  addAttrInterpolateDirective(node, directives, value, nName, isNgAttr)
                  addDirective(
                    directives,
                    nName,
                    'A',
                    maxPriority,
                    ignoreDirective,
                    attrStartName,
                    attrEndName
                  )
                }
              }

              if (nodeName === 'input' && node.getAttribute('type') === 'hidden') {
                // Hidden input elements can have strange behaviour when navigating back to the page
                // This tells the browser not to try to cache and reinstate previous values
                node.setAttribute('autocomplete', 'off')
              }

              // use class as directive
              if (!cssClassDirectivesEnabled) break
              className = node.className
              if (isObject(className)) {
                // Maybe SVGAnimatedString
                className = className.animVal
              }
              if (isString(className) && className !== '') {
                while ((match = CLASS_DIRECTIVE_REGEXP.exec(className))) {
                  nName = directiveNormalize(match[2])
                  if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                    attrs[nName] = trim(match[3])
                  }
                  className = className.substr(match.index + match[0].length)
                }
              }
              break
            case NODE_TYPE_TEXT /* Text Node */:
              addTextInterpolateDirective(directives, node.nodeValue)
              break
            case NODE_TYPE_COMMENT /* Comment */:
              if (!commentDirectivesEnabled) break
              collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective)
              break
          }

          directives.sort(byPriority)
          return directives
        }

        function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          // function created because of performance, try/catch disables
          // the optimization of the whole function #14848
          try {
            var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue)
            if (match) {
              var nName = directiveNormalize(match[1])
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2])
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
        }

        /**
         * Given a node with a directive-start it collects all of the siblings until it finds
         * directive-end.
         * @param node
         * @param attrStart
         * @param attrEnd
         * @returns {*}
         */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = []
          var depth = 0
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            do {
              if (!node) {
                throw $compileMinErr(
                  'uterdir',
                  "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                  attrStart,
                  attrEnd
                )
              }
              if (node.nodeType === NODE_TYPE_ELEMENT) {
                if (node.hasAttribute(attrStart)) depth++
                if (node.hasAttribute(attrEnd)) depth--
              }
              nodes.push(node)
              node = node.nextSibling
            } while (depth > 0)
          } else {
            nodes.push(node)
          }

          return jqLite(nodes)
        }

        /**
         * Wrapper for linking function which converts normal linking function into a grouped
         * linking function.
         * @param linkFn
         * @param attrStart
         * @param attrEnd
         * @returns {Function}
         */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd)
            return linkFn(scope, element, attrs, controllers, transcludeFn)
          }
        }

        /**
         * A function generator that is used to support both eager and lazy compilation
         * linking function.
         * @param eager
         * @param $compileNodes
         * @param transcludeFn
         * @param maxPriority
         * @param ignoreDirective
         * @param previousCompileContext
         * @returns {Function}
         */
        function compilationGenerator(
          eager,
          $compileNodes,
          transcludeFn,
          maxPriority,
          ignoreDirective,
          previousCompileContext
        ) {
          var compiled

          if (eager) {
            return compile(
              $compileNodes,
              transcludeFn,
              maxPriority,
              ignoreDirective,
              previousCompileContext
            )
          }
          return /** @this */ function lazyCompilation() {
            if (!compiled) {
              compiled = compile(
                $compileNodes,
                transcludeFn,
                maxPriority,
                ignoreDirective,
                previousCompileContext
              )

              // Null out all of these references in order to make them eligible for garbage collection
              // since this is a potentially long lived closure
              $compileNodes = transcludeFn = previousCompileContext = null
            }
            return compiled.apply(this, arguments)
          }
        }

        /**
         * Once the directives have been collected, their compile functions are executed. This method
         * is responsible for inlining directive templates as well as terminating the application
         * of the directives if the terminal directive has been reached.
         *
         * @param {Array} directives Array of collected directives to execute their compile function.
         *        this needs to be pre-sorted by priority order.
         * @param {Node} compileNode The raw DOM node to apply the compile functions to
         * @param {Object} templateAttrs The shared attribute function
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
         *                                                  scope argument is auto-generated to the new
         *                                                  child of the transcluded parent scope.
         * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
         *                              argument has the root jqLite array so that we can replace nodes
         *                              on it.
         * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
         *                                           compiling the transclusion.
         * @param {Array.<Function>} preLinkFns
         * @param {Array.<Function>} postLinkFns
         * @param {Object} previousCompileContext Context used for previous compilation of the current
         *                                        node
         * @returns {Function} linkFn
         */
        function applyDirectivesToNode(
          directives,
          compileNode,
          templateAttrs,
          transcludeFn,
          jqCollection,
          originalReplaceDirective,
          preLinkFns,
          postLinkFns,
          previousCompileContext
        ) {
          previousCompileContext = previousCompileContext || {}

          var terminalPriority = -Number.MAX_VALUE,
            newScopeDirective = previousCompileContext.newScopeDirective,
            controllerDirectives = previousCompileContext.controllerDirectives,
            newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
            templateDirective = previousCompileContext.templateDirective,
            nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
            hasTranscludeDirective = false,
            hasTemplate = false,
            hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
            $compileNode = (templateAttrs.$$element = jqLite(compileNode)),
            directive,
            directiveName,
            $template,
            replaceDirective = originalReplaceDirective,
            childTranscludeFn = transcludeFn,
            linkFn,
            didScanForMultipleTransclusion = false,
            mightHaveMultipleTransclusionError = false,
            directiveValue

          // executes all directives on the current element
          for (var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i]
            var attrStart = directive.$$start
            var attrEnd = directive.$$end

            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd)
            }
            $template = undefined

            if (terminalPriority > directive.priority) {
              break // prevent further processing of directives
            }

            directiveValue = directive.scope

            if (directiveValue) {
              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                if (isObject(directiveValue)) {
                  // This directive is trying to add an isolated scope.
                  // Check that there is no scope of any kind already
                  assertNoDuplicate(
                    'new/isolated scope',
                    newIsolateScopeDirective || newScopeDirective,
                    directive,
                    $compileNode
                  )
                  newIsolateScopeDirective = directive
                } else {
                  // This directive is trying to add a child scope.
                  // Check that there is no isolated scope already
                  assertNoDuplicate(
                    'new/isolated scope',
                    newIsolateScopeDirective,
                    directive,
                    $compileNode
                  )
                }
              }

              newScopeDirective = newScopeDirective || directive
            }

            directiveName = directive.name

            // If we encounter a condition that can result in transclusion on the directive,
            // then scan ahead in the remaining directives for others that may cause a multiple
            // transclusion error to be thrown during the compilation process.  If a matching directive
            // is found, then we know that when we encounter a transcluded directive, we need to eagerly
            // compile the `transclude` function rather than doing it lazily in order to throw
            // exceptions at the correct time
            if (
              !didScanForMultipleTransclusion &&
              ((directive.replace && (directive.templateUrl || directive.template)) ||
                (directive.transclude && !directive.$$tlb))
            ) {
              var candidateDirective

              for (
                var scanningIndex = i + 1;
                (candidateDirective = directives[scanningIndex++]);

              ) {
                if (
                  (candidateDirective.transclude && !candidateDirective.$$tlb) ||
                  (candidateDirective.replace &&
                    (candidateDirective.templateUrl || candidateDirective.template))
                ) {
                  mightHaveMultipleTransclusionError = true
                  break
                }
              }

              didScanForMultipleTransclusion = true
            }

            if (!directive.templateUrl && directive.controller) {
              controllerDirectives = controllerDirectives || createMap()
              assertNoDuplicate(
                "'" + directiveName + "' controller",
                controllerDirectives[directiveName],
                directive,
                $compileNode
              )
              controllerDirectives[directiveName] = directive
            }

            directiveValue = directive.transclude

            if (directiveValue) {
              hasTranscludeDirective = true

              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate(
                  'transclusion',
                  nonTlbTranscludeDirective,
                  directive,
                  $compileNode
                )
                nonTlbTranscludeDirective = directive
              }

              if (directiveValue === 'element') {
                hasElementTranscludeDirective = true
                terminalPriority = directive.priority
                $template = $compileNode
                $compileNode = templateAttrs.$$element = jqLite(
                  compile.$$createComment(directiveName, templateAttrs[directiveName])
                )
                compileNode = $compileNode[0]
                replaceWith(jqCollection, sliceArgs($template), compileNode)

                childTranscludeFn = compilationGenerator(
                  mightHaveMultipleTransclusionError,
                  $template,
                  transcludeFn,
                  terminalPriority,
                  replaceDirective && replaceDirective.name,
                  {
                    // Don't pass in:
                    // - controllerDirectives - otherwise we'll create duplicates controllers
                    // - newIsolateScopeDirective or templateDirective - combining templates with
                    //   element transclusion doesn't make sense.
                    //
                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                    // on the same element more than once.
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective,
                  }
                )
              } else {
                var slots = createMap()

                if (!isObject(directiveValue)) {
                  $template = jqLite(jqLiteClone(compileNode)).contents()
                } else {
                  // We have transclusion slots,
                  // collect them up, compile them and store their transclusion functions
                  $template = window.document.createDocumentFragment()

                  var slotMap = createMap()
                  var filledSlots = createMap()

                  // Parse the element selectors
                  forEach(directiveValue, function (elementSelector, slotName) {
                    // If an element selector starts with a ? then it is optional
                    var optional = elementSelector.charAt(0) === '?'
                    elementSelector = optional ? elementSelector.substring(1) : elementSelector

                    slotMap[elementSelector] = slotName

                    // We explicitly assign `null` since this implies that a slot was defined but not filled.
                    // Later when calling boundTransclusion functions with a slot name we only error if the
                    // slot is `undefined`
                    slots[slotName] = null

                    // filledSlots contains `true` for all slots that are either optional or have been
                    // filled. This is used to check that we have not missed any required slots
                    filledSlots[slotName] = optional
                  })

                  // Add the matching elements into their slot
                  forEach($compileNode.contents(), function (node) {
                    var slotName = slotMap[directiveNormalize(nodeName_(node))]
                    if (slotName) {
                      filledSlots[slotName] = true
                      slots[slotName] = slots[slotName] || window.document.createDocumentFragment()
                      slots[slotName].appendChild(node)
                    } else {
                      $template.appendChild(node)
                    }
                  })

                  // Check for required slots that were not filled
                  forEach(filledSlots, function (filled, slotName) {
                    if (!filled) {
                      throw $compileMinErr(
                        'reqslot',
                        'Required transclusion slot `{0}` was not filled.',
                        slotName
                      )
                    }
                  })

                  for (var slotName in slots) {
                    if (slots[slotName]) {
                      // Only define a transclusion function if the slot was filled
                      var slotCompileNodes = jqLite(slots[slotName].childNodes)
                      slots[slotName] = compilationGenerator(
                        mightHaveMultipleTransclusionError,
                        slotCompileNodes,
                        transcludeFn
                      )
                    }
                  }

                  $template = jqLite($template.childNodes)
                }

                $compileNode.empty() // clear contents
                childTranscludeFn = compilationGenerator(
                  mightHaveMultipleTransclusionError,
                  $template,
                  transcludeFn,
                  undefined,
                  undefined,
                  { needsNewScope: directive.$$isolateScope || directive.$$newScope }
                )
                childTranscludeFn.$$slots = slots
              }
            }

            if (directive.template) {
              hasTemplate = true
              assertNoDuplicate('template', templateDirective, directive, $compileNode)
              templateDirective = directive

              directiveValue = isFunction(directive.template)
                ? directive.template($compileNode, templateAttrs)
                : directive.template

              directiveValue = denormalizeTemplate(directiveValue)

              if (directive.replace) {
                replaceDirective = directive
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = []
                } else {
                  $template = removeComments(
                    wrapTemplate(directive.templateNamespace, trim(directiveValue))
                  )
                }
                compileNode = $template[0]

                if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                  throw $compileMinErr(
                    'tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    directiveName,
                    ''
                  )
                }

                replaceWith(jqCollection, $compileNode, compileNode)

                var newTemplateAttrs = { $attr: {} }

                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs)
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1))

                if (newIsolateScopeDirective || newScopeDirective) {
                  // The original directive caused the current element to be replaced but this element
                  // also needs to have a new scope, so we need to tell the template directives
                  // that they would need to get their scope from further up, if they require transclusion
                  markDirectiveScope(
                    templateDirectives,
                    newIsolateScopeDirective,
                    newScopeDirective
                  )
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives)
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs)

                ii = directives.length
              } else {
                $compileNode.html(directiveValue)
              }
            }

            if (directive.templateUrl) {
              hasTemplate = true
              assertNoDuplicate('template', templateDirective, directive, $compileNode)
              templateDirective = directive

              if (directive.replace) {
                replaceDirective = directive
              }

              // eslint-disable-next-line no-func-assign
              nodeLinkFn = compileTemplateUrl(
                directives.splice(i, directives.length - i),
                $compileNode,
                templateAttrs,
                jqCollection,
                hasTranscludeDirective && childTranscludeFn,
                preLinkFns,
                postLinkFns,
                {
                  controllerDirectives: controllerDirectives,
                  newScopeDirective: newScopeDirective !== directive && newScopeDirective,
                  newIsolateScopeDirective: newIsolateScopeDirective,
                  templateDirective: templateDirective,
                  nonTlbTranscludeDirective: nonTlbTranscludeDirective,
                }
              )
              ii = directives.length
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn)
                var context = directive.$$originalDirective || directive
                if (isFunction(linkFn)) {
                  addLinkFns(null, bind(context, linkFn), attrStart, attrEnd)
                } else if (linkFn) {
                  addLinkFns(
                    bind(context, linkFn.pre),
                    bind(context, linkFn.post),
                    attrStart,
                    attrEnd
                  )
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode))
              }
            }

            if (directive.terminal) {
              nodeLinkFn.terminal = true
              terminalPriority = Math.max(terminalPriority, directive.priority)
            }
          }

          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true
          nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective
          nodeLinkFn.templateOnThisElement = hasTemplate
          nodeLinkFn.transclude = childTranscludeFn

          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective

          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn

          ////////////////////

          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd)
              pre.require = directive.require
              pre.directiveName = directiveName
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, { isolateScope: true })
              }
              preLinkFns.push(pre)
            }
            if (post) {
              if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd)
              post.require = directive.require
              post.directiveName = directiveName
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, { isolateScope: true })
              }
              postLinkFns.push(post)
            }
          }

          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var i,
              ii,
              linkFn,
              isolateScope,
              controllerScope,
              elementControllers,
              transcludeFn,
              $element,
              attrs,
              scopeBindingInfo

            if (compileNode === linkNode) {
              attrs = templateAttrs
              $element = templateAttrs.$$element
            } else {
              $element = jqLite(linkNode)
              attrs = new Attributes($element, templateAttrs)
            }

            controllerScope = scope
            if (newIsolateScopeDirective) {
              isolateScope = scope.$new(true)
            } else if (newScopeDirective) {
              controllerScope = scope.$parent
            }

            if (boundTranscludeFn) {
              // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
              // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
              transcludeFn = controllersBoundTransclude
              transcludeFn.$$boundTransclude = boundTranscludeFn
              // expose the slots on the `$transclude` function
              transcludeFn.isSlotFilled = function (slotName) {
                return !!boundTranscludeFn.$$slots[slotName]
              }
            }

            if (controllerDirectives) {
              elementControllers = setupControllers(
                $element,
                attrs,
                transcludeFn,
                controllerDirectives,
                isolateScope,
                scope,
                newIsolateScopeDirective
              )
            }

            if (newIsolateScopeDirective) {
              // Initialize isolate scope bindings for new isolate scope directive.
              compile.$$addScopeInfo(
                $element,
                isolateScope,
                true,
                !(
                  templateDirective &&
                  (templateDirective === newIsolateScopeDirective ||
                    templateDirective === newIsolateScopeDirective.$$originalDirective)
                )
              )
              compile.$$addScopeClass($element, true)
              isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings
              scopeBindingInfo = initializeDirectiveBindings(
                scope,
                attrs,
                isolateScope,
                isolateScope.$$isolateBindings,
                newIsolateScopeDirective
              )
              if (scopeBindingInfo.removeWatches) {
                isolateScope.$on('$destroy', scopeBindingInfo.removeWatches)
              }
            }

            // Initialize bindToController bindings
            for (var name in elementControllers) {
              var controllerDirective = controllerDirectives[name]
              var controller = elementControllers[name]
              var bindings = controllerDirective.$$bindings.bindToController

              controller.instance = controller()
              $element.data('$' + controllerDirective.name + 'Controller', controller.instance)
              controller.bindingInfo = initializeDirectiveBindings(
                controllerScope,
                attrs,
                controller.instance,
                bindings,
                controllerDirective
              )
            }

            // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
            forEach(controllerDirectives, function (controllerDirective, name) {
              var require = controllerDirective.require
              if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
                extend(
                  elementControllers[name].instance,
                  getControllers(name, require, $element, elementControllers)
                )
              }
            })

            // Handle the init and destroy lifecycle hooks on all controllers that have them
            forEach(elementControllers, function (controller) {
              var controllerInstance = controller.instance
              if (isFunction(controllerInstance.$onChanges)) {
                try {
                  controllerInstance.$onChanges(controller.bindingInfo.initialChanges)
                } catch (e) {
                  $exceptionHandler(e)
                }
              }
              if (isFunction(controllerInstance.$onInit)) {
                try {
                  controllerInstance.$onInit()
                } catch (e) {
                  $exceptionHandler(e)
                }
              }
              if (isFunction(controllerInstance.$doCheck)) {
                controllerScope.$watch(function () {
                  controllerInstance.$doCheck()
                })
                controllerInstance.$doCheck()
              }
              if (isFunction(controllerInstance.$onDestroy)) {
                controllerScope.$on('$destroy', function callOnDestroyHook() {
                  controllerInstance.$onDestroy()
                })
              }
            })

            // PRELINKING
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {
              linkFn = preLinkFns[i]
              invokeLinkFn(
                linkFn,
                linkFn.isolateScope ? isolateScope : scope,
                $element,
                attrs,
                linkFn.require &&
                  getControllers(
                    linkFn.directiveName,
                    linkFn.require,
                    $element,
                    elementControllers
                  ),
                transcludeFn
              )
            }

            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope
            if (
              newIsolateScopeDirective &&
              (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)
            ) {
              scopeToChild = isolateScope
            }
            if (childLinkFn) {
              childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn)
            }

            // POSTLINKING
            for (i = postLinkFns.length - 1; i >= 0; i--) {
              linkFn = postLinkFns[i]
              invokeLinkFn(
                linkFn,
                linkFn.isolateScope ? isolateScope : scope,
                $element,
                attrs,
                linkFn.require &&
                  getControllers(
                    linkFn.directiveName,
                    linkFn.require,
                    $element,
                    elementControllers
                  ),
                transcludeFn
              )
            }

            // Trigger $postLink lifecycle hooks
            forEach(elementControllers, function (controller) {
              var controllerInstance = controller.instance
              if (isFunction(controllerInstance.$postLink)) {
                controllerInstance.$postLink()
              }
            })

            // This is the function that is injected as `$transclude`.
            // Note: all arguments are optional!
            function controllersBoundTransclude(
              scope,
              cloneAttachFn,
              futureParentElement,
              slotName
            ) {
              var transcludeControllers
              // No scope passed in:
              if (!isScope(scope)) {
                slotName = futureParentElement
                futureParentElement = cloneAttachFn
                cloneAttachFn = scope
                scope = undefined
              }

              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers
              }
              if (!futureParentElement) {
                futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element
              }
              if (slotName) {
                // slotTranscludeFn can be one of three things:
                //  * a transclude function - a filled slot
                //  * `null` - an optional slot that was not filled
                //  * `undefined` - a slot that was not declared (i.e. invalid)
                var slotTranscludeFn = boundTranscludeFn.$$slots[slotName]
                if (slotTranscludeFn) {
                  return slotTranscludeFn(
                    scope,
                    cloneAttachFn,
                    transcludeControllers,
                    futureParentElement,
                    scopeToChild
                  )
                } else if (isUndefined(slotTranscludeFn)) {
                  throw $compileMinErr(
                    'noslot',
                    'No parent directive that requires a transclusion with slot name "{0}". ' +
                      'Element: {1}',
                    slotName,
                    startingTag($element)
                  )
                }
              } else {
                return boundTranscludeFn(
                  scope,
                  cloneAttachFn,
                  transcludeControllers,
                  futureParentElement,
                  scopeToChild
                )
              }
            }
          }
        }

        function getControllers(directiveName, require, $element, elementControllers) {
          var value

          if (isString(require)) {
            var match = require.match(REQUIRE_PREFIX_REGEXP)
            var name = require.substring(match[0].length)
            var inheritType = match[1] || match[3]
            var optional = match[2] === '?'

            //If only parents then start at the parent element
            if (inheritType === '^^') {
              $element = $element.parent()
              //Otherwise attempt getting the controller from elementControllers in case
              //the element is transcluded (and has no data) and to avoid .data if possible
            } else {
              value = elementControllers && elementControllers[name]
              value = value && value.instance
            }

            if (!value) {
              var dataName = '$' + name + 'Controller'

              if (
                inheritType === '^^' &&
                $element[0] &&
                $element[0].nodeType === NODE_TYPE_DOCUMENT
              ) {
                // inheritedData() uses the documentElement when it finds the document, so we would
                // require from the element itself.
                value = null
              } else {
                value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName)
              }
            }

            if (!value && !optional) {
              throw $compileMinErr(
                'ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                name,
                directiveName
              )
            }
          } else if (isArray(require)) {
            value = []
            for (var i = 0, ii = require.length; i < ii; i++) {
              value[i] = getControllers(directiveName, require[i], $element, elementControllers)
            }
          } else if (isObject(require)) {
            value = {}
            forEach(require, function (controller, property) {
              value[property] = getControllers(
                directiveName,
                controller,
                $element,
                elementControllers
              )
            })
          }

          return value || null
        }

        function setupControllers(
          $element,
          attrs,
          transcludeFn,
          controllerDirectives,
          isolateScope,
          scope,
          newIsolateScopeDirective
        ) {
          var elementControllers = createMap()
          for (var controllerKey in controllerDirectives) {
            var directive = controllerDirectives[controllerKey]
            var locals = {
              $scope:
                directive === newIsolateScopeDirective || directive.$$isolateScope
                  ? isolateScope
                  : scope,
              $element: $element,
              $attrs: attrs,
              $transclude: transcludeFn,
            }

            var controller = directive.controller
            if (controller === '@') {
              controller = attrs[directive.name]
            }

            var controllerInstance = $controller(controller, locals, true, directive.controllerAs)

            // For directives with element transclusion the element is a comment.
            // In this case .data will not attach any data.
            // Instead, we save the controllers for the element in a local hash and attach to .data
            // later, once we have the actual element.
            elementControllers[directive.name] = controllerInstance
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance)
          }
          return elementControllers
        }

        // Depending upon the context in which a directive finds itself it might need to have a new isolated
        // or child scope created. For instance:
        // * if the directive has been pulled into a template because another directive with a higher priority
        // asked for element transclusion
        // * if the directive itself asks for transclusion but it is at the root of a template and the original
        // element was replaced. See https://github.com/angular/angular.js/issues/12936
        function markDirectiveScope(directives, isolateScope, newScope) {
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], {
              $$isolateScope: isolateScope,
              $$newScope: newScope,
            })
          }
        }

        /**
         * looks up the directive and decorates it with exception handling and proper parameters. We
         * call this the boundDirective.
         *
         * @param {string} name name of the directive to look up.
         * @param {string} location The directive must be found in specific format.
         *   String containing any of theses characters:
         *
         *   * `E`: element name
         *   * `A': attribute
         *   * `C`: class
         *   * `M`: comment
         * @returns {boolean} true if directive was added.
         */
        function addDirective(
          tDirectives,
          name,
          location,
          maxPriority,
          ignoreDirective,
          startAttrName,
          endAttrName
        ) {
          if (name === ignoreDirective) return null
          var match = null
          if (hasDirectives.hasOwnProperty(name)) {
            for (
              var directive,
                directives = $injector.get(name + Suffix),
                i = 0,
                ii = directives.length;
              i < ii;
              i++
            ) {
              directive = directives[i]
              if (
                (isUndefined(maxPriority) || maxPriority > directive.priority) &&
                directive.restrict.indexOf(location) !== -1
              ) {
                if (startAttrName) {
                  directive = inherit(directive, { $$start: startAttrName, $$end: endAttrName })
                }
                if (!directive.$$bindings) {
                  var bindings = (directive.$$bindings = parseDirectiveBindings(
                    directive,
                    directive.name
                  ))
                  if (isObject(bindings.isolateScope)) {
                    directive.$$isolateBindings = bindings.isolateScope
                  }
                }
                tDirectives.push(directive)
                match = directive
              }
            }
          }
          return match
        }

        /**
         * looks up the directive and returns true if it is a multi-element directive,
         * and therefore requires DOM nodes between -start and -end markers to be grouped
         * together.
         *
         * @param {string} name name of the directive to look up.
         * @returns true if directive was registered as multi-element.
         */
        function directiveIsMultiElement(name) {
          if (hasDirectives.hasOwnProperty(name)) {
            for (
              var directive,
                directives = $injector.get(name + Suffix),
                i = 0,
                ii = directives.length;
              i < ii;
              i++
            ) {
              directive = directives[i]
              if (directive.multiElement) {
                return true
              }
            }
          }
          return false
        }

        /**
         * When the element is replaced with HTML template then the new attributes
         * on the template need to be merged with the existing attributes in the DOM.
         * The desired effect is to have both of the attributes present.
         *
         * @param {object} dst destination attributes (original DOM)
         * @param {object} src source attributes (from the directive template)
         */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr,
            dstAttr = dst.$attr

          // reapply the old attributes to the new element
          forEach(dst, function (value, key) {
            if (key.charAt(0) !== '$') {
              if (src[key] && src[key] !== value) {
                if (value.length) {
                  value += (key === 'style' ? ';' : ' ') + src[key]
                } else {
                  value = src[key]
                }
              }
              dst.$set(key, value, true, srcAttr[key])
            }
          })

          // copy the new attributes on the old attrs object
          forEach(src, function (value, key) {
            // Check if we already set this attribute in the loop above.
            // `dst` will never contain hasOwnProperty as DOM parser won't let it.
            // You will get an "InvalidCharacterError: DOM Exception 5" error if you
            // have an attribute like "has-own-property" or "data-has-own-property", etc.
            if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
              dst[key] = value

              if (key !== 'class' && key !== 'style') {
                dstAttr[key] = srcAttr[key]
              }
            }
          })
        }

        function compileTemplateUrl(
          directives,
          $compileNode,
          tAttrs,
          $rootElement,
          childTranscludeFn,
          preLinkFns,
          postLinkFns,
          previousCompileContext
        ) {
          var linkQueue = [],
            afterTemplateNodeLinkFn,
            afterTemplateChildLinkFn,
            beforeTemplateCompileNode = $compileNode[0],
            origAsyncDirective = directives.shift(),
            derivedSyncDirective = inherit(origAsyncDirective, {
              templateUrl: null,
              transclude: null,
              replace: null,
              $$originalDirective: origAsyncDirective,
            }),
            templateUrl = isFunction(origAsyncDirective.templateUrl)
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
            templateNamespace = origAsyncDirective.templateNamespace

          $compileNode.empty()

          $templateRequest(templateUrl)
            .then(function (content) {
              var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn

              content = denormalizeTemplate(content)

              if (origAsyncDirective.replace) {
                if (jqLiteIsTextNode(content)) {
                  $template = []
                } else {
                  $template = removeComments(wrapTemplate(templateNamespace, trim(content)))
                }
                compileNode = $template[0]

                if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
                  throw $compileMinErr(
                    'tplrt',
                    "Template for directive '{0}' must have exactly one root element. {1}",
                    origAsyncDirective.name,
                    templateUrl
                  )
                }

                tempTemplateAttrs = { $attr: {} }
                replaceWith($rootElement, $compileNode, compileNode)
                var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs)

                if (isObject(origAsyncDirective.scope)) {
                  // the original directive that caused the template to be loaded async required
                  // an isolate scope
                  markDirectiveScope(templateDirectives, true)
                }
                directives = templateDirectives.concat(directives)
                mergeTemplateAttributes(tAttrs, tempTemplateAttrs)
              } else {
                compileNode = beforeTemplateCompileNode
                $compileNode.html(content)
              }

              directives.unshift(derivedSyncDirective)

              afterTemplateNodeLinkFn = applyDirectivesToNode(
                directives,
                compileNode,
                tAttrs,
                childTranscludeFn,
                $compileNode,
                origAsyncDirective,
                preLinkFns,
                postLinkFns,
                previousCompileContext
              )
              forEach($rootElement, function (node, i) {
                if (node === compileNode) {
                  $rootElement[i] = $compileNode[0]
                }
              })
              afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn)

              while (linkQueue.length) {
                var scope = linkQueue.shift(),
                  beforeTemplateLinkNode = linkQueue.shift(),
                  linkRootElement = linkQueue.shift(),
                  boundTranscludeFn = linkQueue.shift(),
                  linkNode = $compileNode[0]

                if (scope.$$destroyed) continue

                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                  var oldClasses = beforeTemplateLinkNode.className

                  if (
                    !(
                      previousCompileContext.hasElementTranscludeDirective &&
                      origAsyncDirective.replace
                    )
                  ) {
                    // it was cloned therefore we have to clone as well.
                    linkNode = jqLiteClone(compileNode)
                  }
                  replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode)

                  // Copy in CSS classes from original node
                  safeAddClass(jqLite(linkNode), oldClasses)
                }
                if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(
                    scope,
                    afterTemplateNodeLinkFn.transclude,
                    boundTranscludeFn
                  )
                } else {
                  childBoundTranscludeFn = boundTranscludeFn
                }
                afterTemplateNodeLinkFn(
                  afterTemplateChildLinkFn,
                  scope,
                  linkNode,
                  $rootElement,
                  childBoundTranscludeFn
                )
              }
              linkQueue = null
            })
            .catch(function (error) {
              if (isError(error)) {
                $exceptionHandler(error)
              }
            })

          return function delayedNodeLinkFn(
            ignoreChildLinkFn,
            scope,
            node,
            rootElement,
            boundTranscludeFn
          ) {
            var childBoundTranscludeFn = boundTranscludeFn
            if (scope.$$destroyed) return
            if (linkQueue) {
              linkQueue.push(scope, node, rootElement, childBoundTranscludeFn)
            } else {
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(
                  scope,
                  afterTemplateNodeLinkFn.transclude,
                  boundTranscludeFn
                )
              }
              afterTemplateNodeLinkFn(
                afterTemplateChildLinkFn,
                scope,
                node,
                rootElement,
                childBoundTranscludeFn
              )
            }
          }
        }

        /**
         * Sorting function for bound directives.
         */
        function byPriority(a, b) {
          var diff = b.priority - a.priority
          if (diff !== 0) return diff
          if (a.name !== b.name) return a.name < b.name ? -1 : 1
          return a.index - b.index
        }

        function assertNoDuplicate(what, previousDirective, directive, element) {
          function wrapModuleNameIfDefined(moduleName) {
            return moduleName ? ' (module: ' + moduleName + ')' : ''
          }

          if (previousDirective) {
            throw $compileMinErr(
              'multidir',
              'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
              previousDirective.name,
              wrapModuleNameIfDefined(previousDirective.$$moduleName),
              directive.name,
              wrapModuleNameIfDefined(directive.$$moduleName),
              what,
              startingTag(element)
            )
          }
        }

        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true)
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: function textInterpolateCompileFn(templateNode) {
                var templateNodeParent = templateNode.parent(),
                  hasCompileParent = !!templateNodeParent.length

                // When transcluding a template that has bindings in the root
                // we don't have a parent and thus need to add the class during linking fn.
                if (hasCompileParent) compile.$$addBindingClass(templateNodeParent)

                return function textInterpolateLinkFn(scope, node) {
                  var parent = node.parent()
                  if (!hasCompileParent) compile.$$addBindingClass(parent)
                  compile.$$addBindingInfo(parent, interpolateFn.expressions)
                  scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                    node[0].nodeValue = value
                  })
                }
              },
            })
          }
        }

        function wrapTemplate(type, template) {
          type = lowercase(type || 'html')
          switch (type) {
            case 'svg':
            case 'math':
              var wrapper = window.document.createElement('div')
              wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>'
              return wrapper.childNodes[0].childNodes
            default:
              return template
          }
        }

        function getTrustedAttrContext(nodeName, attrNormalizedName) {
          if (attrNormalizedName === 'srcdoc') {
            return $sce.HTML
          }
          // All nodes with src attributes require a RESOURCE_URL value, except for
          // img and various html5 media nodes, which require the MEDIA_URL context.
          if (attrNormalizedName === 'src' || attrNormalizedName === 'ngSrc') {
            if (['img', 'video', 'audio', 'source', 'track'].indexOf(nodeName) === -1) {
              return $sce.RESOURCE_URL
            }
            return $sce.MEDIA_URL
          } else if (attrNormalizedName === 'xlinkHref') {
            // Some xlink:href are okay, most aren't
            if (nodeName === 'image') return $sce.MEDIA_URL
            if (nodeName === 'a') return $sce.URL
            return $sce.RESOURCE_URL
          } else if (
            // Formaction
            (nodeName === 'form' && attrNormalizedName === 'action') ||
            // If relative URLs can go where they are not expected to, then
            // all sorts of trust issues can arise.
            (nodeName === 'base' && attrNormalizedName === 'href') ||
            // links can be stylesheets or imports, which can run script in the current origin
            (nodeName === 'link' && attrNormalizedName === 'href')
          ) {
            return $sce.RESOURCE_URL
          } else if (
            nodeName === 'a' &&
            (attrNormalizedName === 'href' || attrNormalizedName === 'ngHref')
          ) {
            return $sce.URL
          }
        }

        function getTrustedPropContext(nodeName, propNormalizedName) {
          var prop = propNormalizedName.toLowerCase()
          return PROP_CONTEXTS[nodeName + '|' + prop] || PROP_CONTEXTS['*|' + prop]
        }

        function sanitizeSrcsetPropertyValue(value) {
          return sanitizeSrcset($sce.valueOf(value), 'ng-prop-srcset')
        }
        function addPropertyDirective(node, directives, attrName, propName) {
          if (EVENT_HANDLER_ATTR_REGEXP.test(propName)) {
            throw $compileMinErr(
              'nodomevents',
              'Property bindings for HTML DOM event properties are disallowed'
            )
          }

          var nodeName = nodeName_(node)
          var trustedContext = getTrustedPropContext(nodeName, propName)

          var sanitizer = identity
          // Sanitize img[srcset] + source[srcset] values.
          if (propName === 'srcset' && (nodeName === 'img' || nodeName === 'source')) {
            sanitizer = sanitizeSrcsetPropertyValue
          } else if (trustedContext) {
            sanitizer = $sce.getTrusted.bind($sce, trustedContext)
          }

          directives.push({
            priority: 100,
            compile: function ngPropCompileFn(_, attr) {
              var ngPropGetter = $parse(attr[attrName])
              var ngPropWatch = $parse(attr[attrName], function sceValueOf(val) {
                // Unwrap the value to compare the actual inner safe value, not the wrapper object.
                return $sce.valueOf(val)
              })

              return {
                pre: function ngPropPreLinkFn(scope, $element) {
                  function applyPropValue() {
                    var propValue = ngPropGetter(scope)
                    $element[0][propName] = sanitizer(propValue)
                  }

                  applyPropValue()
                  scope.$watch(ngPropWatch, applyPropValue)
                },
              }
            },
          })
        }

        function addEventDirective(directives, attrName, eventName) {
          directives.push(
            createEventDirective(
              $parse,
              $rootScope,
              $exceptionHandler,
              attrName,
              eventName,
              /*forceAsync=*/ false
            )
          )
        }

        function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
          var nodeName = nodeName_(node)
          var trustedContext = getTrustedAttrContext(nodeName, name)
          var mustHaveExpression = !isNgAttr
          var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr

          var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing)

          // no interpolation found -> ignore
          if (!interpolateFn) return

          if (name === 'multiple' && nodeName === 'select') {
            throw $compileMinErr(
              'selmulti',
              "Binding to the 'multiple' attribute is not supported. Element: {0}",
              startingTag(node)
            )
          }

          if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
            throw $compileMinErr(
              'nodomevents',
              'Interpolations for HTML DOM event attributes are disallowed'
            )
          }

          directives.push({
            priority: 100,
            compile: function () {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = attr.$$observers || (attr.$$observers = createMap())

                  // If the attribute has changed since last $interpolate()ed
                  var newValue = attr[name]
                  if (newValue !== value) {
                    // we need to interpolate again since the attribute value has been updated
                    // (e.g. by another directive's compile function)
                    // ensure unset/empty values make interpolateFn falsy
                    interpolateFn =
                      newValue && $interpolate(newValue, true, trustedContext, allOrNothing)
                    value = newValue
                  }

                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn) return

                  // initialize attr object so that it's ready in case we need the value for isolate
                  // scope initialization, otherwise the value would not be available from isolate
                  // directive's linking fn during linking phase
                  attr[name] = interpolateFn(scope)

                  ;($$observers[name] || ($$observers[name] = [])).$$inter = true
                  ;((attr.$$observers && attr.$$observers[name].$$scope) || scope).$watch(
                    interpolateFn,
                    function interpolateFnWatchAction(newValue, oldValue) {
                      //special case for class attribute addition + removal
                      //so that class changes can tap into the animation
                      //hooks provided by the $animate service. Be sure to
                      //skip animations when the first digest occurs (when
                      //both the new and the old values are the same) since
                      //the CSS classes are the non-interpolated values
                      if (name === 'class' && newValue !== oldValue) {
                        attr.$updateClass(newValue, oldValue)
                      } else {
                        attr.$set(name, newValue)
                      }
                    }
                  )
                },
              }
            },
          })
        }

        /**
         * This is a special jqLite.replaceWith, which can replace items which
         * have no parents, provided that the containing jqLite collection is provided.
         *
         * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
         *                               in the root of the tree.
         * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
         *                                  the shell, but replace its DOM node reference.
         * @param {Node} newNode The new DOM node.
         */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0],
            removeCount = elementsToRemove.length,
            parent = firstElementToRemove.parentNode,
            i,
            ii

          if ($rootElement) {
            for (i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] === firstElementToRemove) {
                $rootElement[i++] = newNode
                for (
                  var j = i, j2 = j + removeCount - 1, jj = $rootElement.length;
                  j < jj;
                  j++, j2++
                ) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2]
                  } else {
                    delete $rootElement[j]
                  }
                }
                $rootElement.length -= removeCount - 1

                // If the replaced element is also the jQuery .context then replace it
                // .context is a deprecated jQuery api, so we should set it only when jQuery set it
                // http://api.jquery.com/context/
                if ($rootElement.context === firstElementToRemove) {
                  $rootElement.context = newNode
                }
                break
              }
            }
          }

          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove)
          }

          // Append all the `elementsToRemove` to a fragment. This will...
          // - remove them from the DOM
          // - allow them to still be traversed with .nextSibling
          // - allow a single fragment.qSA to fetch all elements being removed
          var fragment = window.document.createDocumentFragment()
          for (i = 0; i < removeCount; i++) {
            fragment.appendChild(elementsToRemove[i])
          }

          if (jqLite.hasData(firstElementToRemove)) {
            // Copy over user data (that includes AngularJS's $scope etc.). Don't copy private
            // data here because there's no public interface in jQuery to do that and copying over
            // event listeners (which is the main use of private data) wouldn't work anyway.
            jqLite.data(newNode, jqLite.data(firstElementToRemove))

            // Remove $destroy event listeners from `firstElementToRemove`
            jqLite(firstElementToRemove).off('$destroy')
          }

          // Cleanup any data/listeners on the elements and children.
          // This includes invoking the $destroy event on any elements with listeners.
          jqLite.cleanData(fragment.querySelectorAll('*'))

          // Update the jqLite collection to only contain the `newNode`
          for (i = 1; i < removeCount; i++) {
            delete elementsToRemove[i]
          }
          elementsToRemove[0] = newNode
          elementsToRemove.length = 1
        }

        function cloneAndAnnotateFn(fn, annotation) {
          return extend(
            function () {
              return fn.apply(null, arguments)
            },
            fn,
            annotation
          )
        }

        function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
          try {
            linkFn(scope, $element, attrs, controllers, transcludeFn)
          } catch (e) {
            $exceptionHandler(e, startingTag($element))
          }
        }

        function strictBindingsCheck(attrName, directiveName) {
          if (strictComponentBindingsEnabled) {
            throw $compileMinErr(
              'missingattr',
              "Attribute '{0}' of '{1}' is non-optional and must be set!",
              attrName,
              directiveName
            )
          }
        }

        // Set up $watches for isolate scope and controller bindings.
        function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
          var removeWatchCollection = []
          var initialChanges = {}
          var changes

          forEach(bindings, function initializeBinding(definition, scopeName) {
            var attrName = definition.attrName,
              optional = definition.optional,
              mode = definition.mode, // @, =, <, or &
              lastValue,
              parentGet,
              parentSet,
              compare,
              removeWatch

            switch (mode) {
              case '@':
                if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                  strictBindingsCheck(attrName, directive.name)
                  destination[scopeName] = attrs[attrName] = undefined
                }
                removeWatch = attrs.$observe(attrName, function (value) {
                  if (isString(value) || isBoolean(value)) {
                    var oldValue = destination[scopeName]
                    recordChanges(scopeName, value, oldValue)
                    destination[scopeName] = value
                  }
                })
                attrs.$$observers[attrName].$$scope = scope
                lastValue = attrs[attrName]
                if (isString(lastValue)) {
                  // If the attribute has been provided then we trigger an interpolation to ensure
                  // the value is there for use in the link fn
                  destination[scopeName] = $interpolate(lastValue)(scope)
                } else if (isBoolean(lastValue)) {
                  // If the attributes is one of the BOOLEAN_ATTR then AngularJS will have converted
                  // the value to boolean rather than a string, so we special case this situation
                  destination[scopeName] = lastValue
                }
                initialChanges[scopeName] = new SimpleChange(
                  _UNINITIALIZED_VALUE,
                  destination[scopeName]
                )
                removeWatchCollection.push(removeWatch)
                break

              case '=':
                if (!hasOwnProperty.call(attrs, attrName)) {
                  if (optional) break
                  strictBindingsCheck(attrName, directive.name)
                  attrs[attrName] = undefined
                }
                if (optional && !attrs[attrName]) break

                parentGet = $parse(attrs[attrName])
                if (parentGet.literal) {
                  compare = equals
                } else {
                  compare = simpleCompare
                }
                parentSet =
                  parentGet.assign ||
                  function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = destination[scopeName] = parentGet(scope)
                    throw $compileMinErr(
                      'nonassign',
                      "Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",
                      attrs[attrName],
                      attrName,
                      directive.name
                    )
                  }
                lastValue = destination[scopeName] = parentGet(scope)
                var parentValueWatch = function parentValueWatch(parentValue) {
                  if (!compare(parentValue, destination[scopeName])) {
                    // we are out of sync and need to copy
                    if (!compare(parentValue, lastValue)) {
                      // parent changed and it has precedence
                      destination[scopeName] = parentValue
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(scope, (parentValue = destination[scopeName]))
                    }
                  }
                  lastValue = parentValue
                  return lastValue
                }
                parentValueWatch.$stateful = true
                if (definition.collection) {
                  removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch)
                } else {
                  removeWatch = scope.$watch(
                    $parse(attrs[attrName], parentValueWatch),
                    null,
                    parentGet.literal
                  )
                }
                removeWatchCollection.push(removeWatch)
                break

              case '<':
                if (!hasOwnProperty.call(attrs, attrName)) {
                  if (optional) break
                  strictBindingsCheck(attrName, directive.name)
                  attrs[attrName] = undefined
                }
                if (optional && !attrs[attrName]) break

                parentGet = $parse(attrs[attrName])
                var isLiteral = parentGet.literal

                var initialValue = (destination[scopeName] = parentGet(scope))
                initialChanges[scopeName] = new SimpleChange(
                  _UNINITIALIZED_VALUE,
                  destination[scopeName]
                )

                removeWatch = scope[definition.collection ? '$watchCollection' : '$watch'](
                  parentGet,
                  function parentValueWatchAction(newValue, oldValue) {
                    if (oldValue === newValue) {
                      if (
                        oldValue === initialValue ||
                        (isLiteral && equals(oldValue, initialValue))
                      ) {
                        return
                      }
                      oldValue = initialValue
                    }
                    recordChanges(scopeName, newValue, oldValue)
                    destination[scopeName] = newValue
                  }
                )

                removeWatchCollection.push(removeWatch)
                break

              case '&':
                if (!optional && !hasOwnProperty.call(attrs, attrName)) {
                  strictBindingsCheck(attrName, directive.name)
                }
                // Don't assign Object.prototype method to scope
                parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop

                // Don't assign noop to destination if expression is not valid
                if (parentGet === noop && optional) break

                destination[scopeName] = function (locals) {
                  return parentGet(scope, locals)
                }
                break
            }
          })

          function recordChanges(key, currentValue, previousValue) {
            if (isFunction(destination.$onChanges) && !simpleCompare(currentValue, previousValue)) {
              // If we have not already scheduled the top level onChangesQueue handler then do so now
              if (!onChangesQueue) {
                scope.$$postDigest(flushOnChangesQueue)
                onChangesQueue = []
              }
              // If we have not already queued a trigger of onChanges for this controller then do so now
              if (!changes) {
                changes = {}
                onChangesQueue.push(triggerOnChangesHook)
              }
              // If the has been a change on this property already then we need to reuse the previous value
              if (changes[key]) {
                previousValue = changes[key].previousValue
              }
              // Store this change
              changes[key] = new SimpleChange(previousValue, currentValue)
            }
          }

          function triggerOnChangesHook() {
            destination.$onChanges(changes)
            // Now clear the changes so that we schedule onChanges when more changes arrive
            changes = undefined
          }

          return {
            initialChanges: initialChanges,
            removeWatches:
              removeWatchCollection.length &&
              function removeWatches() {
                for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
                  removeWatchCollection[i]()
                }
              },
          }
        }
      },
    ]
  }

  function SimpleChange(previous, current) {
    this.previousValue = previous
    this.currentValue = current
  }
  SimpleChange.prototype.isFirstChange = function () {
    return this.previousValue === _UNINITIALIZED_VALUE
  }

  var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i
  var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g

  /**
   * Converts all accepted directives format into proper directive name.
   * @param name Name to normalize
   */
  function directiveNormalize(name) {
    return name
      .replace(PREFIX_REGEXP, '')
      .replace(SPECIAL_CHARS_REGEXP, function (_, letter, offset) {
        return offset ? letter.toUpperCase() : letter
      })
  }

  /**
   * @ngdoc type
   * @name $compile.directive.Attributes
   *
   * @description
   * A shared object between directive compile / linking functions which contains normalized DOM
   * element attributes. The values reflect current binding state `{{ }}`. The normalization is
   * needed since all of these are treated as equivalent in AngularJS:
   *
   * ```
   *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
   * ```
   */

  /**
   * @ngdoc property
   * @name $compile.directive.Attributes#$attr
   *
   * @description
   * A map of DOM element attribute names to the normalized name. This is
   * needed to do reverse lookup from normalized name back to actual name.
   */

  /**
   * @ngdoc method
   * @name $compile.directive.Attributes#$set
   * @kind function
   *
   * @description
   * Set DOM element attribute value.
   *
   *
   * @param {string} name Normalized element attribute name of the property to modify. The name is
   *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
   *          property to the original name.
   * @param {string} value Value to set the attribute to. The value can be an interpolated string.
   */

  /**
   * Closure compiler type information
   */

  function nodesetLinkingFn(
    /* angular.Scope */ scope,
    /* NodeList */ nodeList,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
  ) {}

  function directiveLinkingFn(
    /* nodesetLinkingFn */ nodesetLinkingFn,
    /* angular.Scope */ scope,
    /* Node */ node,
    /* Element */ rootElement,
    /* function(Function) */ boundTranscludeFn
  ) {}

  function tokenDifference(str1, str2) {
    var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/)

    outer: for (var i = 0; i < tokens1.length; i++) {
      var token = tokens1[i]
      for (var j = 0; j < tokens2.length; j++) {
        if (token === tokens2[j]) continue outer
      }
      values += (values.length > 0 ? ' ' : '') + token
    }
    return values
  }

  function removeComments(jqNodes) {
    jqNodes = jqLite(jqNodes)
    var i = jqNodes.length

    if (i <= 1) {
      return jqNodes
    }

    while (i--) {
      var node = jqNodes[i]
      if (
        node.nodeType === NODE_TYPE_COMMENT ||
        (node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === '')
      ) {
        splice.call(jqNodes, i, 1)
      }
    }
    return jqNodes
  }

  var $controllerMinErr = minErr('$controller')

  var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/
  function identifierForController(controller, ident) {
    if (ident && isString(ident)) return ident
    if (isString(controller)) {
      var match = CNTRL_REG.exec(controller)
      if (match) return match[3]
    }
  }

  /**
   * @ngdoc provider
   * @name $controllerProvider
   * @this
   *
   * @description
   * The {@link ng.$controller $controller service} is used by AngularJS to create new
   * controllers.
   *
   * This provider allows controller registration via the
   * {@link ng.$controllerProvider#register register} method.
   */
  function $ControllerProvider() {
    var controllers = {}

    /**
     * @ngdoc method
     * @name $controllerProvider#has
     * @param {string} name Controller name to check.
     */
    this.has = function (name) {
      return controllers.hasOwnProperty(name)
    }

    /**
     * @ngdoc method
     * @name $controllerProvider#register
     * @param {string|Object} name Controller name, or an object map of controllers where the keys are
     *    the names and the values are the constructors.
     * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
     *    annotations in the array notation).
     */
    this.register = function (name, constructor) {
      assertNotHasOwnProperty(name, 'controller')
      if (isObject(name)) {
        extend(controllers, name)
      } else {
        controllers[name] = constructor
      }
    }

    this.$get = [
      '$injector',
      function ($injector) {
        /**
         * @ngdoc service
         * @name $controller
         * @requires $injector
         *
         * @param {Function|string} constructor If called with a function then it's considered to be the
         *    controller constructor function. Otherwise it's considered to be a string which is used
         *    to retrieve the controller constructor using the following steps:
         *
         *    * check if a controller with given name is registered via `$controllerProvider`
         *    * check if evaluating the string on the current scope returns a constructor
         *
         *    The string can use the `controller as property` syntax, where the controller instance is published
         *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
         *    to work correctly.
         *
         * @param {Object} locals Injection locals for Controller.
         * @return {Object} Instance of given controller.
         *
         * @description
         * `$controller` service is responsible for instantiating controllers.
         *
         * It's just a simple call to {@link auto.$injector $injector}, but extracted into
         * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
         */
        return function $controller(expression, locals, later, ident) {
          // PRIVATE API:
          //   param `later` --- indicates that the controller's constructor is invoked at a later time.
          //                     If true, $controller will allocate the object with the correct
          //                     prototype chain, but will not invoke the controller until a returned
          //                     callback is invoked.
          //   param `ident` --- An optional label which overrides the label parsed from the controller
          //                     expression, if any.
          var instance, match, constructor, identifier
          later = later === true
          if (ident && isString(ident)) {
            identifier = ident
          }

          if (isString(expression)) {
            match = expression.match(CNTRL_REG)
            if (!match) {
              throw $controllerMinErr(
                'ctrlfmt',
                "Badly formed controller string '{0}'. " +
                  'Must match `__name__ as __id__` or `__name__`.',
                expression
              )
            }
            constructor = match[1]
            identifier = identifier || match[3]
            expression = controllers.hasOwnProperty(constructor)
              ? controllers[constructor]
              : getter(locals.$scope, constructor, true)

            if (!expression) {
              throw $controllerMinErr(
                'ctrlreg',
                "The controller with the name '{0}' is not registered.",
                constructor
              )
            }

            assertArgFn(expression, constructor, true)
          }

          if (later) {
            // Instantiate controller later:
            // This machinery is used to create an instance of the object before calling the
            // controller's constructor itself.
            //
            // This allows properties to be added to the controller before the constructor is
            // invoked. Primarily, this is used for isolate scope bindings in $compile.
            //
            // This feature is not intended for use by applications, and is thus not documented
            // publicly.
            // Object creation: http://jsperf.com/create-constructor/2
            var controllerPrototype = (
              isArray(expression) ? expression[expression.length - 1] : expression
            ).prototype
            instance = Object.create(controllerPrototype || null)

            if (identifier) {
              addIdentifier(locals, identifier, instance, constructor || expression.name)
            }

            return extend(
              function $controllerInit() {
                var result = $injector.invoke(expression, instance, locals, constructor)
                if (result !== instance && (isObject(result) || isFunction(result))) {
                  instance = result
                  if (identifier) {
                    // If result changed, re-assign controllerAs value to scope.
                    addIdentifier(locals, identifier, instance, constructor || expression.name)
                  }
                }
                return instance
              },
              {
                instance: instance,
                identifier: identifier,
              }
            )
          }

          instance = $injector.instantiate(expression, locals, constructor)

          if (identifier) {
            addIdentifier(locals, identifier, instance, constructor || expression.name)
          }

          return instance
        }

        function addIdentifier(locals, identifier, instance, name) {
          if (!(locals && isObject(locals.$scope))) {
            throw minErr('$controller')(
              'noscp',
              "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
              name,
              identifier
            )
          }

          locals.$scope[identifier] = instance
        }
      },
    ]
  }

  /**
 * @ngdoc service
 * @name $document
 * @requires $window
 * @this
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample" name="document">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
  function $DocumentProvider() {
    this.$get = [
      '$window',
      function (window) {
        return jqLite(window.document)
      },
    ]
  }

  /**
   * @private
   * @this
   * Listens for document visibility change and makes the current status accessible.
   */
  function $$IsDocumentHiddenProvider() {
    this.$get = [
      '$document',
      '$rootScope',
      function ($document, $rootScope) {
        var doc = $document[0]
        var hidden = doc && doc.hidden

        $document.on('visibilitychange', changeListener)

        $rootScope.$on('$destroy', function () {
          $document.off('visibilitychange', changeListener)
        })

        function changeListener() {
          hidden = doc.hidden
        }

        return function () {
          return hidden
        }
      },
    ]
  }

  /**
   * @ngdoc service
   * @name $exceptionHandler
   * @requires ng.$log
   * @this
   *
   * @description
   * Any uncaught exception in AngularJS expressions is delegated to this service.
   * The default implementation simply delegates to `$log.error` which logs it into
   * the browser console.
   *
   * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
   * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
   *
   * ## Example:
   *
   * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
   * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
   * of `$log.error()`.
   *
   * ```js
   *   angular.
   *     module('exceptionOverwrite', []).
   *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
   *       return function myExceptionHandler(exception, cause) {
   *         logErrorsToBackend(exception, cause);
   *         $log.warn(exception, cause);
   *       };
   *     }]);
   * ```
   *
   * <hr />
   * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
   * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
   * (unless executed during a digest).
   *
   * If you wish, you can manually delegate exceptions, e.g.
   * `try { ... } catch(e) { $exceptionHandler(e); }`
   *
   * @param {Error} exception Exception associated with the error.
   * @param {string=} cause Optional information about the context in which
   *       the error was thrown.
   *
   */
  function $ExceptionHandlerProvider() {
    this.$get = [
      '$log',
      function ($log) {
        return function (exception, cause) {
          $log.error.apply($log, arguments)
        }
      },
    ]
  }

  var $$ForceReflowProvider = /** @this */ function () {
    this.$get = [
      '$document',
      function ($document) {
        return function (domNode) {
          //the line below will force the browser to perform a repaint so
          //that all the animated elements within the animation frame will
          //be properly updated and drawn on screen. This is required to
          //ensure that the preparation animation is properly flushed so that
          //the active state picks up from there. DO NOT REMOVE THIS LINE.
          //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
          //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
          //WILL TAKE YEARS AWAY FROM YOUR LIFE.
          if (domNode) {
            if (!domNode.nodeType && domNode instanceof jqLite) {
              domNode = domNode[0]
            }
          } else {
            domNode = $document[0].body
          }
          return domNode.offsetWidth + 1
        }
      },
    ]
  }

  var APPLICATION_JSON = 'application/json'
  var CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': APPLICATION_JSON + ';charset=utf-8' }
  var JSON_START = /^\[|^\{(?!\{)/
  var JSON_ENDS = {
    '[': /]$/,
    '{': /}$/,
  }
  var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/
  var $httpMinErr = minErr('$http')

  function serializeValue(v) {
    if (isObject(v)) {
      return isDate(v) ? v.toISOString() : toJson(v)
    }
    return v
  }

  /** @this */
  function $HttpParamSerializerProvider() {
    /**
     * @ngdoc service
     * @name $httpParamSerializer
     * @description
     *
     * Default {@link $http `$http`} params serializer that converts objects to strings
     * according to the following rules:
     *
     * * `{'foo': 'bar'}` results in `foo=bar`
     * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
     * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
     * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
     *
     * Note that serializer will sort the request parameters alphabetically.
     */

    this.$get = function () {
      return function ngParamSerializer(params) {
        if (!params) return ''
        var parts = []
        forEachSorted(params, function (value, key) {
          if (value === null || isUndefined(value) || isFunction(value)) return
          if (isArray(value)) {
            forEach(value, function (v) {
              parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(v)))
            })
          } else {
            parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)))
          }
        })

        return parts.join('&')
      }
    }
  }

  /** @this */
  function $HttpParamSerializerJQLikeProvider() {
    /**
     * @ngdoc service
     * @name $httpParamSerializerJQLike
     *
     * @description
     *
     * Alternative {@link $http `$http`} params serializer that follows
     * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
     * The serializer will also sort the params alphabetically.
     *
     * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
     *
     * ```js
     * $http({
     *   url: myUrl,
     *   method: 'GET',
     *   params: myParams,
     *   paramSerializer: '$httpParamSerializerJQLike'
     * });
     * ```
     *
     * It is also possible to set it as the default `paramSerializer` in the
     * {@link $httpProvider#defaults `$httpProvider`}.
     *
     * Additionally, you can inject the serializer and use it explicitly, for example to serialize
     * form data for submission:
     *
     * ```js
     * .controller(function($http, $httpParamSerializerJQLike) {
     *   //...
     *
     *   $http({
     *     url: myUrl,
     *     method: 'POST',
     *     data: $httpParamSerializerJQLike(myData),
     *     headers: {
     *       'Content-Type': 'application/x-www-form-urlencoded'
     *     }
     *   });
     *
     * });
     * ```
     *
     */
    this.$get = function () {
      return function jQueryLikeParamSerializer(params) {
        if (!params) return ''
        var parts = []
        serialize(params, '', true)
        return parts.join('&')

        function serialize(toSerialize, prefix, topLevel) {
          if (isArray(toSerialize)) {
            forEach(toSerialize, function (value, index) {
              serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']')
            })
          } else if (isObject(toSerialize) && !isDate(toSerialize)) {
            forEachSorted(toSerialize, function (value, key) {
              serialize(value, prefix + (topLevel ? '' : '[') + key + (topLevel ? '' : ']'))
            })
          } else {
            if (isFunction(toSerialize)) {
              toSerialize = toSerialize()
            }
            parts.push(
              encodeUriQuery(prefix) +
                '=' +
                (toSerialize == null ? '' : encodeUriQuery(serializeValue(toSerialize)))
            )
          }
        }
      }
    }
  }

  function defaultHttpResponseTransform(data, headers) {
    if (isString(data)) {
      // Strip json vulnerability protection prefix and trim whitespace
      var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim()

      if (tempData) {
        var contentType = headers('Content-Type')
        var hasJsonContentType = contentType && contentType.indexOf(APPLICATION_JSON) === 0

        if (hasJsonContentType || isJsonLike(tempData)) {
          try {
            data = fromJson(tempData)
          } catch (e) {
            if (!hasJsonContentType) {
              return data
            }
            throw $httpMinErr(
              'baddata',
              'Data must be a valid JSON object. Received: "{0}". ' + 'Parse error: "{1}"',
              data,
              e
            )
          }
        }
      }
    }

    return data
  }

  function isJsonLike(str) {
    var jsonStart = str.match(JSON_START)
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str)
  }

  /**
   * Parse headers into key value object
   *
   * @param {string} headers Raw headers as a string
   * @returns {Object} Parsed headers as key value object
   */
  function parseHeaders(headers) {
    var parsed = createMap(),
      i

    function fillInParsed(key, val) {
      if (key) {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val
      }
    }

    if (isString(headers)) {
      forEach(headers.split('\n'), function (line) {
        i = line.indexOf(':')
        fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)))
      })
    } else if (isObject(headers)) {
      forEach(headers, function (headerVal, headerKey) {
        fillInParsed(lowercase(headerKey), trim(headerVal))
      })
    }

    return parsed
  }

  /**
   * Returns a function that provides access to parsed headers.
   *
   * Headers are lazy parsed when first requested.
   * @see parseHeaders
   *
   * @param {(string|Object)} headers Headers to provide access to.
   * @returns {function(string=)} Returns a getter function which if called with:
   *
   *   - if called with an argument returns a single header value or null
   *   - if called with no arguments returns an object containing all headers.
   */
  function headersGetter(headers) {
    var headersObj

    return function (name) {
      if (!headersObj) headersObj = parseHeaders(headers)

      if (name) {
        var value = headersObj[lowercase(name)]
        if (value === undefined) {
          value = null
        }
        return value
      }

      return headersObj
    }
  }

  /**
   * Chain all given functions
   *
   * This function is used for both request and response transforming
   *
   * @param {*} data Data to transform.
   * @param {function(string=)} headers HTTP headers getter fn.
   * @param {number} status HTTP status code of the response.
   * @param {(Function|Array.<Function>)} fns Function or an array of functions.
   * @returns {*} Transformed data.
   */
  function transformData(data, headers, status, fns) {
    if (isFunction(fns)) {
      return fns(data, headers, status)
    }

    forEach(fns, function (fn) {
      data = fn(data, headers, status)
    })

    return data
  }

  function isSuccess(status) {
    return 200 <= status && status < 300
  }

  /**
   * @ngdoc provider
   * @name $httpProvider
   * @this
   *
   * @description
   * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
   */
  function $HttpProvider() {
    /**
     * @ngdoc property
     * @name $httpProvider#defaults
     * @description
     *
     * Object containing default values for all {@link ng.$http $http} requests.
     *
     * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
     * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
     * by default. See {@link $http#caching $http Caching} for more information.
     *
     * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
     * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
     * setting default headers.
     *     - **`defaults.headers.common`**
     *     - **`defaults.headers.post`**
     *     - **`defaults.headers.put`**
     *     - **`defaults.headers.patch`**
     *
     * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
     * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
     * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
     *
     * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
     *  used to the prepare string representation of request parameters (specified as an object).
     *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
     *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
     *
     * - **`defaults.transformRequest`** -
     * `{Array<function(data, headersGetter)>|function(data, headersGetter)}` -
     * An array of functions (or a single function) which are applied to the request data.
     * By default, this is an array with one request transformation function:
     *
     *   - If the `data` property of the request configuration object contains an object, serialize it
     *     into JSON format.
     *
     * - **`defaults.transformResponse`** -
     * `{Array<function(data, headersGetter, status)>|function(data, headersGetter, status)}` -
     * An array of functions (or a single function) which are applied to the response data. By default,
     * this is an array which applies one response transformation function that does two things:
     *
     *  - If XSRF prefix is detected, strip it
     *    (see {@link ng.$http#security-considerations Security Considerations in the $http docs}).
     *  - If the `Content-Type` is `application/json` or the response looks like JSON,
     *    deserialize it using a JSON parser.
     *
     * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
     * Defaults value is `'XSRF-TOKEN'`.
     *
     * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
     * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
     *
     */
    var defaults = (this.defaults = {
      // transform incoming response data
      transformResponse: [defaultHttpResponseTransform],

      // transform outgoing request data
      transformRequest: [
        function (d) {
          return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d
        },
      ],

      // default headers
      headers: {
        common: {
          Accept: 'application/json, text/plain, */*',
        },
        post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
        patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      },

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      paramSerializer: '$httpParamSerializer',

      jsonpCallbackParam: 'callback',
    })

    var useApplyAsync = false
    /**
     * @ngdoc method
     * @name $httpProvider#useApplyAsync
     * @description
     *
     * Configure $http service to combine processing of multiple http responses received at around
     * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
     * significant performance improvement for bigger applications that make many HTTP requests
     * concurrently (common during application bootstrap).
     *
     * Defaults to false. If no value is specified, returns the current configured value.
     *
     * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
     *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
     *    to load and share the same digest cycle.
     *
     * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
     *    otherwise, returns the current configured value.
     */
    this.useApplyAsync = function (value) {
      if (isDefined(value)) {
        useApplyAsync = !!value
        return this
      }
      return useApplyAsync
    }

    /**
     * @ngdoc property
     * @name $httpProvider#interceptors
     * @description
     *
     * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
     * pre-processing of request or postprocessing of responses.
     *
     * These service factories are ordered by request, i.e. they are applied in the same order as the
     * array, on request, but reverse order, on response.
     *
     * {@link ng.$http#interceptors Interceptors detailed info}
     */
    var interceptorFactories = (this.interceptors = [])

    /**
     * @ngdoc property
     * @name $httpProvider#xsrfTrustedOrigins
     * @description
     *
     * Array containing URLs whose origins are trusted to receive the XSRF token. See the
     * {@link ng.$http#security-considerations Security Considerations} sections for more details on
     * XSRF.
     *
     * **Note:** An "origin" consists of the [URI scheme](https://en.wikipedia.org/wiki/URI_scheme),
     * the [hostname](https://en.wikipedia.org/wiki/Hostname) and the
     * [port number](https://en.wikipedia.org/wiki/Port_(computer_networking). For `http:` and
     * `https:`, the port number can be omitted if using th default ports (80 and 443 respectively).
     * Examples: `http://example.com`, `https://api.example.com:9876`
     *
     * <div class="alert alert-warning">
     *   It is not possible to trust specific URLs/paths. The `path`, `query` and `fragment` parts
     *   of a URL will be ignored. For example, `https://foo.com/path/bar?query=baz#fragment` will be
     *   treated as `https://foo.com`, meaning that **all** requests to URLs starting with
     *   `https://foo.com/` will include the XSRF token.
     * </div>
     *
     * @example
     *
     * ```js
     * // App served from `https://example.com/`.
     * angular.
     *   module('xsrfTrustedOriginsExample', []).
     *   config(['$httpProvider', function($httpProvider) {
     *     $httpProvider.xsrfTrustedOrigins.push('https://api.example.com');
     *   }]).
     *   run(['$http', function($http) {
     *     // The XSRF token will be sent.
     *     $http.get('https://api.example.com/preferences').then(...);
     *
     *     // The XSRF token will NOT be sent.
     *     $http.get('https://stats.example.com/activity').then(...);
     *   }]);
     * ```
     */
    var xsrfTrustedOrigins = (this.xsrfTrustedOrigins = [])

    /**
     * @ngdoc property
     * @name $httpProvider#xsrfWhitelistedOrigins
     * @description
     *
     * @deprecated
     * sinceVersion="1.8.1"
     *
     * This property is deprecated. Use {@link $httpProvider#xsrfTrustedOrigins xsrfTrustedOrigins}
     * instead.
     */
    Object.defineProperty(this, 'xsrfWhitelistedOrigins', {
      get: function () {
        return this.xsrfTrustedOrigins
      },
      set: function (origins) {
        this.xsrfTrustedOrigins = origins
      },
    })

    this.$get = [
      '$browser',
      '$httpBackend',
      '$$cookieReader',
      '$cacheFactory',
      '$rootScope',
      '$q',
      '$injector',
      '$sce',
      function (
        $browser,
        $httpBackend,
        $$cookieReader,
        $cacheFactory,
        $rootScope,
        $q,
        $injector,
        $sce
      ) {
        var defaultCache = $cacheFactory('$http')

        /**
         * Make sure that default param serializer is exposed as a function
         */
        defaults.paramSerializer = isString(defaults.paramSerializer)
          ? $injector.get(defaults.paramSerializer)
          : defaults.paramSerializer

        /**
         * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
         * The reversal is needed so that we can build up the interception chain around the
         * server request.
         */
        var reversedInterceptors = []

        forEach(interceptorFactories, function (interceptorFactory) {
          reversedInterceptors.unshift(
            isString(interceptorFactory)
              ? $injector.get(interceptorFactory)
              : $injector.invoke(interceptorFactory)
          )
        })

        /**
         * A function to check request URLs against a list of allowed origins.
         */
        var urlIsAllowedOrigin = urlIsAllowedOriginFactory(xsrfTrustedOrigins)

        /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core AngularJS service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise} that is
     * resolved (request success) or rejected (request failure) with a
     * {@link ng.$http#$http-returns response} object.
     *
     * ```js
     *   // Simple GET request example:
     *   $http({
     *     method: 'GET',
     *     url: '/someUrl'
     *   }).then(function successCallback(response) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }, function errorCallback(response) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
     * last argument.
     *
     * ```js
     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).then(function(){...}, function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * <div class="alert alert-warning">
     * **Note:** AngularJS does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
     * function will be reflected on the scope and in any templates where the object is data-bound.
     * To prevent this, transform functions should have no side-effects.
     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
     * </div>
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * AngularJS provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`) is
     * an array with one function that does the following:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`) is
     * an array with one function that does the following:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If the `Content-Type` is `application/json` or the response looks like JSON,
   *      deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish to override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
     * set the config.cache value or the default cache value to TRUE or to a cache object (created
     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
     * precedence over the default cache value.
     *
     * In order to:
     *   * cache all responses - set the default cache value to TRUE or to a cache object
     *   * cache a specific response - set config.cache value to TRUE or to a cache object
     *
     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
     * then the default `$cacheFactory("$http")` object is used.
     *
     * The default cache value can be set by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
     *
     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
     * the relevant cache object. The next time the same request is made, the response is returned
     * from the cache without sending a request to the server.
     *
     * Take note that:
     *
     *   * Only GET and JSONP requests are cached.
     *   * The cache key is the request URL including search parameters; headers are not considered.
     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
     *   * If multiple identical requests are made using the same cache, which is not yet populated,
     *     one request will be made to the server and remaining requests will return the same response.
     *   * A cache-control header on the response does not affect if or how responses are cached.
     *
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. AngularJS comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * AngularJS will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * AngularJS will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
     * which the attacker can trick an authenticated user into unknowingly executing actions on your
     * website. AngularJS provides a mechanism to counter XSRF. When performing XHR requests, the
     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
     * header (by default `X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read
     * the cookie, your server can be assured that the XHR came from JavaScript running on your
     * domain.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches the `X-XSRF-TOKEN` HTTP header, and therefore be
     * sure that only JavaScript running on your domain could have sent the request. The token must
     * be unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The header will &mdash; by default &mdash; **not** be set for cross-domain requests. This
     * prevents unauthorized servers (e.g. malicious or compromised 3rd-party APIs) from gaining
     * access to your users' XSRF tokens and exposing them to Cross Site Request Forgery. If you
     * want to, you can trust additional origins to also receive the XSRF token, by adding them
     * to {@link ng.$httpProvider#xsrfTrustedOrigins xsrfTrustedOrigins}. This might be
     * useful, for example, if your application, served from `example.com`, needs to access your API
     * at `api.example.com`.
     * See {@link ng.$httpProvider#xsrfTrustedOrigins $httpProvider.xsrfTrustedOrigins} for
     * more details.
     *
     * <div class="alert alert-danger">
     *   **Warning**<br />
     *   Only trusted origins that you have control over and make sure you understand the
     *   implications of doing so.
     * </div>
     *
     * The name of the cookie and the header can be specified using the `xsrfCookieName` and
     * `xsrfHeaderName` properties of either `$httpProvider.defaults` at config-time,
     * `$http.defaults` at run-time, or the per-request config object.
     *
     * In order to prevent collisions in environments where multiple AngularJS apps share the
     * same domain or subdomain, we recommend that each application uses a unique cookie name.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
     *      with the `paramSerializer` and appended as GET parameters.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent. Functions accept a config object as an argument.
     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
     *      The handler will be called in the context of a `$apply` block.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
     *      prepare the string representation of request parameters (specified as an object).
     *      If specified as string, it is interpreted as function registered with the
     *      {@link $injector $injector}, which means you can create your own serializer
     *      by registering it as a {@link auto.$provide#service service}.
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
     *      See {@link $http#caching $http Caching} for more information.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *
     *      A numerical timeout or a promise returned from {@link ng.$timeout $timeout}, will set
     *      the `xhrStatus` in the {@link $http#$http-returns response} to "timeout", and any other
     *      resolved promise will set it to "abort", following standard XMLHttpRequest behavior.
     *
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *
     * @returns {HttpPromise} A {@link ng.$q `Promise}` that will be resolved (request success)
     *   or rejected (request failure) with a response object.
     *
     *   The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with
     *     the transform functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used
     *     to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *   - **xhrStatus** – `{string}` – Status of the XMLHttpRequest
     *     (`complete`, `error`, `timeout` or `abort`).
     *
     *
     *   A response status code between 200 and 299 is considered a success status
     *   and will result in the success callback being called. Any response status
     *   code outside of that range is considered an error status and will result
     *   in the error callback being called.
     *   Also, status codes less than -1 are normalized to zero. -1 usually means
     *   the request was aborted, e.g. using a `config.timeout`. More information
     *   about the status might be available in the `xhrStatus` property.
     *
     *   Note that if the response is a redirect, XMLHttpRequest will transparently
     *   follow it, meaning that the outcome (success or error) will be determined
     *   by the final response status code.
     *
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample" name="http-service">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method" aria-label="Request method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80" aria-label="URL" />
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
      // We must add the JSONP endpoint that we are using to the trusted list to show that we trust it
      $sceDelegateProvider.trustedResourceUrlList([
        'self',
        'https://angularjs.org/**'
      ]);
    }])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            then(function(response) {
              $scope.status = response.status;
              $scope.data = response.data;
            }, function(response) {
              $scope.data = response.data || 'Request failed';
              $scope.status = response.status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
        function $http(requestConfig) {
          if (!isObject(requestConfig)) {
            throw minErr('$http')(
              'badreq',
              'Http request configuration must be an object.  Received: {0}',
              requestConfig
            )
          }

          if (!isString($sce.valueOf(requestConfig.url))) {
            throw minErr('$http')(
              'badreq',
              'Http request configuration url must be a string or a $sce trusted object.  Received: {0}',
              requestConfig.url
            )
          }

          var config = extend(
            {
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse,
              paramSerializer: defaults.paramSerializer,
              jsonpCallbackParam: defaults.jsonpCallbackParam,
            },
            requestConfig
          )

          config.headers = mergeHeaders(requestConfig)
          config.method = uppercase(config.method)
          config.paramSerializer = isString(config.paramSerializer)
            ? $injector.get(config.paramSerializer)
            : config.paramSerializer

          $browser.$$incOutstandingRequestCount('$http')

          var requestInterceptors = []
          var responseInterceptors = []
          var promise = $q.resolve(config)

          // apply interceptors
          forEach(reversedInterceptors, function (interceptor) {
            if (interceptor.request || interceptor.requestError) {
              requestInterceptors.unshift(interceptor.request, interceptor.requestError)
            }
            if (interceptor.response || interceptor.responseError) {
              responseInterceptors.push(interceptor.response, interceptor.responseError)
            }
          })

          promise = chainInterceptors(promise, requestInterceptors)
          promise = promise.then(serverRequest)
          promise = chainInterceptors(promise, responseInterceptors)
          promise = promise.finally(completeOutstandingRequest)

          return promise

          function chainInterceptors(promise, interceptors) {
            for (var i = 0, ii = interceptors.length; i < ii; ) {
              var thenFn = interceptors[i++]
              var rejectFn = interceptors[i++]

              promise = promise.then(thenFn, rejectFn)
            }

            interceptors.length = 0

            return promise
          }

          function completeOutstandingRequest() {
            $browser.$$completeOutstandingRequest(noop, '$http')
          }

          function executeHeaderFns(headers, config) {
            var headerContent,
              processedHeaders = {}

            forEach(headers, function (headerFn, header) {
              if (isFunction(headerFn)) {
                headerContent = headerFn(config)
                if (headerContent != null) {
                  processedHeaders[header] = headerContent
                }
              } else {
                processedHeaders[header] = headerFn
              }
            })

            return processedHeaders
          }

          function mergeHeaders(config) {
            var defHeaders = defaults.headers,
              reqHeaders = extend({}, config.headers),
              defHeaderName,
              lowercaseDefHeaderName,
              reqHeaderName

            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)])

            // using for-in instead of forEach to avoid unnecessary iteration after header has been found
            defaultHeadersIteration: for (defHeaderName in defHeaders) {
              lowercaseDefHeaderName = lowercase(defHeaderName)

              for (reqHeaderName in reqHeaders) {
                if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                  continue defaultHeadersIteration
                }
              }

              reqHeaders[defHeaderName] = defHeaders[defHeaderName]
            }

            // execute if header value is a function for merged headers
            return executeHeaderFns(reqHeaders, shallowCopy(config))
          }

          function serverRequest(config) {
            var headers = config.headers
            var reqData = transformData(
              config.data,
              headersGetter(headers),
              undefined,
              config.transformRequest
            )

            // strip content-type if data is undefined
            if (isUndefined(reqData)) {
              forEach(headers, function (value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header]
                }
              })
            }

            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials
            }

            // send request
            return sendReq(config, reqData).then(transformResponse, transformResponse)
          }

          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response)
            resp.data = transformData(
              response.data,
              response.headers,
              response.status,
              config.transformResponse
            )
            return isSuccess(response.status) ? resp : $q.reject(resp)
          }
        }

        $http.pendingRequests = []

        /**
         * @ngdoc method
         * @name $http#get
         *
         * @description
         * Shortcut method to perform `GET` request.
         *
         * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */

        /**
         * @ngdoc method
         * @name $http#delete
         *
         * @description
         * Shortcut method to perform `DELETE` request.
         *
         * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */

        /**
         * @ngdoc method
         * @name $http#head
         *
         * @description
         * Shortcut method to perform `HEAD` request.
         *
         * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */

        /**
         * @ngdoc method
         * @name $http#jsonp
         *
         * @description
         * Shortcut method to perform `JSONP` request.
         *
         * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
         * the url must be declared, via {@link $sce} as a trusted resource URL.
         * You can trust a URL by adding it to the trusted resource URL list via
         * {@link $sceDelegateProvider#trustedResourceUrlList  `$sceDelegateProvider.trustedResourceUrlList`} or
         * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
         *
         * You should avoid generating the URL for the JSONP request from user provided data.
         * Provide additional query parameters via `params` property of the `config` parameter, rather than
         * modifying the URL itself.
         *
         * JSONP requests must specify a callback to be used in the response from the server. This callback
         * is passed as a query parameter in the request. You must specify the name of this parameter by
         * setting the `jsonpCallbackParam` property on the request config object.
         *
         * ```
         * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
         * ```
         *
         * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
         * Initially this is set to `'callback'`.
         *
         * <div class="alert alert-danger">
         * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
         * parameter value should go.
         * </div>
         *
         * If you would like to customise where and how the callbacks are stored then try overriding
         * or decorating the {@link $jsonpCallbacks} service.
         *
         * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */
        createShortMethods('get', 'delete', 'head', 'jsonp')

        /**
         * @ngdoc method
         * @name $http#post
         *
         * @description
         * Shortcut method to perform `POST` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */

        /**
         * @ngdoc method
         * @name $http#put
         *
         * @description
         * Shortcut method to perform `PUT` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */

        /**
         * @ngdoc method
         * @name $http#patch
         *
         * @description
         * Shortcut method to perform `PATCH` request.
         *
         * @param {string} url Relative or absolute URL specifying the destination of the request
         * @param {*} data Request content
         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.
         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.
         * See {@link ng.$http#$http-returns `$http()` return value}.
         */
        createShortMethodsWithData('post', 'put', 'patch')

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
        $http.defaults = defaults

        return $http

        function createShortMethods(names) {
          forEach(arguments, function (name) {
            $http[name] = function (url, config) {
              return $http(
                extend({}, config || {}, {
                  method: name,
                  url: url,
                })
              )
            }
          })
        }

        function createShortMethodsWithData(name) {
          forEach(arguments, function (name) {
            $http[name] = function (url, data, config) {
              return $http(
                extend({}, config || {}, {
                  method: name,
                  url: url,
                  data: data,
                })
              )
            }
          })
        }

        /**
         * Makes the request.
         *
         * !!! ACCESSES CLOSURE VARS:
         * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
         */
        function sendReq(config, reqData) {
          var deferred = $q.defer(),
            promise = deferred.promise,
            cache,
            cachedResp,
            reqHeaders = config.headers,
            isJsonp = lowercase(config.method) === 'jsonp',
            url = config.url

          if (isJsonp) {
            // JSONP is a pretty sensitive operation where we're allowing a script to have full access to
            // our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
            url = $sce.getTrustedResourceUrl(url)
          } else if (!isString(url)) {
            // If it is not a string then the URL must be a $sce trusted object
            url = $sce.valueOf(url)
          }

          url = buildUrl(url, config.paramSerializer(config.params))

          if (isJsonp) {
            // Check the url and add the JSONP callback placeholder
            url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam)
          }

          $http.pendingRequests.push(config)
          promise.then(removePendingReq, removePendingReq)

          if (
            (config.cache || defaults.cache) &&
            config.cache !== false &&
            (config.method === 'GET' || config.method === 'JSONP')
          ) {
            cache = isObject(config.cache)
              ? config.cache
              : isObject(/** @type {?} */ (defaults).cache)
              ? /** @type {?} */ (defaults).cache
              : defaultCache
          }

          if (cache) {
            cachedResp = cache.get(url)
            if (isDefined(cachedResp)) {
              if (isPromiseLike(cachedResp)) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult)
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(
                    cachedResp[1],
                    cachedResp[0],
                    shallowCopy(cachedResp[2]),
                    cachedResp[3],
                    cachedResp[4]
                  )
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK', 'complete')
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise)
            }
          }

          // if we won't have the response in cache, set the xsrf headers and
          // send the request to the backend
          if (isUndefined(cachedResp)) {
            var xsrfValue = urlIsAllowedOrigin(config.url)
              ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
              : undefined
            if (xsrfValue) {
              reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue
            }

            $httpBackend(
              config.method,
              url,
              reqData,
              done,
              reqHeaders,
              config.timeout,
              config.withCredentials,
              config.responseType,
              createApplyHandlers(config.eventHandlers),
              createApplyHandlers(config.uploadEventHandlers)
            )
          }

          return promise

          function createApplyHandlers(eventHandlers) {
            if (eventHandlers) {
              var applyHandlers = {}
              forEach(eventHandlers, function (eventHandler, key) {
                applyHandlers[key] = function (event) {
                  if (useApplyAsync) {
                    $rootScope.$applyAsync(callEventHandler)
                  } else if ($rootScope.$$phase) {
                    callEventHandler()
                  } else {
                    $rootScope.$apply(callEventHandler)
                  }

                  function callEventHandler() {
                    eventHandler(event)
                  }
                }
              })
              return applyHandlers
            }
          }

          /**
           * Callback registered to $httpBackend():
           *  - caches the response if desired
           *  - resolves the raw $http promise
           *  - calls $apply
           */
          function done(status, response, headersString, statusText, xhrStatus) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [
                  status,
                  response,
                  parseHeaders(headersString),
                  statusText,
                  xhrStatus,
                ])
              } else {
                // remove promise from the cache
                cache.remove(url)
              }
            }

            function resolveHttpPromise() {
              resolvePromise(response, status, headersString, statusText, xhrStatus)
            }

            if (useApplyAsync) {
              $rootScope.$applyAsync(resolveHttpPromise)
            } else {
              resolveHttpPromise()
              if (!$rootScope.$$phase) $rootScope.$apply()
            }
          }

          /**
           * Resolves the raw $http promise.
           */
          function resolvePromise(response, status, headers, statusText, xhrStatus) {
            //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
            status = status >= -1 ? status : 0

            ;(isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText: statusText,
              xhrStatus: xhrStatus,
            })
          }

          function resolvePromiseWithResult(result) {
            resolvePromise(
              result.data,
              result.status,
              shallowCopy(result.headers()),
              result.statusText,
              result.xhrStatus
            )
          }

          function removePendingReq() {
            var idx = $http.pendingRequests.indexOf(config)
            if (idx !== -1) $http.pendingRequests.splice(idx, 1)
          }
        }

        function buildUrl(url, serializedParams) {
          if (serializedParams.length > 0) {
            url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams
          }
          return url
        }

        function sanitizeJsonpCallbackParam(url, cbKey) {
          var parts = url.split('?')
          if (parts.length > 2) {
            // Throw if the url contains more than one `?` query indicator
            throw $httpMinErr('badjsonp', 'Illegal use more than one "?", in url, "{1}"', url)
          }
          var params = parseKeyValue(parts[1])
          forEach(params, function (value, key) {
            if (value === 'JSON_CALLBACK') {
              // Throw if the url already contains a reference to JSON_CALLBACK
              throw $httpMinErr('badjsonp', 'Illegal use of JSON_CALLBACK in url, "{0}"', url)
            }
            if (key === cbKey) {
              // Throw if the callback param was already provided
              throw $httpMinErr(
                'badjsonp',
                'Illegal use of callback param, "{0}", in url, "{1}"',
                cbKey,
                url
              )
            }
          })

          // Add in the JSON_CALLBACK callback param value
          url += (url.indexOf('?') === -1 ? '?' : '&') + cbKey + '=JSON_CALLBACK'

          return url
        }
      },
    ]
  }

  /**
   * @ngdoc service
   * @name $xhrFactory
   * @this
   *
   * @description
   * Factory function used to create XMLHttpRequest objects.
   *
   * Replace or decorate this service to create your own custom XMLHttpRequest objects.
   *
   * ```
   * angular.module('myApp', [])
   * .factory('$xhrFactory', function() {
   *   return function createXhr(method, url) {
   *     return new window.XMLHttpRequest({mozSystem: true});
   *   };
   * });
   * ```
   *
   * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
   * @param {string} url URL of the request.
   */
  function $xhrFactoryProvider() {
    this.$get = function () {
      return function createXhr() {
        return new window.XMLHttpRequest()
      }
    }
  }

  /**
   * @ngdoc service
   * @name $httpBackend
   * @requires $jsonpCallbacks
   * @requires $document
   * @requires $xhrFactory
   * @this
   *
   * @description
   * HTTP backend used by the {@link ng.$http service} that delegates to
   * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
   *
   * You should never need to use this service directly, instead use the higher-level abstractions:
   * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
   *
   * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
   * $httpBackend} which can be trained with responses.
   */
  function $HttpBackendProvider() {
    this.$get = [
      '$browser',
      '$jsonpCallbacks',
      '$document',
      '$xhrFactory',
      function ($browser, $jsonpCallbacks, $document, $xhrFactory) {
        return createHttpBackend(
          $browser,
          $xhrFactory,
          $browser.defer,
          $jsonpCallbacks,
          $document[0]
        )
      },
    ]
  }

  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    // TODO(vojta): fix the signature
    return function (
      method,
      url,
      post,
      callback,
      headers,
      timeout,
      withCredentials,
      responseType,
      eventHandlers,
      uploadEventHandlers
    ) {
      url = url || $browser.url()

      if (lowercase(method) === 'jsonp') {
        var callbackPath = callbacks.createCallback(url)
        var jsonpDone = jsonpReq(url, callbackPath, function (status, text) {
          // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
          var response = status === 200 && callbacks.getResponse(callbackPath)
          completeRequest(callback, status, response, '', text, 'complete')
          callbacks.removeCallback(callbackPath)
        })
      } else {
        var xhr = createXhr(method, url)
        var abortedByTimeout = false

        xhr.open(method, url, true)
        forEach(headers, function (value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value)
          }
        })

        xhr.onload = function requestLoaded() {
          var statusText = xhr.statusText || ''

          // responseText is the old-school way of retrieving response (supported by IE9)
          // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
          var response = 'response' in xhr ? xhr.response : xhr.responseText

          // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
          var status = xhr.status === 1223 ? 204 : xhr.status

          // fix status code when it is 0 (0 status is undocumented).
          // Occurs when accessing file resources or on Android 4.1 stock browser
          // while retrieving files from application cache.
          if (status === 0) {
            status = response ? 200 : urlResolve(url).protocol === 'file' ? 404 : 0
          }

          completeRequest(
            callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText,
            'complete'
          )
        }

        var requestError = function () {
          // The response is always empty
          // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
          completeRequest(callback, -1, null, null, '', 'error')
        }

        var requestAborted = function () {
          completeRequest(callback, -1, null, null, '', abortedByTimeout ? 'timeout' : 'abort')
        }

        var requestTimeout = function () {
          // The response is always empty
          // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
          completeRequest(callback, -1, null, null, '', 'timeout')
        }

        xhr.onerror = requestError
        xhr.ontimeout = requestTimeout
        xhr.onabort = requestAborted

        forEach(eventHandlers, function (value, key) {
          xhr.addEventListener(key, value)
        })

        forEach(uploadEventHandlers, function (value, key) {
          xhr.upload.addEventListener(key, value)
        })

        if (withCredentials) {
          xhr.withCredentials = true
        }

        if (responseType) {
          try {
            xhr.responseType = responseType
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e
            }
          }
        }

        xhr.send(isUndefined(post) ? null : post)
      }

      // Since we are using xhr.abort() when a request times out, we have to set a flag that
      // indicates to requestAborted if the request timed out or was aborted.
      //
      // http.timeout = numerical timeout   timeout
      // http.timeout = $timeout            timeout
      // http.timeout = promise             abort
      // xhr.abort()                        abort (The xhr object is normally inaccessible, but
      //                                    can be exposed with the xhrFactory)
      if (timeout > 0) {
        var timeoutId = $browserDefer(function () {
          timeoutRequest('timeout')
        }, timeout)
      } else if (isPromiseLike(timeout)) {
        timeout.then(function () {
          timeoutRequest(isDefined(timeout.$$timeoutId) ? 'timeout' : 'abort')
        })
      }

      function timeoutRequest(reason) {
        abortedByTimeout = reason === 'timeout'
        if (jsonpDone) {
          jsonpDone()
        }
        if (xhr) {
          xhr.abort()
        }
      }

      function completeRequest(callback, status, response, headersString, statusText, xhrStatus) {
        // cancel timeout and subsequent timeout promise resolution
        if (isDefined(timeoutId)) {
          $browserDefer.cancel(timeoutId)
        }
        jsonpDone = xhr = null

        callback(status, response, headersString, statusText, xhrStatus)
      }
    }

    function jsonpReq(url, callbackPath, done) {
      url = url.replace('JSON_CALLBACK', callbackPath)
      // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'),
        callback = null
      script.type = 'text/javascript'
      script.src = url
      script.async = true

      callback = function (event) {
        script.removeEventListener('load', callback)
        script.removeEventListener('error', callback)
        rawDocument.body.removeChild(script)
        script = null
        var status = -1
        var text = 'unknown'

        if (event) {
          if (event.type === 'load' && !callbacks.wasCalled(callbackPath)) {
            event = { type: 'error' }
          }
          text = event.type
          status = event.type === 'error' ? 404 : 200
        }

        if (done) {
          done(status, text)
        }
      }

      script.addEventListener('load', callback)
      script.addEventListener('error', callback)
      rawDocument.body.appendChild(script)
      return callback
    }
  }

  var $interpolateMinErr = (angular.$interpolateMinErr = minErr('$interpolate'))
  $interpolateMinErr.throwNoconcat = function (text) {
    throw $interpolateMinErr(
      'noconcat',
      'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' +
        'interpolations that concatenate multiple expressions when a trusted value is ' +
        'required.  See http://docs.angularjs.org/api/ng.$sce',
      text
    )
  }

  $interpolateMinErr.interr = function (text, err) {
    return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString())
  }

  /**
 * @ngdoc provider
 * @name $interpolateProvider
 * @this
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * <div class="alert alert-danger">
 * This feature is sometimes used to mix different markup languages, e.g. to wrap an AngularJS
 * template within a Python Jinja template (or any other template language). Mixing templating
 * languages is **very dangerous**. The embedding template language will not safely escape AngularJS
 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
 * security bugs!
 * </div>
 *
 * @example
<example name="custom-interpolation-markup" module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
  function $InterpolateProvider() {
    var startSymbol = '{{'
    var endSymbol = '}}'

    /**
     * @ngdoc method
     * @name $interpolateProvider#startSymbol
     * @description
     * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
     *
     * @param {string=} value new value to set the starting symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.startSymbol = function (value) {
      if (value) {
        startSymbol = value
        return this
      }
      return startSymbol
    }

    /**
     * @ngdoc method
     * @name $interpolateProvider#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * @param {string=} value new value to set the ending symbol to.
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
     */
    this.endSymbol = function (value) {
      if (value) {
        endSymbol = value
        return this
      }
      return endSymbol
    }

    this.$get = [
      '$parse',
      '$exceptionHandler',
      '$sce',
      function ($parse, $exceptionHandler, $sce) {
        var startSymbolLength = startSymbol.length,
          endSymbolLength = endSymbol.length,
          escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
          escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g')

        function escape(ch) {
          return '\\\\\\' + ch
        }

        function unescapeText(text) {
          return text.replace(escapedStartRegexp, startSymbol).replace(escapedEndRegexp, endSymbol)
        }

        // TODO: this is the same as the constantWatchDelegate in parse.js
        function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
          var unwatch = scope.$watch(
            function constantInterpolateWatch(scope) {
              unwatch()
              return constantInterp(scope)
            },
            listener,
            objectEquality
          )
          return unwatch
        }

        /**
         * @ngdoc service
         * @name $interpolate
         * @kind function
         *
         * @requires $parse
         * @requires $sce
         *
         * @description
         *
         * Compiles a string with markup into an interpolation function. This service is used by the
         * HTML {@link ng.$compile $compile} service for data binding. See
         * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
         * interpolation markup.
         *
         *
         * ```js
         *   var $interpolate = ...; // injected
         *   var exp = $interpolate('Hello {{name | uppercase}}!');
         *   expect(exp({name:'AngularJS'})).toEqual('Hello ANGULARJS!');
         * ```
         *
         * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
         * `true`, the interpolation function will return `undefined` unless all embedded expressions
         * evaluate to a value other than `undefined`.
         *
         * ```js
         *   var $interpolate = ...; // injected
         *   var context = {greeting: 'Hello', name: undefined };
         *
         *   // default "forgiving" mode
         *   var exp = $interpolate('{{greeting}} {{name}}!');
         *   expect(exp(context)).toEqual('Hello !');
         *
         *   // "allOrNothing" mode
         *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
         *   expect(exp(context)).toBeUndefined();
         *   context.name = 'AngularJS';
         *   expect(exp(context)).toEqual('Hello AngularJS!');
         * ```
         *
         * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
         *
         * #### Escaped Interpolation
         * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
         * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
         * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
         * or binding.
         *
         * This enables web-servers to prevent script injection attacks and defacing attacks, to some
         * degree, while also enabling code examples to work without relying on the
         * {@link ng.directive:ngNonBindable ngNonBindable} directive.
         *
         * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
         * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
         * interpolation start/end markers with their escaped counterparts.**
         *
         * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
         * output when the $interpolate service processes the text. So, for HTML elements interpolated
         * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
         * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
         * this is typically useful only when user-data is used in rendering a template from the server, or
         * when otherwise untrusted data is used by a directive.
         *
         * <example name="interpolation">
         *  <file name="index.html">
         *    <div ng-init="username='A user'">
         *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
         *        </p>
         *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
         *        application, but fails to accomplish their task, because the server has correctly
         *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
         *        characters.</p>
         *      <p>Instead, the result of the attempted script injection is visible, and can be removed
         *        from the database by an administrator.</p>
         *    </div>
         *  </file>
         * </example>
         *
         * @knownIssue
         * It is currently not possible for an interpolated expression to contain the interpolation end
         * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
         * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
         *
         * @knownIssue
         * All directives and components must use the standard `{{` `}}` interpolation symbols
         * in their templates. If you change the application interpolation symbols the {@link $compile}
         * service will attempt to denormalize the standard symbols to the custom symbols.
         * The denormalization process is not clever enough to know not to replace instances of the standard
         * symbols where they would not normally be treated as interpolation symbols. For example in the following
         * code snippet the closing braces of the literal object will get incorrectly denormalized:
         *
         * ```
         * <div data-context='{"context":{"id":3,"type":"page"}}">
         * ```
         *
         * The workaround is to ensure that such instances are separated by whitespace:
         * ```
         * <div data-context='{"context":{"id":3,"type":"page"} }">
         * ```
         *
         * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
         *
         * @param {string} text The text with markup to interpolate.
         * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
         *    embedded expression in order to return an interpolation function. Strings with no
         *    embedded expression will return null for the interpolation function.
         * @param {string=} trustedContext when provided, the returned function passes the interpolated
         *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
         *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
         *    provides Strict Contextual Escaping for details.
         * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
         *    unless all embedded expressions evaluate to a value other than `undefined`.
         * @returns {function(context)} an interpolation function which is used to compute the
         *    interpolated string. The function has these parameters:
         *
         * - `context`: evaluation context for all expressions embedded in the interpolated text
         */
        function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
          var contextAllowsConcatenation =
            trustedContext === $sce.URL || trustedContext === $sce.MEDIA_URL

          // Provide a quick exit and simplified result function for text with no interpolation
          if (!text.length || text.indexOf(startSymbol) === -1) {
            if (mustHaveExpression) return

            var unescapedText = unescapeText(text)
            if (contextAllowsConcatenation) {
              unescapedText = $sce.getTrusted(trustedContext, unescapedText)
            }
            var constantInterp = valueFn(unescapedText)
            constantInterp.exp = text
            constantInterp.expressions = []
            constantInterp.$$watchDelegate = constantWatchDelegate

            return constantInterp
          }

          allOrNothing = !!allOrNothing
          var startIndex,
            endIndex,
            index = 0,
            expressions = [],
            parseFns,
            textLength = text.length,
            exp,
            concat = [],
            expressionPositions = [],
            singleExpression

          while (index < textLength) {
            if (
              (startIndex = text.indexOf(startSymbol, index)) !== -1 &&
              (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1
            ) {
              if (index !== startIndex) {
                concat.push(unescapeText(text.substring(index, startIndex)))
              }
              exp = text.substring(startIndex + startSymbolLength, endIndex)
              expressions.push(exp)
              index = endIndex + endSymbolLength
              expressionPositions.push(concat.length)
              concat.push('') // Placeholder that will get replaced with the evaluated expression.
            } else {
              // we did not find an interpolation, so we have to add the remainder to the separators array
              if (index !== textLength) {
                concat.push(unescapeText(text.substring(index)))
              }
              break
            }
          }

          singleExpression = concat.length === 1 && expressionPositions.length === 1
          // Intercept expression if we need to stringify concatenated inputs, which may be SCE trusted
          // objects rather than simple strings
          // (we don't modify the expression if the input consists of only a single trusted input)
          var interceptor =
            contextAllowsConcatenation && singleExpression ? undefined : parseStringifyInterceptor
          parseFns = expressions.map(function (exp) {
            return $parse(exp, interceptor)
          })

          // Concatenating expressions makes it hard to reason about whether some combination of
          // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
          // single expression be used for some $sce-managed secure contexts (RESOURCE_URLs mostly),
          // we ensure that the value that's used is assigned or constructed by some JS code somewhere
          // that is more testable or make it obvious that you bound the value to some user controlled
          // value.  This helps reduce the load when auditing for XSS issues.

          // Note that URL and MEDIA_URL $sce contexts do not need this, since `$sce` can sanitize the values
          // passed to it. In that case, `$sce.getTrusted` will be called on either the single expression
          // or on the overall concatenated string (losing trusted types used in the mix, by design).
          // Both these methods will sanitize plain strings. Also, HTML could be included, but since it's
          // only used in srcdoc attributes, this would not be very useful.

          if (!mustHaveExpression || expressions.length) {
            var compute = function (values) {
              for (var i = 0, ii = expressions.length; i < ii; i++) {
                if (allOrNothing && isUndefined(values[i])) return
                concat[expressionPositions[i]] = values[i]
              }

              if (contextAllowsConcatenation) {
                // If `singleExpression` then `concat[0]` might be a "trusted" value or `null`, rather than a string
                return $sce.getTrusted(
                  trustedContext,
                  singleExpression ? concat[0] : concat.join('')
                )
              } else if (trustedContext && concat.length > 1) {
                // This context does not allow more than one part, e.g. expr + string or exp + exp.
                $interpolateMinErr.throwNoconcat(text)
              }
              // In an unprivileged context or only one part: just concatenate and return.
              return concat.join('')
            }

            return extend(
              function interpolationFn(context) {
                var i = 0
                var ii = expressions.length
                var values = new Array(ii)

                try {
                  for (; i < ii; i++) {
                    values[i] = parseFns[i](context)
                  }

                  return compute(values)
                } catch (err) {
                  $exceptionHandler($interpolateMinErr.interr(text, err))
                }
              },
              {
                // all of these properties are undocumented for now
                exp: text, //just for compatibility with regular watchers created via $watch
                expressions: expressions,
                $$watchDelegate: function (scope, listener) {
                  var lastValue
                  return scope.$watchGroup(
                    parseFns,
                    /** @this */ function interpolateFnWatcher(values, oldValues) {
                      var currValue = compute(values)
                      listener.call(
                        this,
                        currValue,
                        values !== oldValues ? lastValue : currValue,
                        scope
                      )
                      lastValue = currValue
                    }
                  )
                },
              }
            )
          }

          function parseStringifyInterceptor(value) {
            try {
              // In concatenable contexts, getTrusted comes at the end, to avoid sanitizing individual
              // parts of a full URL. We don't care about losing the trustedness here.
              // In non-concatenable contexts, where there is only one expression, this interceptor is
              // not applied to the expression.
              value =
                trustedContext && !contextAllowsConcatenation
                  ? $sce.getTrusted(trustedContext, value)
                  : $sce.valueOf(value)
              return allOrNothing && !isDefined(value) ? value : stringify(value)
            } catch (err) {
              $exceptionHandler($interpolateMinErr.interr(text, err))
            }
          }
        }

        /**
         * @ngdoc method
         * @name $interpolate#startSymbol
         * @description
         * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
         *
         * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
         * the symbol.
         *
         * @returns {string} start symbol.
         */
        $interpolate.startSymbol = function () {
          return startSymbol
        }

        /**
         * @ngdoc method
         * @name $interpolate#endSymbol
         * @description
         * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
         *
         * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
         * the symbol.
         *
         * @returns {string} end symbol.
         */
        $interpolate.endSymbol = function () {
          return endSymbol
        }

        return $interpolate
      },
    ]
  }

  var $intervalMinErr = minErr('$interval')

  /** @this */
  function $IntervalProvider() {
    this.$get = [
      '$$intervalFactory',
      '$window',
      function ($$intervalFactory, $window) {
        var intervals = {}
        var setIntervalFn = function (tick, delay, deferred) {
          var id = $window.setInterval(tick, delay)
          intervals[id] = deferred
          return id
        }
        var clearIntervalFn = function (id) {
          $window.clearInterval(id)
          delete intervals[id]
        }

        /**
         * @ngdoc service
         * @name $interval
         *
         * @description
         * AngularJS's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
         * milliseconds.
         *
         * The return value of registering an interval function is a promise. This promise will be
         * notified upon each tick of the interval, and will be resolved after `count` iterations, or
         * run indefinitely if `count` is not defined. The value of the notification will be the
         * number of iterations that have run.
         * To cancel an interval, call `$interval.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
         * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
         * time.
         *
         * <div class="alert alert-warning">
         * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
         * with them.  In particular they are not automatically destroyed when a controller's scope or a
         * directive's element are destroyed.
         * You should take this into consideration and make sure to always cancel the interval at the
         * appropriate moment.  See the example below for more details on how and when to do this.
         * </div>
         *
         * @param {function()} fn A function that should be called repeatedly. If no additional arguments
         *   are passed (see below), the function is called with the current iteration count.
         * @param {number} delay Number of milliseconds between each function call.
         * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
         *   indefinitely.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @param {...*=} Pass additional parameters to the executed function.
         * @returns {promise} A promise which will be notified on each iteration. It will resolve once all iterations of the interval complete.
         *
         * @example
         * <example module="intervalExample" name="interval-service">
         * <file name="index.html">
         *   <script>
         *     angular.module('intervalExample', [])
         *       .controller('ExampleController', ['$scope', '$interval',
         *         function($scope, $interval) {
         *           $scope.format = 'M/d/yy h:mm:ss a';
         *           $scope.blood_1 = 100;
         *           $scope.blood_2 = 120;
         *
         *           var stop;
         *           $scope.fight = function() {
         *             // Don't start a new fight if we are already fighting
         *             if ( angular.isDefined(stop) ) return;
         *
         *             stop = $interval(function() {
         *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
         *                 $scope.blood_1 = $scope.blood_1 - 3;
         *                 $scope.blood_2 = $scope.blood_2 - 4;
         *               } else {
         *                 $scope.stopFight();
         *               }
         *             }, 100);
         *           };
         *
         *           $scope.stopFight = function() {
         *             if (angular.isDefined(stop)) {
         *               $interval.cancel(stop);
         *               stop = undefined;
         *             }
         *           };
         *
         *           $scope.resetFight = function() {
         *             $scope.blood_1 = 100;
         *             $scope.blood_2 = 120;
         *           };
         *
         *           $scope.$on('$destroy', function() {
         *             // Make sure that the interval is destroyed too
         *             $scope.stopFight();
         *           });
         *         }])
         *       // Register the 'myCurrentTime' directive factory method.
         *       // We inject $interval and dateFilter service since the factory method is DI.
         *       .directive('myCurrentTime', ['$interval', 'dateFilter',
         *         function($interval, dateFilter) {
         *           // return the directive link function. (compile function not needed)
         *           return function(scope, element, attrs) {
         *             var format,  // date format
         *                 stopTime; // so that we can cancel the time updates
         *
         *             // used to update the UI
         *             function updateTime() {
         *               element.text(dateFilter(new Date(), format));
         *             }
         *
         *             // watch the expression, and update the UI on change.
         *             scope.$watch(attrs.myCurrentTime, function(value) {
         *               format = value;
         *               updateTime();
         *             });
         *
         *             stopTime = $interval(updateTime, 1000);
         *
         *             // listen on DOM destroy (removal) event, and cancel the next UI update
         *             // to prevent updating time after the DOM element was removed.
         *             element.on('$destroy', function() {
         *               $interval.cancel(stopTime);
         *             });
         *           }
         *         }]);
         *   </script>
         *
         *   <div>
         *     <div ng-controller="ExampleController">
         *       <label>Date format: <input ng-model="format"></label> <hr/>
         *       Current time is: <span my-current-time="format"></span>
         *       <hr/>
         *       Blood 1 : <font color='red'>{{blood_1}}</font>
         *       Blood 2 : <font color='red'>{{blood_2}}</font>
         *       <button type="button" data-ng-click="fight()">Fight</button>
         *       <button type="button" data-ng-click="stopFight()">StopFight</button>
         *       <button type="button" data-ng-click="resetFight()">resetFight</button>
         *     </div>
         *   </div>
         *
         * </file>
         * </example>
         */
        var interval = $$intervalFactory(setIntervalFn, clearIntervalFn)

        /**
         * @ngdoc method
         * @name $interval#cancel
         *
         * @description
         * Cancels a task associated with the `promise`.
         *
         * @param {Promise=} promise returned by the `$interval` function.
         * @returns {boolean} Returns `true` if the task was successfully canceled.
         */
        interval.cancel = function (promise) {
          if (!promise) return false

          if (!promise.hasOwnProperty('$$intervalId')) {
            throw $intervalMinErr(
              'badprom',
              '`$interval.cancel()` called with a promise that was not generated by `$interval()`.'
            )
          }

          if (!intervals.hasOwnProperty(promise.$$intervalId)) return false

          var id = promise.$$intervalId
          var deferred = intervals[id]

          // Interval cancels should not report an unhandled promise.
          markQExceptionHandled(deferred.promise)
          deferred.reject('canceled')
          clearIntervalFn(id)

          return true
        }

        return interval
      },
    ]
  }

  /** @this */
  function $$IntervalFactoryProvider() {
    this.$get = [
      '$browser',
      '$q',
      '$$q',
      '$rootScope',
      function ($browser, $q, $$q, $rootScope) {
        return function intervalFactory(setIntervalFn, clearIntervalFn) {
          return function intervalFn(fn, delay, count, invokeApply) {
            var hasParams = arguments.length > 4,
              args = hasParams ? sliceArgs(arguments, 4) : [],
              iteration = 0,
              skipApply = isDefined(invokeApply) && !invokeApply,
              deferred = (skipApply ? $$q : $q).defer(),
              promise = deferred.promise

            count = isDefined(count) ? count : 0

            function callback() {
              if (!hasParams) {
                fn(iteration)
              } else {
                fn.apply(null, args)
              }
            }

            function tick() {
              if (skipApply) {
                $browser.defer(callback)
              } else {
                $rootScope.$evalAsync(callback)
              }
              deferred.notify(iteration++)

              if (count > 0 && iteration >= count) {
                deferred.resolve(iteration)
                clearIntervalFn(promise.$$intervalId)
              }

              if (!skipApply) $rootScope.$apply()
            }

            promise.$$intervalId = setIntervalFn(tick, delay, deferred, skipApply)

            return promise
          }
        }
      },
    ]
  }

  /**
   * @ngdoc service
   * @name $jsonpCallbacks
   * @requires $window
   * @description
   * This service handles the lifecycle of callbacks to handle JSONP requests.
   * Override this service if you wish to customise where the callbacks are stored and
   * how they vary compared to the requested url.
   */
  var $jsonpCallbacksProvider = /** @this */ function () {
    this.$get = function () {
      var callbacks = angular.callbacks
      var callbackMap = {}

      function createCallback(callbackId) {
        var callback = function (data) {
          callback.data = data
          callback.called = true
        }
        callback.id = callbackId
        return callback
      }

      return {
        /**
         * @ngdoc method
         * @name $jsonpCallbacks#createCallback
         * @param {string} url the url of the JSONP request
         * @returns {string} the callback path to send to the server as part of the JSONP request
         * @description
         * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
         * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
         */
        createCallback: function (url) {
          var callbackId = '_' + (callbacks.$$counter++).toString(36)
          var callbackPath = 'angular.callbacks.' + callbackId
          var callback = createCallback(callbackId)
          callbackMap[callbackPath] = callbacks[callbackId] = callback
          return callbackPath
        },
        /**
         * @ngdoc method
         * @name $jsonpCallbacks#wasCalled
         * @param {string} callbackPath the path to the callback that was sent in the JSONP request
         * @returns {boolean} whether the callback has been called, as a result of the JSONP response
         * @description
         * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
         * callback that was passed in the request.
         */
        wasCalled: function (callbackPath) {
          return callbackMap[callbackPath].called
        },
        /**
         * @ngdoc method
         * @name $jsonpCallbacks#getResponse
         * @param {string} callbackPath the path to the callback that was sent in the JSONP request
         * @returns {*} the data received from the response via the registered callback
         * @description
         * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
         * in the JSONP response.
         */
        getResponse: function (callbackPath) {
          return callbackMap[callbackPath].data
        },
        /**
         * @ngdoc method
         * @name $jsonpCallbacks#removeCallback
         * @param {string} callbackPath the path to the callback that was sent in the JSONP request
         * @description
         * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
         * completed or timed-out.
         */
        removeCallback: function (callbackPath) {
          var callback = callbackMap[callbackPath]
          delete callbacks[callback.id]
          delete callbackMap[callbackPath]
        },
      }
    }
  }

  /**
   * @ngdoc service
   * @name $locale
   *
   * @description
   * $locale service provides localization rules for various AngularJS components. As of right now the
   * only public api is:
   *
   * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
   */

  /* global stripHash: true */

  var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = { http: 80, https: 443, ftp: 21 }
  var $locationMinErr = minErr('$location')

  /**
   * Encode path using encodeUriSegment, ignoring forward slashes
   *
   * @param {string} path Path to encode
   * @returns {string}
   */
  function encodePath(path) {
    var segments = path.split('/'),
      i = segments.length

    while (i--) {
      // decode forward slashes to prevent them from being double encoded
      segments[i] = encodeUriSegment(segments[i].replace(/%2F/g, '/'))
    }

    return segments.join('/')
  }

  function decodePath(path, html5Mode) {
    var segments = path.split('/'),
      i = segments.length

    while (i--) {
      segments[i] = decodeURIComponent(segments[i])
      if (html5Mode) {
        // encode forward slashes to prevent them from being mistaken for path separators
        segments[i] = segments[i].replace(/\//g, '%2F')
      }
    }

    return segments.join('/')
  }

  function normalizePath(pathValue, searchValue, hashValue) {
    var search = toKeyValue(searchValue),
      hash = hashValue ? '#' + encodeUriSegment(hashValue) : '',
      path = encodePath(pathValue)

    return path + (search ? '?' + search : '') + hash
  }

  function parseAbsoluteUrl(absoluteUrl, locationObj) {
    var parsedUrl = urlResolve(absoluteUrl)

    locationObj.$$protocol = parsedUrl.protocol
    locationObj.$$host = parsedUrl.hostname
    locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null
  }

  var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/
  function parseAppUrl(url, locationObj, html5Mode) {
    if (DOUBLE_SLASH_REGEX.test(url)) {
      throw $locationMinErr('badpath', 'Invalid url "{0}".', url)
    }

    var prefixed = url.charAt(0) !== '/'
    if (prefixed) {
      url = '/' + url
    }
    var match = urlResolve(url)
    var path =
      prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname
    locationObj.$$path = decodePath(path, html5Mode)
    locationObj.$$search = parseKeyValue(match.search)
    locationObj.$$hash = decodeURIComponent(match.hash)

    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) !== '/') {
      locationObj.$$path = '/' + locationObj.$$path
    }
  }

  function startsWith(str, search) {
    return str.slice(0, search.length) === search
  }

  /**
   *
   * @param {string} base
   * @param {string} url
   * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
   *                   the expected string.
   */
  function stripBaseUrl(base, url) {
    if (startsWith(url, base)) {
      return url.substr(base.length)
    }
  }

  function stripHash(url) {
    var index = url.indexOf('#')
    return index === -1 ? url : url.substr(0, index)
  }

  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1)
  }

  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2))
  }

  /**
   * LocationHtml5Url represents a URL
   * This object is exposed as $location service when HTML5 mode is enabled and supported
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} appBaseNoFile application base URL stripped of any filename
   * @param {string} basePrefix URL path prefix
   */
  function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
    this.$$html5 = true
    basePrefix = basePrefix || ''
    parseAbsoluteUrl(appBase, this)

    /**
     * Parse given HTML5 (regular) URL string into properties
     * @param {string} url HTML5 URL
     * @private
     */
    this.$$parse = function (url) {
      var pathUrl = stripBaseUrl(appBaseNoFile, url)
      if (!isString(pathUrl)) {
        throw $locationMinErr(
          'ipthprfx',
          'Invalid url "{0}", missing path prefix "{1}".',
          url,
          appBaseNoFile
        )
      }

      parseAppUrl(pathUrl, this, true)

      if (!this.$$path) {
        this.$$path = '/'
      }

      this.$$compose()
    }

    this.$$normalizeUrl = function (url) {
      return appBaseNoFile + url.substr(1) // first char is always '/'
    }

    this.$$parseLinkUrl = function (url, relHref) {
      if (relHref && relHref[0] === '#') {
        // special case for links to hash fragments:
        // keep the old url and only replace the hash fragment
        this.hash(relHref.slice(1))
        return true
      }
      var appUrl, prevAppUrl
      var rewrittenUrl

      if (isDefined((appUrl = stripBaseUrl(appBase, url)))) {
        prevAppUrl = appUrl
        if (basePrefix && isDefined((appUrl = stripBaseUrl(basePrefix, appUrl)))) {
          rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl)
        } else {
          rewrittenUrl = appBase + prevAppUrl
        }
      } else if (isDefined((appUrl = stripBaseUrl(appBaseNoFile, url)))) {
        rewrittenUrl = appBaseNoFile + appUrl
      } else if (appBaseNoFile === url + '/') {
        rewrittenUrl = appBaseNoFile
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl)
      }
      return !!rewrittenUrl
    }
  }

  /**
   * LocationHashbangUrl represents URL
   * This object is exposed as $location service when developer doesn't opt into html5 mode.
   * It also serves as the base class for html5 mode fallback on legacy browsers.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} appBaseNoFile application base URL stripped of any filename
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
    parseAbsoluteUrl(appBase, this)

    /**
     * Parse given hashbang URL into properties
     * @param {string} url Hashbang URL
     * @private
     */
    this.$$parse = function (url) {
      var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url)
      var withoutHashUrl

      if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {
        // The rest of the URL starts with a hash so we have
        // got either a hashbang path or a plain hash fragment
        withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl)
        if (isUndefined(withoutHashUrl)) {
          // There was no hashbang prefix so we just have a hash fragment
          withoutHashUrl = withoutBaseUrl
        }
      } else {
        // There was no hashbang path nor hash fragment:
        // If we are in HTML5 mode we use what is left as the path;
        // Otherwise we ignore what is left
        if (this.$$html5) {
          withoutHashUrl = withoutBaseUrl
        } else {
          withoutHashUrl = ''
          if (isUndefined(withoutBaseUrl)) {
            appBase = url
            /** @type {?} */ ;(this).replace()
          }
        }
      }

      parseAppUrl(withoutHashUrl, this, false)

      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase)

      this.$$compose()

      /*
       * In Windows, on an anchor node on documents loaded from
       * the filesystem, the browser will return a pathname
       * prefixed with the drive name ('/C:/path') when a
       * pathname without a drive is set:
       *  * a.setAttribute('href', '/foo')
       *   * a.pathname === '/C:/foo' //true
       *
       * Inside of AngularJS, we're always using pathnames that
       * do not include drive names for routing.
       */
      function removeWindowsDriveName(path, url, base) {
        /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/

        var firstPathSegmentMatch

        //Get the relative path from the input URL.
        if (startsWith(url, base)) {
          url = url.replace(base, '')
        }

        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path
        }

        firstPathSegmentMatch = windowsFilePathExp.exec(path)
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path
      }
    }

    this.$$normalizeUrl = function (url) {
      return appBase + (url ? hashPrefix + url : '')
    }

    this.$$parseLinkUrl = function (url, relHref) {
      if (stripHash(appBase) === stripHash(url)) {
        this.$$parse(url)
        return true
      }
      return false
    }
  }

  /**
   * LocationHashbangUrl represents URL
   * This object is exposed as $location service when html5 history api is enabled but the browser
   * does not support it.
   *
   * @constructor
   * @param {string} appBase application base URL
   * @param {string} appBaseNoFile application base URL stripped of any filename
   * @param {string} hashPrefix hashbang prefix
   */
  function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
    this.$$html5 = true
    LocationHashbangUrl.apply(this, arguments)

    this.$$parseLinkUrl = function (url, relHref) {
      if (relHref && relHref[0] === '#') {
        // special case for links to hash fragments:
        // keep the old url and only replace the hash fragment
        this.hash(relHref.slice(1))
        return true
      }

      var rewrittenUrl
      var appUrl

      if (appBase === stripHash(url)) {
        rewrittenUrl = url
      } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
        rewrittenUrl = appBase + hashPrefix + appUrl
      } else if (appBaseNoFile === url + '/') {
        rewrittenUrl = appBaseNoFile
      }
      if (rewrittenUrl) {
        this.$$parse(rewrittenUrl)
      }
      return !!rewrittenUrl
    }

    this.$$normalizeUrl = function (url) {
      // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
      return appBase + hashPrefix + url
    }
  }

  var locationPrototype = {
    /**
     * Ensure absolute URL is initialized.
     * @private
     */
    $$absUrl: '',

    /**
     * Are we in html5 mode?
     * @private
     */
    $$html5: false,

    /**
     * Has any change been replacing?
     * @private
     */
    $$replace: false,

    /**
     * Compose url and update `url` and `absUrl` property
     * @private
     */
    $$compose: function () {
      this.$$url = normalizePath(this.$$path, this.$$search, this.$$hash)
      this.$$absUrl = this.$$normalizeUrl(this.$$url)
      this.$$urlUpdatedByLocation = true
    },

    /**
     * @ngdoc method
     * @name $location#absUrl
     *
     * @description
     * This method is getter only.
     *
     * Return full URL representation with all segments encoded according to rules specified in
     * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var absUrl = $location.absUrl();
     * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
     * ```
     *
     * @return {string} full URL
     */
    absUrl: locationGetter('$$absUrl'),

    /**
     * @ngdoc method
     * @name $location#url
     *
     * @description
     * This method is getter / setter.
     *
     * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
     *
     * Change path, search and hash, when called with parameter and return `$location`.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var url = $location.url();
     * // => "/some/path?foo=bar&baz=xoxo"
     * ```
     *
     * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
     * @return {string} url
     */
    url: function (url) {
      if (isUndefined(url)) {
        return this.$$url
      }

      var match = PATH_MATCH.exec(url)
      if (match[1] || url === '') this.path(decodeURIComponent(match[1]))
      if (match[2] || match[1] || url === '') this.search(match[3] || '')
      this.hash(match[5] || '')

      return this
    },

    /**
     * @ngdoc method
     * @name $location#protocol
     *
     * @description
     * This method is getter only.
     *
     * Return protocol of current URL.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var protocol = $location.protocol();
     * // => "http"
     * ```
     *
     * @return {string} protocol of current URL
     */
    protocol: locationGetter('$$protocol'),

    /**
     * @ngdoc method
     * @name $location#host
     *
     * @description
     * This method is getter only.
     *
     * Return host of current URL.
     *
     * Note: compared to the non-AngularJS version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var host = $location.host();
     * // => "example.com"
     *
     * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
     * host = $location.host();
     * // => "example.com"
     * host = location.host;
     * // => "example.com:8080"
     * ```
     *
     * @return {string} host of current URL.
     */
    host: locationGetter('$$host'),

    /**
     * @ngdoc method
     * @name $location#port
     *
     * @description
     * This method is getter only.
     *
     * Return port of current URL.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var port = $location.port();
     * // => 80
     * ```
     *
     * @return {Number} port
     */
    port: locationGetter('$$port'),

    /**
     * @ngdoc method
     * @name $location#path
     *
     * @description
     * This method is getter / setter.
     *
     * Return path of current URL when called without any parameter.
     *
     * Change path when called with parameter and return `$location`.
     *
     * Note: Path should always begin with forward slash (/), this method will add the forward slash
     * if it is missing.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var path = $location.path();
     * // => "/some/path"
     * ```
     *
     * @param {(string|number)=} path New path
     * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
     */
    path: locationGetterSetter('$$path', function (path) {
      path = path !== null ? path.toString() : ''
      return path.charAt(0) === '/' ? path : '/' + path
    }),

    /**
     * @ngdoc method
     * @name $location#search
     *
     * @description
     * This method is getter / setter.
     *
     * Return search part (as object) of current URL when called without any parameter.
     *
     * Change search part when called with parameter and return `$location`.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
     * var searchObject = $location.search();
     * // => {foo: 'bar', baz: 'xoxo'}
     *
     * // set foo to 'yipee'
     * $location.search('foo', 'yipee');
     * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
     * ```
     *
     * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
     * hash object.
     *
     * When called with a single argument the method acts as a setter, setting the `search` component
     * of `$location` to the specified value.
     *
     * If the argument is a hash object containing an array of values, these values will be encoded
     * as duplicate search parameters in the URL.
     *
     * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
     * will override only a single search property.
     *
     * If `paramValue` is an array, it will override the property of the `search` component of
     * `$location` specified via the first argument.
     *
     * If `paramValue` is `null`, the property specified via the first argument will be deleted.
     *
     * If `paramValue` is `true`, the property specified via the first argument will be added with no
     * value nor trailing equal sign.
     *
     * @return {Object} If called with no arguments returns the parsed `search` object. If called with
     * one or more arguments returns `$location` object itself.
     */
    search: function (search, paramValue) {
      switch (arguments.length) {
        case 0:
          return this.$$search
        case 1:
          if (isString(search) || isNumber(search)) {
            search = search.toString()
            this.$$search = parseKeyValue(search)
          } else if (isObject(search)) {
            search = copy(search, {})
            // remove object undefined or null properties
            forEach(search, function (value, key) {
              if (value == null) delete search[key]
            })

            this.$$search = search
          } else {
            throw $locationMinErr(
              'isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.'
            )
          }
          break
        default:
          if (isUndefined(paramValue) || paramValue === null) {
            delete this.$$search[search]
          } else {
            this.$$search[search] = paramValue
          }
      }

      this.$$compose()
      return this
    },

    /**
     * @ngdoc method
     * @name $location#hash
     *
     * @description
     * This method is getter / setter.
     *
     * Returns the hash fragment when called without any parameters.
     *
     * Changes the hash fragment when called with a parameter and returns `$location`.
     *
     *
     * ```js
     * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
     * var hash = $location.hash();
     * // => "hashValue"
     * ```
     *
     * @param {(string|number)=} hash New hash fragment
     * @return {string} hash
     */
    hash: locationGetterSetter('$$hash', function (hash) {
      return hash !== null ? hash.toString() : ''
    }),

    /**
     * @ngdoc method
     * @name $location#replace
     *
     * @description
     * If called, all changes to $location during the current `$digest` will replace the current history
     * record, instead of adding a new one.
     */
    replace: function () {
      this.$$replace = true
      return this
    },
  }

  forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function (Location) {
    Location.prototype = Object.create(locationPrototype)

    /**
     * @ngdoc method
     * @name $location#state
     *
     * @description
     * This method is getter / setter.
     *
     * Return the history state object when called without any parameter.
     *
     * Change the history state object when called with one parameter and return `$location`.
     * The state object is later passed to `pushState` or `replaceState`.
     *
     * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
     * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
     * older browsers (like IE9 or Android < 4.0), don't use this method.
     *
     * @param {object=} state State object for pushState or replaceState
     * @return {object} state
     */
    Location.prototype.state = function (state) {
      if (!arguments.length) {
        return this.$$state
      }

      if (Location !== LocationHtml5Url || !this.$$html5) {
        throw $locationMinErr(
          'nostate',
          'History API state support is available only ' +
            'in HTML5 mode and only in browsers supporting HTML5 History API'
        )
      }
      // The user might modify `stateObject` after invoking `$location.state(stateObject)`
      // but we're changing the $$state reference to $browser.state() during the $digest
      // so the modification window is narrow.
      this.$$state = isUndefined(state) ? null : state
      this.$$urlUpdatedByLocation = true

      return this
    }
  })

  function locationGetter(property) {
    return /** @this */ function () {
      return this[property]
    }
  }

  function locationGetterSetter(property, preprocess) {
    return /** @this */ function (value) {
      if (isUndefined(value)) {
        return this[property]
      }

      this[property] = preprocess(value)
      this.$$compose()

      return this
    }
  }

  /**
   * @ngdoc service
   * @name $location
   *
   * @requires $rootElement
   *
   * @description
   * The $location service parses the URL in the browser address bar (based on the
   * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
   * available to your application. Changes to the URL in the address bar are reflected into
   * $location service and changes to $location are reflected into the browser address bar.
   *
   * **The $location service:**
   *
   * - Exposes the current URL in the browser address bar, so you can
   *   - Watch and observe the URL.
   *   - Change the URL.
   * - Synchronizes the URL with the browser when the user
   *   - Changes the address bar.
   *   - Clicks the back or forward button (or clicks a History link).
   *   - Clicks on a link.
   * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
   *
   * For more information see {@link guide/$location Developer Guide: Using $location}
   */

  /**
   * @ngdoc provider
   * @name $locationProvider
   * @this
   *
   * @description
   * Use the `$locationProvider` to configure how the application deep linking paths are stored.
   */
  function $LocationProvider() {
    var hashPrefix = '!',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true,
      }

    /**
     * @ngdoc method
     * @name $locationProvider#hashPrefix
     * @description
     * The default value for the prefix is `'!'`.
     * @param {string=} prefix Prefix for hash part (containing path and search)
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.hashPrefix = function (prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix
        return this
      } else {
        return hashPrefix
      }
    }

    /**
     * @ngdoc method
     * @name $locationProvider#html5Mode
     * @description
     * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
     *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
     *   properties:
     *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
     *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
     *     support `pushState`.
     *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
     *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
     *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
     *     See the {@link guide/$location $location guide for more information}
     *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
     *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
     *     only happen on links with an attribute that matches the given string. For example, if set
     *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
     *     Note that [attribute name normalization](guide/directive#normalization) does not apply
     *     here, so `'internalLink'` will **not** match `'internal-link'`.
     *
     * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
     */
    this.html5Mode = function (mode) {
      if (isBoolean(mode)) {
        html5Mode.enabled = mode
        return this
      } else if (isObject(mode)) {
        if (isBoolean(mode.enabled)) {
          html5Mode.enabled = mode.enabled
        }

        if (isBoolean(mode.requireBase)) {
          html5Mode.requireBase = mode.requireBase
        }

        if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
          html5Mode.rewriteLinks = mode.rewriteLinks
        }

        return this
      } else {
        return html5Mode
      }
    }

    /**
     * @ngdoc event
     * @name $location#$locationChangeStart
     * @eventType broadcast on root scope
     * @description
     * Broadcasted before a URL will change.
     *
     * This change can be prevented by calling
     * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
     * details about event object. Upon successful change
     * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
     *
     * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
     * the browser supports the HTML5 History API.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     * @param {string=} newState New history state object
     * @param {string=} oldState History state object that was before it was changed.
     */

    /**
     * @ngdoc event
     * @name $location#$locationChangeSuccess
     * @eventType broadcast on root scope
     * @description
     * Broadcasted after a URL was changed.
     *
     * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
     * the browser supports the HTML5 History API.
     *
     * @param {Object} angularEvent Synthetic event object.
     * @param {string} newUrl New URL
     * @param {string=} oldUrl URL that was before it was changed.
     * @param {string=} newState New history state object
     * @param {string=} oldState History state object that was before it was changed.
     */

    this.$get = [
      '$rootScope',
      '$browser',
      '$sniffer',
      '$rootElement',
      '$window',
      function ($rootScope, $browser, $sniffer, $rootElement, $window) {
        var $location,
          LocationMode,
          baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(),
          appBase

        if (html5Mode.enabled) {
          if (!baseHref && html5Mode.requireBase) {
            throw $locationMinErr(
              'nobase',
              '$location in HTML5 mode requires a <base> tag to be present!'
            )
          }
          appBase = serverBase(initialUrl) + (baseHref || '/')
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url
        } else {
          appBase = stripHash(initialUrl)
          LocationMode = LocationHashbangUrl
        }
        var appBaseNoFile = stripFile(appBase)

        $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix)
        $location.$$parseLinkUrl(initialUrl, initialUrl)

        $location.$$state = $browser.state()

        var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i

        // Determine if two URLs are equal despite potentially having different encoding/normalizing
        //  such as $location.absUrl() vs $browser.url()
        // See https://github.com/angular/angular.js/issues/16592
        function urlsEqual(a, b) {
          return a === b || urlResolve(a).href === urlResolve(b).href
        }

        function setBrowserUrlWithFallback(url, replace, state) {
          var oldUrl = $location.url()
          var oldState = $location.$$state
          try {
            $browser.url(url, replace, state)

            // Make sure $location.state() returns referentially identical (not just deeply equal)
            // state object; this makes possible quick checking if the state changed in the digest
            // loop. Checking deep equality would be too expensive.
            $location.$$state = $browser.state()
          } catch (e) {
            // Restore old values if pushState fails
            $location.url(oldUrl)
            $location.$$state = oldState

            throw e
          }
        }

        $rootElement.on('click', function (event) {
          var rewriteLinks = html5Mode.rewriteLinks
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then

          if (
            !rewriteLinks ||
            event.ctrlKey ||
            event.metaKey ||
            event.shiftKey ||
            event.which === 2 ||
            event.button === 2
          )
            return

          var elm = jqLite(event.target)

          // traverse the DOM up to find first A tag
          while (nodeName_(elm[0]) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return
          }

          if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return

          var absHref = elm.prop('href')
          // get the actual href attribute - see
          // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
          var relHref = elm.attr('href') || elm.attr('xlink:href')

          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href
          }

          // Ignore when url is started with javascript: or mailto:
          if (IGNORE_URI_REGEXP.test(absHref)) return

          if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
            if ($location.$$parseLinkUrl(absHref, relHref)) {
              // We do a preventDefault for all urls that are part of the AngularJS application,
              // in html5mode and also without, so that we are able to abort navigation without
              // getting double entries in the location history.
              event.preventDefault()
              // update location manually
              if ($location.absUrl() !== $browser.url()) {
                $rootScope.$apply()
              }
            }
          }
        })

        // rewrite hashbang url <> html5 url
        if ($location.absUrl() !== initialUrl) {
          $browser.url($location.absUrl(), true)
        }

        var initializing = true

        // update $location when $browser url changes
        $browser.onUrlChange(function (newUrl, newState) {
          if (!startsWith(newUrl, appBaseNoFile)) {
            // If we are navigating outside of the app then force a reload
            $window.location.href = newUrl
            return
          }

          $rootScope.$evalAsync(function () {
            var oldUrl = $location.absUrl()
            var oldState = $location.$$state
            var defaultPrevented
            $location.$$parse(newUrl)
            $location.$$state = newState

            defaultPrevented = $rootScope.$broadcast(
              '$locationChangeStart',
              newUrl,
              oldUrl,
              newState,
              oldState
            ).defaultPrevented

            // if the location was changed by a `$locationChangeStart` handler then stop
            // processing this location change
            if ($location.absUrl() !== newUrl) return

            if (defaultPrevented) {
              $location.$$parse(oldUrl)
              $location.$$state = oldState
              setBrowserUrlWithFallback(oldUrl, false, oldState)
            } else {
              initializing = false
              afterLocationChange(oldUrl, oldState)
            }
          })
          if (!$rootScope.$$phase) $rootScope.$digest()
        })

        // update browser
        $rootScope.$watch(function $locationWatch() {
          if (initializing || $location.$$urlUpdatedByLocation) {
            $location.$$urlUpdatedByLocation = false

            var oldUrl = $browser.url()
            var newUrl = $location.absUrl()
            var oldState = $browser.state()
            var currentReplace = $location.$$replace
            var urlOrStateChanged =
              !urlsEqual(oldUrl, newUrl) ||
              ($location.$$html5 && $sniffer.history && oldState !== $location.$$state)

            if (initializing || urlOrStateChanged) {
              initializing = false

              $rootScope.$evalAsync(function () {
                var newUrl = $location.absUrl()
                var defaultPrevented = $rootScope.$broadcast(
                  '$locationChangeStart',
                  newUrl,
                  oldUrl,
                  $location.$$state,
                  oldState
                ).defaultPrevented

                // if the location was changed by a `$locationChangeStart` handler then stop
                // processing this location change
                if ($location.absUrl() !== newUrl) return

                if (defaultPrevented) {
                  $location.$$parse(oldUrl)
                  $location.$$state = oldState
                } else {
                  if (urlOrStateChanged) {
                    setBrowserUrlWithFallback(
                      newUrl,
                      currentReplace,
                      oldState === $location.$$state ? null : $location.$$state
                    )
                  }
                  afterLocationChange(oldUrl, oldState)
                }
              })
            }
          }

          $location.$$replace = false

          // we don't need to return anything because $evalAsync will make the digest loop dirty when
          // there is a change
        })

        return $location

        function afterLocationChange(oldUrl, oldState) {
          $rootScope.$broadcast(
            '$locationChangeSuccess',
            $location.absUrl(),
            oldUrl,
            $location.$$state,
            oldState
          )
        }
      },
    ]
  }

  /**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * To reveal the location of the calls to `$log` in the JavaScript console,
 * you can "blackbox" the AngularJS source in your browser:
 *
 * [Mozilla description of blackboxing](https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Black_box_a_source).
 * [Chrome description of blackboxing](https://developer.chrome.com/devtools/docs/blackboxing).
 *
 * Note: Not all browsers support blackboxing.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample" name="log-service">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         <label>Message:
         <input type="text" ng-model="message" /></label>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

  /**
   * @ngdoc provider
   * @name $logProvider
   * @this
   *
   * @description
   * Use the `$logProvider` to configure how the application logs messages
   */
  function $LogProvider() {
    var debug = true,
      self = this

    /**
     * @ngdoc method
     * @name $logProvider#debugEnabled
     * @description
     * @param {boolean=} flag enable or disable debug level messages
     * @returns {*} current value if used as getter or itself (chaining) if used as setter
     */
    this.debugEnabled = function (flag) {
      if (isDefined(flag)) {
        debug = flag
        return this
      } else {
        return debug
      }
    }

    this.$get = [
      '$window',
      function ($window) {
        // Support: IE 9-11, Edge 12-14+
        // IE/Edge display errors in such a way that it requires the user to click in 4 places
        // to see the stack trace. There is no way to feature-detect it so there's a chance
        // of the user agent sniffing to go wrong but since it's only about logging, this shouldn't
        // break apps. Other browsers display errors in a sensible way and some of them map stack
        // traces along source maps if available so it makes sense to let browsers display it
        // as they want.
        var formatStackTrace =
          msie || /\bEdge\//.test($window.navigator && $window.navigator.userAgent)

        return {
          /**
           * @ngdoc method
           * @name $log#log
           *
           * @description
           * Write a log message
           */
          log: consoleLog('log'),

          /**
           * @ngdoc method
           * @name $log#info
           *
           * @description
           * Write an information message
           */
          info: consoleLog('info'),

          /**
           * @ngdoc method
           * @name $log#warn
           *
           * @description
           * Write a warning message
           */
          warn: consoleLog('warn'),

          /**
           * @ngdoc method
           * @name $log#error
           *
           * @description
           * Write an error message
           */
          error: consoleLog('error'),

          /**
           * @ngdoc method
           * @name $log#debug
           *
           * @description
           * Write a debug message
           */
          debug: (function () {
            var fn = consoleLog('debug')

            return function () {
              if (debug) {
                fn.apply(self, arguments)
              }
            }
          })(),
        }

        function formatError(arg) {
          if (isError(arg)) {
            if (arg.stack && formatStackTrace) {
              arg =
                arg.message && arg.stack.indexOf(arg.message) === -1
                  ? 'Error: ' + arg.message + '\n' + arg.stack
                  : arg.stack
            } else if (arg.sourceURL) {
              arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line
            }
          }
          return arg
        }

        function consoleLog(type) {
          var console = $window.console || {},
            logFn = console[type] || console.log || noop

          return function () {
            var args = []
            forEach(arguments, function (arg) {
              args.push(formatError(arg))
            })
            // Support: IE 9 only
            // console methods don't inherit from Function.prototype in IE 9 so we can't
            // call `logFn.apply(console, args)` directly.
            return Function.prototype.apply.call(logFn, console, args)
          }
        }
      },
    ]
  }

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  var $parseMinErr = minErr('$parse')

  var objectValueOf = {}.constructor.prototype.valueOf

  // Sandboxing AngularJS Expressions
  // ------------------------------
  // AngularJS expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
  // various means such as obtaining a reference to native JS functions like the Function constructor.
  //
  // As an example, consider the following AngularJS expression:
  //
  //   {}.toString.constructor('alert("evil JS code")')
  //
  // It is important to realize that if you create an expression from a string that contains user provided
  // content then it is possible that your application contains a security vulnerability to an XSS style attack.
  //
  // See https://docs.angularjs.org/guide/security

  function getStringValue(name) {
    // Property names must be strings. This means that non-string objects cannot be used
    // as keys in an object. Any non-string object, including a number, is typecasted
    // into a string via the toString method.
    // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
    //
    // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
    // to a string. It's not always possible. If `name` is an object and its `toString` method is
    // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
    //
    // TypeError: Cannot convert object to primitive value
    //
    // For performance reasons, we don't catch this error here and allow it to propagate up the call
    // stack. Note that you'll get the same error in JavaScript if you try to access a property using
    // such a 'broken' object as a key.
    return name + ''
  }

  var OPERATORS = createMap()
  forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function (operator) {
    OPERATORS[operator] = true
  })
  var ESCAPE = { n: '\n', f: '\f', r: '\r', t: '\t', v: '\v', "'": "'", '"': '"' }

  /////////////////////////////////////////

  /**
   * @constructor
   */
  var Lexer = function Lexer(options) {
    this.options = options
  }

  Lexer.prototype = {
    constructor: Lexer,

    lex: function (text) {
      this.text = text
      this.index = 0
      this.tokens = []

      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index)
        if (ch === '"' || ch === "'") {
          this.readString(ch)
        } else if (this.isNumber(ch) || (ch === '.' && this.isNumber(this.peek()))) {
          this.readNumber()
        } else if (this.isIdentifierStart(this.peekMultichar())) {
          this.readIdent()
        } else if (this.is(ch, '(){}[].,;:?')) {
          this.tokens.push({ index: this.index, text: ch })
          this.index++
        } else if (this.isWhitespace(ch)) {
          this.index++
        } else {
          var ch2 = ch + this.peek()
          var ch3 = ch2 + this.peek(2)
          var op1 = OPERATORS[ch]
          var op2 = OPERATORS[ch2]
          var op3 = OPERATORS[ch3]
          if (op1 || op2 || op3) {
            var token = op3 ? ch3 : op2 ? ch2 : ch
            this.tokens.push({ index: this.index, text: token, operator: true })
            this.index += token.length
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1)
          }
        }
      }
      return this.tokens
    },

    is: function (ch, chars) {
      return chars.indexOf(ch) !== -1
    },

    peek: function (i) {
      var num = i || 1
      return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false
    },

    isNumber: function (ch) {
      return '0' <= ch && ch <= '9' && typeof ch === 'string'
    },

    isWhitespace: function (ch) {
      // IE treats non-breaking space as \u00A0
      return (
        ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\v' || ch === '\u00A0'
      )
    },

    isIdentifierStart: function (ch) {
      return this.options.isIdentifierStart
        ? this.options.isIdentifierStart(ch, this.codePointAt(ch))
        : this.isValidIdentifierStart(ch)
    },

    isValidIdentifierStart: function (ch) {
      return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || '_' === ch || ch === '$'
    },

    isIdentifierContinue: function (ch) {
      return this.options.isIdentifierContinue
        ? this.options.isIdentifierContinue(ch, this.codePointAt(ch))
        : this.isValidIdentifierContinue(ch)
    },

    isValidIdentifierContinue: function (ch, cp) {
      return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch)
    },

    codePointAt: function (ch) {
      if (ch.length === 1) return ch.charCodeAt(0)
      // eslint-disable-next-line no-bitwise
      return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35fdc00
    },

    peekMultichar: function () {
      var ch = this.text.charAt(this.index)
      var peek = this.peek()
      if (!peek) {
        return ch
      }
      var cp1 = ch.charCodeAt(0)
      var cp2 = peek.charCodeAt(0)
      if (cp1 >= 0xd800 && cp1 <= 0xdbff && cp2 >= 0xdc00 && cp2 <= 0xdfff) {
        return ch + peek
      }
      return ch
    },

    isExpOperator: function (ch) {
      return ch === '-' || ch === '+' || this.isNumber(ch)
    },

    throwError: function (error, start, end) {
      end = end || this.index
      var colStr = isDefined(start)
        ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']'
        : ' ' + end
      throw $parseMinErr(
        'lexerr',
        'Lexer Error: {0} at column{1} in expression [{2}].',
        error,
        colStr,
        this.text
      )
    },

    readNumber: function () {
      var number = ''
      var start = this.index
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index))
        if (ch === '.' || this.isNumber(ch)) {
          number += ch
        } else {
          var peekCh = this.peek()
          if (ch === 'e' && this.isExpOperator(peekCh)) {
            number += ch
          } else if (
            this.isExpOperator(ch) &&
            peekCh &&
            this.isNumber(peekCh) &&
            number.charAt(number.length - 1) === 'e'
          ) {
            number += ch
          } else if (
            this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) === 'e'
          ) {
            this.throwError('Invalid exponent')
          } else {
            break
          }
        }
        this.index++
      }
      this.tokens.push({
        index: start,
        text: number,
        constant: true,
        value: Number(number),
      })
    },

    readIdent: function () {
      var start = this.index
      this.index += this.peekMultichar().length
      while (this.index < this.text.length) {
        var ch = this.peekMultichar()
        if (!this.isIdentifierContinue(ch)) {
          break
        }
        this.index += ch.length
      }
      this.tokens.push({
        index: start,
        text: this.text.slice(start, this.index),
        identifier: true,
      })
    },

    readString: function (quote) {
      var start = this.index
      this.index++
      var string = ''
      var rawString = quote
      var escape = false
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index)
        rawString += ch
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5)
            if (!hex.match(/[\da-f]{4}/i)) {
              this.throwError('Invalid unicode escape [\\u' + hex + ']')
            }
            this.index += 4
            string += String.fromCharCode(parseInt(hex, 16))
          } else {
            var rep = ESCAPE[ch]
            string = string + (rep || ch)
          }
          escape = false
        } else if (ch === '\\') {
          escape = true
        } else if (ch === quote) {
          this.index++
          this.tokens.push({
            index: start,
            text: rawString,
            constant: true,
            value: string,
          })
          return
        } else {
          string += ch
        }
        this.index++
      }
      this.throwError('Unterminated quote', start)
    },
  }

  var AST = function AST(lexer, options) {
    this.lexer = lexer
    this.options = options
  }

  AST.Program = 'Program'
  AST.ExpressionStatement = 'ExpressionStatement'
  AST.AssignmentExpression = 'AssignmentExpression'
  AST.ConditionalExpression = 'ConditionalExpression'
  AST.LogicalExpression = 'LogicalExpression'
  AST.BinaryExpression = 'BinaryExpression'
  AST.UnaryExpression = 'UnaryExpression'
  AST.CallExpression = 'CallExpression'
  AST.MemberExpression = 'MemberExpression'
  AST.Identifier = 'Identifier'
  AST.Literal = 'Literal'
  AST.ArrayExpression = 'ArrayExpression'
  AST.Property = 'Property'
  AST.ObjectExpression = 'ObjectExpression'
  AST.ThisExpression = 'ThisExpression'
  AST.LocalsExpression = 'LocalsExpression'

  // Internal use only
  AST.NGValueParameter = 'NGValueParameter'

  AST.prototype = {
    ast: function (text) {
      this.text = text
      this.tokens = this.lexer.lex(text)

      var value = this.program()

      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0])
      }

      return value
    },

    program: function () {
      var body = []
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          body.push(this.expressionStatement())
        if (!this.expect(';')) {
          return { type: AST.Program, body: body }
        }
      }
    },

    expressionStatement: function () {
      return { type: AST.ExpressionStatement, expression: this.filterChain() }
    },

    filterChain: function () {
      var left = this.expression()
      while (this.expect('|')) {
        left = this.filter(left)
      }
      return left
    },

    expression: function () {
      return this.assignment()
    },

    assignment: function () {
      var result = this.ternary()
      if (this.expect('=')) {
        if (!isAssignable(result)) {
          throw $parseMinErr('lval', 'Trying to assign a value to a non l-value')
        }

        result = {
          type: AST.AssignmentExpression,
          left: result,
          right: this.assignment(),
          operator: '=',
        }
      }
      return result
    },

    ternary: function () {
      var test = this.logicalOR()
      var alternate
      var consequent
      if (this.expect('?')) {
        alternate = this.expression()
        if (this.consume(':')) {
          consequent = this.expression()
          return {
            type: AST.ConditionalExpression,
            test: test,
            alternate: alternate,
            consequent: consequent,
          }
        }
      }
      return test
    },

    logicalOR: function () {
      var left = this.logicalAND()
      while (this.expect('||')) {
        left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() }
      }
      return left
    },

    logicalAND: function () {
      var left = this.equality()
      while (this.expect('&&')) {
        left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality() }
      }
      return left
    },

    equality: function () {
      var left = this.relational()
      var token
      while ((token = this.expect('==', '!=', '===', '!=='))) {
        left = {
          type: AST.BinaryExpression,
          operator: token.text,
          left: left,
          right: this.relational(),
        }
      }
      return left
    },

    relational: function () {
      var left = this.additive()
      var token
      while ((token = this.expect('<', '>', '<=', '>='))) {
        left = {
          type: AST.BinaryExpression,
          operator: token.text,
          left: left,
          right: this.additive(),
        }
      }
      return left
    },

    additive: function () {
      var left = this.multiplicative()
      var token
      while ((token = this.expect('+', '-'))) {
        left = {
          type: AST.BinaryExpression,
          operator: token.text,
          left: left,
          right: this.multiplicative(),
        }
      }
      return left
    },

    multiplicative: function () {
      var left = this.unary()
      var token
      while ((token = this.expect('*', '/', '%'))) {
        left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() }
      }
      return left
    },

    unary: function () {
      var token
      if ((token = this.expect('+', '-', '!'))) {
        return {
          type: AST.UnaryExpression,
          operator: token.text,
          prefix: true,
          argument: this.unary(),
        }
      } else {
        return this.primary()
      }
    },

    primary: function () {
      var primary
      if (this.expect('(')) {
        primary = this.filterChain()
        this.consume(')')
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration()
      } else if (this.expect('{')) {
        primary = this.object()
      } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
        primary = copy(this.selfReferential[this.consume().text])
      } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
        primary = { type: AST.Literal, value: this.options.literals[this.consume().text] }
      } else if (this.peek().identifier) {
        primary = this.identifier()
      } else if (this.peek().constant) {
        primary = this.constant()
      } else {
        this.throwError('not a primary expression', this.peek())
      }

      var next
      while ((next = this.expect('(', '[', '.'))) {
        if (next.text === '(') {
          primary = { type: AST.CallExpression, callee: primary, arguments: this.parseArguments() }
          this.consume(')')
        } else if (next.text === '[') {
          primary = {
            type: AST.MemberExpression,
            object: primary,
            property: this.expression(),
            computed: true,
          }
          this.consume(']')
        } else if (next.text === '.') {
          primary = {
            type: AST.MemberExpression,
            object: primary,
            property: this.identifier(),
            computed: false,
          }
        } else {
          this.throwError('IMPOSSIBLE')
        }
      }
      return primary
    },

    filter: function (baseExpression) {
      var args = [baseExpression]
      var result = {
        type: AST.CallExpression,
        callee: this.identifier(),
        arguments: args,
        filter: true,
      }

      while (this.expect(':')) {
        args.push(this.expression())
      }

      return result
    },

    parseArguments: function () {
      var args = []
      if (this.peekToken().text !== ')') {
        do {
          args.push(this.filterChain())
        } while (this.expect(','))
      }
      return args
    },

    identifier: function () {
      var token = this.consume()
      if (!token.identifier) {
        this.throwError('is not a valid identifier', token)
      }
      return { type: AST.Identifier, name: token.text }
    },

    constant: function () {
      // TODO check that it is a constant
      return { type: AST.Literal, value: this.consume().value }
    },

    arrayDeclaration: function () {
      var elements = []
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break
          }
          elements.push(this.expression())
        } while (this.expect(','))
      }
      this.consume(']')

      return { type: AST.ArrayExpression, elements: elements }
    },

    object: function () {
      var properties = [],
        property
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break
          }
          property = { type: AST.Property, kind: 'init' }
          if (this.peek().constant) {
            property.key = this.constant()
            property.computed = false
            this.consume(':')
            property.value = this.expression()
          } else if (this.peek().identifier) {
            property.key = this.identifier()
            property.computed = false
            if (this.peek(':')) {
              this.consume(':')
              property.value = this.expression()
            } else {
              property.value = property.key
            }
          } else if (this.peek('[')) {
            this.consume('[')
            property.key = this.expression()
            this.consume(']')
            property.computed = true
            this.consume(':')
            property.value = this.expression()
          } else {
            this.throwError('invalid key', this.peek())
          }
          properties.push(property)
        } while (this.expect(','))
      }
      this.consume('}')

      return { type: AST.ObjectExpression, properties: properties }
    },

    throwError: function (msg, token) {
      throw $parseMinErr(
        'syntax',
        "Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",
        token.text,
        msg,
        token.index + 1,
        this.text,
        this.text.substring(token.index)
      )
    },

    consume: function (e1) {
      if (this.tokens.length === 0) {
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text)
      }

      var token = this.expect(e1)
      if (!token) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek())
      }
      return token
    },

    peekToken: function () {
      if (this.tokens.length === 0) {
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text)
      }
      return this.tokens[0]
    },

    peek: function (e1, e2, e3, e4) {
      return this.peekAhead(0, e1, e2, e3, e4)
    },

    peekAhead: function (i, e1, e2, e3, e4) {
      if (this.tokens.length > i) {
        var token = this.tokens[i]
        var t = token.text
        if (t === e1 || t === e2 || t === e3 || t === e4 || (!e1 && !e2 && !e3 && !e4)) {
          return token
        }
      }
      return false
    },

    expect: function (e1, e2, e3, e4) {
      var token = this.peek(e1, e2, e3, e4)
      if (token) {
        this.tokens.shift()
        return token
      }
      return false
    },

    selfReferential: {
      this: { type: AST.ThisExpression },
      $locals: { type: AST.LocalsExpression },
    },
  }

  function ifDefined(v, d) {
    return typeof v !== 'undefined' ? v : d
  }

  function plusFn(l, r) {
    if (typeof l === 'undefined') return r
    if (typeof r === 'undefined') return l
    return l + r
  }

  function isStateless($filter, filterName) {
    var fn = $filter(filterName)
    return !fn.$stateful
  }

  var PURITY_ABSOLUTE = 1
  var PURITY_RELATIVE = 2

  // Detect nodes which could depend on non-shallow state of objects
  function isPure(node, parentIsPure) {
    switch (node.type) {
      // Computed members might invoke a stateful toString()
      case AST.MemberExpression:
        if (node.computed) {
          return false
        }
        break

      // Unary always convert to primative
      case AST.UnaryExpression:
        return PURITY_ABSOLUTE

      // The binary + operator can invoke a stateful toString().
      case AST.BinaryExpression:
        return node.operator !== '+' ? PURITY_ABSOLUTE : false

      // Functions / filters probably read state from within objects
      case AST.CallExpression:
        return false
    }

    return undefined === parentIsPure ? PURITY_RELATIVE : parentIsPure
  }

  function findConstantAndWatchExpressions(ast, $filter, parentIsPure) {
    var allConstants
    var argsToWatch
    var isStatelessFilter

    var astIsPure = (ast.isPure = isPure(ast, parentIsPure))

    switch (ast.type) {
      case AST.Program:
        allConstants = true
        forEach(ast.body, function (expr) {
          findConstantAndWatchExpressions(expr.expression, $filter, astIsPure)
          allConstants = allConstants && expr.expression.constant
        })
        ast.constant = allConstants
        break
      case AST.Literal:
        ast.constant = true
        ast.toWatch = []
        break
      case AST.UnaryExpression:
        findConstantAndWatchExpressions(ast.argument, $filter, astIsPure)
        ast.constant = ast.argument.constant
        ast.toWatch = ast.argument.toWatch
        break
      case AST.BinaryExpression:
        findConstantAndWatchExpressions(ast.left, $filter, astIsPure)
        findConstantAndWatchExpressions(ast.right, $filter, astIsPure)
        ast.constant = ast.left.constant && ast.right.constant
        ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch)
        break
      case AST.LogicalExpression:
        findConstantAndWatchExpressions(ast.left, $filter, astIsPure)
        findConstantAndWatchExpressions(ast.right, $filter, astIsPure)
        ast.constant = ast.left.constant && ast.right.constant
        ast.toWatch = ast.constant ? [] : [ast]
        break
      case AST.ConditionalExpression:
        findConstantAndWatchExpressions(ast.test, $filter, astIsPure)
        findConstantAndWatchExpressions(ast.alternate, $filter, astIsPure)
        findConstantAndWatchExpressions(ast.consequent, $filter, astIsPure)
        ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant
        ast.toWatch = ast.constant ? [] : [ast]
        break
      case AST.Identifier:
        ast.constant = false
        ast.toWatch = [ast]
        break
      case AST.MemberExpression:
        findConstantAndWatchExpressions(ast.object, $filter, astIsPure)
        if (ast.computed) {
          findConstantAndWatchExpressions(ast.property, $filter, astIsPure)
        }
        ast.constant = ast.object.constant && (!ast.computed || ast.property.constant)
        ast.toWatch = ast.constant ? [] : [ast]
        break
      case AST.CallExpression:
        isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false
        allConstants = isStatelessFilter
        argsToWatch = []
        forEach(ast.arguments, function (expr) {
          findConstantAndWatchExpressions(expr, $filter, astIsPure)
          allConstants = allConstants && expr.constant
          argsToWatch.push.apply(argsToWatch, expr.toWatch)
        })
        ast.constant = allConstants
        ast.toWatch = isStatelessFilter ? argsToWatch : [ast]
        break
      case AST.AssignmentExpression:
        findConstantAndWatchExpressions(ast.left, $filter, astIsPure)
        findConstantAndWatchExpressions(ast.right, $filter, astIsPure)
        ast.constant = ast.left.constant && ast.right.constant
        ast.toWatch = [ast]
        break
      case AST.ArrayExpression:
        allConstants = true
        argsToWatch = []
        forEach(ast.elements, function (expr) {
          findConstantAndWatchExpressions(expr, $filter, astIsPure)
          allConstants = allConstants && expr.constant
          argsToWatch.push.apply(argsToWatch, expr.toWatch)
        })
        ast.constant = allConstants
        ast.toWatch = argsToWatch
        break
      case AST.ObjectExpression:
        allConstants = true
        argsToWatch = []
        forEach(ast.properties, function (property) {
          findConstantAndWatchExpressions(property.value, $filter, astIsPure)
          allConstants = allConstants && property.value.constant
          argsToWatch.push.apply(argsToWatch, property.value.toWatch)
          if (property.computed) {
            //`{[key]: value}` implicitly does `key.toString()` which may be non-pure
            findConstantAndWatchExpressions(property.key, $filter, /*parentIsPure=*/ false)
            allConstants = allConstants && property.key.constant
            argsToWatch.push.apply(argsToWatch, property.key.toWatch)
          }
        })
        ast.constant = allConstants
        ast.toWatch = argsToWatch
        break
      case AST.ThisExpression:
        ast.constant = false
        ast.toWatch = []
        break
      case AST.LocalsExpression:
        ast.constant = false
        ast.toWatch = []
        break
    }
  }

  function getInputs(body) {
    if (body.length !== 1) return
    var lastExpression = body[0].expression
    var candidate = lastExpression.toWatch
    if (candidate.length !== 1) return candidate
    return candidate[0] !== lastExpression ? candidate : undefined
  }

  function isAssignable(ast) {
    return ast.type === AST.Identifier || ast.type === AST.MemberExpression
  }

  function assignableAST(ast) {
    if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
      return {
        type: AST.AssignmentExpression,
        left: ast.body[0].expression,
        right: { type: AST.NGValueParameter },
        operator: '=',
      }
    }
  }

  function isLiteral(ast) {
    return (
      ast.body.length === 0 ||
      (ast.body.length === 1 &&
        (ast.body[0].expression.type === AST.Literal ||
          ast.body[0].expression.type === AST.ArrayExpression ||
          ast.body[0].expression.type === AST.ObjectExpression))
    )
  }

  function isConstant(ast) {
    return ast.constant
  }

  function ASTCompiler($filter) {
    this.$filter = $filter
  }

  ASTCompiler.prototype = {
    compile: function (ast) {
      var self = this
      this.state = {
        nextId: 0,
        filters: {},
        fn: { vars: [], body: [], own: {} },
        assign: { vars: [], body: [], own: {} },
        inputs: [],
      }
      findConstantAndWatchExpressions(ast, self.$filter)
      var extra = ''
      var assignable
      this.stage = 'assign'
      if ((assignable = assignableAST(ast))) {
        this.state.computing = 'assign'
        var result = this.nextId()
        this.recurse(assignable, result)
        this.return_(result)
        extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l')
      }
      var toWatch = getInputs(ast.body)
      self.stage = 'inputs'
      forEach(toWatch, function (watch, key) {
        var fnKey = 'fn' + key
        self.state[fnKey] = { vars: [], body: [], own: {} }
        self.state.computing = fnKey
        var intoId = self.nextId()
        self.recurse(watch, intoId)
        self.return_(intoId)
        self.state.inputs.push({ name: fnKey, isPure: watch.isPure })
        watch.watchId = key
      })
      this.state.computing = 'fn'
      this.stage = 'main'
      this.recurse(ast)
      var fnString =
        // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
        // This is a workaround for this until we do a better job at only removing the prefix only when we should.
        '"' +
        this.USE +
        ' ' +
        this.STRICT +
        '";\n' +
        this.filterPrefix() +
        'var fn=' +
        this.generateFunction('fn', 's,l,a,i') +
        extra +
        this.watchFns() +
        'return fn;'

      // eslint-disable-next-line no-new-func
      var fn = new Function('$filter', 'getStringValue', 'ifDefined', 'plus', fnString)(
        this.$filter,
        getStringValue,
        ifDefined,
        plusFn
      )
      this.state = this.stage = undefined
      return fn
    },

    USE: 'use',

    STRICT: 'strict',

    watchFns: function () {
      var result = []
      var inputs = this.state.inputs
      var self = this
      forEach(inputs, function (input) {
        result.push('var ' + input.name + '=' + self.generateFunction(input.name, 's'))
        if (input.isPure) {
          result.push(input.name, '.isPure=' + JSON.stringify(input.isPure) + ';')
        }
      })
      if (inputs.length) {
        result.push(
          'fn.inputs=[' +
            inputs
              .map(function (i) {
                return i.name
              })
              .join(',') +
            '];'
        )
      }
      return result.join('')
    },

    generateFunction: function (name, params) {
      return 'function(' + params + '){' + this.varsPrefix(name) + this.body(name) + '};'
    },

    filterPrefix: function () {
      var parts = []
      var self = this
      forEach(this.state.filters, function (id, filter) {
        parts.push(id + '=$filter(' + self.escape(filter) + ')')
      })
      if (parts.length) return 'var ' + parts.join(',') + ';'
      return ''
    },

    varsPrefix: function (section) {
      return this.state[section].vars.length
        ? 'var ' + this.state[section].vars.join(',') + ';'
        : ''
    },

    body: function (section) {
      return this.state[section].body.join('')
    },

    recurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
      var left,
        right,
        self = this,
        args,
        expression,
        computed
      recursionFn = recursionFn || noop
      if (!skipWatchIdCheck && isDefined(ast.watchId)) {
        intoId = intoId || this.nextId()
        this.if_(
          'i',
          this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
          this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
        )
        return
      }
      switch (ast.type) {
        case AST.Program:
          forEach(ast.body, function (expression, pos) {
            self.recurse(expression.expression, undefined, undefined, function (expr) {
              right = expr
            })
            if (pos !== ast.body.length - 1) {
              self.current().body.push(right, ';')
            } else {
              self.return_(right)
            }
          })
          break
        case AST.Literal:
          expression = this.escape(ast.value)
          this.assign(intoId, expression)
          recursionFn(intoId || expression)
          break
        case AST.UnaryExpression:
          this.recurse(ast.argument, undefined, undefined, function (expr) {
            right = expr
          })
          expression = ast.operator + '(' + this.ifDefined(right, 0) + ')'
          this.assign(intoId, expression)
          recursionFn(expression)
          break
        case AST.BinaryExpression:
          this.recurse(ast.left, undefined, undefined, function (expr) {
            left = expr
          })
          this.recurse(ast.right, undefined, undefined, function (expr) {
            right = expr
          })
          if (ast.operator === '+') {
            expression = this.plus(left, right)
          } else if (ast.operator === '-') {
            expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0)
          } else {
            expression = '(' + left + ')' + ast.operator + '(' + right + ')'
          }
          this.assign(intoId, expression)
          recursionFn(expression)
          break
        case AST.LogicalExpression:
          intoId = intoId || this.nextId()
          self.recurse(ast.left, intoId)
          self.if_(
            ast.operator === '&&' ? intoId : self.not(intoId),
            self.lazyRecurse(ast.right, intoId)
          )
          recursionFn(intoId)
          break
        case AST.ConditionalExpression:
          intoId = intoId || this.nextId()
          self.recurse(ast.test, intoId)
          self.if_(
            intoId,
            self.lazyRecurse(ast.alternate, intoId),
            self.lazyRecurse(ast.consequent, intoId)
          )
          recursionFn(intoId)
          break
        case AST.Identifier:
          intoId = intoId || this.nextId()
          if (nameId) {
            nameId.context =
              self.stage === 'inputs'
                ? 's'
                : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s')
            nameId.computed = false
            nameId.name = ast.name
          }
          self.if_(
            self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
            function () {
              self.if_(self.stage === 'inputs' || 's', function () {
                if (create && create !== 1) {
                  self.if_(
                    self.isNull(self.nonComputedMember('s', ast.name)),
                    self.lazyAssign(self.nonComputedMember('s', ast.name), '{}')
                  )
                }
                self.assign(intoId, self.nonComputedMember('s', ast.name))
              })
            },
            intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
          )
          recursionFn(intoId)
          break
        case AST.MemberExpression:
          left = (nameId && (nameId.context = this.nextId())) || this.nextId()
          intoId = intoId || this.nextId()
          self.recurse(
            ast.object,
            left,
            undefined,
            function () {
              self.if_(
                self.notNull(left),
                function () {
                  if (ast.computed) {
                    right = self.nextId()
                    self.recurse(ast.property, right)
                    self.getStringValue(right)
                    if (create && create !== 1) {
                      self.if_(
                        self.not(self.computedMember(left, right)),
                        self.lazyAssign(self.computedMember(left, right), '{}')
                      )
                    }
                    expression = self.computedMember(left, right)
                    self.assign(intoId, expression)
                    if (nameId) {
                      nameId.computed = true
                      nameId.name = right
                    }
                  } else {
                    if (create && create !== 1) {
                      self.if_(
                        self.isNull(self.nonComputedMember(left, ast.property.name)),
                        self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}')
                      )
                    }
                    expression = self.nonComputedMember(left, ast.property.name)
                    self.assign(intoId, expression)
                    if (nameId) {
                      nameId.computed = false
                      nameId.name = ast.property.name
                    }
                  }
                },
                function () {
                  self.assign(intoId, 'undefined')
                }
              )
              recursionFn(intoId)
            },
            !!create
          )
          break
        case AST.CallExpression:
          intoId = intoId || this.nextId()
          if (ast.filter) {
            right = self.filter(ast.callee.name)
            args = []
            forEach(ast.arguments, function (expr) {
              var argument = self.nextId()
              self.recurse(expr, argument)
              args.push(argument)
            })
            expression = right + '(' + args.join(',') + ')'
            self.assign(intoId, expression)
            recursionFn(intoId)
          } else {
            right = self.nextId()
            left = {}
            args = []
            self.recurse(ast.callee, right, left, function () {
              self.if_(
                self.notNull(right),
                function () {
                  forEach(ast.arguments, function (expr) {
                    self.recurse(
                      expr,
                      ast.constant ? undefined : self.nextId(),
                      undefined,
                      function (argument) {
                        args.push(argument)
                      }
                    )
                  })
                  if (left.name) {
                    expression =
                      self.member(left.context, left.name, left.computed) +
                      '(' +
                      args.join(',') +
                      ')'
                  } else {
                    expression = right + '(' + args.join(',') + ')'
                  }
                  self.assign(intoId, expression)
                },
                function () {
                  self.assign(intoId, 'undefined')
                }
              )
              recursionFn(intoId)
            })
          }
          break
        case AST.AssignmentExpression:
          right = this.nextId()
          left = {}
          this.recurse(
            ast.left,
            undefined,
            left,
            function () {
              self.if_(self.notNull(left.context), function () {
                self.recurse(ast.right, right)
                expression =
                  self.member(left.context, left.name, left.computed) + ast.operator + right
                self.assign(intoId, expression)
                recursionFn(intoId || expression)
              })
            },
            1
          )
          break
        case AST.ArrayExpression:
          args = []
          forEach(ast.elements, function (expr) {
            self.recurse(
              expr,
              ast.constant ? undefined : self.nextId(),
              undefined,
              function (argument) {
                args.push(argument)
              }
            )
          })
          expression = '[' + args.join(',') + ']'
          this.assign(intoId, expression)
          recursionFn(intoId || expression)
          break
        case AST.ObjectExpression:
          args = []
          computed = false
          forEach(ast.properties, function (property) {
            if (property.computed) {
              computed = true
            }
          })
          if (computed) {
            intoId = intoId || this.nextId()
            this.assign(intoId, '{}')
            forEach(ast.properties, function (property) {
              if (property.computed) {
                left = self.nextId()
                self.recurse(property.key, left)
              } else {
                left =
                  property.key.type === AST.Identifier ? property.key.name : '' + property.key.value
              }
              right = self.nextId()
              self.recurse(property.value, right)
              self.assign(self.member(intoId, left, property.computed), right)
            })
          } else {
            forEach(ast.properties, function (property) {
              self.recurse(
                property.value,
                ast.constant ? undefined : self.nextId(),
                undefined,
                function (expr) {
                  args.push(
                    self.escape(
                      property.key.type === AST.Identifier
                        ? property.key.name
                        : '' + property.key.value
                    ) +
                      ':' +
                      expr
                  )
                }
              )
            })
            expression = '{' + args.join(',') + '}'
            this.assign(intoId, expression)
          }
          recursionFn(intoId || expression)
          break
        case AST.ThisExpression:
          this.assign(intoId, 's')
          recursionFn(intoId || 's')
          break
        case AST.LocalsExpression:
          this.assign(intoId, 'l')
          recursionFn(intoId || 'l')
          break
        case AST.NGValueParameter:
          this.assign(intoId, 'v')
          recursionFn(intoId || 'v')
          break
      }
    },

    getHasOwnProperty: function (element, property) {
      var key = element + '.' + property
      var own = this.current().own
      if (!own.hasOwnProperty(key)) {
        own[key] = this.nextId(
          false,
          element + '&&(' + this.escape(property) + ' in ' + element + ')'
        )
      }
      return own[key]
    },

    assign: function (id, value) {
      if (!id) return
      this.current().body.push(id, '=', value, ';')
      return id
    },

    filter: function (filterName) {
      if (!this.state.filters.hasOwnProperty(filterName)) {
        this.state.filters[filterName] = this.nextId(true)
      }
      return this.state.filters[filterName]
    },

    ifDefined: function (id, defaultValue) {
      return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')'
    },

    plus: function (left, right) {
      return 'plus(' + left + ',' + right + ')'
    },

    return_: function (id) {
      this.current().body.push('return ', id, ';')
    },

    if_: function (test, alternate, consequent) {
      if (test === true) {
        alternate()
      } else {
        var body = this.current().body
        body.push('if(', test, '){')
        alternate()
        body.push('}')
        if (consequent) {
          body.push('else{')
          consequent()
          body.push('}')
        }
      }
    },

    not: function (expression) {
      return '!(' + expression + ')'
    },

    isNull: function (expression) {
      return expression + '==null'
    },

    notNull: function (expression) {
      return expression + '!=null'
    },

    nonComputedMember: function (left, right) {
      var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/
      var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g
      if (SAFE_IDENTIFIER.test(right)) {
        return left + '.' + right
      } else {
        return left + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]'
      }
    },

    computedMember: function (left, right) {
      return left + '[' + right + ']'
    },

    member: function (left, right, computed) {
      if (computed) return this.computedMember(left, right)
      return this.nonComputedMember(left, right)
    },

    getStringValue: function (item) {
      this.assign(item, 'getStringValue(' + item + ')')
    },

    lazyRecurse: function (ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
      var self = this
      return function () {
        self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck)
      }
    },

    lazyAssign: function (id, value) {
      var self = this
      return function () {
        self.assign(id, value)
      }
    },

    stringEscapeRegex: /[^ a-zA-Z0-9]/g,

    stringEscapeFn: function (c) {
      return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4)
    },

    escape: function (value) {
      if (isString(value))
        return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'"
      if (isNumber(value)) return value.toString()
      if (value === true) return 'true'
      if (value === false) return 'false'
      if (value === null) return 'null'
      if (typeof value === 'undefined') return 'undefined'

      throw $parseMinErr('esc', 'IMPOSSIBLE')
    },

    nextId: function (skip, init) {
      var id = 'v' + this.state.nextId++
      if (!skip) {
        this.current().vars.push(id + (init ? '=' + init : ''))
      }
      return id
    },

    current: function () {
      return this.state[this.state.computing]
    },
  }

  function ASTInterpreter($filter) {
    this.$filter = $filter
  }

  ASTInterpreter.prototype = {
    compile: function (ast) {
      var self = this
      findConstantAndWatchExpressions(ast, self.$filter)
      var assignable
      var assign
      if ((assignable = assignableAST(ast))) {
        assign = this.recurse(assignable)
      }
      var toWatch = getInputs(ast.body)
      var inputs
      if (toWatch) {
        inputs = []
        forEach(toWatch, function (watch, key) {
          var input = self.recurse(watch)
          input.isPure = watch.isPure
          watch.input = input
          inputs.push(input)
          watch.watchId = key
        })
      }
      var expressions = []
      forEach(ast.body, function (expression) {
        expressions.push(self.recurse(expression.expression))
      })
      var fn =
        ast.body.length === 0
          ? noop
          : ast.body.length === 1
          ? expressions[0]
          : function (scope, locals) {
              var lastValue
              forEach(expressions, function (exp) {
                lastValue = exp(scope, locals)
              })
              return lastValue
            }
      if (assign) {
        fn.assign = function (scope, value, locals) {
          return assign(scope, locals, value)
        }
      }
      if (inputs) {
        fn.inputs = inputs
      }
      return fn
    },

    recurse: function (ast, context, create) {
      var left,
        right,
        self = this,
        args
      if (ast.input) {
        return this.inputs(ast.input, ast.watchId)
      }
      switch (ast.type) {
        case AST.Literal:
          return this.value(ast.value, context)
        case AST.UnaryExpression:
          right = this.recurse(ast.argument)
          return this['unary' + ast.operator](right, context)
        case AST.BinaryExpression:
          left = this.recurse(ast.left)
          right = this.recurse(ast.right)
          return this['binary' + ast.operator](left, right, context)
        case AST.LogicalExpression:
          left = this.recurse(ast.left)
          right = this.recurse(ast.right)
          return this['binary' + ast.operator](left, right, context)
        case AST.ConditionalExpression:
          return this['ternary?:'](
            this.recurse(ast.test),
            this.recurse(ast.alternate),
            this.recurse(ast.consequent),
            context
          )
        case AST.Identifier:
          return self.identifier(ast.name, context, create)
        case AST.MemberExpression:
          left = this.recurse(ast.object, false, !!create)
          if (!ast.computed) {
            right = ast.property.name
          }
          if (ast.computed) right = this.recurse(ast.property)
          return ast.computed
            ? this.computedMember(left, right, context, create)
            : this.nonComputedMember(left, right, context, create)
        case AST.CallExpression:
          args = []
          forEach(ast.arguments, function (expr) {
            args.push(self.recurse(expr))
          })
          if (ast.filter) right = this.$filter(ast.callee.name)
          if (!ast.filter) right = this.recurse(ast.callee, true)
          return ast.filter
            ? function (scope, locals, assign, inputs) {
                var values = []
                for (var i = 0; i < args.length; ++i) {
                  values.push(args[i](scope, locals, assign, inputs))
                }
                var value = right.apply(undefined, values, inputs)
                return context ? { context: undefined, name: undefined, value: value } : value
              }
            : function (scope, locals, assign, inputs) {
                var rhs = right(scope, locals, assign, inputs)
                var value
                if (rhs.value != null) {
                  var values = []
                  for (var i = 0; i < args.length; ++i) {
                    values.push(args[i](scope, locals, assign, inputs))
                  }
                  value = rhs.value.apply(rhs.context, values)
                }
                return context ? { value: value } : value
              }
        case AST.AssignmentExpression:
          left = this.recurse(ast.left, true, 1)
          right = this.recurse(ast.right)
          return function (scope, locals, assign, inputs) {
            var lhs = left(scope, locals, assign, inputs)
            var rhs = right(scope, locals, assign, inputs)
            lhs.context[lhs.name] = rhs
            return context ? { value: rhs } : rhs
          }
        case AST.ArrayExpression:
          args = []
          forEach(ast.elements, function (expr) {
            args.push(self.recurse(expr))
          })
          return function (scope, locals, assign, inputs) {
            var value = []
            for (var i = 0; i < args.length; ++i) {
              value.push(args[i](scope, locals, assign, inputs))
            }
            return context ? { value: value } : value
          }
        case AST.ObjectExpression:
          args = []
          forEach(ast.properties, function (property) {
            if (property.computed) {
              args.push({
                key: self.recurse(property.key),
                computed: true,
                value: self.recurse(property.value),
              })
            } else {
              args.push({
                key:
                  property.key.type === AST.Identifier
                    ? property.key.name
                    : '' + property.key.value,
                computed: false,
                value: self.recurse(property.value),
              })
            }
          })
          return function (scope, locals, assign, inputs) {
            var value = {}
            for (var i = 0; i < args.length; ++i) {
              if (args[i].computed) {
                value[args[i].key(scope, locals, assign, inputs)] = args[i].value(
                  scope,
                  locals,
                  assign,
                  inputs
                )
              } else {
                value[args[i].key] = args[i].value(scope, locals, assign, inputs)
              }
            }
            return context ? { value: value } : value
          }
        case AST.ThisExpression:
          return function (scope) {
            return context ? { value: scope } : scope
          }
        case AST.LocalsExpression:
          return function (scope, locals) {
            return context ? { value: locals } : locals
          }
        case AST.NGValueParameter:
          return function (scope, locals, assign) {
            return context ? { value: assign } : assign
          }
      }
    },

    'unary+': function (argument, context) {
      return function (scope, locals, assign, inputs) {
        var arg = argument(scope, locals, assign, inputs)
        if (isDefined(arg)) {
          arg = +arg
        } else {
          arg = 0
        }
        return context ? { value: arg } : arg
      }
    },
    'unary-': function (argument, context) {
      return function (scope, locals, assign, inputs) {
        var arg = argument(scope, locals, assign, inputs)
        if (isDefined(arg)) {
          arg = -arg
        } else {
          arg = -0
        }
        return context ? { value: arg } : arg
      }
    },
    'unary!': function (argument, context) {
      return function (scope, locals, assign, inputs) {
        var arg = !argument(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary+': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs)
        var rhs = right(scope, locals, assign, inputs)
        var arg = plusFn(lhs, rhs)
        return context ? { value: arg } : arg
      }
    },
    'binary-': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs)
        var rhs = right(scope, locals, assign, inputs)
        var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0)
        return context ? { value: arg } : arg
      }
    },
    'binary*': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary/': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary%': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary===': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary!==': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary==': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        // eslint-disable-next-line eqeqeq
        var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary!=': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        // eslint-disable-next-line eqeqeq
        var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary<': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary>': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary<=': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary>=': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary&&': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'binary||': function (left, right, context) {
      return function (scope, locals, assign, inputs) {
        var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    'ternary?:': function (test, alternate, consequent, context) {
      return function (scope, locals, assign, inputs) {
        var arg = test(scope, locals, assign, inputs)
          ? alternate(scope, locals, assign, inputs)
          : consequent(scope, locals, assign, inputs)
        return context ? { value: arg } : arg
      }
    },
    value: function (value, context) {
      return function () {
        return context ? { context: undefined, name: undefined, value: value } : value
      }
    },
    identifier: function (name, context, create) {
      return function (scope, locals, assign, inputs) {
        var base = locals && name in locals ? locals : scope
        if (create && create !== 1 && base && base[name] == null) {
          base[name] = {}
        }
        var value = base ? base[name] : undefined
        if (context) {
          return { context: base, name: name, value: value }
        } else {
          return value
        }
      }
    },
    computedMember: function (left, right, context, create) {
      return function (scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs)
        var rhs
        var value
        if (lhs != null) {
          rhs = right(scope, locals, assign, inputs)
          rhs = getStringValue(rhs)
          if (create && create !== 1) {
            if (lhs && !lhs[rhs]) {
              lhs[rhs] = {}
            }
          }
          value = lhs[rhs]
        }
        if (context) {
          return { context: lhs, name: rhs, value: value }
        } else {
          return value
        }
      }
    },
    nonComputedMember: function (left, right, context, create) {
      return function (scope, locals, assign, inputs) {
        var lhs = left(scope, locals, assign, inputs)
        if (create && create !== 1) {
          if (lhs && lhs[right] == null) {
            lhs[right] = {}
          }
        }
        var value = lhs != null ? lhs[right] : undefined
        if (context) {
          return { context: lhs, name: right, value: value }
        } else {
          return value
        }
      }
    },
    inputs: function (input, watchId) {
      return function (scope, value, locals, inputs) {
        if (inputs) return inputs[watchId]
        return input(scope, value, locals)
      }
    },
  }

  /**
   * @constructor
   */
  function Parser(lexer, $filter, options) {
    this.ast = new AST(lexer, options)
    this.astCompiler = options.csp ? new ASTInterpreter($filter) : new ASTCompiler($filter)
  }

  Parser.prototype = {
    constructor: Parser,

    parse: function (text) {
      var ast = this.getAst(text)
      var fn = this.astCompiler.compile(ast.ast)
      fn.literal = isLiteral(ast.ast)
      fn.constant = isConstant(ast.ast)
      fn.oneTime = ast.oneTime
      return fn
    },

    getAst: function (exp) {
      var oneTime = false
      exp = exp.trim()

      if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
        oneTime = true
        exp = exp.substring(2)
      }
      return {
        ast: this.ast.ast(exp),
        oneTime: oneTime,
      }
    },
  }

  function getValueOf(value) {
    return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value)
  }

  ///////////////////////////////////

  /**
   * @ngdoc service
   * @name $parse
   * @kind function
   *
   * @description
   *
   * Converts AngularJS {@link guide/expression expression} into a function.
   *
   * ```js
   *   var getter = $parse('user.name');
   *   var setter = getter.assign;
   *   var context = {user:{name:'AngularJS'}};
   *   var locals = {user:{name:'local'}};
   *
   *   expect(getter(context)).toEqual('AngularJS');
   *   setter(context, 'newValue');
   *   expect(context.user.name).toEqual('newValue');
   *   expect(getter(context, locals)).toEqual('local');
   * ```
   *
   *
   * @param {string} expression String expression to compile.
   * @returns {function(context, locals)} a function which represents the compiled expression:
   *
   *    * `context` – `{object}` – an object against which any expressions embedded in the strings
   *      are evaluated against (typically a scope object).
   *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
   *      `context`.
   *
   *    The returned function also has the following properties:
   *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
   *        literal.
   *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
   *        constant literals.
   *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
   *        set to a function to change its value on the given context.
   *
   */

  /**
   * @ngdoc provider
   * @name $parseProvider
   * @this
   *
   * @description
   * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
   *  service.
   */
  function $ParseProvider() {
    var cache = createMap()
    var literals = {
      true: true,
      false: false,
      null: null,
      undefined: undefined,
    }
    var identStart, identContinue

    /**
     * @ngdoc method
     * @name $parseProvider#addLiteral
     * @description
     *
     * Configure $parse service to add literal values that will be present as literal at expressions.
     *
     * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
     * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
     *
     **/
    this.addLiteral = function (literalName, literalValue) {
      literals[literalName] = literalValue
    }

    /**
     * @ngdoc method
     * @name $parseProvider#setIdentifierFns
     *
     * @description
     *
     * Allows defining the set of characters that are allowed in AngularJS expressions. The function
     * `identifierStart` will get called to know if a given character is a valid character to be the
     * first character for an identifier. The function `identifierContinue` will get called to know if
     * a given character is a valid character to be a follow-up identifier character. The functions
     * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
     * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
     * mind that the `string` parameter can be two characters long depending on the character
     * representation. It is expected for the function to return `true` or `false`, whether that
     * character is allowed or not.
     *
     * Since this function will be called extensively, keep the implementation of these functions fast,
     * as the performance of these functions have a direct impact on the expressions parsing speed.
     *
     * @param {function=} identifierStart The function that will decide whether the given character is
     *   a valid identifier start character.
     * @param {function=} identifierContinue The function that will decide whether the given character is
     *   a valid identifier continue character.
     */
    this.setIdentifierFns = function (identifierStart, identifierContinue) {
      identStart = identifierStart
      identContinue = identifierContinue
      return this
    }

    this.$get = [
      '$filter',
      function ($filter) {
        var noUnsafeEval = csp().noUnsafeEval
        var $parseOptions = {
          csp: noUnsafeEval,
          literals: copy(literals),
          isIdentifierStart: isFunction(identStart) && identStart,
          isIdentifierContinue: isFunction(identContinue) && identContinue,
        }
        $parse.$$getAst = $$getAst
        return $parse

        function $parse(exp, interceptorFn) {
          var parsedExpression, cacheKey

          switch (typeof exp) {
            case 'string':
              exp = exp.trim()
              cacheKey = exp

              parsedExpression = cache[cacheKey]

              if (!parsedExpression) {
                var lexer = new Lexer($parseOptions)
                var parser = new Parser(lexer, $filter, $parseOptions)
                parsedExpression = parser.parse(exp)

                cache[cacheKey] = addWatchDelegate(parsedExpression)
              }
              return addInterceptor(parsedExpression, interceptorFn)

            case 'function':
              return addInterceptor(exp, interceptorFn)

            default:
              return addInterceptor(noop, interceptorFn)
          }
        }

        function $$getAst(exp) {
          var lexer = new Lexer($parseOptions)
          var parser = new Parser(lexer, $filter, $parseOptions)
          return parser.getAst(exp).ast
        }

        function expressionInputDirtyCheck(newValue, oldValueOfValue, compareObjectIdentity) {
          if (newValue == null || oldValueOfValue == null) {
            // null/undefined
            return newValue === oldValueOfValue
          }

          if (typeof newValue === 'object') {
            // attempt to convert the value to a primitive type
            // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
            //             be cheaply dirty-checked
            newValue = getValueOf(newValue)

            if (typeof newValue === 'object' && !compareObjectIdentity) {
              // objects/arrays are not supported - deep-watching them would be too expensive
              return false
            }

            // fall-through to the primitive equality check
          }

          //Primitive or NaN
          // eslint-disable-next-line no-self-compare
          return (
            newValue === oldValueOfValue ||
            (newValue !== newValue && oldValueOfValue !== oldValueOfValue)
          )
        }

        function inputsWatchDelegate(
          scope,
          listener,
          objectEquality,
          parsedExpression,
          prettyPrintExpression
        ) {
          var inputExpressions = parsedExpression.inputs
          var lastResult

          if (inputExpressions.length === 1) {
            var oldInputValueOf = expressionInputDirtyCheck // init to something unique so that equals check fails
            inputExpressions = inputExpressions[0]
            return scope.$watch(
              function expressionInputWatch(scope) {
                var newInputValue = inputExpressions(scope)
                if (
                  !expressionInputDirtyCheck(
                    newInputValue,
                    oldInputValueOf,
                    inputExpressions.isPure
                  )
                ) {
                  lastResult = parsedExpression(scope, undefined, undefined, [newInputValue])
                  oldInputValueOf = newInputValue && getValueOf(newInputValue)
                }
                return lastResult
              },
              listener,
              objectEquality,
              prettyPrintExpression
            )
          }

          var oldInputValueOfValues = []
          var oldInputValues = []
          for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
            oldInputValueOfValues[i] = expressionInputDirtyCheck // init to something unique so that equals check fails
            oldInputValues[i] = null
          }

          return scope.$watch(
            function expressionInputsWatch(scope) {
              var changed = false

              for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
                var newInputValue = inputExpressions[i](scope)
                if (
                  changed ||
                  (changed = !expressionInputDirtyCheck(
                    newInputValue,
                    oldInputValueOfValues[i],
                    inputExpressions[i].isPure
                  ))
                ) {
                  oldInputValues[i] = newInputValue
                  oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue)
                }
              }

              if (changed) {
                lastResult = parsedExpression(scope, undefined, undefined, oldInputValues)
              }

              return lastResult
            },
            listener,
            objectEquality,
            prettyPrintExpression
          )
        }

        function oneTimeWatchDelegate(
          scope,
          listener,
          objectEquality,
          parsedExpression,
          prettyPrintExpression
        ) {
          var isDone = parsedExpression.literal ? isAllDefined : isDefined
          var unwatch, lastValue

          var exp = parsedExpression.$$intercepted || parsedExpression
          var post = parsedExpression.$$interceptor || identity

          var useInputs = parsedExpression.inputs && !exp.inputs

          // Propogate the literal/inputs/constant attributes
          // ... but not oneTime since we are handling it
          oneTimeWatch.literal = parsedExpression.literal
          oneTimeWatch.constant = parsedExpression.constant
          oneTimeWatch.inputs = parsedExpression.inputs

          // Allow other delegates to run on this wrapped expression
          addWatchDelegate(oneTimeWatch)

          unwatch = scope.$watch(oneTimeWatch, listener, objectEquality, prettyPrintExpression)

          return unwatch

          function unwatchIfDone() {
            if (isDone(lastValue)) {
              unwatch()
            }
          }

          function oneTimeWatch(scope, locals, assign, inputs) {
            lastValue = useInputs && inputs ? inputs[0] : exp(scope, locals, assign, inputs)
            if (isDone(lastValue)) {
              scope.$$postDigest(unwatchIfDone)
            }
            return post(lastValue)
          }
        }

        function isAllDefined(value) {
          var allDefined = true
          forEach(value, function (val) {
            if (!isDefined(val)) allDefined = false
          })
          return allDefined
        }

        function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
          var unwatch = scope.$watch(
            function constantWatch(scope) {
              unwatch()
              return parsedExpression(scope)
            },
            listener,
            objectEquality
          )
          return unwatch
        }

        function addWatchDelegate(parsedExpression) {
          if (parsedExpression.constant) {
            parsedExpression.$$watchDelegate = constantWatchDelegate
          } else if (parsedExpression.oneTime) {
            parsedExpression.$$watchDelegate = oneTimeWatchDelegate
          } else if (parsedExpression.inputs) {
            parsedExpression.$$watchDelegate = inputsWatchDelegate
          }

          return parsedExpression
        }

        function chainInterceptors(first, second) {
          function chainedInterceptor(value) {
            return second(first(value))
          }
          chainedInterceptor.$stateful = first.$stateful || second.$stateful
          chainedInterceptor.$$pure = first.$$pure && second.$$pure

          return chainedInterceptor
        }

        function addInterceptor(parsedExpression, interceptorFn) {
          if (!interceptorFn) return parsedExpression

          // Extract any existing interceptors out of the parsedExpression
          // to ensure the original parsedExpression is always the $$intercepted
          if (parsedExpression.$$interceptor) {
            interceptorFn = chainInterceptors(parsedExpression.$$interceptor, interceptorFn)
            parsedExpression = parsedExpression.$$intercepted
          }

          var useInputs = false

          var fn = function interceptedExpression(scope, locals, assign, inputs) {
            var value =
              useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs)
            return interceptorFn(value)
          }

          // Maintain references to the interceptor/intercepted
          fn.$$intercepted = parsedExpression
          fn.$$interceptor = interceptorFn

          // Propogate the literal/oneTime/constant attributes
          fn.literal = parsedExpression.literal
          fn.oneTime = parsedExpression.oneTime
          fn.constant = parsedExpression.constant

          // Treat the interceptor like filters.
          // If it is not $stateful then only watch its inputs.
          // If the expression itself has no inputs then use the full expression as an input.
          if (!interceptorFn.$stateful) {
            useInputs = !parsedExpression.inputs
            fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression]

            if (!interceptorFn.$$pure) {
              fn.inputs = fn.inputs.map(function (e) {
                // Remove the isPure flag of inputs when it is not absolute because they are now wrapped in a
                // non-pure interceptor function.
                if (e.isPure === PURITY_RELATIVE) {
                  return function depurifier(s) {
                    return e(s)
                  }
                }
                return e
              })
            }
          }

          return addWatchDelegate(fn)
        }
      },
    ]
  }

  /**
   * @ngdoc service
   * @name $q
   * @requires $rootScope
   *
   * @description
   * A service that helps you run functions asynchronously, and use their return values (or exceptions)
   * when they are done processing.
   *
   * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
   * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
   *
   * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
   * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
   *
   * ## $q constructor
   *
   * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
   * function as the first argument. This is similar to the native Promise implementation from ES6,
   * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
   *
   * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
   * available yet.
   *
   * It can be used like so:
   *
   * ```js
   *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
   *   // are available in the current lexical scope (they could have been injected or passed in).
   *
   *   function asyncGreet(name) {
   *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
   *     return $q(function(resolve, reject) {
   *       setTimeout(function() {
   *         if (okToGreet(name)) {
   *           resolve('Hello, ' + name + '!');
   *         } else {
   *           reject('Greeting ' + name + ' is not allowed.');
   *         }
   *       }, 1000);
   *     });
   *   }
   *
   *   var promise = asyncGreet('Robin Hood');
   *   promise.then(function(greeting) {
   *     alert('Success: ' + greeting);
   *   }, function(reason) {
   *     alert('Failed: ' + reason);
   *   });
   * ```
   *
   * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
   *
   * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
   *
   * However, the more traditional CommonJS-style usage is still available, and documented below.
   *
   * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
   * interface for interacting with an object that represents the result of an action that is
   * performed asynchronously, and may or may not be finished at any given point in time.
   *
   * From the perspective of dealing with error handling, deferred and promise APIs are to
   * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
   *
   * ```js
   *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
   *   // are available in the current lexical scope (they could have been injected or passed in).
   *
   *   function asyncGreet(name) {
   *     var deferred = $q.defer();
   *
   *     setTimeout(function() {
   *       deferred.notify('About to greet ' + name + '.');
   *
   *       if (okToGreet(name)) {
   *         deferred.resolve('Hello, ' + name + '!');
   *       } else {
   *         deferred.reject('Greeting ' + name + ' is not allowed.');
   *       }
   *     }, 1000);
   *
   *     return deferred.promise;
   *   }
   *
   *   var promise = asyncGreet('Robin Hood');
   *   promise.then(function(greeting) {
   *     alert('Success: ' + greeting);
   *   }, function(reason) {
   *     alert('Failed: ' + reason);
   *   }, function(update) {
   *     alert('Got notification: ' + update);
   *   });
   * ```
   *
   * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
   * comes in the way of guarantees that promise and deferred APIs make, see
   * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
   *
   * Additionally the promise api allows for composition that is very hard to do with the
   * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
   * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
   * section on serial or parallel joining of promises.
   *
   * ## The Deferred API
   *
   * A new instance of deferred is constructed by calling `$q.defer()`.
   *
   * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
   * that can be used for signaling the successful or unsuccessful completion, as well as the status
   * of the task.
   *
   * **Methods**
   *
   * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
   *   constructed via `$q.reject`, the promise will be rejected instead.
   * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
   *   resolving it with a rejection constructed via `$q.reject`.
   * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
   *   multiple times before the promise is either resolved or rejected.
   *
   * **Properties**
   *
   * - promise – `{Promise}` – promise object associated with this deferred.
   *
   *
   * ## The Promise API
   *
   * A new promise instance is created when a deferred instance is created and can be retrieved by
   * calling `deferred.promise`.
   *
   * The purpose of the promise object is to allow for interested parties to get access to the result
   * of the deferred task when it completes.
   *
   * **Methods**
   *
   * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
   *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
   *   as soon as the result is available. The callbacks are called with a single argument: the result
   *   or rejection reason. Additionally, the notify callback may be called zero or more times to
   *   provide a progress indication, before the promise is resolved or rejected.
   *
   *   This method *returns a new promise* which is resolved or rejected via the return value of the
   *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
   *   with the value which is resolved in that promise using
   *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
   *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
   *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
   *   arguments are optional.
   *
   * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
   *
   * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
   *   but to do so without modifying the final value. This is useful to release resources or do some
   *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
   *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
   *   more information.
   *
   * ## Chaining promises
   *
   * Because calling the `then` method of a promise returns a new derived promise, it is easily
   * possible to create a chain of promises:
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     return result + 1;
   *   });
   *
   *   // promiseB will be resolved immediately after promiseA is resolved and its value
   *   // will be the result of promiseA incremented by 1
   * ```
   *
   * It is possible to create chains of any length and since a promise can be resolved with another
   * promise (which will defer its resolution further), it is possible to pause/defer resolution of
   * the promises at any point in the chain. This makes it possible to implement powerful APIs like
   * $http's response interceptors.
   *
   *
   * ## Differences between Kris Kowal's Q and $q
   *
   *  There are two main differences:
   *
   * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
   *   mechanism in AngularJS, which means faster propagation of resolution or rejection into your
   *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
   * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
   *   all the important functionality needed for common async tasks.
   *
   * ## Testing
   *
   *  ```js
   *    it('should simulate promise', inject(function($q, $rootScope) {
   *      var deferred = $q.defer();
   *      var promise = deferred.promise;
   *      var resolvedValue;
   *
   *      promise.then(function(value) { resolvedValue = value; });
   *      expect(resolvedValue).toBeUndefined();
   *
   *      // Simulate resolving of promise
   *      deferred.resolve(123);
   *      // Note that the 'then' function does not get called synchronously.
   *      // This is because we want the promise API to always be async, whether or not
   *      // it got called synchronously or asynchronously.
   *      expect(resolvedValue).toBeUndefined();
   *
   *      // Propagate promise resolution to 'then' functions using $apply().
   *      $rootScope.$apply();
   *      expect(resolvedValue).toEqual(123);
   *    }));
   *  ```
   *
   * @param {function(function, function)} resolver Function which is responsible for resolving or
   *   rejecting the newly created promise. The first parameter is a function which resolves the
   *   promise, the second parameter is a function which rejects the promise.
   *
   * @returns {Promise} The newly created promise.
   */
  /**
   * @ngdoc provider
   * @name $qProvider
   * @this
   *
   * @description
   */
  function $QProvider() {
    var errorOnUnhandledRejections = true
    this.$get = [
      '$rootScope',
      '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {
        return qFactory(
          function (callback) {
            $rootScope.$evalAsync(callback)
          },
          $exceptionHandler,
          errorOnUnhandledRejections
        )
      },
    ]

    /**
     * @ngdoc method
     * @name $qProvider#errorOnUnhandledRejections
     * @kind function
     *
     * @description
     * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
     * This feature is enabled by default.
     *
     * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
     * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
     *    chaining otherwise.
     */
    this.errorOnUnhandledRejections = function (value) {
      if (isDefined(value)) {
        errorOnUnhandledRejections = value
        return this
      } else {
        return errorOnUnhandledRejections
      }
    }
  }

  /** @this */
  function $$QProvider() {
    var errorOnUnhandledRejections = true
    this.$get = [
      '$browser',
      '$exceptionHandler',
      function ($browser, $exceptionHandler) {
        return qFactory(
          function (callback) {
            $browser.defer(callback)
          },
          $exceptionHandler,
          errorOnUnhandledRejections
        )
      },
    ]

    this.errorOnUnhandledRejections = function (value) {
      if (isDefined(value)) {
        errorOnUnhandledRejections = value
        return this
      } else {
        return errorOnUnhandledRejections
      }
    }
  }

  /**
   * Constructs a promise manager.
   *
   * @param {function(function)} nextTick Function for executing functions in the next turn.
   * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
   *     debugging purposes.
   * @param {boolean=} errorOnUnhandledRejections Whether an error should be generated on unhandled
   *     promises rejections.
   * @returns {object} Promise manager.
   */
  function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
    var $qMinErr = minErr('$q', TypeError)
    var queueSize = 0
    var checkQueue = []

    /**
     * @ngdoc method
     * @name ng.$q#defer
     * @kind function
     *
     * @description
     * Creates a `Deferred` object which represents a task which will finish in the future.
     *
     * @returns {Deferred} Returns a new instance of deferred.
     */
    function defer() {
      return new Deferred()
    }

    function Deferred() {
      var promise = (this.promise = new Promise())
      //Non prototype methods necessary to support unbound execution :/
      this.resolve = function (val) {
        resolvePromise(promise, val)
      }
      this.reject = function (reason) {
        rejectPromise(promise, reason)
      }
      this.notify = function (progress) {
        notifyPromise(promise, progress)
      }
    }

    function Promise() {
      this.$$state = { status: 0 }
    }

    extend(Promise.prototype, {
      then: function (onFulfilled, onRejected, progressBack) {
        if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
          return this
        }
        var result = new Promise()

        this.$$state.pending = this.$$state.pending || []
        this.$$state.pending.push([result, onFulfilled, onRejected, progressBack])
        if (this.$$state.status > 0) scheduleProcessQueue(this.$$state)

        return result
      },

      catch: function (callback) {
        return this.then(null, callback)
      },

      finally: function (callback, progressBack) {
        return this.then(
          function (value) {
            return handleCallback(value, resolve, callback)
          },
          function (error) {
            return handleCallback(error, reject, callback)
          },
          progressBack
        )
      },
    })

    function processQueue(state) {
      var fn, promise, pending

      pending = state.pending
      state.processScheduled = false
      state.pending = undefined
      try {
        for (var i = 0, ii = pending.length; i < ii; ++i) {
          markQStateExceptionHandled(state)
          promise = pending[i][0]
          fn = pending[i][state.status]
          try {
            if (isFunction(fn)) {
              resolvePromise(promise, fn(state.value))
            } else if (state.status === 1) {
              resolvePromise(promise, state.value)
            } else {
              rejectPromise(promise, state.value)
            }
          } catch (e) {
            rejectPromise(promise, e)
            // This error is explicitly marked for being passed to the $exceptionHandler
            if (e && e.$$passToExceptionHandler === true) {
              exceptionHandler(e)
            }
          }
        }
      } finally {
        --queueSize
        if (errorOnUnhandledRejections && queueSize === 0) {
          nextTick(processChecks)
        }
      }
    }

    function processChecks() {
      // eslint-disable-next-line no-unmodified-loop-condition
      while (!queueSize && checkQueue.length) {
        var toCheck = checkQueue.shift()
        if (!isStateExceptionHandled(toCheck)) {
          markQStateExceptionHandled(toCheck)
          var errorMessage = 'Possibly unhandled rejection: ' + toDebugString(toCheck.value)
          if (isError(toCheck.value)) {
            exceptionHandler(toCheck.value, errorMessage)
          } else {
            exceptionHandler(errorMessage)
          }
        }
      }
    }

    function scheduleProcessQueue(state) {
      if (
        errorOnUnhandledRejections &&
        !state.pending &&
        state.status === 2 &&
        !isStateExceptionHandled(state)
      ) {
        if (queueSize === 0 && checkQueue.length === 0) {
          nextTick(processChecks)
        }
        checkQueue.push(state)
      }
      if (state.processScheduled || !state.pending) return
      state.processScheduled = true
      ++queueSize
      nextTick(function () {
        processQueue(state)
      })
    }

    function resolvePromise(promise, val) {
      if (promise.$$state.status) return
      if (val === promise) {
        $$reject(
          promise,
          $qMinErr(
            'qcycle',
            "Expected promise to be resolved with value other than itself '{0}'",
            val
          )
        )
      } else {
        $$resolve(promise, val)
      }
    }

    function $$resolve(promise, val) {
      var then
      var done = false
      try {
        if (isObject(val) || isFunction(val)) then = val.then
        if (isFunction(then)) {
          promise.$$state.status = -1
          then.call(val, doResolve, doReject, doNotify)
        } else {
          promise.$$state.value = val
          promise.$$state.status = 1
          scheduleProcessQueue(promise.$$state)
        }
      } catch (e) {
        doReject(e)
      }

      function doResolve(val) {
        if (done) return
        done = true
        $$resolve(promise, val)
      }
      function doReject(val) {
        if (done) return
        done = true
        $$reject(promise, val)
      }
      function doNotify(progress) {
        notifyPromise(promise, progress)
      }
    }

    function rejectPromise(promise, reason) {
      if (promise.$$state.status) return
      $$reject(promise, reason)
    }

    function $$reject(promise, reason) {
      promise.$$state.value = reason
      promise.$$state.status = 2
      scheduleProcessQueue(promise.$$state)
    }

    function notifyPromise(promise, progress) {
      var callbacks = promise.$$state.pending

      if (promise.$$state.status <= 0 && callbacks && callbacks.length) {
        nextTick(function () {
          var callback, result
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0]
            callback = callbacks[i][3]
            try {
              notifyPromise(result, isFunction(callback) ? callback(progress) : progress)
            } catch (e) {
              exceptionHandler(e)
            }
          }
        })
      }
    }

    /**
     * @ngdoc method
     * @name $q#reject
     * @kind function
     *
     * @description
     * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
     * used to forward rejection in a chain of promises. If you are dealing with the last promise in
     * a promise chain, you don't need to worry about it.
     *
     * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
     * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
     * a promise error callback and you want to forward the error to the promise derived from the
     * current promise, you have to "rethrow" the error by returning a rejection constructed via
     * `reject`.
     *
     * ```js
     *   promiseB = promiseA.then(function(result) {
     *     // success: do something and resolve promiseB
     *     //          with the old or a new result
     *     return result;
     *   }, function(reason) {
     *     // error: handle the error if possible and
     *     //        resolve promiseB with newPromiseOrValue,
     *     //        otherwise forward the rejection to promiseB
     *     if (canHandle(reason)) {
     *      // handle the error and recover
     *      return newPromiseOrValue;
     *     }
     *     return $q.reject(reason);
     *   });
     * ```
     *
     * @param {*} reason Constant, message, exception or an object representing the rejection reason.
     * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
     */
    function reject(reason) {
      var result = new Promise()
      rejectPromise(result, reason)
      return result
    }

    function handleCallback(value, resolver, callback) {
      var callbackOutput = null
      try {
        if (isFunction(callback)) callbackOutput = callback()
      } catch (e) {
        return reject(e)
      }
      if (isPromiseLike(callbackOutput)) {
        return callbackOutput.then(function () {
          return resolver(value)
        }, reject)
      } else {
        return resolver(value)
      }
    }

    /**
     * @ngdoc method
     * @name $q#when
     * @kind function
     *
     * @description
     * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
     * This is useful when you are dealing with an object that might or might not be a promise, or if
     * the promise comes from a source that can't be trusted.
     *
     * @param {*} value Value or a promise
     * @param {Function=} successCallback
     * @param {Function=} errorCallback
     * @param {Function=} progressCallback
     * @returns {Promise} Returns a promise of the passed value or promise
     */

    function when(value, callback, errback, progressBack) {
      var result = new Promise()
      resolvePromise(result, value)
      return result.then(callback, errback, progressBack)
    }

    /**
     * @ngdoc method
     * @name $q#resolve
     * @kind function
     *
     * @description
     * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
     *
     * @param {*} value Value or a promise
     * @param {Function=} successCallback
     * @param {Function=} errorCallback
     * @param {Function=} progressCallback
     * @returns {Promise} Returns a promise of the passed value or promise
     */
    var resolve = when

    /**
     * @ngdoc method
     * @name $q#all
     * @kind function
     *
     * @description
     * Combines multiple promises into a single promise that is resolved when all of the input
     * promises are resolved.
     *
     * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
     * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
     *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
     *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
     *   with the same rejection value.
     */

    function all(promises) {
      var result = new Promise(),
        counter = 0,
        results = isArray(promises) ? [] : {}

      forEach(promises, function (promise, key) {
        counter++
        when(promise).then(
          function (value) {
            results[key] = value
            if (!--counter) resolvePromise(result, results)
          },
          function (reason) {
            rejectPromise(result, reason)
          }
        )
      })

      if (counter === 0) {
        resolvePromise(result, results)
      }

      return result
    }

    /**
     * @ngdoc method
     * @name $q#race
     * @kind function
     *
     * @description
     * Returns a promise that resolves or rejects as soon as one of those promises
     * resolves or rejects, with the value or reason from that promise.
     *
     * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
     * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
     * resolves or rejects, with the value or reason from that promise.
     */

    function race(promises) {
      var deferred = defer()

      forEach(promises, function (promise) {
        when(promise).then(deferred.resolve, deferred.reject)
      })

      return deferred.promise
    }

    function $Q(resolver) {
      if (!isFunction(resolver)) {
        throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver)
      }

      var promise = new Promise()

      function resolveFn(value) {
        resolvePromise(promise, value)
      }

      function rejectFn(reason) {
        rejectPromise(promise, reason)
      }

      resolver(resolveFn, rejectFn)

      return promise
    }

    // Let's make the instanceof operator work for promises, so that
    // `new $q(fn) instanceof $q` would evaluate to true.
    $Q.prototype = Promise.prototype

    $Q.defer = defer
    $Q.reject = reject
    $Q.when = when
    $Q.resolve = resolve
    $Q.all = all
    $Q.race = race

    return $Q
  }

  function isStateExceptionHandled(state) {
    return !!state.pur
  }
  function markQStateExceptionHandled(state) {
    state.pur = true
  }
  function markQExceptionHandled(q) {
    // Built-in `$q` promises will always have a `$$state` property. This check is to allow
    // overwriting `$q` with a different promise library (e.g. Bluebird + angular-bluebird-promises).
    // (Currently, this is the only method that might be called with a promise, even if it is not
    // created by the built-in `$q`.)
    if (q.$$state) {
      markQStateExceptionHandled(q.$$state)
    }
  }

  /** @this */
  function $$RAFProvider() {
    //rAF
    this.$get = [
      '$window',
      '$timeout',
      function ($window, $timeout) {
        var requestAnimationFrame =
          $window.requestAnimationFrame || $window.webkitRequestAnimationFrame

        var cancelAnimationFrame =
          $window.cancelAnimationFrame ||
          $window.webkitCancelAnimationFrame ||
          $window.webkitCancelRequestAnimationFrame

        var rafSupported = !!requestAnimationFrame
        var raf = rafSupported
          ? function (fn) {
              var id = requestAnimationFrame(fn)
              return function () {
                cancelAnimationFrame(id)
              }
            }
          : function (fn) {
              var timer = $timeout(fn, 16.66, false) // 1000 / 60 = 16.666
              return function () {
                $timeout.cancel(timer)
              }
            }

        raf.supported = rafSupported

        return raf
      },
    ]
  }

  /**
   * DESIGN NOTES
   *
   * The design decisions behind the scope are heavily favored for speed and memory consumption.
   *
   * The typical use of scope is to watch the expressions, which most of the time return the same
   * value as last time so we optimize the operation.
   *
   * Closures construction is expensive in terms of speed as well as memory:
   *   - No closures, instead use prototypical inheritance for API
   *   - Internal state needs to be stored on scope directly, which means that private state is
   *     exposed as $$____ properties
   *
   * Loop operations are optimized by using while(count--) { ... }
   *   - This means that in order to keep the same order of execution as addition we have to add
   *     items to the array at the beginning (unshift) instead of at the end (push)
   *
   * Child scopes are created and removed often
   *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
   *
   * There are fewer watches than observers. This is why you don't want the observer to be implemented
   * in the same way as watch. Watch requires return of the initialization function which is expensive
   * to construct.
   */

  /**
   * @ngdoc provider
   * @name $rootScopeProvider
   * @description
   *
   * Provider for the $rootScope service.
   */

  /**
   * @ngdoc method
   * @name $rootScopeProvider#digestTtl
   * @description
   *
   * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
   * assuming that the model is unstable.
   *
   * The current default is 10 iterations.
   *
   * In complex applications it's possible that the dependencies between `$watch`s will result in
   * several digest iterations. However if an application needs more than the default 10 digest
   * iterations for its model to stabilize then you should investigate what is causing the model to
   * continuously change during the digest.
   *
   * Increasing the TTL could have performance implications, so you should not change it without
   * proper justification.
   *
   * @param {number} limit The number of digest iterations.
   */

  /**
   * @ngdoc service
   * @name $rootScope
   * @this
   *
   * @description
   *
   * Every application has a single root {@link ng.$rootScope.Scope scope}.
   * All other scopes are descendant scopes of the root scope. Scopes provide separation
   * between the model and the view, via a mechanism for watching the model for changes.
   * They also provide event emission/broadcast and subscription facility. See the
   * {@link guide/scope developer guide on scopes}.
   */
  function $RootScopeProvider() {
    var TTL = 10
    var $rootScopeMinErr = minErr('$rootScope')
    var lastDirtyWatch = null
    var applyAsyncId = null

    this.digestTtl = function (value) {
      if (arguments.length) {
        TTL = value
      }
      return TTL
    }

    function createChildScopeClass(parent) {
      function ChildScope() {
        this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null
        this.$$listeners = {}
        this.$$listenerCount = {}
        this.$$watchersCount = 0
        this.$id = nextUid()
        this.$$ChildScope = null
        this.$$suspended = false
      }
      ChildScope.prototype = parent
      return ChildScope
    }

    this.$get = [
      '$exceptionHandler',
      '$parse',
      '$browser',
      function ($exceptionHandler, $parse, $browser) {
        function destroyChildScope($event) {
          $event.currentScope.$$destroyed = true
        }

        function cleanUpScope($scope) {
          // Support: IE 9 only
          if (msie === 9) {
            // There is a memory leak in IE9 if all child scopes are not disconnected
            // completely when a scope is destroyed. So this code will recurse up through
            // all this scopes children
            //
            // See issue https://github.com/angular/angular.js/issues/10706
            if ($scope.$$childHead) {
              cleanUpScope($scope.$$childHead)
            }
            if ($scope.$$nextSibling) {
              cleanUpScope($scope.$$nextSibling)
            }
          }

          // The code below works around IE9 and V8's memory leaks
          //
          // See:
          // - https://code.google.com/p/v8/issues/detail?id=2073#c26
          // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
          // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

          $scope.$parent =
            $scope.$$nextSibling =
            $scope.$$prevSibling =
            $scope.$$childHead =
            $scope.$$childTail =
            $scope.$root =
            $scope.$$watchers =
              null
        }

        /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
     * an in-depth introduction and usage examples.
     *
     *
     * ## Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
        function Scope() {
          this.$id = nextUid()
          this.$$phase =
            this.$parent =
            this.$$watchers =
            this.$$nextSibling =
            this.$$prevSibling =
            this.$$childHead =
            this.$$childTail =
              null
          this.$root = this
          this.$$destroyed = false
          this.$$suspended = false
          this.$$listeners = {}
          this.$$listenerCount = {}
          this.$$watchersCount = 0
          this.$$isolateBindings = null
        }

        /**
         * @ngdoc property
         * @name $rootScope.Scope#$id
         *
         * @description
         * Unique scope ID (monotonically increasing) useful for debugging.
         */

        /**
         * @ngdoc property
         * @name $rootScope.Scope#$parent
         *
         * @description
         * Reference to the parent scope.
         */

        /**
         * @ngdoc property
         * @name $rootScope.Scope#$root
         *
         * @description
         * Reference to the root scope.
         */

        Scope.prototype = {
          constructor: Scope,
          /**
           * @ngdoc method
           * @name $rootScope.Scope#$new
           * @kind function
           *
           * @description
           * Creates a new child {@link ng.$rootScope.Scope scope}.
           *
           * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
           * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
           *
           * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
           * desired for the scope and its child scopes to be permanently detached from the parent and
           * thus stop participating in model change detection and listener notification by invoking.
           *
           * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
           *         parent scope. The scope is isolated, as it can not see parent scope properties.
           *         When creating widgets, it is useful for the widget to not accidentally read parent
           *         state.
           *
           * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
           *                              of the newly created scope. Defaults to `this` scope if not provided.
           *                              This is used when creating a transclude scope to correctly place it
           *                              in the scope hierarchy while maintaining the correct prototypical
           *                              inheritance.
           *
           * @returns {Object} The newly created child scope.
           *
           */
          $new: function (isolate, parent) {
            var child

            parent = parent || this

            if (isolate) {
              child = new Scope()
              child.$root = this.$root
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$ChildScope) {
                this.$$ChildScope = createChildScopeClass(this)
              }
              child = new this.$$ChildScope()
            }
            child.$parent = parent
            child.$$prevSibling = parent.$$childTail
            if (parent.$$childHead) {
              parent.$$childTail.$$nextSibling = child
              parent.$$childTail = child
            } else {
              parent.$$childHead = parent.$$childTail = child
            }

            // When the new scope is not isolated or we inherit from `this`, and
            // the parent scope is destroyed, the property `$$destroyed` is inherited
            // prototypically. In all other cases, this property needs to be set
            // when the parent scope is destroyed.
            // The listener needs to be added after the parent is set
            if (isolate || parent !== this) child.$on('$destroy', destroyChildScope)

            return child
          },

          /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
       *   its value when executed multiple times with the same input because it may be executed multiple
       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - This should not be used to watch for changes in objects that are (or contain)
       *   [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Be prepared for
       * multiple calls to your `watchExpression` because it will execute multiple times in a
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * @example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
          $watch: function (watchExp, listener, objectEquality, prettyPrintExpression) {
            var get = $parse(watchExp)
            var fn = isFunction(listener) ? listener : noop

            if (get.$$watchDelegate) {
              return get.$$watchDelegate(this, fn, objectEquality, get, watchExp)
            }
            var scope = this,
              array = scope.$$watchers,
              watcher = {
                fn: fn,
                last: initWatchVal,
                get: get,
                exp: prettyPrintExpression || watchExp,
                eq: !!objectEquality,
              }

            lastDirtyWatch = null

            if (!array) {
              array = scope.$$watchers = []
              array.$$digestWatchIndex = -1
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher)
            array.$$digestWatchIndex++
            incrementWatchersCount(this, 1)

            return function deregisterWatch() {
              var index = arrayRemove(array, watcher)
              if (index >= 0) {
                incrementWatchersCount(scope, -1)
                if (index < array.$$digestWatchIndex) {
                  array.$$digestWatchIndex--
                }
              }
              lastDirtyWatch = null
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$watchGroup
           * @kind function
           *
           * @description
           * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
           * If any one expression in the collection changes the `listener` is executed.
           *
           * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
           *   values are examined for changes on every call to `$digest`.
           * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
           *
           * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
           * watched using {@link ng.$rootScope.Scope#$watch $watch()}
           *
           * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
           *    expression in `watchExpressions` changes
           *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
           *    those of `watchExpression`
           *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
           *    those of `watchExpression`
           *    The `scope` refers to the current scope.
           * @returns {function()} Returns a de-registration function for all listeners.
           */
          $watchGroup: function (watchExpressions, listener) {
            var oldValues = new Array(watchExpressions.length)
            var newValues = new Array(watchExpressions.length)
            var deregisterFns = []
            var self = this
            var changeReactionScheduled = false
            var firstRun = true

            if (!watchExpressions.length) {
              // No expressions means we call the listener ASAP
              var shouldCall = true
              self.$evalAsync(function () {
                if (shouldCall) listener(newValues, newValues, self)
              })
              return function deregisterWatchGroup() {
                shouldCall = false
              }
            }

            if (watchExpressions.length === 1) {
              // Special case size of one
              return this.$watch(
                watchExpressions[0],
                function watchGroupAction(value, oldValue, scope) {
                  newValues[0] = value
                  oldValues[0] = oldValue
                  listener(newValues, value === oldValue ? newValues : oldValues, scope)
                }
              )
            }

            forEach(watchExpressions, function (expr, i) {
              var unwatchFn = self.$watch(expr, function watchGroupSubAction(value) {
                newValues[i] = value
                if (!changeReactionScheduled) {
                  changeReactionScheduled = true
                  self.$evalAsync(watchGroupAction)
                }
              })
              deregisterFns.push(unwatchFn)
            })

            function watchGroupAction() {
              changeReactionScheduled = false

              try {
                if (firstRun) {
                  firstRun = false
                  listener(newValues, newValues, self)
                } else {
                  listener(newValues, oldValues, self)
                }
              } finally {
                for (var i = 0; i < watchExpressions.length; i++) {
                  oldValues[i] = newValues[i]
                }
              }
            }

            return function deregisterWatchGroup() {
              while (deregisterFns.length) {
                deregisterFns.shift()()
              }
            }
          },

          /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * @example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
          $watchCollection: function (obj, listener) {
            // Mark the interceptor as
            // ... $$pure when literal since the instance will change when any input changes
            $watchCollectionInterceptor.$$pure = $parse(obj).literal
            // ... $stateful when non-literal since we must read the state of the collection
            $watchCollectionInterceptor.$stateful = !$watchCollectionInterceptor.$$pure

            var self = this
            // the current value, updated on each dirty-check run
            var newValue
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = listener.length > 1
            var changeDetected = 0
            var changeDetector = $parse(obj, $watchCollectionInterceptor)
            var internalArray = []
            var internalObject = {}
            var initRun = true
            var oldLength = 0

            function $watchCollectionInterceptor(_value) {
              newValue = _value
              var newLength, key, bothNaN, newItem, oldItem

              // If the new value is undefined, then return undefined as the watch may be a one-time watch
              if (isUndefined(newValue)) return

              if (!isObject(newValue)) {
                // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue
                  changeDetected++
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray
                  oldLength = oldValue.length = 0
                  changeDetected++
                }

                newLength = newValue.length

                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++
                  oldValue.length = oldLength = newLength
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  oldItem = oldValue[i]
                  newItem = newValue[i]

                  // eslint-disable-next-line no-self-compare
                  bothNaN = oldItem !== oldItem && newItem !== newItem
                  if (!bothNaN && oldItem !== newItem) {
                    changeDetected++
                    oldValue[i] = newItem
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {}
                  oldLength = 0
                  changeDetected++
                }
                // copy the items to oldValue and look for changes.
                newLength = 0
                for (key in newValue) {
                  if (hasOwnProperty.call(newValue, key)) {
                    newLength++
                    newItem = newValue[key]
                    oldItem = oldValue[key]

                    if (key in oldValue) {
                      // eslint-disable-next-line no-self-compare
                      bothNaN = oldItem !== oldItem && newItem !== newItem
                      if (!bothNaN && oldItem !== newItem) {
                        changeDetected++
                        oldValue[key] = newItem
                      }
                    } else {
                      oldLength++
                      oldValue[key] = newItem
                      changeDetected++
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++
                  for (key in oldValue) {
                    if (!hasOwnProperty.call(newValue, key)) {
                      oldLength--
                      delete oldValue[key]
                    }
                  }
                }
              }
              return changeDetected
            }

            function $watchCollectionAction() {
              if (initRun) {
                initRun = false
                listener(newValue, newValue, self)
              } else {
                listener(newValue, veryOldValue, self)
              }

              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length)
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i]
                  }
                } else {
                  // if object
                  veryOldValue = {}
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key]
                    }
                  }
                }
              }
            }

            return this.$watch(changeDetector, $watchCollectionAction)
          },

          /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * @example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
          $digest: function () {
            var watch,
              value,
              last,
              fn,
              get,
              watchers,
              dirty,
              ttl = TTL,
              next,
              current,
              target = asyncQueue.length ? $rootScope : this,
              watchLog = [],
              logIdx,
              asyncTask

            beginPhase('$digest')
            // Check for changes to browser url that happened in sync before the call to $digest
            $browser.$$checkUrlChange()

            if (this === $rootScope && applyAsyncId !== null) {
              // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
              // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
              $browser.defer.cancel(applyAsyncId)
              flushApplyAsync()
            }

            lastDirtyWatch = null

            do {
              // "while dirty" loop
              dirty = false
              current = target

              // It's safe for asyncQueuePosition to be a local variable here because this loop can't
              // be reentered recursively. Calling $digest from a function passed to $evalAsync would
              // lead to a '$digest already in progress' error.
              for (
                var asyncQueuePosition = 0;
                asyncQueuePosition < asyncQueue.length;
                asyncQueuePosition++
              ) {
                try {
                  asyncTask = asyncQueue[asyncQueuePosition]
                  fn = asyncTask.fn
                  fn(asyncTask.scope, asyncTask.locals)
                } catch (e) {
                  $exceptionHandler(e)
                }
                lastDirtyWatch = null
              }
              asyncQueue.length = 0

              traverseScopesLoop: do {
                // "traverse the scopes" loop
                if ((watchers = !current.$$suspended && current.$$watchers)) {
                  // process our watches
                  watchers.$$digestWatchIndex = watchers.length
                  while (watchers.$$digestWatchIndex--) {
                    try {
                      watch = watchers[watchers.$$digestWatchIndex]
                      // Most common watches are on primitives, in which case we can short
                      // circuit it with === operator, only when === fails do we use .equals
                      if (watch) {
                        get = watch.get
                        if (
                          (value = get(current)) !== (last = watch.last) &&
                          !(watch.eq
                            ? equals(value, last)
                            : isNumberNaN(value) && isNumberNaN(last))
                        ) {
                          dirty = true
                          lastDirtyWatch = watch
                          watch.last = watch.eq ? copy(value, null) : value
                          fn = watch.fn
                          fn(value, last === initWatchVal ? value : last, current)
                          if (ttl < 5) {
                            logIdx = 4 - ttl
                            if (!watchLog[logIdx]) watchLog[logIdx] = []
                            watchLog[logIdx].push({
                              msg: isFunction(watch.exp)
                                ? 'fn: ' + (watch.exp.name || watch.exp.toString())
                                : watch.exp,
                              newVal: value,
                              oldVal: last,
                            })
                          }
                        } else if (watch === lastDirtyWatch) {
                          // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                          // have already been tested.
                          dirty = false
                          break traverseScopesLoop
                        }
                      }
                    } catch (e) {
                      $exceptionHandler(e)
                    }
                  }
                }

                // Insanity Warning: scope depth-first traversal
                // yes, this code is a bit crazy, but it works and we have tests to prove it!
                // this piece should be kept in sync with the traversal in $broadcast
                // (though it differs due to having the extra check for $$suspended and does not
                // check $$listenerCount)
                if (
                  !(next =
                    (!current.$$suspended && current.$$watchersCount && current.$$childHead) ||
                    (current !== target && current.$$nextSibling))
                ) {
                  while (current !== target && !(next = current.$$nextSibling)) {
                    current = current.$parent
                  }
                }
              } while ((current = next))

              // `break traverseScopesLoop;` takes us to here

              if ((dirty || asyncQueue.length) && !ttl--) {
                clearPhase()
                throw $rootScopeMinErr(
                  'infdig',
                  '{0} $digest() iterations reached. Aborting!\n' +
                    'Watchers fired in the last 5 iterations: {1}',
                  TTL,
                  watchLog
                )
              }
            } while (dirty || asyncQueue.length)

            clearPhase()

            // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
            while (postDigestQueuePosition < postDigestQueue.length) {
              try {
                postDigestQueue[postDigestQueuePosition++]()
              } catch (e) {
                $exceptionHandler(e)
              }
            }
            postDigestQueue.length = postDigestQueuePosition = 0

            // Check for changes to browser url that happened during the $digest
            // (for which no event is fired; e.g. via `history.pushState()`)
            $browser.$$checkUrlChange()
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$suspend
           * @kind function
           *
           * @description
           * Suspend watchers of this scope subtree so that they will not be invoked during digest.
           *
           * This can be used to optimize your application when you know that running those watchers
           * is redundant.
           *
           * **Warning**
           *
           * Suspending scopes from the digest cycle can have unwanted and difficult to debug results.
           * Only use this approach if you are confident that you know what you are doing and have
           * ample tests to ensure that bindings get updated as you expect.
           *
           * Some of the things to consider are:
           *
           * * Any external event on a directive/component will not trigger a digest while the hosting
           *   scope is suspended - even if the event handler calls `$apply()` or `$rootScope.$digest()`.
           * * Transcluded content exists on a scope that inherits from outside a directive but exists
           *   as a child of the directive's containing scope. If the containing scope is suspended the
           *   transcluded scope will also be suspended, even if the scope from which the transcluded
           *   scope inherits is not suspended.
           * * Multiple directives trying to manage the suspended status of a scope can confuse each other:
           *    * A call to `$suspend()` on an already suspended scope is a no-op.
           *    * A call to `$resume()` on a non-suspended scope is a no-op.
           *    * If two directives suspend a scope, then one of them resumes the scope, the scope will no
           *      longer be suspended. This could result in the other directive believing a scope to be
           *      suspended when it is not.
           * * If a parent scope is suspended then all its descendants will be also excluded from future
           *   digests whether or not they have been suspended themselves. Note that this also applies to
           *   isolate child scopes.
           * * Calling `$digest()` directly on a descendant of a suspended scope will still run the watchers
           *   for that scope and its descendants. When digesting we only check whether the current scope is
           *   locally suspended, rather than checking whether it has a suspended ancestor.
           * * Calling `$resume()` on a scope that has a suspended ancestor will not cause the scope to be
           *   included in future digests until all its ancestors have been resumed.
           * * Resolved promises, e.g. from explicit `$q` deferreds and `$http` calls, trigger `$apply()`
           *   against the `$rootScope` and so will still trigger a global digest even if the promise was
           *   initiated by a component that lives on a suspended scope.
           */
          $suspend: function () {
            this.$$suspended = true
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$isSuspended
           * @kind function
           *
           * @description
           * Call this method to determine if this scope has been explicitly suspended. It will not
           * tell you whether an ancestor has been suspended.
           * To determine if this scope will be excluded from a digest triggered at the $rootScope,
           * for example, you must check all its ancestors:
           *
           * ```
           * function isExcludedFromDigest(scope) {
           *   while(scope) {
           *     if (scope.$isSuspended()) return true;
           *     scope = scope.$parent;
           *   }
           *   return false;
           * ```
           *
           * Be aware that a scope may not be included in digests if it has a suspended ancestor,
           * even if `$isSuspended()` returns false.
           *
           * @returns true if the current scope has been suspended.
           */
          $isSuspended: function () {
            return this.$$suspended
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$resume
           * @kind function
           *
           * @description
           * Resume watchers of this scope subtree in case it was suspended.
           *
           * See {@link $rootScope.Scope#$suspend} for information about the dangers of using this approach.
           */
          $resume: function () {
            this.$$suspended = false
          },

          /**
           * @ngdoc event
           * @name $rootScope.Scope#$destroy
           * @eventType broadcast on scope being destroyed
           *
           * @description
           * Broadcasted when a scope and its children are being destroyed.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$destroy
           * @kind function
           *
           * @description
           * Removes the current scope (and all of its children) from the parent scope. Removal implies
           * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
           * propagate to the current scope and its children. Removal also implies that the current
           * scope is eligible for garbage collection.
           *
           * The `$destroy()` is usually used by directives such as
           * {@link ng.directive:ngRepeat ngRepeat} for managing the
           * unrolling of the loop.
           *
           * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
           * Application code can register a `$destroy` event handler that will give it a chance to
           * perform any necessary cleanup.
           *
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
           * clean up DOM bindings before an element is removed from the DOM.
           */
          $destroy: function () {
            // We can't destroy a scope that has been already destroyed.
            if (this.$$destroyed) return
            var parent = this.$parent

            this.$broadcast('$destroy')
            this.$$destroyed = true

            if (this === $rootScope) {
              //Remove handlers attached to window when $rootScope is removed
              $browser.$$applicationDestroyed()
            }

            incrementWatchersCount(this, -this.$$watchersCount)
            for (var eventName in this.$$listenerCount) {
              decrementListenerCount(this, this.$$listenerCount[eventName], eventName)
            }

            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling
            if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling
            if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling
            if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling

            // Disable listeners, watchers and apply/digest methods
            this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop
            this.$on =
              this.$watch =
              this.$watchGroup =
                function () {
                  return noop
                }
            this.$$listeners = {}

            // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
            this.$$nextSibling = null
            cleanUpScope(this)
          },

          /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating AngularJS
       * expressions.
       *
       * @example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An AngularJS expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
          $eval: function (expr, locals) {
            return $parse(expr)(this, locals)
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$evalAsync
           * @kind function
           *
           * @description
           * Executes the expression on the current scope at a later point in time.
           *
           * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
           * that:
           *
           *   - it will execute after the function that scheduled the evaluation (preferably before DOM
           *     rendering).
           *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
           *     `expression` execution.
           *
           * Any exceptions from the execution of the expression are forwarded to the
           * {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
           * will be scheduled. However, it is encouraged to always call code that changes the model
           * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
           *
           * @param {(string|function())=} expression An AngularJS expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with the current `scope` parameter.
           *
           * @param {(object)=} locals Local variables object, useful for overriding values in scope.
           */
          $evalAsync: function (expr, locals) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !asyncQueue.length) {
              $browser.defer(
                function () {
                  if (asyncQueue.length) {
                    $rootScope.$digest()
                  }
                },
                null,
                '$evalAsync'
              )
            }

            asyncQueue.push({ scope: this, fn: $parse(expr), locals: locals })
          },

          $$postDigest: function (fn) {
            postDigestQueue.push(fn)
          },

          /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in AngularJS from outside of the AngularJS
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the AngularJS framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * **Life cycle: Pseudo-Code of `$apply()`**
       *
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An AngularJS expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
          $apply: function (expr) {
            try {
              beginPhase('$apply')
              try {
                return this.$eval(expr)
              } finally {
                clearPhase()
              }
            } catch (e) {
              $exceptionHandler(e)
            } finally {
              try {
                $rootScope.$digest()
              } catch (e) {
                $exceptionHandler(e)
                // eslint-disable-next-line no-unsafe-finally
                throw e
              }
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$applyAsync
           * @kind function
           *
           * @description
           * Schedule the invocation of $apply to occur at a later time. The actual time difference
           * varies across browsers, but is typically around ~10 milliseconds.
           *
           * This can be used to queue up multiple expressions which need to be evaluated in the same
           * digest.
           *
           * @param {(string|function())=} exp An AngularJS expression to be executed.
           *
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
           *    - `function(scope)`: execute the function with current `scope` parameter.
           */
          $applyAsync: function (expr) {
            var scope = this
            if (expr) {
              applyAsyncQueue.push($applyAsyncExpression)
            }
            expr = $parse(expr)
            scheduleApplyAsync()

            function $applyAsyncExpression() {
              scope.$eval(expr)
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$on
           * @kind function
           *
           * @description
           * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
           * discussion of event life cycle.
           *
           * The event listener function format is: `function(event, args...)`. The `event` object
           * passed into the listener has the following attributes:
           *
           *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
           *     `$broadcast`-ed.
           *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
           *     event propagates through the scope hierarchy, this property is set to null.
           *   - `name` - `{string}`: name of the event.
           *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
           *     further event propagation (available only for events that were `$emit`-ed).
           *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
           *     to true.
           *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
           *
           * @param {string} name Event name to listen on.
           * @param {function(event, ...args)} listener Function to call when the event is emitted.
           * @returns {function()} Returns a deregistration function for this listener.
           */
          $on: function (name, listener) {
            var namedListeners = this.$$listeners[name]
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = []
            }
            namedListeners.push(listener)

            var current = this
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0
              }
              current.$$listenerCount[name]++
            } while ((current = current.$parent))

            var self = this
            return function () {
              var indexOfListener = namedListeners.indexOf(listener)
              if (indexOfListener !== -1) {
                // Use delete in the hope of the browser deallocating the memory for the array entry,
                // while not shifting the array indexes of other listeners.
                // See issue https://github.com/angular/angular.js/issues/16135
                delete namedListeners[indexOfListener]
                decrementListenerCount(self, 1, name)
              }
            }
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$emit
           * @kind function
           *
           * @description
           * Dispatches an event `name` upwards through the scope hierarchy notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$emit` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event traverses upwards toward the root scope and calls all
           * registered listeners along the way. The event will stop propagating if one of the listeners
           * cancels it.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to emit.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
           */
          $emit: function (name, args) {
            var empty = [],
              namedListeners,
              scope = this,
              stopPropagation = false,
              event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true
                },
                preventDefault: function () {
                  event.defaultPrevented = true
                },
                defaultPrevented: false,
              },
              listenerArgs = concat([event], arguments, 1),
              i,
              length

            do {
              namedListeners = scope.$$listeners[name] || empty
              event.currentScope = scope
              for (i = 0, length = namedListeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1)
                  i--
                  length--
                  continue
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs)
                } catch (e) {
                  $exceptionHandler(e)
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation) {
                break
              }
              //traverse upwards
              scope = scope.$parent
            } while (scope)

            event.currentScope = null

            return event
          },

          /**
           * @ngdoc method
           * @name $rootScope.Scope#$broadcast
           * @kind function
           *
           * @description
           * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
           * registered {@link ng.$rootScope.Scope#$on} listeners.
           *
           * The event life cycle starts at the scope on which `$broadcast` was called. All
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
           * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
           * scope and calls all registered listeners along the way. The event cannot be canceled.
           *
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
           *
           * @param {string} name Event name to broadcast.
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
           * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
           */
          $broadcast: function (name, args) {
            var target = this,
              current = target,
              next = target,
              event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true
                },
                defaultPrevented: false,
              }

            if (!target.$$listenerCount[name]) return event

            var listenerArgs = concat([event], arguments, 1),
              listeners,
              i,
              length

            //down while you can, then up and next sibling or up and next sibling until back at root
            while ((current = next)) {
              event.currentScope = current
              listeners = current.$$listeners[name] || []
              for (i = 0, length = listeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1)
                  i--
                  length--
                  continue
                }

                try {
                  listeners[i].apply(null, listenerArgs)
                } catch (e) {
                  $exceptionHandler(e)
                }
              }

              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount and
              // does not check $$suspended)
              if (
                !(next =
                  (current.$$listenerCount[name] && current.$$childHead) ||
                  (current !== target && current.$$nextSibling))
              ) {
                while (current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent
                }
              }
            }

            event.currentScope = null
            return event
          },
        }

        var $rootScope = new Scope()

        //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
        var asyncQueue = ($rootScope.$$asyncQueue = [])
        var postDigestQueue = ($rootScope.$$postDigestQueue = [])
        var applyAsyncQueue = ($rootScope.$$applyAsyncQueue = [])

        var postDigestQueuePosition = 0

        return $rootScope

        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase)
          }

          $rootScope.$$phase = phase
        }

        function clearPhase() {
          $rootScope.$$phase = null
        }

        function incrementWatchersCount(current, count) {
          do {
            current.$$watchersCount += count
          } while ((current = current.$parent))
        }

        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count

            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name]
            }
          } while ((current = current.$parent))
        }

        /**
         * function used as an initial value for watchers.
         * because it's unique we can easily tell it apart from other values
         */
        function initWatchVal() {}

        function flushApplyAsync() {
          while (applyAsyncQueue.length) {
            try {
              applyAsyncQueue.shift()()
            } catch (e) {
              $exceptionHandler(e)
            }
          }
          applyAsyncId = null
        }

        function scheduleApplyAsync() {
          if (applyAsyncId === null) {
            applyAsyncId = $browser.defer(
              function () {
                $rootScope.$apply(flushApplyAsync)
              },
              null,
              '$applyAsync'
            )
          }
        }
      },
    ]
  }

  /**
   * @ngdoc service
   * @name $rootElement
   *
   * @description
   * The root element of AngularJS application. This is either the element where {@link
   * ng.directive:ngApp ngApp} was declared or the element passed into
   * {@link angular.bootstrap}. The element represents the root element of application. It is also the
   * location where the application's {@link auto.$injector $injector} service gets
   * published, and can be retrieved using `$rootElement.injector()`.
   */

  // the implementation is in angular.bootstrap

  /**
   * @this
   * @description
   * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
   */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationTrustedUrlList = /^\s*(https?|s?ftp|mailto|tel|file):/,
      imgSrcSanitizationTrustedUrlList = /^\s*((https?|ftp|file|blob):|data:image\/)/

    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for determining trusted safe
     * urls during a[href] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via HTML anchor links.
     *
     * Any url due to be assigned to an `a[href]` attribute via interpolation is marked as requiring
     * the $sce.URL security context. When interpolation occurs a call is made to `$sce.trustAsUrl(url)`
     * which in turn may call `$$sanitizeUri(url, isMedia)` to sanitize the potentially malicious URL.
     *
     * If the URL matches the `aHrefSanitizationTrustedUrlList` regular expression, it is returned unchanged.
     *
     * If there is no match the URL is returned prefixed with `'unsafe:'` to ensure that when it is written
     * to the DOM it is inactive and potentially malicious code will not be executed.
     *
     * @param {RegExp=} regexp New regexp to trust urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.aHrefSanitizationTrustedUrlList = function (regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationTrustedUrlList = regexp
        return this
      }
      return aHrefSanitizationTrustedUrlList
    }

    /**
     * @description
     * Retrieves or overrides the default regular expression that is used for determining trusted safe
     * urls during img[src] sanitization.
     *
     * The sanitization is a security measure aimed at prevent XSS attacks via HTML image src links.
     *
     * Any URL due to be assigned to an `img[src]` attribute via interpolation is marked as requiring
     * the $sce.MEDIA_URL security context. When interpolation occurs a call is made to
     * `$sce.trustAsMediaUrl(url)` which in turn may call `$$sanitizeUri(url, isMedia)` to sanitize
     * the potentially malicious URL.
     *
     * If the URL matches the `imgSrcSanitizationTrustedUrlList` regular expression, it is returned
     * unchanged.
     *
     * If there is no match the URL is returned prefixed with `'unsafe:'` to ensure that when it is written
     * to the DOM it is inactive and potentially malicious code will not be executed.
     *
     * @param {RegExp=} regexp New regexp to trust urls with.
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
     *    chaining otherwise.
     */
    this.imgSrcSanitizationTrustedUrlList = function (regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationTrustedUrlList = regexp
        return this
      }
      return imgSrcSanitizationTrustedUrlList
    }

    this.$get = function () {
      return function sanitizeUri(uri, isMediaUrl) {
        // if (!uri) return uri;
        var regex = isMediaUrl ? imgSrcSanitizationTrustedUrlList : aHrefSanitizationTrustedUrlList
        var normalizedVal = urlResolve(uri && uri.trim()).href
        if (normalizedVal !== '' && !normalizedVal.match(regex)) {
          return 'unsafe:' + normalizedVal
        }
        return uri
      }
    }
  }

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  /* exported $SceProvider, $SceDelegateProvider */

  var $sceMinErr = minErr('$sce')

  var SCE_CONTEXTS = {
    // HTML is used when there's HTML rendered (e.g. ng-bind-html, iframe srcdoc binding).
    HTML: 'html',

    // Style statements or stylesheets. Currently unused in AngularJS.
    CSS: 'css',

    // An URL used in a context where it refers to the source of media, which are not expected to be run
    // as scripts, such as an image, audio, video, etc.
    MEDIA_URL: 'mediaUrl',

    // An URL used in a context where it does not refer to a resource that loads code.
    // A value that can be trusted as a URL can also trusted as a MEDIA_URL.
    URL: 'url',

    // RESOURCE_URL is a subtype of URL used where the referred-to resource could be interpreted as
    // code. (e.g. ng-include, script src binding, templateUrl)
    // A value that can be trusted as a RESOURCE_URL, can also trusted as a URL and a MEDIA_URL.
    RESOURCE_URL: 'resourceUrl',

    // Script. Currently unused in AngularJS.
    JS: 'js',
  }

  // Helper functions follow.

  var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g

  function snakeToCamel(name) {
    return name.replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace)
  }

  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher)
      }
      matcher = escapeForRegexp(matcher)
        .replace(/\\\*\\\*/g, '.*')
        .replace(/\\\*/g, '[^:/.?&;]*')
      return new RegExp('^' + matcher + '$')
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$')
    } else {
      throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects')
    }
  }

  function adjustMatchers(matchers) {
    var adjustedMatchers = []
    if (isDefined(matchers)) {
      forEach(matchers, function (matcher) {
        adjustedMatchers.push(adjustMatcher(matcher))
      })
    }
    return adjustedMatchers
  }

  /**
   * @ngdoc service
   * @name $sceDelegate
   * @kind function
   *
   * @description
   *
   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
   * Contextual Escaping (SCE)} services to AngularJS.
   *
   * For an overview of this service and the functionnality it provides in AngularJS, see the main
   * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how
   * SCE works in their application, which shouldn't be needed in most cases.
   *
   * <div class="alert alert-danger">
   * AngularJS strongly relies on contextual escaping for the security of bindings: disabling or
   * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,
   * changes to this service will also influence users, so be extra careful and document your changes.
   * </div>
   *
   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
   * work because `$sce` delegates to `$sceDelegate` for these operations.
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
   *
   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
   * can override it completely to change the behavior of `$sce`, the common case would
   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
   * your own trusted and banned resource lists for trusting URLs used for loading AngularJS resources
   * such as templates.  Refer {@link ng.$sceDelegateProvider#trustedResourceUrlList
   * $sceDelegateProvider.trustedResourceUrlList} and {@link
   * ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList}
   */

  /**
   * @ngdoc provider
   * @name $sceDelegateProvider
   * @this
   *
   * @description
   *
   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
   * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.
   *
   * The `$sceDelegateProvider` allows one to get/set the `trustedResourceUrlList` and
   * `bannedResourceUrlList` used to ensure that the URLs used for sourcing AngularJS templates and
   * other script-running URLs are safe (all places that use the `$sce.RESOURCE_URL` context). See
   * {@link ng.$sceDelegateProvider#trustedResourceUrlList
   * $sceDelegateProvider.trustedResourceUrlList} and
   * {@link ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList},
   *
   * For the general details about this service in AngularJS, read the main page for {@link ng.$sce
   * Strict Contextual Escaping (SCE)}.
   *
   * **Example**:  Consider the following case. <a name="example"></a>
   *
   * - your app is hosted at url `http://myapp.example.com/`
   * - but some of your templates are hosted on other domains you control such as
   *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
   *
   * Here is what a secure configuration for this scenario might look like:
   *
   * ```
   *  angular.module('myApp', []).config(function($sceDelegateProvider) {
   *    $sceDelegateProvider.trustedResourceUrlList([
   *      // Allow same origin resource loads.
   *      'self',
   *      // Allow loading from our assets domain.  Notice the difference between * and **.
   *      'http://srv*.assets.example.com/**'
   *    ]);
   *
   *    // The banned resource URL list overrides the trusted resource URL list so the open redirect
   *    // here is blocked.
   *    $sceDelegateProvider.bannedResourceUrlList([
   *      'http://myapp.example.com/clickThru**'
   *    ]);
   *  });
   * ```
   * Note that an empty trusted resource URL list will block every resource URL from being loaded, and will require
   * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates
   * requested by {@link ng.$templateRequest $templateRequest} that are present in
   * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism
   * to populate your templates in that cache at config time, then it is a good idea to remove 'self'
   * from the trusted resource URL lsit. This helps to mitigate the security impact of certain types
   * of issues, like for instance attacker-controlled `ng-includes`.
   */

  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS

    // Resource URLs can also be trusted by policy.
    var trustedResourceUrlList = ['self'],
      bannedResourceUrlList = []

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#trustedResourceUrlList
     * @kind function
     *
     * @param {Array=} trustedResourceUrlList When provided, replaces the trustedResourceUrlList with
     *     the value provided.  This must be an array or null.  A snapshot of this array is used so
     *     further changes to the array are ignored.
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.
     *
     * @return {Array} The currently set trusted resource URL array.
     *
     * @description
     * Sets/Gets the list trusted of resource URLs.
     *
     * The **default value** when no `trustedResourceUrlList` has been explicitly set is `['self']`
     * allowing only same origin resource requests.
     *
     * <div class="alert alert-warning">
     * **Note:** the default `trustedResourceUrlList` of 'self' is not recommended if your app shares
     * its origin with other apps! It is a good idea to limit it to only your application's directory.
     * </div>
     */
    this.trustedResourceUrlList = function (value) {
      if (arguments.length) {
        trustedResourceUrlList = adjustMatchers(value)
      }
      return trustedResourceUrlList
    }

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlWhitelist
     * @kind function
     *
     * @deprecated
     * sinceVersion="1.8.1"
     *
     * This method is deprecated. Use {@link $sceDelegateProvider#trustedResourceUrlList
     * trustedResourceUrlList} instead.
     */
    Object.defineProperty(this, 'resourceUrlWhitelist', {
      get: function () {
        return this.trustedResourceUrlList
      },
      set: function (value) {
        this.trustedResourceUrlList = value
      },
    })

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#bannedResourceUrlList
     * @kind function
     *
     * @param {Array=} bannedResourceUrlList When provided, replaces the `bannedResourceUrlList` with
     *     the value provided. This must be an array or null. A snapshot of this array is used so
     *     further changes to the array are ignored.</p><p>
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
     *     allowed in this array.</p><p>
     *     The typical usage for the `bannedResourceUrlList` is to **block
     *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
     *     these would otherwise be trusted but actually return content from the redirected domain.
     *     </p><p>
     *     Finally, **the banned resource URL list overrides the trusted resource URL list** and has
     *     the final say.
     *
     * @return {Array} The currently set `bannedResourceUrlList` array.
     *
     * @description
     * Sets/Gets the `bannedResourceUrlList` of trusted resource URLs.
     *
     * The **default value** when no trusted resource URL list has been explicitly set is the empty
     * array (i.e. there is no `bannedResourceUrlList`.)
     */
    this.bannedResourceUrlList = function (value) {
      if (arguments.length) {
        bannedResourceUrlList = adjustMatchers(value)
      }
      return bannedResourceUrlList
    }

    /**
     * @ngdoc method
     * @name $sceDelegateProvider#resourceUrlBlacklist
     * @kind function
     *
     * @deprecated
     * sinceVersion="1.8.1"
     *
     * This method is deprecated. Use {@link $sceDelegateProvider#bannedResourceUrlList
     * bannedResourceUrlList} instead.
     */
    Object.defineProperty(this, 'resourceUrlBlacklist', {
      get: function () {
        return this.bannedResourceUrlList
      },
      set: function (value) {
        this.bannedResourceUrlList = value
      },
    })

    this.$get = [
      '$injector',
      '$$sanitizeUri',
      function ($injector, $$sanitizeUri) {
        var htmlSanitizer = function htmlSanitizer(html) {
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.')
        }

        if ($injector.has('$sanitize')) {
          htmlSanitizer = $injector.get('$sanitize')
        }

        function matchUrl(matcher, parsedUrl) {
          if (matcher === 'self') {
            return urlIsSameOrigin(parsedUrl) || urlIsSameOriginAsBaseUrl(parsedUrl)
          } else {
            // definitely a regex.  See adjustMatchers()
            return !!matcher.exec(parsedUrl.href)
          }
        }

        function isResourceUrlAllowedByPolicy(url) {
          var parsedUrl = urlResolve(url.toString())
          var i,
            n,
            allowed = false
          // Ensure that at least one item from the trusted resource URL list allows this url.
          for (i = 0, n = trustedResourceUrlList.length; i < n; i++) {
            if (matchUrl(trustedResourceUrlList[i], parsedUrl)) {
              allowed = true
              break
            }
          }
          if (allowed) {
            // Ensure that no item from the banned resource URL list has blocked this url.
            for (i = 0, n = bannedResourceUrlList.length; i < n; i++) {
              if (matchUrl(bannedResourceUrlList[i], parsedUrl)) {
                allowed = false
                break
              }
            }
          }
          return allowed
        }

        function generateHolderType(Base) {
          var holderType = function TrustedValueHolderType(trustedValue) {
            this.$$unwrapTrustedValue = function () {
              return trustedValue
            }
          }
          if (Base) {
            holderType.prototype = new Base()
          }
          holderType.prototype.valueOf = function sceValueOf() {
            return this.$$unwrapTrustedValue()
          }
          holderType.prototype.toString = function sceToString() {
            return this.$$unwrapTrustedValue().toString()
          }
          return holderType
        }

        var trustedValueHolderBase = generateHolderType(),
          byType = {}

        byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase)
        byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase)
        byType[SCE_CONTEXTS.MEDIA_URL] = generateHolderType(trustedValueHolderBase)
        byType[SCE_CONTEXTS.URL] = generateHolderType(byType[SCE_CONTEXTS.MEDIA_URL])
        byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase)
        byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL])

        /**
         * @ngdoc method
         * @name $sceDelegate#trustAs
         *
         * @description
         * Returns a trusted representation of the parameter for the specified context. This trusted
         * object will later on be used as-is, without any security check, by bindings or directives
         * that require this security context.
         * For instance, marking a string as trusted for the `$sce.HTML` context will entirely bypass
         * the potential `$sanitize` call in corresponding `$sce.HTML` bindings or directives, such as
         * `ng-bind-html`. Note that in most cases you won't need to call this function: if you have the
         * sanitizer loaded, passing the value itself will render all the HTML that does not pose a
         * security risk.
         *
         * See {@link ng.$sceDelegate#getTrusted getTrusted} for the function that will consume those
         * trusted values, and {@link ng.$sce $sce} for general documentation about strict contextual
         * escaping.
         *
         * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
         *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
         *
         * @param {*} value The value that should be considered trusted.
         * @return {*} A trusted representation of value, that can be used in the given context.
         */
        function trustAs(type, trustedValue) {
          var Constructor = byType.hasOwnProperty(type) ? byType[type] : null
          if (!Constructor) {
            throw $sceMinErr(
              'icontext',
              'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
              type,
              trustedValue
            )
          }
          if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
            return trustedValue
          }
          // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
          // mutable objects, we ensure here that the value passed in is actually a string.
          if (typeof trustedValue !== 'string') {
            throw $sceMinErr(
              'itype',
              'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
              type
            )
          }
          return new Constructor(trustedValue)
        }

        /**
         * @ngdoc method
         * @name $sceDelegate#valueOf
         *
         * @description
         * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
         * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
         * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
         *
         * If the passed parameter is not a value that had been returned by {@link
         * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, it must be returned as-is.
         *
         * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
         *     call or anything else.
         * @return {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
         *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
         *     `value` unchanged.
         */
        function valueOf(maybeTrusted) {
          if (maybeTrusted instanceof trustedValueHolderBase) {
            return maybeTrusted.$$unwrapTrustedValue()
          } else {
            return maybeTrusted
          }
        }

        /**
         * @ngdoc method
         * @name $sceDelegate#getTrusted
         *
         * @description
         * Given an object and a security context in which to assign it, returns a value that's safe to
         * use in this context, which was represented by the parameter. To do so, this function either
         * unwraps the safe type it has been given (for instance, a {@link ng.$sceDelegate#trustAs
         * `$sceDelegate.trustAs`} result), or it might try to sanitize the value given, depending on
         * the context and sanitizer availablility.
         *
         * The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available
         * by default, and the third one relies on the `$sanitize` service (which may be loaded through
         * the `ngSanitize` module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be
         * accepted if the resource url policy defined by {@link ng.$sceDelegateProvider#trustedResourceUrlList
         * `$sceDelegateProvider.trustedResourceUrlList`} and {@link ng.$sceDelegateProvider#bannedResourceUrlList
         * `$sceDelegateProvider.bannedResourceUrlList`} accepts that resource.
         *
         * This function will throw if the safe type isn't appropriate for this context, or if the
         * value given cannot be accepted in the context (which might be caused by sanitization not
         * being available, or the value not being recognized as safe).
         *
         * <div class="alert alert-danger">
         * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
         * (XSS) vulnerability in your application.
         * </div>
         *
         * @param {string} type The context in which this value is to be used (such as `$sce.HTML`).
         * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
         *     `$sceDelegate.trustAs`} call, or anything else (which will not be considered trusted.)
         * @return {*} A version of the value that's safe to use in the given context, or throws an
         *     exception if this is impossible.
         */
        function getTrusted(type, maybeTrusted) {
          if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
            return maybeTrusted
          }
          var constructor = byType.hasOwnProperty(type) ? byType[type] : null
          // If maybeTrusted is a trusted class instance or subclass instance, then unwrap and return
          // as-is.
          if (constructor && maybeTrusted instanceof constructor) {
            return maybeTrusted.$$unwrapTrustedValue()
          }

          // If maybeTrusted is a trusted class instance but not of the correct trusted type
          // then unwrap it and allow it to pass through to the rest of the checks
          if (isFunction(maybeTrusted.$$unwrapTrustedValue)) {
            maybeTrusted = maybeTrusted.$$unwrapTrustedValue()
          }

          // If we get here, then we will either sanitize the value or throw an exception.
          if (type === SCE_CONTEXTS.MEDIA_URL || type === SCE_CONTEXTS.URL) {
            // we attempt to sanitize non-resource URLs
            return $$sanitizeUri(maybeTrusted.toString(), type === SCE_CONTEXTS.MEDIA_URL)
          } else if (type === SCE_CONTEXTS.RESOURCE_URL) {
            if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
              return maybeTrusted
            } else {
              throw $sceMinErr(
                'insecurl',
                'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
                maybeTrusted.toString()
              )
            }
          } else if (type === SCE_CONTEXTS.HTML) {
            // htmlSanitizer throws its own error when no sanitizer is available.
            return htmlSanitizer(maybeTrusted)
          }
          // Default error when the $sce service has no way to make the input safe.
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.')
        }

        return { trustAs: trustAs, getTrusted: getTrusted, valueOf: valueOf }
      },
    ]
  }

  /**
   * @ngdoc provider
   * @name $sceProvider
   * @this
   *
   * @description
   *
   * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
   * -   enable/disable Strict Contextual Escaping (SCE) in a module
   * -   override the default implementation with a custom delegate
   *
   * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
   */

  /**
   * @ngdoc service
   * @name $sce
   * @kind function
   *
   * @description
   *
   * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
   *
   * ## Strict Contextual Escaping
   *
   * Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render
   * trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and
   * (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
   *
   * ### Overview
   *
   * To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in
   * HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically
   * run security checks on them (sanitizations, trusted URL resource, depending on context), or throw
   * when it cannot guarantee the security of the result. That behavior depends strongly on contexts:
   * HTML can be sanitized, but template URLs cannot, for instance.
   *
   * To illustrate this, consider the `ng-bind-html` directive. It renders its value directly as HTML:
   * we call that the *context*. When given an untrusted input, AngularJS will attempt to sanitize it
   * before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and
   * render the input as-is, you will need to mark it as trusted for that context before attempting
   * to bind it.
   *
   * As of version 1.2, AngularJS ships with SCE enabled by default.
   *
   * ### In practice
   *
   * Here's an example of a binding in a privileged context:
   *
   * ```
   * <input ng-model="userHtml" aria-label="User input">
   * <div ng-bind-html="userHtml"></div>
   * ```
   *
   * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
   * disabled, this application allows the user to render arbitrary HTML into the DIV, which would
   * be an XSS security bug. In a more realistic example, one may be rendering user comments, blog
   * articles, etc. via bindings. (HTML is just one example of a context where rendering user
   * controlled input creates security vulnerabilities.)
   *
   * For the case of HTML, you might use a library, either on the client side, or on the server side,
   * to sanitize unsafe HTML before binding to the value and rendering it in the document.
   *
   * How would you ensure that every place that used these types of bindings was bound to a value that
   * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
   * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
   * properties/fields and forgot to update the binding to the sanitized value?
   *
   * To be secure by default, AngularJS makes sure bindings go through that sanitization, or
   * any similar validation process, unless there's a good reason to trust the given value in this
   * context.  That trust is formalized with a function call. This means that as a developer, you
   * can assume all untrusted bindings are safe. Then, to audit your code for binding security issues,
   * you just need to ensure the values you mark as trusted indeed are safe - because they were
   * received from your server, sanitized by your library, etc. You can organize your codebase to
   * help with this - perhaps allowing only the files in a specific directory to do this.
   * Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then
   * becomes a more manageable task.
   *
   * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
   * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
   * build the trusted versions of your values.
   *
   * ### How does it work?
   *
   * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
   * $sce.getTrusted(context, value)} rather than to the value directly.  Think of this function as
   * a way to enforce the required security context in your data sink. Directives use {@link
   * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs
   * the {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals. Also,
   * when binding without directives, AngularJS will understand the context of your bindings
   * automatically.
   *
   * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
   * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
   * simplified):
   *
   * ```
   * var ngBindHtmlDirective = ['$sce', function($sce) {
   *   return function(scope, element, attr) {
   *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
   *       element.html(value || '');
   *     });
   *   };
   * }];
   * ```
   *
   * ### Impact on loading templates
   *
   * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
   * `templateUrl`'s specified by {@link guide/directive directives}.
   *
   * By default, AngularJS only loads templates from the same domain and protocol as the application
   * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
   * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
   * protocols, you may either add them to the {@link ng.$sceDelegateProvider#trustedResourceUrlList
   * trustedResourceUrlList} or {@link ng.$sce#trustAsResourceUrl wrap them} into trusted values.
   *
   * *Please note*:
   * The browser's
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
   * policy apply in addition to this and may further restrict whether the template is successfully
   * loaded.  This means that without the right CORS policy, loading templates from a different domain
   * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
   * browsers.
   *
   * ### This feels like too much overhead
   *
   * It's important to remember that SCE only applies to interpolation expressions.
   *
   * If your expressions are constant literals, they're automatically trusted and you don't need to
   * call `$sce.trustAs` on them (e.g.
   * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works (remember to include the
   * `ngSanitize` module). The `$sceDelegate` will also use the `$sanitize` service if it is available
   * when binding untrusted values to `$sce.HTML` context.
   * AngularJS provides an implementation in `angular-sanitize.js`, and if you
   * wish to use it, you will also need to depend on the {@link ngSanitize `ngSanitize`} module in
   * your application.
   *
   * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
   * templates in `ng-include` from your application's domain without having to even know about SCE.
   * It blocks loading templates from other domains or loading templates over http from an https
   * served document.  You can change these by setting your own custom {@link
   * ng.$sceDelegateProvider#trustedResourceUrlList trusted resource URL list} and {@link
   * ng.$sceDelegateProvider#bannedResourceUrlList banned resource URL list} for matching such URLs.
   *
   * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
   * application that's secure and can be audited to verify that with much more ease than bolting
   * security onto an application later.
   *
   * <a name="contexts"></a>
   * ### What trusted context types are supported?
   *
   * | Context             | Notes          |
   * |---------------------|----------------|
   * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
   * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
   * | `$sce.MEDIA_URL`    | For URLs that are safe to render as media. Is automatically converted from string by sanitizing when needed. |
   * | `$sce.URL`          | For URLs that are safe to follow as links. Is automatically converted from string by sanitizing when needed. Note that `$sce.URL` makes a stronger statement about the URL than `$sce.MEDIA_URL` does and therefore contexts requiring values trusted for `$sce.URL` can be used anywhere that values trusted for `$sce.MEDIA_URL` are required.|
   * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` or `$sce.MEDIA_URL` do and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` or `$sce.MEDIA_URL` are required. <br><br> The {@link $sceDelegateProvider#trustedResourceUrlList $sceDelegateProvider#trustedResourceUrlList()} and {@link $sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider#bannedResourceUrlList()} can be used to restrict trusted origins for `RESOURCE_URL` |
   * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
   *
   *
   * <div class="alert alert-warning">
   * Be aware that, before AngularJS 1.7.0, `a[href]` and `img[src]` used to sanitize their
   * interpolated values directly rather than rely upon {@link ng.$sce#getTrusted `$sce.getTrusted`}.
   *
   * **As of 1.7.0, this is no longer the case.**
   *
   * Now such interpolations are marked as requiring `$sce.URL` (for `a[href]`) or `$sce.MEDIA_URL`
   * (for `img[src]`), so that the sanitization happens (via `$sce.getTrusted...`) when the `$interpolate`
   * service evaluates the expressions.
   * </div>
   *
   * There are no CSS or JS context bindings in AngularJS currently, so their corresponding `$sce.trustAs`
   * functions aren't useful yet. This might evolve.
   *
   * ### Format of items in {@link ng.$sceDelegateProvider#trustedResourceUrlList trustedResourceUrlList}/{@link ng.$sceDelegateProvider#bannedResourceUrlList bannedResourceUrlList} <a name="resourceUrlPatternItem"></a>
   *
   *  Each element in these arrays must be one of the following:
   *
   *  - **'self'**
   *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
   *      domain** as the application document using the **same protocol**.
   *  - **String** (except the special value `'self'`)
   *    - The string is matched against the full *normalized / absolute URL* of the resource
   *      being tested (substring matches are not good enough.)
   *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
   *      match themselves.
   *    - `*`: matches zero or more occurrences of any character other than one of the following 6
   *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
   *      for matching resource URL lists.
   *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
   *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
   *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
   *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
   *      http://foo.example.com/templates/**).
   *  - **RegExp** (*see caveat below*)
   *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
   *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
   *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
   *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
   *      small number of cases.  A `.` character in the regex used when matching the scheme or a
   *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
   *      is highly recommended to use the string patterns and only fall back to regular expressions
   *      as a last resort.
   *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
   *      matched against the **entire** *normalized / absolute URL* of the resource being tested
   *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
   *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
   *    - If you are generating your JavaScript from some other templating engine (not
   *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
   *      remember to escape your regular expression (and be aware that you might need more than
   *      one level of escaping depending on your templating engine and the way you interpolated
   *      the value.)  Do make use of your platform's escaping mechanism as it might be good
   *      enough before coding your own.  E.g. Ruby has
   *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
   *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
   *      Javascript lacks a similar built in function for escaping.  Take a look at Google
   *      Closure library's [goog.string.regExpEscape(s)](
   *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
   *
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
   *
   * ### Show me an example using SCE.
   *
   * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
   * <file name="index.html">
   *   <div ng-controller="AppController as myCtrl">
   *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
   *     <b>User comments</b><br>
   *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
   *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
   *     exploit.
   *     <div class="well">
   *       <div ng-repeat="userComment in myCtrl.userComments">
   *         <b>{{userComment.name}}</b>:
   *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
   *         <br>
   *       </div>
   *     </div>
   *   </div>
   * </file>
   *
   * <file name="script.js">
   *   angular.module('mySceApp', ['ngSanitize'])
   *     .controller('AppController', ['$http', '$templateCache', '$sce',
   *       function AppController($http, $templateCache, $sce) {
   *         var self = this;
   *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
   *           self.userComments = response.data;
   *         });
   *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
   *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
   *             'sanitization.&quot;">Hover over this text.</span>');
   *       }]);
   * </file>
   *
   * <file name="test_data.json">
   * [
   *   { "name": "Alice",
   *     "htmlComment":
   *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
   *   },
   *   { "name": "Bob",
   *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
   *   }
   * ]
   * </file>
   *
   * <file name="protractor.js" type="protractor">
   *   describe('SCE doc demo', function() {
   *     it('should sanitize untrusted values', function() {
   *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
   *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
   *     });
   *
   *     it('should NOT sanitize explicitly trusted values', function() {
   *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
   *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
   *           'sanitization.&quot;">Hover over this text.</span>');
   *     });
   *   });
   * </file>
   * </example>
   *
   *
   *
   * ## Can I disable SCE completely?
   *
   * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
   * for little coding overhead.  It will be much harder to take an SCE disabled application and
   * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
   * for cases where you have a lot of existing code that was written before SCE was introduced and
   * you're migrating them a module at a time. Also do note that this is an app-wide setting, so if
   * you are writing a library, you will cause security bugs applications using it.
   *
   * That said, here's how you can completely disable SCE:
   *
   * ```
   * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
   *   // Completely disable SCE.  For demonstration purposes only!
   *   // Do not use in new projects or libraries.
   *   $sceProvider.enabled(false);
   * });
   * ```
   *
   */

  function $SceProvider() {
    var enabled = true

    /**
     * @ngdoc method
     * @name $sceProvider#enabled
     * @kind function
     *
     * @param {boolean=} value If provided, then enables/disables SCE application-wide.
     * @return {boolean} True if SCE is enabled, false otherwise.
     *
     * @description
     * Enables/disables SCE and returns the current value.
     */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value
      }
      return enabled
    }

    /* Design notes on the default implementation for SCE.
     *
     * The API contract for the SCE delegate
     * -------------------------------------
     * The SCE delegate object must provide the following 3 methods:
     *
     * - trustAs(contextEnum, value)
     *     This method is used to tell the SCE service that the provided value is OK to use in the
     *     contexts specified by contextEnum.  It must return an object that will be accepted by
     *     getTrusted() for a compatible contextEnum and return this value.
     *
     * - valueOf(value)
     *     For values that were not produced by trustAs(), return them as is.  For values that were
     *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
     *     trustAs is wrapping the given values into some type, this operation unwraps it when given
     *     such a value.
     *
     * - getTrusted(contextEnum, value)
     *     This function should return the value that is safe to use in the context specified by
     *     contextEnum or throw and exception otherwise.
     *
     * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
     * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
     * instance, an implementation could maintain a registry of all trusted objects by context.  In
     * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
     * return the same object passed in if it was found in the registry under a compatible context or
     * throw an exception otherwise.  An implementation might only wrap values some of the time based
     * on some criteria.  getTrusted() might return a value and not throw an exception for special
     * constants or objects even if not wrapped.  All such implementations fulfill this contract.
     *
     *
     * A note on the inheritance model for SCE contexts
     * ------------------------------------------------
     * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
     * is purely an implementation details.
     *
     * The contract is simply this:
     *
     *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
     *     will also succeed.
     *
     * Inheritance happens to capture this in a natural way. In some future, we may not use
     * inheritance anymore. That is OK because no code outside of sce.js and sceSpecs.js would need to
     * be aware of this detail.
     */

    this.$get = [
      '$parse',
      '$sceDelegate',
      function ($parse, $sceDelegate) {
        // Support: IE 9-11 only
        // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
        // the "expression(javascript expression)" syntax which is insecure.
        if (enabled && msie < 8) {
          throw $sceMinErr(
            'iequirks',
            'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
              'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
              'document.  See http://docs.angularjs.org/api/ng.$sce for more information.'
          )
        }

        var sce = shallowCopy(SCE_CONTEXTS)

        /**
         * @ngdoc method
         * @name $sce#isEnabled
         * @kind function
         *
         * @return {Boolean} True if SCE is enabled, false otherwise.  If you want to set the value, you
         *     have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
         *
         * @description
         * Returns a boolean indicating if SCE is enabled.
         */
        sce.isEnabled = function () {
          return enabled
        }
        sce.trustAs = $sceDelegate.trustAs
        sce.getTrusted = $sceDelegate.getTrusted
        sce.valueOf = $sceDelegate.valueOf

        if (!enabled) {
          sce.trustAs = sce.getTrusted = function (type, value) {
            return value
          }
          sce.valueOf = identity
        }

        /**
         * @ngdoc method
         * @name $sce#parseAs
         *
         * @description
         * Converts AngularJS {@link guide/expression expression} into a function.  This is like {@link
         * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
         * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
         * *result*)}
         *
         * @param {string} type The SCE context in which this result will be used.
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */
        sce.parseAs = function sceParseAs(type, expr) {
          var parsed = $parse(expr)
          if (parsed.literal && parsed.constant) {
            return parsed
          } else {
            return $parse(expr, function (value) {
              return sce.getTrusted(type, value)
            })
          }
        }

        /**
         * @ngdoc method
         * @name $sce#trustAs
         *
         * @description
         * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}. As such, returns a
         * wrapped object that represents your value, and the trust you have in its safety for the given
         * context. AngularJS can then use that value as-is in bindings of the specified secure context.
         * This is used in bindings for `ng-bind-html`, `ng-include`, and most `src` attribute
         * interpolations. See {@link ng.$sce $sce} for strict contextual escaping.
         *
         * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,
         *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.
         *
         * @param {*} value The value that that should be considered trusted.
         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
         *     in the context you specified.
         */

        /**
         * @ngdoc method
         * @name $sce#trustAsHtml
         *
         * @description
         * Shorthand method.  `$sce.trustAsHtml(value)` →
         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
         *
         * @param {*} value The value to mark as trusted for `$sce.HTML` context.
         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
         *     in `$sce.HTML` context (like `ng-bind-html`).
         */

        /**
         * @ngdoc method
         * @name $sce#trustAsCss
         *
         * @description
         * Shorthand method.  `$sce.trustAsCss(value)` →
         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.CSS, value)`}
         *
         * @param {*} value The value to mark as trusted for `$sce.CSS` context.
         * @return {*} A wrapped version of value that can be used as a trusted variant
         *     of your `value` in `$sce.CSS` context. This context is currently unused, so there are
         *     almost no reasons to use this function so far.
         */

        /**
         * @ngdoc method
         * @name $sce#trustAsUrl
         *
         * @description
         * Shorthand method.  `$sce.trustAsUrl(value)` →
         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
         *
         * @param {*} value The value to mark as trusted for `$sce.URL` context.
         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
         *     in `$sce.URL` context. That context is currently unused, so there are almost no reasons
         *     to use this function so far.
         */

        /**
         * @ngdoc method
         * @name $sce#trustAsResourceUrl
         *
         * @description
         * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
         *
         * @param {*} value The value to mark as trusted for `$sce.RESOURCE_URL` context.
         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
         *     in `$sce.RESOURCE_URL` context (template URLs in `ng-include`, most `src` attribute
         *     bindings, ...)
         */

        /**
         * @ngdoc method
         * @name $sce#trustAsJs
         *
         * @description
         * Shorthand method.  `$sce.trustAsJs(value)` →
         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
         *
         * @param {*} value The value to mark as trusted for `$sce.JS` context.
         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`
         *     in `$sce.JS` context. That context is currently unused, so there are almost no reasons to
         *     use this function so far.
         */

        /**
         * @ngdoc method
         * @name $sce#getTrusted
         *
         * @description
         * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
         * takes any input, and either returns a value that's safe to use in the specified context,
         * or throws an exception. This function is aware of trusted values created by the `trustAs`
         * function and its shorthands, and when contexts are appropriate, returns the unwrapped value
         * as-is. Finally, this function can also throw when there is no way to turn `maybeTrusted` in a
         * safe value (e.g., no sanitization is available or possible.)
         *
         * @param {string} type The context in which this value is to be used.
         * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs
         *     `$sce.trustAs`} call, or anything else (which will not be considered trusted.)
         * @return {*} A version of the value that's safe to use in the given context, or throws an
         *     exception if this is impossible.
         */

        /**
         * @ngdoc method
         * @name $sce#getTrustedHtml
         *
         * @description
         * Shorthand method.  `$sce.getTrustedHtml(value)` →
         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
         *
         * @param {*} value The value to pass to `$sce.getTrusted`.
         * @return {*} The return value of `$sce.getTrusted($sce.HTML, value)`
         */

        /**
         * @ngdoc method
         * @name $sce#getTrustedCss
         *
         * @description
         * Shorthand method.  `$sce.getTrustedCss(value)` →
         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
         *
         * @param {*} value The value to pass to `$sce.getTrusted`.
         * @return {*} The return value of `$sce.getTrusted($sce.CSS, value)`
         */

        /**
         * @ngdoc method
         * @name $sce#getTrustedUrl
         *
         * @description
         * Shorthand method.  `$sce.getTrustedUrl(value)` →
         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
         *
         * @param {*} value The value to pass to `$sce.getTrusted`.
         * @return {*} The return value of `$sce.getTrusted($sce.URL, value)`
         */

        /**
         * @ngdoc method
         * @name $sce#getTrustedResourceUrl
         *
         * @description
         * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
         *
         * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
         * @return {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
         */

        /**
         * @ngdoc method
         * @name $sce#getTrustedJs
         *
         * @description
         * Shorthand method.  `$sce.getTrustedJs(value)` →
         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
         *
         * @param {*} value The value to pass to `$sce.getTrusted`.
         * @return {*} The return value of `$sce.getTrusted($sce.JS, value)`
         */

        /**
         * @ngdoc method
         * @name $sce#parseAsHtml
         *
         * @description
         * Shorthand method.  `$sce.parseAsHtml(expression string)` →
         *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
         *
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */

        /**
         * @ngdoc method
         * @name $sce#parseAsCss
         *
         * @description
         * Shorthand method.  `$sce.parseAsCss(value)` →
         *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
         *
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */

        /**
         * @ngdoc method
         * @name $sce#parseAsUrl
         *
         * @description
         * Shorthand method.  `$sce.parseAsUrl(value)` →
         *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
         *
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */

        /**
         * @ngdoc method
         * @name $sce#parseAsResourceUrl
         *
         * @description
         * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
         *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
         *
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */

        /**
         * @ngdoc method
         * @name $sce#parseAsJs
         *
         * @description
         * Shorthand method.  `$sce.parseAsJs(value)` →
         *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
         *
         * @param {string} expression String expression to compile.
         * @return {function(context, locals)} A function which represents the compiled expression:
         *
         *    * `context` – `{object}` – an object against which any expressions embedded in the
         *      strings are evaluated against (typically a scope object).
         *    * `locals` – `{object=}` – local variables context object, useful for overriding values
         *      in `context`.
         */

        // Shorthand delegations.
        var parse = sce.parseAs,
          getTrusted = sce.getTrusted,
          trustAs = sce.trustAs

        forEach(SCE_CONTEXTS, function (enumValue, name) {
          var lName = lowercase(name)
          sce[snakeToCamel('parse_as_' + lName)] = function (expr) {
            return parse(enumValue, expr)
          }
          sce[snakeToCamel('get_trusted_' + lName)] = function (value) {
            return getTrusted(enumValue, value)
          }
          sce[snakeToCamel('trust_as_' + lName)] = function (value) {
            return trustAs(enumValue, value)
          }
        })

        return sce
      },
    ]
  }

  /* exported $SnifferProvider */

  /**
   * !!! This is an undocumented "private" service !!!
   *
   * @name $sniffer
   * @requires $window
   * @requires $document
   * @this
   *
   * @property {boolean} history Does the browser support html5 history api ?
   * @property {boolean} transitions Does the browser support CSS transition events ?
   * @property {boolean} animations Does the browser support CSS animation events ?
   *
   * @description
   * This is very simple implementation of testing browser's features.
   */
  function $SnifferProvider() {
    this.$get = [
      '$window',
      '$document',
      function ($window, $document) {
        var eventSupport = {},
          // Chrome Packaged Apps are not allowed to access `history.pushState`.
          // If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
          // (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
          // the presence of an extension runtime ID and the absence of other Chrome runtime APIs
          // (see https://developer.chrome.com/apps/manifest/sandbox).
          // (NW.js apps have access to Chrome APIs, but do support `history`.)
          isNw = $window.nw && $window.nw.process,
          isChromePackagedApp =
            !isNw &&
            $window.chrome &&
            (($window.chrome.app && $window.chrome.app.runtime) ||
              (!$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id)),
          hasHistoryPushState =
            !isChromePackagedApp && $window.history && $window.history.pushState,
          android = toInt(
            (/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]
          ),
          boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
          document = $document[0] || {},
          bodyStyle = document.body && document.body.style,
          transitions = false,
          animations = false

        if (bodyStyle) {
          // Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
          // Mentioned browsers need a -webkit- prefix for transitions & animations.
          transitions = !!('transition' in bodyStyle || 'webkitTransition' in bodyStyle)
          animations = !!('animation' in bodyStyle || 'webkitAnimation' in bodyStyle)
        }

        return {
          // Android has history.pushState, but it does not update location correctly
          // so let's not use the history API at all.
          // http://code.google.com/p/android/issues/detail?id=17471
          // https://github.com/angular/angular.js/issues/904

          // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
          // so let's not use the history API also
          // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
          history: !!(hasHistoryPushState && !(android < 4) && !boxee),
          hasEvent: function (event) {
            // Support: IE 9-11 only
            // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
            // it. In particular the event is not fired when backspace or delete key are pressed or
            // when cut operation is performed.
            // IE10+ implements 'input' event but it erroneously fires under various situations,
            // e.g. when placeholder changes, or a form is focused.
            if (event === 'input' && msie) return false

            if (isUndefined(eventSupport[event])) {
              var divElm = document.createElement('div')
              eventSupport[event] = 'on' + event in divElm
            }

            return eventSupport[event]
          },
          csp: csp(),
          transitions: transitions,
          animations: animations,
          android: android,
        }
      },
    ]
  }

  /**
   * ! This is a private undocumented service !
   *
   * @name $$taskTrackerFactory
   * @description
   * A function to create `TaskTracker` instances.
   *
   * A `TaskTracker` can keep track of pending tasks (grouped by type) and can notify interested
   * parties when all pending tasks (or tasks of a specific type) have been completed.
   *
   * @param {$log} log - A logger instance (such as `$log`). Used to log error during callback
   *     execution.
   *
   * @this
   */
  function $$TaskTrackerFactoryProvider() {
    this.$get = valueFn(function (log) {
      return new TaskTracker(log)
    })
  }

  function TaskTracker(log) {
    var self = this
    var taskCounts = {}
    var taskCallbacks = []

    var ALL_TASKS_TYPE = (self.ALL_TASKS_TYPE = '$$all$$')
    var DEFAULT_TASK_TYPE = (self.DEFAULT_TASK_TYPE = '$$default$$')

    /**
     * Execute the specified function and decrement the appropriate `taskCounts` counter.
     * If the counter reaches 0, all corresponding `taskCallbacks` are executed.
     *
     * @param {Function} fn - The function to execute.
     * @param {string=} [taskType=DEFAULT_TASK_TYPE] - The type of task that is being completed.
     */
    self.completeTask = completeTask

    /**
     * Increase the task count for the specified task type (or the default task type if non is
     * specified).
     *
     * @param {string=} [taskType=DEFAULT_TASK_TYPE] - The type of task whose count will be increased.
     */
    self.incTaskCount = incTaskCount

    /**
     * Execute the specified callback when all pending tasks have been completed.
     *
     * If there are no pending tasks, the callback is executed immediately. You can optionally limit
     * the tasks that will be waited for to a specific type, by passing a `taskType`.
     *
     * @param {function} callback - The function to call when there are no pending tasks.
     * @param {string=} [taskType=ALL_TASKS_TYPE] - The type of tasks that will be waited for.
     */
    self.notifyWhenNoPendingTasks = notifyWhenNoPendingTasks

    function completeTask(fn, taskType) {
      taskType = taskType || DEFAULT_TASK_TYPE

      try {
        fn()
      } finally {
        decTaskCount(taskType)

        var countForType = taskCounts[taskType]
        var countForAll = taskCounts[ALL_TASKS_TYPE]

        // If at least one of the queues (`ALL_TASKS_TYPE` or `taskType`) is empty, run callbacks.
        if (!countForAll || !countForType) {
          var getNextCallback = !countForAll ? getLastCallback : getLastCallbackForType
          var nextCb

          while ((nextCb = getNextCallback(taskType))) {
            try {
              nextCb()
            } catch (e) {
              log.error(e)
            }
          }
        }
      }
    }

    function decTaskCount(taskType) {
      taskType = taskType || DEFAULT_TASK_TYPE
      if (taskCounts[taskType]) {
        taskCounts[taskType]--
        taskCounts[ALL_TASKS_TYPE]--
      }
    }

    function getLastCallback() {
      var cbInfo = taskCallbacks.pop()
      return cbInfo && cbInfo.cb
    }

    function getLastCallbackForType(taskType) {
      for (var i = taskCallbacks.length - 1; i >= 0; --i) {
        var cbInfo = taskCallbacks[i]
        if (cbInfo.type === taskType) {
          taskCallbacks.splice(i, 1)
          return cbInfo.cb
        }
      }
    }

    function incTaskCount(taskType) {
      taskType = taskType || DEFAULT_TASK_TYPE
      taskCounts[taskType] = (taskCounts[taskType] || 0) + 1
      taskCounts[ALL_TASKS_TYPE] = (taskCounts[ALL_TASKS_TYPE] || 0) + 1
    }

    function notifyWhenNoPendingTasks(callback, taskType) {
      taskType = taskType || ALL_TASKS_TYPE
      if (!taskCounts[taskType]) {
        callback()
      } else {
        taskCallbacks.push({ type: taskType, cb: callback })
      }
    }
  }

  var $templateRequestMinErr = minErr('$templateRequest')

  /**
   * @ngdoc provider
   * @name $templateRequestProvider
   * @this
   *
   * @description
   * Used to configure the options passed to the {@link $http} service when making a template request.
   *
   * For example, it can be used for specifying the "Accept" header that is sent to the server, when
   * requesting a template.
   */
  function $TemplateRequestProvider() {
    var httpOptions

    /**
     * @ngdoc method
     * @name $templateRequestProvider#httpOptions
     * @description
     * The options to be passed to the {@link $http} service when making the request.
     * You can use this to override options such as the "Accept" header for template requests.
     *
     * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
     * options if not overridden here.
     *
     * @param {string=} value new value for the {@link $http} options.
     * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
     */
    this.httpOptions = function (val) {
      if (val) {
        httpOptions = val
        return this
      }
      return httpOptions
    }

    /**
     * @ngdoc service
     * @name $templateRequest
     *
     * @description
     * The `$templateRequest` service runs security checks then downloads the provided template using
     * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
     * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
     * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
     * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
     * when `tpl` is of type string and `$templateCache` has the matching entry.
     *
     * If you want to pass custom options to the `$http` service, such as setting the Accept header you
     * can configure this via {@link $templateRequestProvider#httpOptions}.
     *
     * `$templateRequest` is used internally by {@link $compile}, {@link ngRoute.$route}, and directives such
     * as {@link ngInclude} to download and cache templates.
     *
     * 3rd party modules should use `$templateRequest` if their services or directives are loading
     * templates.
     *
     * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
     * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
     *
     * @return {Promise} a promise for the HTTP response data of the given URL.
     *
     * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
     */
    this.$get = [
      '$exceptionHandler',
      '$templateCache',
      '$http',
      '$q',
      '$sce',
      function ($exceptionHandler, $templateCache, $http, $q, $sce) {
        function handleRequestFn(tpl, ignoreRequestError) {
          handleRequestFn.totalPendingRequests++

          // We consider the template cache holds only trusted templates, so
          // there's no need to go through adding the template again to the trusted
          // resources for keys that already are included in there. This also makes
          // AngularJS accept any script directive, no matter its name. However, we
          // still need to unwrap trusted types.
          if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
            tpl = $sce.getTrustedResourceUrl(tpl)
          }

          var transformResponse = $http.defaults && $http.defaults.transformResponse

          if (isArray(transformResponse)) {
            transformResponse = transformResponse.filter(function (transformer) {
              return transformer !== defaultHttpResponseTransform
            })
          } else if (transformResponse === defaultHttpResponseTransform) {
            transformResponse = null
          }

          return $http
            .get(
              tpl,
              extend(
                {
                  cache: $templateCache,
                  transformResponse: transformResponse,
                },
                httpOptions
              )
            )
            .finally(function () {
              handleRequestFn.totalPendingRequests--
            })
            .then(function (response) {
              return $templateCache.put(tpl, response.data)
            }, handleError)

          function handleError(resp) {
            if (!ignoreRequestError) {
              resp = $templateRequestMinErr(
                'tpload',
                'Failed to load template: {0} (HTTP status: {1} {2})',
                tpl,
                resp.status,
                resp.statusText
              )

              $exceptionHandler(resp)
            }

            return $q.reject(resp)
          }
        }

        handleRequestFn.totalPendingRequests = 0

        return handleRequestFn
      },
    ]
  }

  /** @this */
  function $$TestabilityProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$location',
      function ($rootScope, $browser, $location) {
        /**
         * @name $testability
         *
         * @description
         * The private $$testability service provides a collection of methods for use when debugging
         * or by automated test and debugging tools.
         */
        var testability = {}

        /**
         * @name $$testability#findBindings
         *
         * @description
         * Returns an array of elements that are bound (via ng-bind or {{}})
         * to expressions matching the input.
         *
         * @param {Element} element The element root to search from.
         * @param {string} expression The binding expression to match.
         * @param {boolean} opt_exactMatch If true, only returns exact matches
         *     for the expression. Filters and whitespace are ignored.
         */
        testability.findBindings = function (element, expression, opt_exactMatch) {
          var bindings = element.getElementsByClassName('ng-binding')
          var matches = []
          forEach(bindings, function (binding) {
            var dataBinding = angular.element(binding).data('$binding')
            if (dataBinding) {
              forEach(dataBinding, function (bindingName) {
                if (opt_exactMatch) {
                  var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)')
                  if (matcher.test(bindingName)) {
                    matches.push(binding)
                  }
                } else {
                  if (bindingName.indexOf(expression) !== -1) {
                    matches.push(binding)
                  }
                }
              })
            }
          })
          return matches
        }

        /**
         * @name $$testability#findModels
         *
         * @description
         * Returns an array of elements that are two-way found via ng-model to
         * expressions matching the input.
         *
         * @param {Element} element The element root to search from.
         * @param {string} expression The model expression to match.
         * @param {boolean} opt_exactMatch If true, only returns exact matches
         *     for the expression.
         */
        testability.findModels = function (element, expression, opt_exactMatch) {
          var prefixes = ['ng-', 'data-ng-', 'ng\\:']
          for (var p = 0; p < prefixes.length; ++p) {
            var attributeEquals = opt_exactMatch ? '=' : '*='
            var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]'
            var elements = element.querySelectorAll(selector)
            if (elements.length) {
              return elements
            }
          }
        }

        /**
         * @name $$testability#getLocation
         *
         * @description
         * Shortcut for getting the location in a browser agnostic way. Returns
         *     the path, search, and hash. (e.g. /path?a=b#hash)
         */
        testability.getLocation = function () {
          return $location.url()
        }

        /**
         * @name $$testability#setLocation
         *
         * @description
         * Shortcut for navigating to a location without doing a full page reload.
         *
         * @param {string} url The location url (path, search and hash,
         *     e.g. /path?a=b#hash) to go to.
         */
        testability.setLocation = function (url) {
          if (url !== $location.url()) {
            $location.url(url)
            $rootScope.$digest()
          }
        }

        /**
         * @name $$testability#whenStable
         *
         * @description
         * Calls the callback when all pending tasks are completed.
         *
         * Types of tasks waited for include:
         * - Pending timeouts (via {@link $timeout}).
         * - Pending HTTP requests (via {@link $http}).
         * - In-progress route transitions (via {@link $route}).
         * - Pending tasks scheduled via {@link $rootScope#$applyAsync}.
         * - Pending tasks scheduled via {@link $rootScope#$evalAsync}.
         *   These include tasks scheduled via `$evalAsync()` indirectly (such as {@link $q} promises).
         *
         * @param {function} callback
         */
        testability.whenStable = function (callback) {
          $browser.notifyWhenNoOutstandingRequests(callback)
        }

        return testability
      },
    ]
  }

  var $timeoutMinErr = minErr('$timeout')

  /** @this */
  function $TimeoutProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$q',
      '$$q',
      '$exceptionHandler',
      function ($rootScope, $browser, $q, $$q, $exceptionHandler) {
        var deferreds = {}

        /**
         * @ngdoc service
         * @name $timeout
         *
         * @description
         * AngularJS's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
         * block and delegates any exceptions to
         * {@link ng.$exceptionHandler $exceptionHandler} service.
         *
         * The return value of calling `$timeout` is a promise, which will be resolved when
         * the delay has passed and the timeout function, if provided, is executed.
         *
         * To cancel a timeout request, call `$timeout.cancel(promise)`.
         *
         * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
         * synchronously flush the queue of deferred functions.
         *
         * If you only want a promise that will be resolved after some specified delay
         * then you can call `$timeout` without the `fn` function.
         *
         * @param {function()=} fn A function, whose execution should be delayed.
         * @param {number=} [delay=0] Delay in milliseconds.
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
         * @param {...*=} Pass additional parameters to the executed function.
         * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
         *   will be resolved with the return value of the `fn` function.
         *
         */
        function timeout(fn, delay, invokeApply) {
          if (!isFunction(fn)) {
            invokeApply = delay
            delay = fn
            fn = noop
          }

          var args = sliceArgs(arguments, 3),
            skipApply = isDefined(invokeApply) && !invokeApply,
            deferred = (skipApply ? $$q : $q).defer(),
            promise = deferred.promise,
            timeoutId

          timeoutId = $browser.defer(
            function () {
              try {
                deferred.resolve(fn.apply(null, args))
              } catch (e) {
                deferred.reject(e)
                $exceptionHandler(e)
              } finally {
                delete deferreds[promise.$$timeoutId]
              }

              if (!skipApply) $rootScope.$apply()
            },
            delay,
            '$timeout'
          )

          promise.$$timeoutId = timeoutId
          deferreds[timeoutId] = deferred

          return promise
        }

        /**
         * @ngdoc method
         * @name $timeout#cancel
         *
         * @description
         * Cancels a task associated with the `promise`. As a result of this, the promise will be
         * resolved with a rejection.
         *
         * @param {Promise=} promise Promise returned by the `$timeout` function.
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
         *   canceled.
         */
        timeout.cancel = function (promise) {
          if (!promise) return false

          if (!promise.hasOwnProperty('$$timeoutId')) {
            throw $timeoutMinErr(
              'badprom',
              '`$timeout.cancel()` called with a promise that was not generated by `$timeout()`.'
            )
          }

          if (!deferreds.hasOwnProperty(promise.$$timeoutId)) return false

          var id = promise.$$timeoutId
          var deferred = deferreds[id]

          // Timeout cancels should not report an unhandled promise.
          markQExceptionHandled(deferred.promise)
          deferred.reject('canceled')
          delete deferreds[id]

          return $browser.defer.cancel(id)
        }

        return timeout
      },
    ]
  }

  // NOTE:  The usage of window and document instead of $window and $document here is
  // deliberate.  This service depends on the specific behavior of anchor nodes created by the
  // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
  // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
  // doesn't know about mocked locations and resolves URLs to the real document - which is
  // exactly the behavior needed here.  There is little value is mocking these out for this
  // service.
  var urlParsingNode = window.document.createElement('a')
  var originUrl = urlResolve(window.location.href)
  var baseUrlParsingNode

  urlParsingNode.href = 'http://[::1]'

  // Support: IE 9-11 only, Edge 16-17 only (fixed in 18 Preview)
  // IE/Edge don't wrap IPv6 addresses' hostnames in square brackets
  // when parsed out of an anchor element.
  var ipv6InBrackets = urlParsingNode.hostname === '[::1]'

  /**
   *
   * Implementation Notes for non-IE browsers
   * ----------------------------------------
   * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
   * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
   * URL will be resolved into an absolute URL in the context of the application document.
   * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
   * properties are all populated to reflect the normalized URL.  This approach has wide
   * compatibility - Safari 1+, Mozilla 1+ etc.  See
   * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *
   * Implementation Notes for IE
   * ---------------------------
   * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
   * browsers.  However, the parsed components will not be set if the URL assigned did not specify
   * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
   * work around that by performing the parsing in a 2nd step by taking a previously normalized
   * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
   * properties such as protocol, hostname, port, etc.
   *
   * References:
   *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
   *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
   *   http://url.spec.whatwg.org/#urlutils
   *   https://github.com/angular/angular.js/pull/2902
   *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
   *
   * @kind function
   * @param {string|object} url The URL to be parsed. If `url` is not a string, it will be returned
   *     unchanged.
   * @description Normalizes and parses a URL.
   * @returns {object} Returns the normalized URL as a dictionary.
   *
   *   | member name   | Description                                                            |
   *   |---------------|------------------------------------------------------------------------|
   *   | href          | A normalized version of the provided URL if it was not an absolute URL |
   *   | protocol      | The protocol without the trailing colon                                |
   *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
   *   | search        | The search params, minus the question mark                             |
   *   | hash          | The hash string, minus the hash symbol                                 |
   *   | hostname      | The hostname                                                           |
   *   | port          | The port, without ":"                                                  |
   *   | pathname      | The pathname, beginning with "/"                                       |
   *
   */
  function urlResolve(url) {
    if (!isString(url)) return url

    var href = url

    // Support: IE 9-11 only
    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute('href', href)
      href = urlParsingNode.href
    }

    urlParsingNode.setAttribute('href', href)

    var hostname = urlParsingNode.hostname

    if (!ipv6InBrackets && hostname.indexOf(':') > -1) {
      hostname = '[' + hostname + ']'
    }

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: hostname,
      port: urlParsingNode.port,
      pathname:
        urlParsingNode.pathname.charAt(0) === '/'
          ? urlParsingNode.pathname
          : '/' + urlParsingNode.pathname,
    }
  }

  /**
   * Parse a request URL and determine whether this is a same-origin request as the application
   * document.
   *
   * @param {string|object} requestUrl The url of the request as a string that will be resolved
   * or a parsed URL object.
   * @returns {boolean} Whether the request is for the same origin as the application document.
   */
  function urlIsSameOrigin(requestUrl) {
    return urlsAreSameOrigin(requestUrl, originUrl)
  }

  /**
   * Parse a request URL and determine whether it is same-origin as the current document base URL.
   *
   * Note: The base URL is usually the same as the document location (`location.href`) but can
   * be overriden by using the `<base>` tag.
   *
   * @param {string|object} requestUrl The url of the request as a string that will be resolved
   * or a parsed URL object.
   * @returns {boolean} Whether the URL is same-origin as the document base URL.
   */
  function urlIsSameOriginAsBaseUrl(requestUrl) {
    return urlsAreSameOrigin(requestUrl, getBaseUrl())
  }

  /**
   * Create a function that can check a URL's origin against a list of allowed/trusted origins.
   * The current location's origin is implicitly trusted.
   *
   * @param {string[]} trustedOriginUrls - A list of URLs (strings), whose origins are trusted.
   *
   * @returns {Function} - A function that receives a URL (string or parsed URL object) and returns
   *     whether it is of an allowed origin.
   */
  function urlIsAllowedOriginFactory(trustedOriginUrls) {
    var parsedAllowedOriginUrls = [originUrl].concat(trustedOriginUrls.map(urlResolve))

    /**
     * Check whether the specified URL (string or parsed URL object) has an origin that is allowed
     * based on a list of trusted-origin URLs. The current location's origin is implicitly
     * trusted.
     *
     * @param {string|Object} requestUrl - The URL to be checked (provided as a string that will be
     *     resolved or a parsed URL object).
     *
     * @returns {boolean} - Whether the specified URL is of an allowed origin.
     */
    return function urlIsAllowedOrigin(requestUrl) {
      var parsedUrl = urlResolve(requestUrl)
      return parsedAllowedOriginUrls.some(urlsAreSameOrigin.bind(null, parsedUrl))
    }
  }

  /**
   * Determine if two URLs share the same origin.
   *
   * @param {string|Object} url1 - First URL to compare as a string or a normalized URL in the form of
   *     a dictionary object returned by `urlResolve()`.
   * @param {string|object} url2 - Second URL to compare as a string or a normalized URL in the form
   *     of a dictionary object returned by `urlResolve()`.
   *
   * @returns {boolean} - True if both URLs have the same origin, and false otherwise.
   */
  function urlsAreSameOrigin(url1, url2) {
    url1 = urlResolve(url1)
    url2 = urlResolve(url2)

    return url1.protocol === url2.protocol && url1.host === url2.host
  }

  /**
   * Returns the current document base URL.
   * @returns {string}
   */
  function getBaseUrl() {
    if (window.document.baseURI) {
      return window.document.baseURI
    }

    // `document.baseURI` is available everywhere except IE
    if (!baseUrlParsingNode) {
      baseUrlParsingNode = window.document.createElement('a')
      baseUrlParsingNode.href = '.'

      // Work-around for IE bug described in Implementation Notes. The fix in `urlResolve()` is not
      // suitable here because we need to track changes to the base URL.
      baseUrlParsingNode = baseUrlParsingNode.cloneNode(false)
    }
    return baseUrlParsingNode.href
  }

  /**
 * @ngdoc service
 * @name $window
 * @this
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In AngularJS we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample" name="window-service">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" aria-label="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
  function $WindowProvider() {
    this.$get = valueFn(window)
  }

  /**
   * @name $$cookieReader
   * @requires $document
   *
   * @description
   * This is a private service for reading cookies used by $http and ngCookies
   *
   * @return {Object} a key/value map of the current cookies
   */
  function $$CookieReader($document) {
    var rawDocument = $document[0] || {}
    var lastCookies = {}
    var lastCookieString = ''

    function safeGetCookie(rawDocument) {
      try {
        return rawDocument.cookie || ''
      } catch (e) {
        return ''
      }
    }

    function safeDecodeURIComponent(str) {
      try {
        return decodeURIComponent(str)
      } catch (e) {
        return str
      }
    }

    return function () {
      var cookieArray, cookie, i, index, name
      var currentCookieString = safeGetCookie(rawDocument)

      if (currentCookieString !== lastCookieString) {
        lastCookieString = currentCookieString
        cookieArray = lastCookieString.split('; ')
        lastCookies = {}

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i]
          index = cookie.indexOf('=')
          if (index > 0) {
            //ignore nameless cookies
            name = safeDecodeURIComponent(cookie.substring(0, index))
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (isUndefined(lastCookies[name])) {
              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1))
            }
          }
        }
      }
      return lastCookies
    }
  }

  $$CookieReader.$inject = ['$document']

  /** @this */
  function $$CookieReaderProvider() {
    this.$get = $$CookieReader
  }

  /* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

  /**
   * @ngdoc provider
   * @name $filterProvider
   * @description
   *
   * Filters are just functions which transform input to an output. However filters need to be
   * Dependency Injected. To achieve this a filter definition consists of a factory function which is
   * annotated with dependencies and is responsible for creating a filter function.
   *
   * <div class="alert alert-warning">
   * **Note:** Filter names must be valid AngularJS {@link expression} identifiers, such as `uppercase` or `orderBy`.
   * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   * (`myapp_subsection_filterx`).
   * </div>
   *
   * ```js
   *   // Filter registration
   *   function MyModule($provide, $filterProvider) {
   *     // create a service to demonstrate injection (not always needed)
   *     $provide.value('greet', function(name){
   *       return 'Hello ' + name + '!';
   *     });
   *
   *     // register a filter factory which uses the
   *     // greet service to demonstrate DI.
   *     $filterProvider.register('greet', function(greet){
   *       // return the filter function which uses the greet service
   *       // to generate salutation
   *       return function(text) {
   *         // filters need to be forgiving so check input validity
   *         return text && greet(text) || text;
   *       };
   *     });
   *   }
   * ```
   *
   * The filter function is registered with the `$injector` under the filter name suffix with
   * `Filter`.
   *
   * ```js
   *   it('should be the same instance', inject(
   *     function($filterProvider) {
   *       $filterProvider.register('reverse', function(){
   *         return ...;
   *       });
   *     },
   *     function($filter, reverseFilter) {
   *       expect($filter('reverse')).toBe(reverseFilter);
   *     });
   * ```
   *
   *
   * For more information about how AngularJS filters work, and how to create your own filters, see
   * {@link guide/filter Filters} in the AngularJS Developer Guide.
   */

  /**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * They can be used in view templates, controllers or services. AngularJS comes
 * with a collection of [built-in filters](api/ng/filter), but it is easy to
 * define your own as well.
 *
 * The general syntax in templates is as follows:
 *
 * ```html
 * {{ expression [| filter_name[:parameter_value] ... ] }}
 * ```
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
  $FilterProvider.$inject = ['$provide']
  /** @this */
  function $FilterProvider($provide) {
    var suffix = 'Filter'

    /**
     * @ngdoc method
     * @name $filterProvider#register
     * @param {string|Object} name Name of the filter function, or an object map of filters where
     *    the keys are the filter names and the values are the filter factories.
     *
     *    <div class="alert alert-warning">
     *    **Note:** Filter names must be valid AngularJS {@link expression} identifiers, such as `uppercase` or `orderBy`.
     *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
     *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
     *    (`myapp_subsection_filterx`).
     *    </div>
     * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
     * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
     *    of the registered filter instances.
     */
    function register(name, factory) {
      if (isObject(name)) {
        var filters = {}
        forEach(name, function (filter, key) {
          filters[key] = register(key, filter)
        })
        return filters
      } else {
        return $provide.factory(name + suffix, factory)
      }
    }
    this.register = register

    this.$get = [
      '$injector',
      function ($injector) {
        return function (name) {
          return $injector.get(name + suffix)
        }
      },
    ]

    ////////////////////////////////////////

    /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false
  */

    register('currency', currencyFilter)
    register('date', dateFilter)
    register('filter', filterFilter)
    register('json', jsonFilter)
    register('limitTo', limitToFilter)
    register('lowercase', lowercaseFilter)
    register('number', numberFilter)
    register('orderBy', orderByFilter)
    register('uppercase', uppercaseFilter)
  }

  /**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * <div class="alert alert-info">
 *   **Note**: If the array contains objects that reference themselves, filtering is not possible.
 * </div>
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
 *     against any property of the object or its nested object properties. That's equivalent to the
 *     simple substring match with a `string` as described above. The special property name can be
 *     overwritten, using the `anyPropertyKey` parameter.
 *     The predicate can be negated by prefixing the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
 *     The function is called for each element of the array, with the element, its index, and
 *     the entire array itself as arguments.
 *
 *     The final result is an array of those elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
 *     determining if values retrieved using `expression` (when it is not a function) should be
 *     considered a match based on the expected value (from the filter expression) and actual
 *     value (from the object in the array).
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false`: A short hand for a function which will look for a substring match in a case
 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
 *
 *
 *   Defaults to `false`.
 *
 * @param {string} [anyPropertyKey] The special property name that matches against any property.
 *     By default `$`.
 *
 * @example
   <example name="filter-filter">
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       <label>Search: <input ng-model="searchText"></label>
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       <label>Any: <input ng-model="search.$"></label> <br>
       <label>Name only <input ng-model="search.name"></label><br>
       <label>Phone only <input ng-model="search.phone"></label><br>
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */

  function filterFilter() {
    return function (array, expression, comparator, anyPropertyKey) {
      if (!isArrayLike(array)) {
        if (array == null) {
          return array
        } else {
          throw minErr('filter')('notarray', 'Expected array but received: {0}', array)
        }
      }

      anyPropertyKey = anyPropertyKey || '$'
      var expressionType = getTypeForFilter(expression)
      var predicateFn
      var matchAgainstAnyProp

      switch (expressionType) {
        case 'function':
          predicateFn = expression
          break
        case 'boolean':
        case 'null':
        case 'number':
        case 'string':
          matchAgainstAnyProp = true
        // falls through
        case 'object':
          predicateFn = createPredicateFn(
            expression,
            comparator,
            anyPropertyKey,
            matchAgainstAnyProp
          )
          break
        default:
          return array
      }

      return Array.prototype.filter.call(array, predicateFn)
    }
  }

  // Helper functions for `filterFilter`
  function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
    var shouldMatchPrimitives = isObject(expression) && anyPropertyKey in expression
    var predicateFn

    if (comparator === true) {
      comparator = equals
    } else if (!isFunction(comparator)) {
      comparator = function (actual, expected) {
        if (isUndefined(actual)) {
          // No substring matching against `undefined`
          return false
        }
        if (actual === null || expected === null) {
          // No substring matching against `null`; only match against `null`
          return actual === expected
        }
        if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
          // Should not compare primitives against objects, unless they have custom `toString` method
          return false
        }

        actual = lowercase('' + actual)
        expected = lowercase('' + expected)
        return actual.indexOf(expected) !== -1
      }
    }

    predicateFn = function (item) {
      if (shouldMatchPrimitives && !isObject(item)) {
        return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false)
      }
      return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp)
    }

    return predicateFn
  }

  function deepCompare(
    actual,
    expected,
    comparator,
    anyPropertyKey,
    matchAgainstAnyProp,
    dontMatchWholeObject
  ) {
    var actualType = getTypeForFilter(actual)
    var expectedType = getTypeForFilter(expected)

    if (expectedType === 'string' && expected.charAt(0) === '!') {
      return !deepCompare(
        actual,
        expected.substring(1),
        comparator,
        anyPropertyKey,
        matchAgainstAnyProp
      )
    } else if (isArray(actual)) {
      // In case `actual` is an array, consider it a match
      // if ANY of it's items matches `expected`
      return actual.some(function (item) {
        return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp)
      })
    }

    switch (actualType) {
      case 'object':
        var key
        if (matchAgainstAnyProp) {
          for (key in actual) {
            // Under certain, rare, circumstances, key may not be a string and `charAt` will be undefined
            // See: https://github.com/angular/angular.js/issues/15644
            if (
              key.charAt &&
              key.charAt(0) !== '$' &&
              deepCompare(actual[key], expected, comparator, anyPropertyKey, true)
            ) {
              return true
            }
          }
          return dontMatchWholeObject
            ? false
            : deepCompare(actual, expected, comparator, anyPropertyKey, false)
        } else if (expectedType === 'object') {
          for (key in expected) {
            var expectedVal = expected[key]
            if (isFunction(expectedVal) || isUndefined(expectedVal)) {
              continue
            }

            var matchAnyProperty = key === anyPropertyKey
            var actualVal = matchAnyProperty ? actual : actual[key]
            if (
              !deepCompare(
                actualVal,
                expectedVal,
                comparator,
                anyPropertyKey,
                matchAnyProperty,
                matchAnyProperty
              )
            ) {
              return false
            }
          }
          return true
        } else {
          return comparator(actual, expected)
        }
      case 'function':
        return false
      default:
        return comparator(actual, expected)
    }
  }

  // Used for easily differentiating between `null` and actual `object`
  function getTypeForFilter(val) {
    return val === null ? 'null' : typeof val
  }

  var MAX_DIGITS = 22
  var DECIMAL_SEP = '.'
  var ZERO_CHAR = '0'

  /**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample" name="currency-filter">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount" aria-label="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser === 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
       });
     </file>
   </example>
 */
  currencyFilter.$inject = ['$locale']
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS
    return function (amount, currencySymbol, fractionSize) {
      if (isUndefined(currencySymbol)) {
        currencySymbol = formats.CURRENCY_SYM
      }

      if (isUndefined(fractionSize)) {
        fractionSize = formats.PATTERNS[1].maxFrac
      }

      // If the currency symbol is empty, trim whitespace around the symbol
      var currencySymbolRe = !currencySymbol ? /\s*\u00A4\s*/g : /\u00A4/g

      // if null or undefined pass it through
      return amount == null
        ? amount
        : formatNumber(
            amount,
            formats.PATTERNS[1],
            formats.GROUP_SEP,
            formats.DECIMAL_SEP,
            fractionSize
          ).replace(currencySymbolRe, currencySymbol)
    }
  }

  /**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
 * If the input is not a number an empty string is returned.
 *
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
 *                   include "," group separators after each third digit).
 *
 * @example
   <example module="numberFilterExample" name="number-filter">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter number: <input ng-model='val'></label><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
  numberFilter.$inject = ['$locale']
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS
    return function (number, fractionSize) {
      // if null or undefined pass it through
      return number == null
        ? number
        : formatNumber(
            number,
            formats.PATTERNS[0],
            formats.GROUP_SEP,
            formats.DECIMAL_SEP,
            fractionSize
          )
    }
  }

  /**
   * Parse a number (as a string) into three components that can be used
   * for formatting the number.
   *
   * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
   *
   * @param  {string} numStr The number to parse
   * @return {object} An object describing this number, containing the following keys:
   *  - d : an array of digits containing leading zeros as necessary
   *  - i : the number of the digits in `d` that are to the left of the decimal point
   *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
   *
   */
  function parse(numStr) {
    var exponent = 0,
      digits,
      numberOfIntegerDigits
    var i, j, zeros

    // Decimal point?
    if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
      numStr = numStr.replace(DECIMAL_SEP, '')
    }

    // Exponential form?
    if ((i = numStr.search(/e/i)) > 0) {
      // Work out the exponent.
      if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i
      numberOfIntegerDigits += +numStr.slice(i + 1)
      numStr = numStr.substring(0, i)
    } else if (numberOfIntegerDigits < 0) {
      // There was no decimal point or exponent so it is an integer.
      numberOfIntegerDigits = numStr.length
    }

    // Count the number of leading zeros.
    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
      /* empty */
    }

    if (i === (zeros = numStr.length)) {
      // The digits are all zero.
      digits = [0]
      numberOfIntegerDigits = 1
    } else {
      // Count the number of trailing zeros
      zeros--
      while (numStr.charAt(zeros) === ZERO_CHAR) zeros--

      // Trailing zeros are insignificant so ignore them
      numberOfIntegerDigits -= i
      digits = []
      // Convert string to array of digits without leading/trailing zeros.
      for (j = 0; i <= zeros; i++, j++) {
        digits[j] = +numStr.charAt(i)
      }
    }

    // If the number overflows the maximum allowed digits then use an exponent.
    if (numberOfIntegerDigits > MAX_DIGITS) {
      digits = digits.splice(0, MAX_DIGITS - 1)
      exponent = numberOfIntegerDigits - 1
      numberOfIntegerDigits = 1
    }

    return { d: digits, e: exponent, i: numberOfIntegerDigits }
  }

  /**
   * Round the parsed number to the specified number of decimal places
   * This function changed the parsedNumber in-place
   */
  function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
    var digits = parsedNumber.d
    var fractionLen = digits.length - parsedNumber.i

    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
    fractionSize = isUndefined(fractionSize)
      ? Math.min(Math.max(minFrac, fractionLen), maxFrac)
      : +fractionSize

    // The index of the digit to where rounding is to occur
    var roundAt = fractionSize + parsedNumber.i
    var digit = digits[roundAt]

    if (roundAt > 0) {
      // Drop fractional digits beyond `roundAt`
      digits.splice(Math.max(parsedNumber.i, roundAt))

      // Set non-fractional digits beyond `roundAt` to 0
      for (var j = roundAt; j < digits.length; j++) {
        digits[j] = 0
      }
    } else {
      // We rounded to zero so reset the parsedNumber
      fractionLen = Math.max(0, fractionLen)
      parsedNumber.i = 1
      digits.length = Math.max(1, (roundAt = fractionSize + 1))
      digits[0] = 0
      for (var i = 1; i < roundAt; i++) digits[i] = 0
    }

    if (digit >= 5) {
      if (roundAt - 1 < 0) {
        for (var k = 0; k > roundAt; k--) {
          digits.unshift(0)
          parsedNumber.i++
        }
        digits.unshift(1)
        parsedNumber.i++
      } else {
        digits[roundAt - 1]++
      }
    }

    // Pad out with zeros to get the required fraction length
    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0)

    // Do any carrying, e.g. a digit was rounded up to 10
    var carry = digits.reduceRight(function (carry, d, i, digits) {
      d = d + carry
      digits[i] = d % 10
      return Math.floor(d / 10)
    }, 0)
    if (carry) {
      digits.unshift(carry)
      parsedNumber.i++
    }
  }

  /**
   * Format a number into a string
   * @param  {number} number       The number to format
   * @param  {{
   *           minFrac, // the minimum number of digits required in the fraction part of the number
   *           maxFrac, // the maximum number of digits required in the fraction part of the number
   *           gSize,   // number of digits in each group of separated digits
   *           lgSize,  // number of digits in the last group of digits before the decimal separator
   *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
   *           posPre,  // the string to go in front of a positive number
   *           negSuf,  // the string to go after a negative number (e.g. `)`)
   *           posSuf   // the string to go after a positive number
   *         }} pattern
   * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
   * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
   * @param  {[type]} fractionSize The size of the fractional part of the number
   * @return {string}              The number formatted as a string
   */
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (!(isString(number) || isNumber(number)) || isNaN(number)) return ''

    var isInfinity = !isFinite(number)
    var isZero = false
    var numStr = Math.abs(number) + '',
      formattedText = '',
      parsedNumber

    if (isInfinity) {
      formattedText = '\u221e'
    } else {
      parsedNumber = parse(numStr)

      roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac)

      var digits = parsedNumber.d
      var integerLen = parsedNumber.i
      var exponent = parsedNumber.e
      var decimals = []
      isZero = digits.reduce(function (isZero, d) {
        return isZero && !d
      }, true)

      // pad zeros for small numbers
      while (integerLen < 0) {
        digits.unshift(0)
        integerLen++
      }

      // extract decimals digits
      if (integerLen > 0) {
        decimals = digits.splice(integerLen, digits.length)
      } else {
        decimals = digits
        digits = [0]
      }

      // format the integer digits with grouping separators
      var groups = []
      if (digits.length >= pattern.lgSize) {
        groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''))
      }
      while (digits.length > pattern.gSize) {
        groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''))
      }
      if (digits.length) {
        groups.unshift(digits.join(''))
      }
      formattedText = groups.join(groupSep)

      // append the decimal digits
      if (decimals.length) {
        formattedText += decimalSep + decimals.join('')
      }

      if (exponent) {
        formattedText += 'e+' + exponent
      }
    }
    if (number < 0 && !isZero) {
      return pattern.negPre + formattedText + pattern.negSuf
    } else {
      return pattern.posPre + formattedText + pattern.posSuf
    }
  }

  function padNumber(num, digits, trim, negWrap) {
    var neg = ''
    if (num < 0 || (negWrap && num <= 0)) {
      if (negWrap) {
        num = -num + 1
      } else {
        num = -num
        neg = '-'
      }
    }
    num = '' + num
    while (num.length < digits) num = ZERO_CHAR + num
    if (trim) {
      num = num.substr(num.length - digits)
    }
    return neg + num
  }

  function dateGetter(name, size, offset, trim, negWrap) {
    offset = offset || 0
    return function (date) {
      var value = date['get' + name]()
      if (offset > 0 || value > -offset) {
        value += offset
      }
      if (value === 0 && offset === -12) value = 12
      return padNumber(value, size, trim, negWrap)
    }
  }

  function dateStrGetter(name, shortForm, standAlone) {
    return function (date, formats) {
      var value = date['get' + name]()
      var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '')
      var get = uppercase(propPrefix + name)

      return formats[get][value]
    }
  }

  function timeZoneGetter(date, formats, offset) {
    var zone = -1 * offset
    var paddedZone = zone >= 0 ? '+' : ''

    paddedZone +=
      padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2)

    return paddedZone
  }

  function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = new Date(year, 0, 1).getDay()
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst)
  }

  function getThursdayThisWeek(datetime) {
    return new Date(
      datetime.getFullYear(),
      datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay())
    )
  }

  function weekGetter(size) {
    return function (date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
        thisThurs = getThursdayThisWeek(date)

      var diff = +thisThurs - +firstThurs,
        result = 1 + Math.round(diff / 6.048e8) // 6.048e8 ms per week

      return padNumber(result, size)
    }
  }

  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1]
  }

  function eraGetter(date, formats) {
    return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1]
  }

  function longEraGetter(date, formats) {
    return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1]
  }

  var DATE_FORMATS = {
    yyyy: dateGetter('FullYear', 4, 0, false, true),
    yy: dateGetter('FullYear', 2, 0, true, true),
    y: dateGetter('FullYear', 1, 0, false, true),
    MMMM: dateStrGetter('Month'),
    MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
    M: dateGetter('Month', 1, 1),
    LLLL: dateStrGetter('Month', false, true),
    dd: dateGetter('Date', 2),
    d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
    H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
    h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
    m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
    s: dateGetter('Seconds', 1),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
    sss: dateGetter('Milliseconds', 3),
    EEEE: dateStrGetter('Day'),
    EEE: dateStrGetter('Day', true),
    a: ampmGetter,
    Z: timeZoneGetter,
    ww: weekGetter(2),
    w: weekGetter(1),
    G: eraGetter,
    GG: eraGetter,
    GGG: eraGetter,
    GGGG: longEraGetter,
  }

  var DATE_FORMATS_SPLIT =
      /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,
    NUMBER_STRING = /^-?\d+$/

  /**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'LLLL'`: Stand-alone month in year (January-December)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 *   Any other characters in the `format` string will be output as-is.
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example name="filter-date">
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
  dateFilter.$inject = ['$locale']
  function dateFilter($locale) {
    var R_ISO8601_STR =
      /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match
      if ((match = string.match(R_ISO8601_STR))) {
        var date = new Date(0),
          tzHour = 0,
          tzMin = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours

        if (match[9]) {
          tzHour = toInt(match[9] + match[10])
          tzMin = toInt(match[9] + match[11])
        }
        dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]))
        var h = toInt(match[4] || 0) - tzHour
        var m = toInt(match[5] || 0) - tzMin
        var s = toInt(match[6] || 0)
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000)
        timeSetter.call(date, h, m, s, ms)
        return date
      }
      return string
    }

    return function (date, format, timezone) {
      var text = '',
        parts = [],
        fn,
        match

      format = format || 'mediumDate'
      format = $locale.DATETIME_FORMATS[format] || format
      if (isString(date)) {
        date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date)
      }

      if (isNumber(date)) {
        date = new Date(date)
      }

      if (!isDate(date) || !isFinite(date.getTime())) {
        return date
      }

      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format)
        if (match) {
          parts = concat(parts, match, 1)
          format = parts.pop()
        } else {
          parts.push(format)
          format = null
        }
      }

      var dateTimezoneOffset = date.getTimezoneOffset()
      if (timezone) {
        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset)
        date = convertTimezoneToLocal(date, timezone, true)
      }
      forEach(parts, function (value) {
        fn = DATE_FORMATS[value]
        text += fn
          ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
          : value === "''"
          ? "'"
          : value.replace(/(^'|'$)/g, '').replace(/''/g, "'")
      })

      return text
    }
  }

  /**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example name="filter-json">
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
  function jsonFilter() {
    return function (object, spacing) {
      if (isUndefined(spacing)) {
        spacing = 2
      }
      return toJson(object, spacing)
    }
  }

  /**
   * @ngdoc filter
   * @name lowercase
   * @kind function
   * @description
   * Converts string to lowercase.
   *
   * See the {@link ng.uppercase uppercase filter documentation} for a functionally identical example.
   *
   * @see angular.lowercase
   */
  var lowercaseFilter = valueFn(lowercase)

  /**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @example
   <example module="uppercaseFilterExample" name="filter-uppercase">
     <file name="index.html">
       <script>
         angular.module('uppercaseFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.title = 'This is a title';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <!-- This title should be formatted normally -->
         <h1>{{title}}</h1>
         <!-- This title should be capitalized -->
         <h1>{{title | uppercase}}</h1>
       </div>
     </file>
   </example>
 */
  var uppercaseFilter = valueFn(uppercase)

  /**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements are
 * taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
 * it is converted to a string.
 *
 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
 *     the input will be returned unchanged.
 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
 *     less than `limit` elements.
 *
 * @example
   <example module="limitToExample" name="limit-to-filter">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>
            Limit {{numbers}} to:
            <input type="number" step="1" ng-model="numLimit">
         </label>
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         <label>
            Limit {{letters}} to:
            <input type="number" step="1" ng-model="letterLimit">
         </label>
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         <label>
            Limit {{longNumber}} to:
            <input type="number" step="1" ng-model="longNumberLimit">
         </label>
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
  function limitToFilter() {
    return function (input, limit, begin) {
      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit)
      } else {
        limit = toInt(limit)
      }
      if (isNumberNaN(limit)) return input

      if (isNumber(input)) input = input.toString()
      if (!isArrayLike(input)) return input

      begin = !begin || isNaN(begin) ? 0 : toInt(begin)
      begin = begin < 0 ? Math.max(0, input.length + begin) : begin

      if (limit >= 0) {
        return sliceFn(input, begin, begin + limit)
      } else {
        if (begin === 0) {
          return sliceFn(input, limit, input.length)
        } else {
          return sliceFn(input, Math.max(0, begin + limit), begin)
        }
      }
    }
  }

  function sliceFn(input, begin, end) {
    if (isString(input)) return input.slice(begin, end)

    return slice.call(input, begin, end)
  }

  /**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
 * function based on the values computed using the `expression` predicate.
 *
 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
 * `[{id: 'bar'}, {id: 'foo'}]`.
 *
 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
 * String, etc).
 *
 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
 * for the preceding one. The `expression` is evaluated against each item and the output is used
 * for comparing with other items.
 *
 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
 * ascending order.
 *
 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
 * strings alphabetically).
 *
 * ### Under the hood
 *
 * Ordering the specified `collection` happens in two phases:
 *
 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
 *    through a predicate that extracts the value of the `label` property, would be transformed to:
 *    ```
 *    {
 *      value: 'foo',
 *      type: 'string',
 *      index: ...
 *    }
 *    ```
 *    **Note:** `null` values use `'null'` as their type.
 * 2. The comparator function is used to sort the items, based on the derived values, types and
 *    indices.
 *
 * If you use a custom comparator, it will be called with pairs of objects of the form
 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
 * second, or `1` otherwise.
 *
 * In order to ensure that the sorting will be deterministic across platforms, if none of the
 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
 * dummy predicate that returns the item's index as `value`.
 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
 *
 * If a custom comparator still can't distinguish between two items, then they will be sorted based
 * on their index using the built-in comparator.
 *
 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
 * it to the comparator. The following rules govern the conversion:
 *
 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
 *    used instead.<br />
 *    (If the object has a `valueOf()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
 *    returns a primitive, its return value will be used instead.<br />
 *    (If the object has a `toString()` method that returns another object, then the returned object
 *    will be used in subsequent steps.)
 * 3. No conversion; the object itself is used.
 *
 * ### The default comparator
 *
 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
 * using their index in the original collection, sorts values of different types by type and puts
 * `undefined` and `null` values at the end of the sorted list.
 *
 * More specifically, it follows these steps to determine the relative order of items:
 *
 * 1. If the compared values are of different types:
 *    - If one of the values is undefined, consider it "greater than" the other.
 *    - Else if one of the values is null, consider it "greater than" the other.
 *    - Else compare the types themselves alphabetically.
 * 2. If both values are of type `string`, compare them alphabetically in a case- and
 *    locale-insensitive way.
 * 3. If both values are objects, compare their indices instead.
 * 4. Otherwise, return:
 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
 *    -  `1`, otherwise.
 *
 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
 *           saved as numbers and not strings.
 * **Note:** For the purpose of sorting, `null` and `undefined` are considered "greater than"
 *           any other value (with undefined "greater than" null). This effectively means that `null`
 *           and `undefined` values end up at the end of a list sorted in ascending order.
 * **Note:** `null` values use `'null'` as their type to be able to distinguish them from objects.
 *
 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
 *    predicates) to be used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `Function`: A getter function. This function will be called with each item as argument and
 *      the return value will be used for sorting.
 *    - `string`: An AngularJS expression. This expression will be evaluated against each item and the
 *      result will be used for sorting. For example, use `'label'` to sort by a property called
 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
 *      property.<br />
 *      (The result of a constant expression is interpreted as a property name to be used for
 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
 *      property called `special name`.)<br />
 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
 *      relative order of two items, the next predicate is used as a tie-breaker.
 *
 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse - If `true`, reverse the sorting order.
 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
 *    value pairs. If omitted, the built-in comparator will be used.
 *
 * @returns {Array} - The sorted array.
 *
 *
 * @example
 * ### Ordering a table with `ngRepeat`
 *
 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
 * it defaults to the built-in comparator.
 *
   <example name="orderBy-static" module="orderByExample1">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <table class="friends">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample1', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var names = element.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by age in reverse order', function() {
         expect(names.get(0).getText()).toBe('Adam');
         expect(names.get(1).getText()).toBe('Julie');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('John');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Changing parameters dynamically
 *
 * All parameters can be changed dynamically. The next example shows how you can make the columns of
 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
 *
   <example name="orderBy-dynamic" module="orderByExample2">
     <file name="index.html">
       <div ng-controller="ExampleController">d
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample2', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = friends;

           $scope.sortBy = function(propertyName) {
             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using `orderBy` inside a controller
 *
 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
 *
   <example name="orderBy-call-manually" module="orderByExample3">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
         <hr/>
         <button ng-click="sortBy(null)">Set to unsorted</button>
         <hr/>
         <table class="friends">
           <tr>
             <th>
               <button ng-click="sortBy('name')">Name</button>
               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('phone')">Phone Number</button>
               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
             </th>
             <th>
               <button ng-click="sortBy('age')">Age</button>
               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
             </th>
           </tr>
           <tr ng-repeat="friend in friends">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample3', [])
         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
           var friends = [
             {name: 'John',   phone: '555-1212',  age: 10},
             {name: 'Mary',   phone: '555-9876',  age: 19},
             {name: 'Mike',   phone: '555-4321',  age: 21},
             {name: 'Adam',   phone: '555-5678',  age: 35},
             {name: 'Julie',  phone: '555-8765',  age: 29}
           ];

           $scope.propertyName = 'age';
           $scope.reverse = true;
           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);

           $scope.sortBy = function(propertyName) {
             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
                 ? !$scope.reverse : false;
             $scope.propertyName = propertyName;
             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
           };
         }]);
     </file>
     <file name="style.css">
       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }

       .sortorder:after {
         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
       }
       .sortorder.reverse:after {
         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var unsortButton = element(by.partialButtonText('unsorted'));
       var nameHeader = element(by.partialButtonText('Name'));
       var phoneHeader = element(by.partialButtonText('Phone'));
       var ageHeader = element(by.partialButtonText('Age'));
       var firstName = element(by.repeater('friends').column('friend.name').row(0));
       var lastName = element(by.repeater('friends').column('friend.name').row(4));

       it('should sort friends by some property, when clicking on the column header', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         phoneHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Mary');

         nameHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('Mike');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');
       });

       it('should sort friends in reverse order, when clicking on the same column', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         ageHeader.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Adam');

         ageHeader.click();
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');
       });

       it('should restore the original order, when clicking "Set to unsorted"', function() {
         expect(firstName.getText()).toBe('Adam');
         expect(lastName.getText()).toBe('John');

         unsortButton.click();
         expect(firstName.getText()).toBe('John');
         expect(lastName.getText()).toBe('Julie');
       });
     </file>
   </example>
 * <hr />
 *
 * @example
 * ### Using a custom comparator
 *
 * If you have very specific requirements about the way items are sorted, you can pass your own
 * comparator function. For example, you might need to compare some strings in a locale-sensitive
 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
 * argument - passing `false` retains the default sorting order, i.e. ascending.)
 *
   <example name="orderBy-custom-comparator" module="orderByExample4">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <div class="friends-container custom-comparator">
           <h3>Locale-sensitive Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
         <div class="friends-container default-comparator">
           <h3>Default Comparator</h3>
           <table class="friends">
             <tr>
               <th>Name</th>
               <th>Favorite Letter</th>
             </tr>
             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
               <td>{{friend.name}}</td>
               <td>{{friend.favoriteLetter}}</td>
             </tr>
           </table>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('orderByExample4', [])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.friends = [
             {name: 'John',   favoriteLetter: 'Ä'},
             {name: 'Mary',   favoriteLetter: 'Ü'},
             {name: 'Mike',   favoriteLetter: 'Ö'},
             {name: 'Adam',   favoriteLetter: 'H'},
             {name: 'Julie',  favoriteLetter: 'Z'}
           ];

           $scope.localeSensitiveComparator = function(v1, v2) {
             // If we don't get strings, just compare by index
             if (v1.type !== 'string' || v2.type !== 'string') {
               return (v1.index < v2.index) ? -1 : 1;
             }

             // Compare strings alphabetically, taking locale into account
             return v1.value.localeCompare(v2.value);
           };
         }]);
     </file>
     <file name="style.css">
       .friends-container {
         display: inline-block;
         margin: 0 30px;
       }

       .friends {
         border-collapse: collapse;
       }

       .friends th {
         border-bottom: 1px solid;
       }
       .friends td, .friends th {
         border-left: 1px solid;
         padding: 5px 10px;
       }
       .friends td:first-child, .friends th:first-child {
         border-left: none;
       }
     </file>
     <file name="protractor.js" type="protractor">
       // Element locators
       var container = element(by.css('.custom-comparator'));
       var names = container.all(by.repeater('friends').column('friend.name'));

       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
         expect(names.get(0).getText()).toBe('John');
         expect(names.get(1).getText()).toBe('Adam');
         expect(names.get(2).getText()).toBe('Mike');
         expect(names.get(3).getText()).toBe('Mary');
         expect(names.get(4).getText()).toBe('Julie');
       });
     </file>
   </example>
 *
 */
  orderByFilter.$inject = ['$parse']
  function orderByFilter($parse) {
    return function (array, sortPredicate, reverseOrder, compareFn) {
      if (array == null) return array
      if (!isArrayLike(array)) {
        throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array)
      }

      if (!isArray(sortPredicate)) {
        sortPredicate = [sortPredicate]
      }
      if (sortPredicate.length === 0) {
        sortPredicate = ['+']
      }

      var predicates = processPredicates(sortPredicate)

      var descending = reverseOrder ? -1 : 1

      // Define the `compare()` function. Use a default comparator if none is specified.
      var compare = isFunction(compareFn) ? compareFn : defaultCompare

      // The next three lines are a version of a Swartzian Transform idiom from Perl
      // (sometimes called the Decorate-Sort-Undecorate idiom)
      // See https://en.wikipedia.org/wiki/Schwartzian_transform
      var compareValues = Array.prototype.map.call(array, getComparisonObject)
      compareValues.sort(doComparison)
      array = compareValues.map(function (item) {
        return item.value
      })

      return array

      function getComparisonObject(value, index) {
        // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
        // This will be used to keep the sort stable when none of the input predicates can
        // distinguish between two elements.
        return {
          value: value,
          tieBreaker: { value: index, type: 'number', index: index },
          predicateValues: predicates.map(function (predicate) {
            return getPredicateValue(predicate.get(value), index)
          }),
        }
      }

      function doComparison(v1, v2) {
        for (var i = 0, ii = predicates.length; i < ii; i++) {
          var result = compare(v1.predicateValues[i], v2.predicateValues[i])
          if (result) {
            return result * predicates[i].descending * descending
          }
        }

        return (
          (compare(v1.tieBreaker, v2.tieBreaker) || defaultCompare(v1.tieBreaker, v2.tieBreaker)) *
          descending
        )
      }
    }

    function processPredicates(sortPredicates) {
      return sortPredicates.map(function (predicate) {
        var descending = 1,
          get = identity

        if (isFunction(predicate)) {
          get = predicate
        } else if (isString(predicate)) {
          if (predicate.charAt(0) === '+' || predicate.charAt(0) === '-') {
            descending = predicate.charAt(0) === '-' ? -1 : 1
            predicate = predicate.substring(1)
          }
          if (predicate !== '') {
            get = $parse(predicate)
            if (get.constant) {
              var key = get()
              get = function (value) {
                return value[key]
              }
            }
          }
        }
        return { get: get, descending: descending }
      })
    }

    function isPrimitive(value) {
      switch (typeof value) {
        case 'number': /* falls through */
        case 'boolean': /* falls through */
        case 'string':
          return true
        default:
          return false
      }
    }

    function objectValue(value) {
      // If `valueOf` is a valid function use that
      if (isFunction(value.valueOf)) {
        value = value.valueOf()
        if (isPrimitive(value)) return value
      }
      // If `toString` is a valid function and not the one from `Object.prototype` use that
      if (hasCustomToString(value)) {
        value = value.toString()
        if (isPrimitive(value)) return value
      }

      return value
    }

    function getPredicateValue(value, index) {
      var type = typeof value
      if (value === null) {
        type = 'null'
      } else if (type === 'object') {
        value = objectValue(value)
      }
      return { value: value, type: type, index: index }
    }

    function defaultCompare(v1, v2) {
      var result = 0
      var type1 = v1.type
      var type2 = v2.type

      if (type1 === type2) {
        var value1 = v1.value
        var value2 = v2.value

        if (type1 === 'string') {
          // Compare strings case-insensitively
          value1 = value1.toLowerCase()
          value2 = value2.toLowerCase()
        } else if (type1 === 'object') {
          // For basic objects, use the position of the object
          // in the collection instead of the value
          if (isObject(value1)) value1 = v1.index
          if (isObject(value2)) value2 = v2.index
        }

        if (value1 !== value2) {
          result = value1 < value2 ? -1 : 1
        }
      } else {
        result =
          type1 === 'undefined'
            ? 1
            : type2 === 'undefined'
            ? -1
            : type1 === 'null'
            ? 1
            : type2 === 'null'
            ? -1
            : type1 < type2
            ? -1
            : 1
      }

      return result
    }
  }

  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = {
        link: directive,
      }
    }
    directive.restrict = directive.restrict || 'AC'
    return valueFn(directive)
  }

  /**
   * @ngdoc directive
   * @name a
   * @restrict E
   *
   * @description
   * Modifies the default behavior of the html a tag so that the default action is prevented when
   * the href attribute is empty.
   *
   * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
   */
  var htmlAnchorDirective = valueFn({
    restrict: 'E',
    compile: function (element, attr) {
      if (!attr.href && !attr.xlinkHref) {
        return function (scope, element) {
          // If the linked element is not an anchor tag anymore, do nothing
          if (element[0].nodeName.toLowerCase() !== 'a') return

          // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
          var href =
            toString.call(element.prop('href')) === '[object SVGAnimatedString]'
              ? 'xlink:href'
              : 'href'
          element.on('click', function (event) {
            // if we have no href url, then don't navigate anywhere.
            if (!element.attr(href)) {
              event.preventDefault()
            }
          })
        }
      }
    },
  })

  /**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using AngularJS markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * AngularJS has a chance to replace the `{{hash}}` markup with its
 * value. Until AngularJS replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example name="ng-href">
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an AngularJS page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        it('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an AngularJS page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

  /**
   * @ngdoc directive
   * @name ngSrc
   * @restrict A
   * @priority 99
   *
   * @description
   * Using AngularJS markup like `{{hash}}` in a `src` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until AngularJS replaces the expression inside
   * `{{hash}}`. The `ngSrc` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
   * ```
   *
   * @element IMG
   * @param {template} ngSrc any string which can contain `{{}}` markup.
   */

  /**
   * @ngdoc directive
   * @name ngSrcset
   * @restrict A
   * @priority 99
   *
   * @description
   * Using AngularJS markup like `{{hash}}` in a `srcset` attribute doesn't
   * work right: The browser will fetch from the URL with the literal
   * text `{{hash}}` until AngularJS replaces the expression inside
   * `{{hash}}`. The `ngSrcset` directive solves this problem.
   *
   * The buggy way to write it:
   * ```html
   * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
   * ```
   *
   * The correct way to write it:
   * ```html
   * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
   * ```
   *
   * @element IMG
   * @param {template} ngSrcset any string which can contain `{{}}` markup.
   */

  /**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element (typically a form control,
 * e.g. `input`, `button`, `select` etc.) if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-disabled">
      <file name="index.html">
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */

  /**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
 *
 * Note that this directive should not be used together with {@link ngModel `ngModel`},
 * as this can lead to unexpected behavior.
 *
 * A special directive is necessary because we cannot use interpolation inside the `checked`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-checked">
      <file name="index.html">
        <label>Check me to check both: <input type="checkbox" ng-model="leader"></label><br/>
        <input id="checkFollower" type="checkbox" ng-checked="leader" aria-label="Follower input">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkFollower')).getAttribute('checked')).toBeFalsy();
          element(by.model('leader')).click();
          expect(element(by.id('checkFollower')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then the `checked` attribute will be set on the element
 */

  /**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
 *
 * A special directive is necessary because we cannot use interpolation inside the `readonly`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * @example
    <example name="ng-readonly">
      <file name="index.html">
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
        <input type="text" ng-readonly="checked" value="I'm AngularJS" aria-label="Readonly field" />
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */

  /**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `selected`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * <div class="alert alert-warning">
 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
 *   selected options.
 * </div>
 *
 * @example
    <example name="ng-selected">
      <file name="index.html">
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
        <select aria-label="ngSelected demo">
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

  /**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `open`
 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
 *
 * ## A note about browser compatibility
 *
 * Internet Explorer and Edge do not support the `details` element, it is
 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
 *
 * @example
     <example name="ng-open">
       <file name="index.html">
         <label>Toggle details: <input type="checkbox" ng-model="open"></label><br/>
         <details id="details" ng-open="open">
            <summary>List</summary>
            <ul>
              <li>Apple</li>
              <li>Orange</li>
              <li>Durian</li>
            </ul>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

  var ngAttributeAliasDirectives = {}

  // boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function (propName, attrName) {
    // binding to multiple is not supported
    if (propName === 'multiple') return

    function defaultLinkFn(scope, element, attr) {
      scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
        attr.$set(attrName, !!value)
      })
    }

    var normalized = directiveNormalize('ng-' + attrName)
    var linkFn = defaultLinkFn

    if (propName === 'checked') {
      linkFn = function (scope, element, attr) {
        // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
        if (attr.ngModel !== attr[normalized]) {
          defaultLinkFn(scope, element, attr)
        }
      }
    }

    ngAttributeAliasDirectives[normalized] = function () {
      return {
        restrict: 'A',
        priority: 100,
        link: linkFn,
      }
    }
  })

  // aliased input attrs are evaluated
  forEach(ALIASED_ATTR, function (htmlAttr, ngAttr) {
    ngAttributeAliasDirectives[ngAttr] = function () {
      return {
        priority: 100,
        link: function (scope, element, attr) {
          //special case ngPattern when a literal regular expression value
          //is used as the expression (this way we don't have to watch anything).
          if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) === '/') {
            var match = attr.ngPattern.match(REGEX_STRING_REGEXP)
            if (match) {
              attr.$set('ngPattern', new RegExp(match[1], match[2]))
              return
            }
          }

          scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
            attr.$set(ngAttr, value)
          })
        },
      }
    }
  })

  // ng-src, ng-srcset, ng-href are interpolated
  forEach(['src', 'srcset', 'href'], function (attrName) {
    var normalized = directiveNormalize('ng-' + attrName)
    ngAttributeAliasDirectives[normalized] = [
      '$sce',
      function ($sce) {
        return {
          priority: 99, // it needs to run after the attributes are interpolated
          link: function (scope, element, attr) {
            var propName = attrName,
              name = attrName

            if (
              attrName === 'href' &&
              toString.call(element.prop('href')) === '[object SVGAnimatedString]'
            ) {
              name = 'xlinkHref'
              attr.$attr[name] = 'xlink:href'
              propName = null
            }

            // We need to sanitize the url at least once, in case it is a constant
            // non-interpolated attribute.
            attr.$set(normalized, $sce.getTrustedMediaUrl(attr[normalized]))

            attr.$observe(normalized, function (value) {
              if (!value) {
                if (attrName === 'href') {
                  attr.$set(name, null)
                }
                return
              }

              attr.$set(name, value)

              // Support: IE 9-11 only
              // On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
              // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
              // to set the property as well to achieve the desired effect.
              // We use attr[attrName] value since $set might have sanitized the url.
              if (msie && propName) element.prop(propName, attr[name])
            })
          },
        }
      },
    ]
  })

  /* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
   */
  var nullFormCtrl = {
      $addControl: noop,
      $getControls: valueFn([]),
      $$renameControl: nullFormRenameControl,
      $removeControl: noop,
      $setValidity: noop,
      $setDirty: noop,
      $setPristine: noop,
      $setSubmitted: noop,
      $$setSubmitted: noop,
    },
    PENDING_CLASS = 'ng-pending',
    SUBMITTED_CLASS = 'ng-submitted'

  function nullFormRenameControl(control, name) {
    control.$name = name
  }

  /**
   * @ngdoc type
   * @name form.FormController
   *
   * @property {boolean} $pristine True if user has not interacted with the form yet.
   * @property {boolean} $dirty True if user has already interacted with the form.
   * @property {boolean} $valid True if all of the containing forms and controls are valid.
   * @property {boolean} $invalid True if at least one containing control or form is invalid.
   * @property {boolean} $submitted True if user has submitted the form even if its invalid.
   *
   * @property {Object} $pending An object hash, containing references to controls or forms with
   *  pending validators, where:
   *
   *  - keys are validations tokens (error names).
   *  - values are arrays of controls or forms that have a pending validator for the given error name.
   *
   * See {@link form.FormController#$error $error} for a list of built-in validation tokens.
   *
   * @property {Object} $error An object hash, containing references to controls or forms with failing
   *  validators, where:
   *
   *  - keys are validation tokens (error names),
   *  - values are arrays of controls or forms that have a failing validator for the given error name.
   *
   *  Built-in validation tokens:
   *  - `email`
   *  - `max`
   *  - `maxlength`
   *  - `min`
   *  - `minlength`
   *  - `number`
   *  - `pattern`
   *  - `required`
   *  - `url`
   *  - `date`
   *  - `datetimelocal`
   *  - `time`
   *  - `week`
   *  - `month`
   *
   * @description
   * `FormController` keeps track of all its controls and nested forms as well as the state of them,
   * such as being valid/invalid or dirty/pristine.
   *
   * Each {@link ng.directive:form form} directive creates an instance
   * of `FormController`.
   *
   */
  //asks for $scope to fool the BC controller module
  FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate']
  function FormController($element, $attrs, $scope, $animate, $interpolate) {
    this.$$controls = []

    // init state
    this.$error = {}
    this.$$success = {}
    this.$pending = undefined
    this.$name = $interpolate($attrs.name || $attrs.ngForm || '')($scope)
    this.$dirty = false
    this.$pristine = true
    this.$valid = true
    this.$invalid = false
    this.$submitted = false
    this.$$parentForm = nullFormCtrl

    this.$$element = $element
    this.$$animate = $animate

    setupValidity(this)
  }

  FormController.prototype = {
    /**
     * @ngdoc method
     * @name form.FormController#$rollbackViewValue
     *
     * @description
     * Rollback all form controls pending updates to the `$modelValue`.
     *
     * Updates may be pending by a debounced event or because the input is waiting for a some future
     * event defined in `ng-model-options`. This method is typically needed by the reset button of
     * a form that uses `ng-model-options` to pend updates.
     */
    $rollbackViewValue: function () {
      forEach(this.$$controls, function (control) {
        control.$rollbackViewValue()
      })
    },

    /**
     * @ngdoc method
     * @name form.FormController#$commitViewValue
     *
     * @description
     * Commit all form controls pending updates to the `$modelValue`.
     *
     * Updates may be pending by a debounced event or because the input is waiting for a some future
     * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
     * usually handles calling this in response to input events.
     */
    $commitViewValue: function () {
      forEach(this.$$controls, function (control) {
        control.$commitViewValue()
      })
    },

    /**
     * @ngdoc method
     * @name form.FormController#$addControl
     * @param {object} control control object, either a {@link form.FormController} or an
     * {@link ngModel.NgModelController}
     *
     * @description
     * Register a control with the form. Input elements using ngModelController do this automatically
     * when they are linked.
     *
     * Note that the current state of the control will not be reflected on the new parent form. This
     * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
     * state.
     *
     * However, if the method is used programmatically, for example by adding dynamically created controls,
     * or controls that have been previously removed without destroying their corresponding DOM element,
     * it's the developers responsibility to make sure the current state propagates to the parent form.
     *
     * For example, if an input control is added that is already `$dirty` and has `$error` properties,
     * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
     */
    $addControl: function (control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input')
      this.$$controls.push(control)

      if (control.$name) {
        this[control.$name] = control
      }

      control.$$parentForm = this
    },

    /**
     * @ngdoc method
     * @name form.FormController#$getControls
     * @returns {Array} the controls that are currently part of this form
     *
     * @description
     * This method returns a **shallow copy** of the controls that are currently part of this form.
     * The controls can be instances of {@link form.FormController `FormController`}
     * ({@link ngForm "child-forms"}) and of {@link ngModel.NgModelController `NgModelController`}.
     * If you need access to the controls of child-forms, you have to call `$getControls()`
     * recursively on them.
     * This can be used for example to iterate over all controls to validate them.
     *
     * The controls can be accessed normally, but adding to, or removing controls from the array has
     * no effect on the form. Instead, use {@link form.FormController#$addControl `$addControl()`} and
     * {@link form.FormController#$removeControl `$removeControl()`} for this use-case.
     * Likewise, adding a control to, or removing a control from the form is not reflected
     * in the shallow copy. That means you should get a fresh copy from `$getControls()` every time
     * you need access to the controls.
     */
    $getControls: function () {
      return shallowCopy(this.$$controls)
    },

    // Private API: rename a form control
    $$renameControl: function (control, newName) {
      var oldName = control.$name

      if (this[oldName] === control) {
        delete this[oldName]
      }
      this[newName] = control
      control.$name = newName
    },

    /**
     * @ngdoc method
     * @name form.FormController#$removeControl
     * @param {object} control control object, either a {@link form.FormController} or an
     * {@link ngModel.NgModelController}
     *
     * @description
     * Deregister a control from the form.
     *
     * Input elements using ngModelController do this automatically when they are destroyed.
     *
     * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
     * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
     * different from case to case. For example, removing the only `$dirty` control from a form may or
     * may not mean that the form is still `$dirty`.
     */
    $removeControl: function (control) {
      if (control.$name && this[control.$name] === control) {
        delete this[control.$name]
      }
      forEach(
        this.$pending,
        function (value, name) {
          // eslint-disable-next-line no-invalid-this
          this.$setValidity(name, null, control)
        },
        this
      )
      forEach(
        this.$error,
        function (value, name) {
          // eslint-disable-next-line no-invalid-this
          this.$setValidity(name, null, control)
        },
        this
      )
      forEach(
        this.$$success,
        function (value, name) {
          // eslint-disable-next-line no-invalid-this
          this.$setValidity(name, null, control)
        },
        this
      )

      arrayRemove(this.$$controls, control)
      control.$$parentForm = nullFormCtrl
    },

    /**
     * @ngdoc method
     * @name form.FormController#$setDirty
     *
     * @description
     * Sets the form to a dirty state.
     *
     * This method can be called to add the 'ng-dirty' class and set the form to a dirty
     * state (ng-dirty class). This method will also propagate to parent forms.
     */
    $setDirty: function () {
      this.$$animate.removeClass(this.$$element, PRISTINE_CLASS)
      this.$$animate.addClass(this.$$element, DIRTY_CLASS)
      this.$dirty = true
      this.$pristine = false
      this.$$parentForm.$setDirty()
    },

    /**
     * @ngdoc method
     * @name form.FormController#$setPristine
     *
     * @description
     * Sets the form to its pristine state.
     *
     * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
     * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
     * state to false.
     *
     * This method will also propagate to all the controls contained in this form.
     *
     * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
     * saving or resetting it.
     */
    $setPristine: function () {
      this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS)
      this.$dirty = false
      this.$pristine = true
      this.$submitted = false
      forEach(this.$$controls, function (control) {
        control.$setPristine()
      })
    },

    /**
     * @ngdoc method
     * @name form.FormController#$setUntouched
     *
     * @description
     * Sets the form to its untouched state.
     *
     * This method can be called to remove the 'ng-touched' class and set the form controls to their
     * untouched state (ng-untouched class).
     *
     * Setting a form controls back to their untouched state is often useful when setting the form
     * back to its pristine state.
     */
    $setUntouched: function () {
      forEach(this.$$controls, function (control) {
        control.$setUntouched()
      })
    },

    /**
     * @ngdoc method
     * @name form.FormController#$setSubmitted
     *
     * @description
     * Sets the form to its `$submitted` state. This will also set `$submitted` on all child and
     * parent forms of the form.
     */
    $setSubmitted: function () {
      var rootForm = this
      while (rootForm.$$parentForm && rootForm.$$parentForm !== nullFormCtrl) {
        rootForm = rootForm.$$parentForm
      }
      rootForm.$$setSubmitted()
    },

    $$setSubmitted: function () {
      this.$$animate.addClass(this.$$element, SUBMITTED_CLASS)
      this.$submitted = true
      forEach(this.$$controls, function (control) {
        if (control.$$setSubmitted) {
          control.$$setSubmitted()
        }
      })
    },
  }

  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Change the validity state of the form, and notify the parent form (if any).
   *
   * Application developers will rarely need to call this method directly. It is used internally, by
   * {@link ngModel.NgModelController#$setValidity NgModelController.$setValidity()}, to propagate a
   * control's validity state to the parent `FormController`.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be
   *        assigned to either `$error[validationErrorKey]` or `$pending[validationErrorKey]` (for
   *        unfulfilled `$asyncValidators`), so that it is available for data-binding. The
   *        `validationErrorKey` should be in camelCase and will get converted into dash-case for
   *        class name. Example: `myError` will result in `ng-valid-my-error` and
   *        `ng-invalid-my-error` classes and can be bound to as `{{ someForm.$error.myError }}`.
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending
   *        (undefined),  or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *        Skipped is used by AngularJS when validators do not run because of parse errors and when
   *        `$asyncValidators` do not run because any of the `$validators` failed.
   * @param {NgModelController | FormController} controller - The controller whose validity state is
   *        triggering the change.
   */
  addSetValidityMethod({
    clazz: FormController,
    set: function (object, property, controller) {
      var list = object[property]
      if (!list) {
        object[property] = [controller]
      } else {
        var index = list.indexOf(controller)
        if (index === -1) {
          list.push(controller)
        }
      }
    },
    unset: function (object, property, controller) {
      var list = object[property]
      if (!list) {
        return
      }
      arrayRemove(list, controller)
      if (list.length === 0) {
        delete object[property]
      }
    },
  })

  /**
   * @ngdoc directive
   * @name ngForm
   * @restrict EAC
   *
   * @description
   * Helper directive that makes it possible to create control groups inside a
   * {@link ng.directive:form `form`} directive.
   * These "child forms" can be used, for example, to determine the validity of a sub-group of
   * controls.
   *
   * <div class="alert alert-danger">
   * **Note**: `ngForm` cannot be used as a replacement for `<form>`, because it lacks its
   * [built-in HTML functionality](https://html.spec.whatwg.org/#the-form-element).
   * Specifically, you cannot submit `ngForm` like a `<form>` tag. That means,
   * you cannot send data to the server with `ngForm`, or integrate it with
   * {@link ng.directive:ngSubmit `ngSubmit`}.
   * </div>
   *
   * @param {string=} ngForm|name Name of the form. If specified, the form controller will
   *                              be published into the related scope, under this name.
   *
   */

  /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * ## Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In AngularJS, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * AngularJS provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
 * of controls needs to be determined.
 *
 * ## CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pending` is set if the form is pending.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * ## Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side AngularJS applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, AngularJS prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * @animations
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
  var formDirectiveFactory = function (isNgForm) {
    return [
      '$timeout',
      '$parse',
      function ($timeout, $parse) {
        var formDirective = {
          name: 'form',
          restrict: isNgForm ? 'EAC' : 'E',
          require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
          controller: FormController,
          compile: function ngFormCompile(formElement, attr) {
            // Setup initial state of the control
            formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS)

            var nameAttr = attr.name ? 'name' : isNgForm && attr.ngForm ? 'ngForm' : false

            return {
              pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
                var controller = ctrls[0]

                // if `action` attr is not present on the form, prevent the default action (submission)
                if (!('action' in attr)) {
                  // we can't use jq events because if a form is destroyed during submission the default
                  // action is not prevented. see #1238
                  //
                  // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                  // page reload if the form was destroyed by submission of the form via a click handler
                  // on a button in the form. Looks like an IE9 specific bug.
                  var handleFormSubmission = function (event) {
                    scope.$apply(function () {
                      controller.$commitViewValue()
                      controller.$setSubmitted()
                    })

                    event.preventDefault()
                  }

                  formElement[0].addEventListener('submit', handleFormSubmission)

                  // unregister the preventDefault listener so that we don't not leak memory but in a
                  // way that will achieve the prevention of the default action.
                  formElement.on('$destroy', function () {
                    $timeout(
                      function () {
                        formElement[0].removeEventListener('submit', handleFormSubmission)
                      },
                      0,
                      false
                    )
                  })
                }

                var parentFormCtrl = ctrls[1] || controller.$$parentForm
                parentFormCtrl.$addControl(controller)

                var setter = nameAttr ? getSetter(controller.$name) : noop

                if (nameAttr) {
                  setter(scope, controller)
                  attr.$observe(nameAttr, function (newValue) {
                    if (controller.$name === newValue) return
                    setter(scope, undefined)
                    controller.$$parentForm.$$renameControl(controller, newValue)
                    setter = getSetter(controller.$name)
                    setter(scope, controller)
                  })
                }
                formElement.on('$destroy', function () {
                  controller.$$parentForm.$removeControl(controller)
                  setter(scope, undefined)
                  extend(controller, nullFormCtrl) //stop propagating child destruction handlers upwards
                })
              },
            }
          },
        }

        return formDirective

        function getSetter(expression) {
          if (expression === '') {
            //create an assignable expression, so forms with an empty name can be renamed later
            return $parse('this[""]').assign
          }
          return $parse(expression).assign || noop
        }
      },
    ]
  }

  var formDirective = formDirectiveFactory()
  var ngFormDirective = formDirectiveFactory(true)

  // helper methods
  function setupValidity(instance) {
    instance.$$classCache = {}
    instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] =
      instance.$$element.hasClass(VALID_CLASS))
  }
  function addSetValidityMethod(context) {
    var clazz = context.clazz,
      set = context.set,
      unset = context.unset

    clazz.prototype.$setValidity = function (validationErrorKey, state, controller) {
      if (isUndefined(state)) {
        createAndSet(this, '$pending', validationErrorKey, controller)
      } else {
        unsetAndCleanup(this, '$pending', validationErrorKey, controller)
      }
      if (!isBoolean(state)) {
        unset(this.$error, validationErrorKey, controller)
        unset(this.$$success, validationErrorKey, controller)
      } else {
        if (state) {
          unset(this.$error, validationErrorKey, controller)
          set(this.$$success, validationErrorKey, controller)
        } else {
          set(this.$error, validationErrorKey, controller)
          unset(this.$$success, validationErrorKey, controller)
        }
      }
      if (this.$pending) {
        cachedToggleClass(this, PENDING_CLASS, true)
        this.$valid = this.$invalid = undefined
        toggleValidationCss(this, '', null)
      } else {
        cachedToggleClass(this, PENDING_CLASS, false)
        this.$valid = isObjectEmpty(this.$error)
        this.$invalid = !this.$valid
        toggleValidationCss(this, '', this.$valid)
      }

      // re-read the state as the set/unset methods could have
      // combined state in this.$error[validationError] (used for forms),
      // where setting/unsetting only increments/decrements the value,
      // and does not replace it.
      var combinedState
      if (this.$pending && this.$pending[validationErrorKey]) {
        combinedState = undefined
      } else if (this.$error[validationErrorKey]) {
        combinedState = false
      } else if (this.$$success[validationErrorKey]) {
        combinedState = true
      } else {
        combinedState = null
      }

      toggleValidationCss(this, validationErrorKey, combinedState)
      this.$$parentForm.$setValidity(validationErrorKey, combinedState, this)
    }

    function createAndSet(ctrl, name, value, controller) {
      if (!ctrl[name]) {
        ctrl[name] = {}
      }
      set(ctrl[name], value, controller)
    }

    function unsetAndCleanup(ctrl, name, value, controller) {
      if (ctrl[name]) {
        unset(ctrl[name], value, controller)
      }
      if (isObjectEmpty(ctrl[name])) {
        ctrl[name] = undefined
      }
    }

    function cachedToggleClass(ctrl, className, switchValue) {
      if (switchValue && !ctrl.$$classCache[className]) {
        ctrl.$$animate.addClass(ctrl.$$element, className)
        ctrl.$$classCache[className] = true
      } else if (!switchValue && ctrl.$$classCache[className]) {
        ctrl.$$animate.removeClass(ctrl.$$element, className)
        ctrl.$$classCache[className] = false
      }
    }

    function toggleValidationCss(ctrl, validationErrorKey, isValid) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : ''

      cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true)
      cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false)
    }
  }

  function isObjectEmpty(obj) {
    if (obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          return false
        }
      }
    }
    return true
  }

  /* global
  VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  ngModelMinErr: false
*/

  // Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
  var ISO_DATE_REGEXP =
    /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/
  // See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
  // Note: We are being more lenient, because browsers are too.
  //   1. Scheme
  //   2. Slashes
  //   3. Username
  //   4. Password
  //   5. Hostname
  //   6. Port
  //   7. Path
  //   8. Query
  //   9. Fragment
  //                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
  var URL_REGEXP =
    /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i
  // eslint-disable-next-line max-len
  var EMAIL_REGEXP =
    /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/
  var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/
  var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/
  var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/
  var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/
  var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/
  var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/

  var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown'
  var PARTIAL_VALIDATION_TYPES = createMap()
  forEach('date,datetime-local,month,time,week'.split(','), function (type) {
    PARTIAL_VALIDATION_TYPES[type] = true
  })

  var inputType = {
    /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with AngularJS data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false AngularJS will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Single word:
             <input type="text" name="input" ng-model="example.text"
                    ng-pattern="example.word" required ng-trim="false">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.pattern">
               Single word only!</span>
           </div>
           <code>text = {{example.text}}</code><br/>
           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
    text: textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise AngularJS will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable AngularJS expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
     *   constraint validation.
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
     *   constraint validation.
     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          <label for="exampleInput">Pick a date in 2013:</label>
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <div role="alert">
            <span class="error" ng-show="myForm.input.$error.required">
                Required!</span>
            <span class="error" ng-show="myForm.input.$error.date">
                Not a valid date!</span>
           </div>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
    date: createDateInputType(
      'date',
      DATE_REGEXP,
      createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
      'yyyy-MM-dd'
    ),

    /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise AngularJS will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * The format of the displayed time can be adjusted with the
    * {@link ng.directive:ngModelOptions#ngModelOptions-arguments ngModelOptions} `timeSecondsFormat`
    * and `timeStripZeroSeconds`.
    *
    * @param {string} ngModel Assignable AngularJS expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `min` will also add native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
    *   Note that `max` will also add native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a date between in 2013:</label>
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.datetimelocal">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
    'datetime-local': createDateInputType(
      'datetimelocal',
      DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'
    ),

    /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise AngularJS will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions#ngModelOptions-arguments ngModelOptions}. By default,
   * this is the timezone of the browser.
   *
   * The format of the displayed time can be adjusted with the
   * {@link ng.directive:ngModelOptions#ngModelOptions-arguments ngModelOptions} `timeSecondsFormat`
   * and `timeStripZeroSeconds`.
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.time">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
    time: createDateInputType(
      'time',
      TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
      'HH:mm:ss.sss'
    ),

    /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise AngularJS will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The value of the resulting Date object will be set to Thursday at 00:00:00 of the requested week,
    * due to ISO-8601 week numbering standards. Information on ISO's system for numbering the weeks of the
    * year can be found at: https://en.wikipedia.org/wiki/ISO_8601#Week_dates
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable AngularJS expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
    *   native HTML5 constraint validation.
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
    *   native HTML5 constraint validation.
    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        <label>Pick a date between in 2013:
          <input id="exampleInput" type="week" name="input" ng-model="example.value"
                 placeholder="YYYY-W##" min="2012-W32"
                 max="2013-W52" required />
        </label>
        <div role="alert">
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.week">
              Not a valid date!</span>
        </div>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
    week: createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

    /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise AngularJS will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
   *   native HTML5 constraint validation.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
   *   native HTML5 constraint validation.
   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.

   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       <label for="exampleInput">Pick a month in 2013:</label>
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <div role="alert">
         <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
         <span class="error" ng-show="myForm.input.$error.month">
            Not a valid month!</span>
       </div>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
    month: createDateInputType(
      'month',
      MONTH_REGEXP,
      createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
      'yyyy-MM'
    ),

    /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise AngularJS will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   *
   *
   * @knownIssue
   *
   * ### HTML5 constraint validation and `allowInvalid`
   *
   * In browsers that follow the
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
   * If a non-number is entered in the input, the browser will report the value as an empty string,
   * which means the view / model values in `ngModel` and subsequently the scope value
   * will also be an empty string.
   *
   * @knownIssue
   *
   * ### Large numbers and `step` validation
   *
   * The `step` validation will not work correctly for very large numbers (e.g. 9999999999) due to
   * Javascript's arithmetic limitations. If you need to handle large numbers, purpose-built
   * libraries (e.g. https://github.com/MikeMcl/big.js/), can be included into AngularJS by
   * {@link guide/forms#modifying-built-in-validators overwriting the validators}
   * for `number` and / or `step`, or by {@link guide/forms#custom-validation applying custom validators}
   * to an `input[text]` element. The source for `input[number]` type can be used as a starting
   * point for both implementations.
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   *    Can be interpolated.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   *    Can be interpolated.
   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
   *    Can be interpolated.
   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
   *    but does not trigger HTML5 native validation. Takes an expression.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Number:
             <input type="number" name="input" ng-model="example.value"
                    min="0" max="99" required>
          </label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.number">
               Not valid number!</span>
           </div>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
    number: numberInputType,

    /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>URL:
             <input type="url" name="input" ng-model="url.text" required>
           <label>
           <div role="alert">
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.url">
               Not valid url!</span>
           </div>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
    url: urlInputType,

    /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium, which may not fulfill your app's requirements.
   * If you need stricter (e.g. requiring a top-level domain), or more relaxed validation
   * (e.g. allowing IPv6 address literals) you can use `ng-pattern` or
   * modify the built-in validators (see the {@link guide/forms Forms guide}).
   * </div>
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             <label>Email:
               <input type="email" name="input" ng-model="email.text" required>
             </label>
             <div role="alert">
               <span class="error" ng-show="myForm.input.$error.required">
                 Required!</span>
               <span class="error" ng-show="myForm.input.$error.email">
                 Not valid email!</span>
             </div>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
    email: emailInputType,

    /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * **Note:**<br>
   * All inputs controlled by {@link ngModel ngModel} (including those of type `radio`) will use the
   * value of their `name` attribute to determine the property under which their
   * {@link ngModel.NgModelController NgModelController} will be published on the parent
   * {@link form.FormController FormController}. Thus, if you use the same `name` for multiple
   * inputs of a form (e.g. a group of radio inputs), only _one_ `NgModelController` will be
   * published on the parent `FormController` under that name. The rest of the controllers will
   * continue to work as expected, but you won't be able to access them as properties on the parent
   * `FormController`.
   *
   * <div class="alert alert-info">
   *   <p>
   *     In plain HTML forms, the `name` attribute is used to identify groups of radio inputs, so
   *     that the browser can manage their state (checked/unchecked) based on the state of other
   *     inputs in the same group.
   *   </p>
   *   <p>
   *     In AngularJS forms, this is not necessary. The input's state will be updated based on the
   *     value of the underlying model data.
   *   </p>
   * </div>
   *
   * <div class="alert alert-success">
   *   If you omit the `name` attribute on a radio input, `ngModel` will automatically assign it a
   *   unique name.
   * </div>
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string} value The value to which the `ngModel` expression should be set when selected.
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue AngularJS expression to which `ngModel` will be be set when the radio
   *    is selected. Should be used instead of the `value` attribute if you need
   *    a non-string `ngModel` (`boolean`, `array`, ...).
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>
             <input type="radio" ng-model="color.name" value="red">
             Red
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" ng-value="specialValue">
             Green
           </label><br/>
           <label>
             <input type="radio" ng-model="color.name" value="blue">
             Blue
           </label><br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var inputs = element.all(by.model('color.name'));
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            inputs.get(0).click();
            expect(color.getText()).toContain('red');

            inputs.get(1).click();
            expect(color.getText()).toContain('green');
          });
        </file>
      </example>
   */
    radio: radioInputType,

    /**
   * @ngdoc input
   * @name input[range]
   *
   * @description
   * Native range input with validation and transformation.
   *
   * The model for the range input must always be a `Number`.
   *
   * IE9 and other browsers that do not support the `range` type fall back
   * to a text input without any default values for `min`, `max` and `step`. Model binding,
   * validation and number parsing are nevertheless supported.
   *
   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
   * in a way that never allows the input to hold an invalid value. That means:
   * - any non-numerical value is set to `(max + min) / 2`.
   * - any numerical value that is less than the current min val, or greater than the current max val
   * is set to the min / max val respectively.
   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
   * is used.
   *
   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
   * for more info.
   *
   * This has the following consequences for AngularJS:
   *
   * Since the element value should always reflect the current model value, a range input
   * will set the bound ngModel expression to the value that the browser has set for the
   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
   * AngularJS will then set the model to `50`, to prevent input and model value being out of sync.
   *
   * That means the model for range will immediately be set to `50` after `ngModel` has been
   * initialized. It also means a range input can never have the required error.
   *
   * This does not only affect changes to the model value, but also to the values of the `min`,
   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
   * the input value, AngularJS will also update the model value.
   *
   * Automatic value adjustment also means that a range input element can never have the `required`,
   * `min`, or `max` errors.
   *
   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
   * when the step value changes dynamically - they do not adjust the element value correctly, but
   * instead may set the `stepMismatch` error. If that's the case, the AngularJS will set the `step`
   * error on the input, and set the model to `undefined`.
   *
   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
   *
   * @param {string}  ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
   *                  than `min`. Can be interpolated.
   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
   *                  Can be interpolated.
   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
   *                  Can be interpolated.
   * @param {expression=} ngChange AngularJS expression to be executed when the ngModel value changes due
   *                      to user interaction with the input element.
   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
   *
   * @example
      <example name="range-input-directive" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">

            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   * ## Range Input with ngMin & ngMax attributes

   * @example
      <example name="range-input-directive-ng" module="rangeExample">
        <file name="index.html">
          <script>
            angular.module('rangeExample', [])
              .controller('ExampleController', ['$scope', function($scope) {
                $scope.value = 75;
                $scope.min = 10;
                $scope.max = 90;
              }]);
          </script>
          <form name="myForm" ng-controller="ExampleController">
            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
            <hr>
            Model as number: <input type="number" ng-model="value"><br>
            Min: <input type="number" ng-model="min"><br>
            Max: <input type="number" ng-model="max"><br>
            value = <code>{{value}}</code><br/>
            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
            myForm.range.$error = <code>{{myForm.range.$error}}</code>
          </form>
        </file>
      </example>

   */
    range: rangeInputType,

    /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <label>Value1:
             <input type="checkbox" ng-model="checkboxModel.value1">
           </label><br/>
           <label>Value2:
             <input type="checkbox" ng-model="checkboxModel.value2"
                    ng-true-value="'YES'" ng-false-value="'NO'">
            </label><br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
    checkbox: checkboxInputType,

    hidden: noop,
    button: noop,
    submit: noop,
    reset: noop,
    file: noop,
  }

  function stringBasedInputType(ctrl) {
    ctrl.$formatters.push(function (value) {
      return ctrl.$isEmpty(value) ? value : value.toString()
    })
  }

  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser)
    stringBasedInputType(ctrl)
  }

  function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var type = lowercase(element[0].type)

    // In composition mode, users are still inputting intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false

      element.on('compositionstart', function () {
        composing = true
      })

      // Support: IE9+
      element.on('compositionupdate', function (ev) {
        // End composition when ev.data is empty string on 'compositionupdate' event.
        // When the input de-focusses (e.g. by clicking away), IE triggers 'compositionupdate'
        // instead of 'compositionend'.
        if (isUndefined(ev.data) || ev.data === '') {
          composing = false
        }
      })

      element.on('compositionend', function () {
        composing = false
        listener()
      })
    }

    var timeout

    var listener = function (ev) {
      if (timeout) {
        $browser.defer.cancel(timeout)
        timeout = null
      }
      if (composing) return
      var value = element.val(),
        event = ev && ev.type

      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // If input type is 'password', the value is never trimmed
      if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
        value = trim(value)
      }

      // If a control is suffering from bad input (due to native validators), browsers discard its
      // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
      // control's value is the same empty value twice in a row.
      if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
        ctrl.$setViewValue(value, event)
      }
    }

    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener)
    } else {
      var deferListener = function (ev, input, origValue) {
        if (!timeout) {
          timeout = $browser.defer(function () {
            timeout = null
            if (!input || input.value !== origValue) {
              listener(ev)
            }
          })
        }
      }

      element.on(
        'keydown',
        /** @this */ function (event) {
          var key = event.keyCode

          // ignore
          //    command            modifiers                   arrows
          if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return

          deferListener(event, this, this.value)
        }
      )

      // if user modifies input value using context menu in IE, we need "paste", "cut" and "drop" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut drop', deferListener)
      }
    }

    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener)

    // Some native input types (date-family) have the ability to change validity without
    // firing any input/change events.
    // For these event types, when native validators are present and the browser supports the type,
    // check for validity changes on various DOM events.
    if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
      element.on(
        PARTIAL_VALIDATION_EVENTS,
        /** @this */ function (ev) {
          if (!timeout) {
            var validity = this[VALIDITY_STATE_PROPERTY]
            var origBadInput = validity.badInput
            var origTypeMismatch = validity.typeMismatch
            timeout = $browser.defer(function () {
              timeout = null
              if (
                validity.badInput !== origBadInput ||
                validity.typeMismatch !== origTypeMismatch
              ) {
                listener(ev)
              }
            })
          }
        }
      )
    }

    ctrl.$render = function () {
      // Workaround for Firefox validation #12102.
      var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue
      if (element.val() !== value) {
        element.val(value)
      }
    }
  }

  function weekParser(isoWeek, existingDate) {
    if (isDate(isoWeek)) {
      return isoWeek
    }

    if (isString(isoWeek)) {
      WEEK_REGEXP.lastIndex = 0
      var parts = WEEK_REGEXP.exec(isoWeek)
      if (parts) {
        var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7

        if (existingDate) {
          hours = existingDate.getHours()
          minutes = existingDate.getMinutes()
          seconds = existingDate.getSeconds()
          milliseconds = existingDate.getMilliseconds()
        }

        return new Date(
          year,
          0,
          firstThurs.getDate() + addDays,
          hours,
          minutes,
          seconds,
          milliseconds
        )
      }
    }

    return NaN
  }

  function createDateParser(regexp, mapping) {
    return function (iso, previousDate) {
      var parts, map

      if (isDate(iso)) {
        return iso
      }

      if (isString(iso)) {
        // When a date is JSON'ified to wraps itself inside of an extra
        // set of double quotes. This makes the date parsing code unable
        // to match the date string and parse it as a date.
        if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
          iso = iso.substring(1, iso.length - 1)
        }
        if (ISO_DATE_REGEXP.test(iso)) {
          return new Date(iso)
        }
        regexp.lastIndex = 0
        parts = regexp.exec(iso)

        if (parts) {
          parts.shift()
          if (previousDate) {
            map = {
              yyyy: previousDate.getFullYear(),
              MM: previousDate.getMonth() + 1,
              dd: previousDate.getDate(),
              HH: previousDate.getHours(),
              mm: previousDate.getMinutes(),
              ss: previousDate.getSeconds(),
              sss: previousDate.getMilliseconds() / 1000,
            }
          } else {
            map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 }
          }

          forEach(parts, function (part, index) {
            if (index < mapping.length) {
              map[mapping[index]] = +part
            }
          })

          var date = new Date(
            map.yyyy,
            map.MM - 1,
            map.dd,
            map.HH,
            map.mm,
            map.ss || 0,
            map.sss * 1000 || 0
          )
          if (map.yyyy < 100) {
            // In the constructor, 2-digit years map to 1900-1999.
            // Use `setFullYear()` to set the correct year.
            date.setFullYear(map.yyyy)
          }

          return date
        }
      }

      return NaN
    }
  }

  function createDateInputType(type, regexp, parseDate, format) {
    return function dynamicDateInputType(
      scope,
      element,
      attr,
      ctrl,
      $sniffer,
      $browser,
      $filter,
      $parse
    ) {
      badInputChecker(scope, element, attr, ctrl, type)
      baseInputType(scope, element, attr, ctrl, $sniffer, $browser)

      var isTimeType = type === 'time' || type === 'datetimelocal'
      var previousDate
      var previousTimezone

      ctrl.$parsers.push(function (value) {
        if (ctrl.$isEmpty(value)) return null

        if (regexp.test(value)) {
          // Note: We cannot read ctrl.$modelValue, as there might be a different
          // parser/formatter in the processing chain so that the model
          // contains some different data format!
          return parseDateAndConvertTimeZoneToLocal(value, previousDate)
        }
        ctrl.$$parserName = type
        return undefined
      })

      ctrl.$formatters.push(function (value) {
        if (value && !isDate(value)) {
          throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value)
        }
        if (isValidDate(value)) {
          previousDate = value
          var timezone = ctrl.$options.getOption('timezone')

          if (timezone) {
            previousTimezone = timezone
            previousDate = convertTimezoneToLocal(previousDate, timezone, true)
          }

          return formatter(value, timezone)
        } else {
          previousDate = null
          previousTimezone = null
          return ''
        }
      })

      if (isDefined(attr.min) || attr.ngMin) {
        var minVal = attr.min || $parse(attr.ngMin)(scope)
        var parsedMinVal = parseObservedDateValue(minVal)

        ctrl.$validators.min = function (value) {
          return (
            !isValidDate(value) || isUndefined(parsedMinVal) || parseDate(value) >= parsedMinVal
          )
        }
        attr.$observe('min', function (val) {
          if (val !== minVal) {
            parsedMinVal = parseObservedDateValue(val)
            minVal = val
            ctrl.$validate()
          }
        })
      }

      if (isDefined(attr.max) || attr.ngMax) {
        var maxVal = attr.max || $parse(attr.ngMax)(scope)
        var parsedMaxVal = parseObservedDateValue(maxVal)

        ctrl.$validators.max = function (value) {
          return (
            !isValidDate(value) || isUndefined(parsedMaxVal) || parseDate(value) <= parsedMaxVal
          )
        }
        attr.$observe('max', function (val) {
          if (val !== maxVal) {
            parsedMaxVal = parseObservedDateValue(val)
            maxVal = val
            ctrl.$validate()
          }
        })
      }

      function isValidDate(value) {
        // Invalid Date: getTime() returns NaN
        return value && !(value.getTime && value.getTime() !== value.getTime())
      }

      function parseObservedDateValue(val) {
        return isDefined(val) && !isDate(val)
          ? parseDateAndConvertTimeZoneToLocal(val) || undefined
          : val
      }

      function parseDateAndConvertTimeZoneToLocal(value, previousDate) {
        var timezone = ctrl.$options.getOption('timezone')

        if (previousTimezone && previousTimezone !== timezone) {
          // If the timezone has changed, adjust the previousDate to the default timezone
          // so that the new date is converted with the correct timezone offset
          previousDate = addDateMinutes(previousDate, timezoneToOffset(previousTimezone))
        }

        var parsedDate = parseDate(value, previousDate)

        if (!isNaN(parsedDate) && timezone) {
          parsedDate = convertTimezoneToLocal(parsedDate, timezone)
        }
        return parsedDate
      }

      function formatter(value, timezone) {
        var targetFormat = format

        if (isTimeType && isString(ctrl.$options.getOption('timeSecondsFormat'))) {
          targetFormat = format
            .replace('ss.sss', ctrl.$options.getOption('timeSecondsFormat'))
            .replace(/:$/, '')
        }

        var formatted = $filter('date')(value, targetFormat, timezone)

        if (isTimeType && ctrl.$options.getOption('timeStripZeroSeconds')) {
          formatted = formatted.replace(/(?::00)?(?:\.000)?$/, '')
        }

        return formatted
      }
    }
  }

  function badInputChecker(scope, element, attr, ctrl, parserName) {
    var node = element[0]
    var nativeValidation = (ctrl.$$hasNativeValidators = isObject(node.validity))
    if (nativeValidation) {
      ctrl.$parsers.push(function (value) {
        var validity = element.prop(VALIDITY_STATE_PROPERTY) || {}
        if (validity.badInput || validity.typeMismatch) {
          ctrl.$$parserName = parserName
          return undefined
        }

        return value
      })
    }
  }

  function numberFormatterParser(ctrl) {
    ctrl.$parsers.push(function (value) {
      if (ctrl.$isEmpty(value)) return null
      if (NUMBER_REGEXP.test(value)) return parseFloat(value)

      ctrl.$$parserName = 'number'
      return undefined
    })

    ctrl.$formatters.push(function (value) {
      if (!ctrl.$isEmpty(value)) {
        if (!isNumber(value)) {
          throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value)
        }
        value = value.toString()
      }
      return value
    })
  }

  function parseNumberAttrVal(val) {
    if (isDefined(val) && !isNumber(val)) {
      val = parseFloat(val)
    }
    return !isNumberNaN(val) ? val : undefined
  }

  function isNumberInteger(num) {
    // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
    // (minus the assumption that `num` is a number)

    // eslint-disable-next-line no-bitwise
    return (num | 0) === num
  }

  function countDecimals(num) {
    var numString = num.toString()
    var decimalSymbolIndex = numString.indexOf('.')

    if (decimalSymbolIndex === -1) {
      if (-1 < num && num < 1) {
        // It may be in the exponential notation format (`1e-X`)
        var match = /e-(\d+)$/.exec(numString)

        if (match) {
          return Number(match[1])
        }
      }

      return 0
    }

    return numString.length - decimalSymbolIndex - 1
  }

  function isValidForStep(viewValue, stepBase, step) {
    // At this point `stepBase` and `step` are expected to be non-NaN values
    // and `viewValue` is expected to be a valid stringified number.
    var value = Number(viewValue)

    var isNonIntegerValue = !isNumberInteger(value)
    var isNonIntegerStepBase = !isNumberInteger(stepBase)
    var isNonIntegerStep = !isNumberInteger(step)

    // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
    // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
    if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {
      var valueDecimals = isNonIntegerValue ? countDecimals(value) : 0
      var stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0
      var stepDecimals = isNonIntegerStep ? countDecimals(step) : 0

      var decimalCount = Math.max(valueDecimals, stepBaseDecimals, stepDecimals)
      var multiplier = Math.pow(10, decimalCount)

      value = value * multiplier
      stepBase = stepBase * multiplier
      step = step * multiplier

      if (isNonIntegerValue) value = Math.round(value)
      if (isNonIntegerStepBase) stepBase = Math.round(stepBase)
      if (isNonIntegerStep) step = Math.round(step)
    }

    return (value - stepBase) % step === 0
  }

  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
    badInputChecker(scope, element, attr, ctrl, 'number')
    numberFormatterParser(ctrl)
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser)

    var parsedMinVal

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal = attr.min || $parse(attr.ngMin)(scope)
      parsedMinVal = parseNumberAttrVal(minVal)

      ctrl.$validators.min = function (modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || isUndefined(parsedMinVal) || viewValue >= parsedMinVal
      }

      attr.$observe('min', function (val) {
        if (val !== minVal) {
          parsedMinVal = parseNumberAttrVal(val)
          minVal = val
          // TODO(matsko): implement validateLater to reduce number of validations
          ctrl.$validate()
        }
      })
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal = attr.max || $parse(attr.ngMax)(scope)
      var parsedMaxVal = parseNumberAttrVal(maxVal)

      ctrl.$validators.max = function (modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || isUndefined(parsedMaxVal) || viewValue <= parsedMaxVal
      }

      attr.$observe('max', function (val) {
        if (val !== maxVal) {
          parsedMaxVal = parseNumberAttrVal(val)
          maxVal = val
          // TODO(matsko): implement validateLater to reduce number of validations
          ctrl.$validate()
        }
      })
    }

    if (isDefined(attr.step) || attr.ngStep) {
      var stepVal = attr.step || $parse(attr.ngStep)(scope)
      var parsedStepVal = parseNumberAttrVal(stepVal)

      ctrl.$validators.step = function (modelValue, viewValue) {
        return (
          ctrl.$isEmpty(viewValue) ||
          isUndefined(parsedStepVal) ||
          isValidForStep(viewValue, parsedMinVal || 0, parsedStepVal)
        )
      }

      attr.$observe('step', function (val) {
        // TODO(matsko): implement validateLater to reduce number of validations
        if (val !== stepVal) {
          parsedStepVal = parseNumberAttrVal(val)
          stepVal = val
          ctrl.$validate()
        }
      })
    }
  }

  function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    badInputChecker(scope, element, attr, ctrl, 'range')
    numberFormatterParser(ctrl)
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser)

    var supportsRange = ctrl.$$hasNativeValidators && element[0].type === 'range',
      minVal = supportsRange ? 0 : undefined,
      maxVal = supportsRange ? 100 : undefined,
      stepVal = supportsRange ? 1 : undefined,
      validity = element[0].validity,
      hasMinAttr = isDefined(attr.min),
      hasMaxAttr = isDefined(attr.max),
      hasStepAttr = isDefined(attr.step)

    var originalRender = ctrl.$render

    ctrl.$render =
      supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow)
        ? //Browsers that implement range will set these values automatically, but reading the adjusted values after
          //$render would cause the min / max validators to be applied with the wrong value
          function rangeRender() {
            originalRender()
            ctrl.$setViewValue(element.val())
          }
        : originalRender

    if (hasMinAttr) {
      minVal = parseNumberAttrVal(attr.min)

      ctrl.$validators.min = supportsRange
        ? // Since all browsers set the input to a valid value, we don't need to check validity
          function noopMinValidator() {
            return true
          }
        : // non-support browsers validate the min val
          function minValidator(modelValue, viewValue) {
            return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal
          }

      setInitialValueAndObserver('min', minChange)
    }

    if (hasMaxAttr) {
      maxVal = parseNumberAttrVal(attr.max)

      ctrl.$validators.max = supportsRange
        ? // Since all browsers set the input to a valid value, we don't need to check validity
          function noopMaxValidator() {
            return true
          }
        : // non-support browsers validate the max val
          function maxValidator(modelValue, viewValue) {
            return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal
          }

      setInitialValueAndObserver('max', maxChange)
    }

    if (hasStepAttr) {
      stepVal = parseNumberAttrVal(attr.step)

      ctrl.$validators.step = supportsRange
        ? function nativeStepValidator() {
            // Currently, only FF implements the spec on step change correctly (i.e. adjusting the
            // input element value to a valid value). It's possible that other browsers set the stepMismatch
            // validity error instead, so we can at least report an error in that case.
            return !validity.stepMismatch
          }
        : // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
          function stepValidator(modelValue, viewValue) {
            return (
              ctrl.$isEmpty(viewValue) ||
              isUndefined(stepVal) ||
              isValidForStep(viewValue, minVal || 0, stepVal)
            )
          }

      setInitialValueAndObserver('step', stepChange)
    }

    function setInitialValueAndObserver(htmlAttrName, changeFn) {
      // interpolated attributes set the attribute value only after a digest, but we need the
      // attribute value when the input is first rendered, so that the browser can adjust the
      // input value based on the min/max value
      element.attr(htmlAttrName, attr[htmlAttrName])
      var oldVal = attr[htmlAttrName]
      attr.$observe(htmlAttrName, function wrappedObserver(val) {
        if (val !== oldVal) {
          oldVal = val
          changeFn(val)
        }
      })
    }

    function minChange(val) {
      minVal = parseNumberAttrVal(val)
      // ignore changes before model is initialized
      if (isNumberNaN(ctrl.$modelValue)) {
        return
      }

      if (supportsRange) {
        var elVal = element.val()
        // IE11 doesn't set the el val correctly if the minVal is greater than the element value
        if (minVal > elVal) {
          elVal = minVal
          element.val(elVal)
        }
        ctrl.$setViewValue(elVal)
      } else {
        // TODO(matsko): implement validateLater to reduce number of validations
        ctrl.$validate()
      }
    }

    function maxChange(val) {
      maxVal = parseNumberAttrVal(val)
      // ignore changes before model is initialized
      if (isNumberNaN(ctrl.$modelValue)) {
        return
      }

      if (supportsRange) {
        var elVal = element.val()
        // IE11 doesn't set the el val correctly if the maxVal is less than the element value
        if (maxVal < elVal) {
          element.val(maxVal)
          // IE11 and Chrome don't set the value to the minVal when max < min
          elVal = maxVal < minVal ? minVal : maxVal
        }
        ctrl.$setViewValue(elVal)
      } else {
        // TODO(matsko): implement validateLater to reduce number of validations
        ctrl.$validate()
      }
    }

    function stepChange(val) {
      stepVal = parseNumberAttrVal(val)
      // ignore changes before model is initialized
      if (isNumberNaN(ctrl.$modelValue)) {
        return
      }

      // Some browsers don't adjust the input value correctly, but set the stepMismatch error
      if (!supportsRange) {
        // TODO(matsko): implement validateLater to reduce number of validations
        ctrl.$validate()
      } else if (ctrl.$viewValue !== element.val()) {
        ctrl.$setViewValue(element.val())
      }
    }
  }

  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    // Note: no badInputChecker here by purpose as `url` is only a validation
    // in browsers, i.e. we can always read out input.value even if it is not valid!
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser)
    stringBasedInputType(ctrl)

    ctrl.$validators.url = function (modelValue, viewValue) {
      var value = modelValue || viewValue
      return ctrl.$isEmpty(value) || URL_REGEXP.test(value)
    }
  }

  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    // Note: no badInputChecker here by purpose as `url` is only a validation
    // in browsers, i.e. we can always read out input.value even if it is not valid!
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser)
    stringBasedInputType(ctrl)

    ctrl.$validators.email = function (modelValue, viewValue) {
      var value = modelValue || viewValue
      return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value)
    }
  }

  function radioInputType(scope, element, attr, ctrl) {
    var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== 'false'
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid())
    }

    var listener = function (ev) {
      var value
      if (element[0].checked) {
        value = attr.value
        if (doTrim) {
          value = trim(value)
        }
        ctrl.$setViewValue(value, ev && ev.type)
      }
    }

    element.on('change', listener)

    ctrl.$render = function () {
      var value = attr.value
      if (doTrim) {
        value = trim(value)
      }
      element[0].checked = value === ctrl.$viewValue
    }

    attr.$observe('value', ctrl.$render)
  }

  function parseConstantExpr($parse, context, name, expression, fallback) {
    var parseFn
    if (isDefined(expression)) {
      parseFn = $parse(expression)
      if (!parseFn.constant) {
        throw ngModelMinErr(
          'constexpr',
          'Expected constant expression for `{0}`, but saw ' + '`{1}`.',
          name,
          expression
        )
      }
      return parseFn(context)
    }
    return fallback
  }

  function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
    var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true)
    var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false)

    var listener = function (ev) {
      ctrl.$setViewValue(element[0].checked, ev && ev.type)
    }

    element.on('change', listener)

    ctrl.$render = function () {
      element[0].checked = ctrl.$viewValue
    }

    // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
    // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
    // it to a boolean.
    ctrl.$isEmpty = function (value) {
      return value === false
    }

    ctrl.$formatters.push(function (value) {
      return equals(value, trueValue)
    })

    ctrl.$parsers.push(function (value) {
      return value ? trueValue : falseValue
    })
  }

  /**
   * @ngdoc directive
   * @name textarea
   * @restrict E
   *
   * @description
   * HTML textarea element control with AngularJS data-binding. The data-binding and validation
   * properties of this element are exactly the same as those of the
   * {@link ng.directive:input input element}.
   *
   * @param {string} ngModel Assignable AngularJS expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
   *    length.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
   *    does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
   *    If the expression evaluates to a RegExp object, then this is used directly.
   *    If the expression evaluates to a string, then it will be converted to a RegExp
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
   *    `new RegExp('^abc$')`.<br />
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
   *    start at the index of the last search's match, thus not taking the whole input value into
   *    account.
   * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false AngularJS will not automatically trim the input.
   *
   * @knownIssue
   *
   * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
   * insert the placeholder value as the textarea's content. If the placeholder value contains
   * interpolation (`{{ ... }}`), an error will be logged in the console when AngularJS tries to update
   * the value of the by-then-removed text node. This doesn't affect the functionality of the
   * textarea, but can be undesirable.
   *
   * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
   * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
   * find more details on `ngAttr` in the
   * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
   * Developer Guide.
   */

  /**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable AngularJS expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
 *    value does not match a RegExp found by evaluating the AngularJS expression given in the attribute value.
 *    If the expression evaluates to a RegExp object, then this is used directly.
 *    If the expression evaluates to a string, then it will be converted to a RegExp
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
 *    `new RegExp('^abc$')`.<br />
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 *    start at the index of the last search's match, thus not taking the whole input value into
 *    account.
 * @param {string=} ngChange AngularJS expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false AngularJS will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           <label>
              User name:
              <input type="text" name="userName" ng-model="user.name" required>
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.userName.$error.required">
              Required!</span>
           </div>
           <label>
              Last name:
              <input type="text" name="lastName" ng-model="user.last"
              ng-minlength="3" ng-maxlength="10">
           </label>
           <div role="alert">
             <span class="error" ng-show="myForm.lastName.$error.minlength">
               Too short!</span>
             <span class="error" ng-show="myForm.lastName.$error.maxlength">
               Too long!</span>
           </div>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
  var inputDirective = [
    '$browser',
    '$sniffer',
    '$filter',
    '$parse',
    function ($browser, $sniffer, $filter, $parse) {
      return {
        restrict: 'E',
        require: ['?ngModel'],
        link: {
          pre: function (scope, element, attr, ctrls) {
            if (ctrls[0]) {
              ;(inputType[lowercase(attr.type)] || inputType.text)(
                scope,
                element,
                attr,
                ctrls[0],
                $sniffer,
                $browser,
                $filter,
                $parse
              )
            }
          },
        },
      }
    },
  ]

  var hiddenInputBrowserCacheDirective = function () {
    var valueProperty = {
      configurable: true,
      enumerable: false,
      get: function () {
        return this.getAttribute('value') || ''
      },
      set: function (val) {
        this.setAttribute('value', val)
      },
    }

    return {
      restrict: 'E',
      priority: 200,
      compile: function (_, attr) {
        if (lowercase(attr.type) !== 'hidden') {
          return
        }

        return {
          pre: function (scope, element, attr, ctrls) {
            var node = element[0]

            // Support: Edge
            // Moving the DOM around prevents autofillling
            if (node.parentNode) {
              node.parentNode.insertBefore(node, node.nextSibling)
            }

            // Support: FF, IE
            // Avoiding direct assignment to .value prevents autofillling
            if (Object.defineProperty) {
              Object.defineProperty(node, 'value', valueProperty)
            }
          },
        }
      },
    }
  }

  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/
  /**
 * @ngdoc directive
 * @name ngValue
 * @restrict A
 * @priority 100
 *
 * @description
 * Binds the given expression to the value of the element.
 *
 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
 * {@link select `select`} parent element) is set to the bound value. It is especially useful
 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * It can also be used to achieve one-way binding of a given expression to an input element
 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
 *
 * @element ANY
 * @param {string=} ngValue AngularJS expression, whose value will be bound to the `value` attribute
 * and `value` property of the element.
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
  var ngValueDirective = function () {
    /**
     *  inputs use the value attribute as their default value if the value property is not set.
     *  Once the value property has been set (by adding input), it will not react to changes to
     *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
     *  makes it possible to use ngValue as a sort of one-way bind.
     */
    function updateElementValue(element, attr, value) {
      // Support: IE9 only
      // In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).
      var propValue = isDefined(value) ? value : msie === 9 ? '' : null
      element.prop('value', propValue)
      attr.$set('value', value)
    }

    return {
      restrict: 'A',
      priority: 100,
      compile: function (tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            var value = scope.$eval(attr.ngValue)
            updateElementValue(elm, attr, value)
          }
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              updateElementValue(elm, attr, value)
            })
          }
        }
      },
    }
  }

  /**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells AngularJS to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before AngularJS compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample" name="ng-bind">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <label>Enter name: <input type="text" ng-model="name"></label><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
  var ngBindDirective = [
    '$compile',
    function ($compile) {
      return {
        restrict: 'AC',
        compile: function ngBindCompile(templateElement) {
          $compile.$$addBindingClass(templateElement)
          return function ngBindLink(scope, element, attr) {
            $compile.$$addBindingInfo(element, attr.ngBind)
            element = element[0]
            scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
              element.textContent = stringify(value)
            })
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample" name="ng-bind-template">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
        <label>Name: <input type="text" ng-model="name"></label><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
  var ngBindTemplateDirective = [
    '$interpolate',
    '$compile',
    function ($interpolate, $compile) {
      return {
        compile: function ngBindTemplateCompile(templateElement) {
          $compile.$$addBindingClass(templateElement)
          return function ngBindTemplateLink(scope, element, attr) {
            var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate))
            $compile.$$addBindingInfo(element, interpolateFn.expressions)
            element = element[0]
            attr.$observe('ngBindTemplate', function (value) {
              element.textContent = isUndefined(value) ? '' : value
            })
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core AngularJS). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
  var ngBindHtmlDirective = [
    '$sce',
    '$parse',
    '$compile',
    function ($sce, $parse, $compile) {
      return {
        restrict: 'A',
        compile: function ngBindHtmlCompile(tElement, tAttrs) {
          var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml)
          var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
            // Unwrap the value to compare the actual inner safe value, not the wrapper object.
            return $sce.valueOf(val)
          })
          $compile.$$addBindingClass(tElement)

          return function ngBindHtmlLink(scope, element, attr) {
            $compile.$$addBindingInfo(element, attr.ngBindHtml)

            scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
              // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
              var value = ngBindHtmlGetter(scope)
              element.html($sce.getTrustedHtml(value) || '')
            })
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngChange
 * @restrict A
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element ANY
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
  var ngChangeDirective = valueFn({
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, element, attr, ctrl) {
      ctrl.$viewChangeListeners.push(function () {
        scope.$eval(attr.ngChange)
      })
    },
  })

  /* exported
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective
*/

  function classDirective(name, selector) {
    name = 'ngClass' + name
    var indexWatchExpression

    return [
      '$parse',
      function ($parse) {
        return {
          restrict: 'AC',
          link: function (scope, element, attr) {
            var classCounts = element.data('$classCounts')
            var oldModulo = true
            var oldClassString

            if (!classCounts) {
              // Use createMap() to prevent class assumptions involving property
              // names in Object.prototype
              classCounts = createMap()
              element.data('$classCounts', classCounts)
            }

            if (name !== 'ngClass') {
              if (!indexWatchExpression) {
                indexWatchExpression = $parse('$index', function moduloTwo($index) {
                  // eslint-disable-next-line no-bitwise
                  return $index & 1
                })
              }

              scope.$watch(indexWatchExpression, ngClassIndexWatchAction)
            }

            scope.$watch($parse(attr[name], toClassString), ngClassWatchAction)

            function addClasses(classString) {
              classString = digestClassCounts(split(classString), 1)
              attr.$addClass(classString)
            }

            function removeClasses(classString) {
              classString = digestClassCounts(split(classString), -1)
              attr.$removeClass(classString)
            }

            function updateClasses(oldClassString, newClassString) {
              var oldClassArray = split(oldClassString)
              var newClassArray = split(newClassString)

              var toRemoveArray = arrayDifference(oldClassArray, newClassArray)
              var toAddArray = arrayDifference(newClassArray, oldClassArray)

              var toRemoveString = digestClassCounts(toRemoveArray, -1)
              var toAddString = digestClassCounts(toAddArray, 1)

              attr.$addClass(toAddString)
              attr.$removeClass(toRemoveString)
            }

            function digestClassCounts(classArray, count) {
              var classesToUpdate = []

              forEach(classArray, function (className) {
                if (count > 0 || classCounts[className]) {
                  classCounts[className] = (classCounts[className] || 0) + count
                  if (classCounts[className] === +(count > 0)) {
                    classesToUpdate.push(className)
                  }
                }
              })

              return classesToUpdate.join(' ')
            }

            function ngClassIndexWatchAction(newModulo) {
              // This watch-action should run before the `ngClassWatchAction()`, thus it
              // adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the
              // `ngClassWatchAction()` will update the classes.
              if (newModulo === selector) {
                addClasses(oldClassString)
              } else {
                removeClasses(oldClassString)
              }

              oldModulo = newModulo
            }

            function ngClassWatchAction(newClassString) {
              if (oldModulo === selector) {
                updateClasses(oldClassString, newClassString)
              }

              oldClassString = newClassString
            }
          },
        }
      },
    ]

    // Helpers
    function arrayDifference(tokens1, tokens2) {
      if (!tokens1 || !tokens1.length) return []
      if (!tokens2 || !tokens2.length) return tokens1

      var values = []

      outer: for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i]
        for (var j = 0; j < tokens2.length; j++) {
          if (token === tokens2[j]) continue outer
        }
        values.push(token)
      }

      return values
    }

    function split(classString) {
      return classString && classString.split(' ')
    }

    function toClassString(classValue) {
      if (!classValue) return classValue

      var classString = classValue

      if (isArray(classValue)) {
        classString = classValue.map(toClassString).join(' ')
      } else if (isObject(classValue)) {
        classString = Object.keys(classValue)
          .filter(function (key) {
            return classValue[key]
          })
          .join(' ')
      } else if (!isString(classValue)) {
        classString = classValue + ''
      }

      return classString
    }
  }

  /**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 * @element ANY
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
 * to give you more control over what CSS classes appear. See the code below for an example of this.
 *
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then are the
 * new classes added.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
 * attribute, when using the `ngClass` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
 * | {@link ng.$animate#setClass setClass} | just before classes are added and classes are removed from the element at the same time |
 *
 * ### ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and
   {@link $animate#removeClass $animate.removeClass}.
 *
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example
 * ### Basic
   <example name="ng-class">
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
       <label>
          <input type="checkbox" ng-model="deleted">
          deleted (apply "strike" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="important">
          important (apply "bold" class)
       </label><br>
       <label>
          <input type="checkbox" ng-model="error">
          error (apply "has-error" class)
       </label>
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style"
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
       <input ng-model="style2"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
       <input ng-model="style3"
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
       <hr>
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
     </file>
     <file name="style.css">
       .strike {
           text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
       .has-error {
           color: red;
           background-color: yellow;
       }
       .orange {
           color: orange;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.get(2).getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
       });

       it('array with map example should have 2 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style4')).sendKeys('bold');
         element(by.model('warning')).click();
         expect(ps.last().getAttribute('class')).toBe('bold orange');
       });
     </file>
   </example>

   @example
   ### Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>
 */
  var ngClassDirective = classDirective('', true)

  /**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-odd">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 *
 * <hr />
 * @example
 * An example on how to implement animations using `ngClassOdd`:
 *
   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class-odd-animate">
     <file name="index.html">
       <div ng-init="items=['Item 3', 'Item 2', 'Item 1', 'Item 0']">
         <button ng-click="items.unshift('Item ' + items.length)">Add item</button>
         <hr />
         <table>
           <tr ng-repeat="item in items" ng-class-odd="'odd'">
             <td>{{ item }}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="style.css">
       .odd {
         background: rgba(255, 255, 0, 0.25);
       }

       .odd-add, .odd-remove {
         transition: 1.5s;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should add new entries to the beginning of the list', function() {
         var button = element(by.buttonText('Add item'));
         var rows = element.all(by.repeater('item in items'));

         expect(rows.count()).toBe(4);
         expect(rows.get(0).getText()).toBe('Item 3');
         expect(rows.get(1).getText()).toBe('Item 2');

         button.click();

         expect(rows.count()).toBe(5);
         expect(rows.get(0).getText()).toBe('Item 4');
         expect(rows.get(1).getText()).toBe('Item 3');
       });

       it('should add odd class to odd entries', function() {
         var button = element(by.buttonText('Add item'));
         var rows = element.all(by.repeater('item in items'));

         expect(rows.get(0).getAttribute('class')).toMatch(/odd/);
         expect(rows.get(1).getAttribute('class')).not.toMatch(/odd/);

         button.click();

         expect(rows.get(0).getAttribute('class')).toMatch(/odd/);
         expect(rows.get(1).getAttribute('class')).not.toMatch(/odd/);
       });
     </file>
   </example>
 */
  var ngClassOddDirective = classDirective('Odd', 0)

  /**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example name="ng-class-even">
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 *
 * <hr />
 * @example
 * An example on how to implement animations using `ngClassEven`:
 *
   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class-even-animate">
     <file name="index.html">
       <div ng-init="items=['Item 3', 'Item 2', 'Item 1', 'Item 0']">
         <button ng-click="items.unshift('Item ' + items.length)">Add item</button>
         <hr />
         <table>
           <tr ng-repeat="item in items" ng-class-even="'even'">
             <td>{{ item }}</td>
           </tr>
         </table>
       </div>
     </file>
     <file name="style.css">
       .even {
         background: rgba(255, 255, 0, 0.25);
       }

       .even-add, .even-remove {
         transition: 1.5s;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should add new entries to the beginning of the list', function() {
         var button = element(by.buttonText('Add item'));
         var rows = element.all(by.repeater('item in items'));

         expect(rows.count()).toBe(4);
         expect(rows.get(0).getText()).toBe('Item 3');
         expect(rows.get(1).getText()).toBe('Item 2');

         button.click();

         expect(rows.count()).toBe(5);
         expect(rows.get(0).getText()).toBe('Item 4');
         expect(rows.get(1).getText()).toBe('Item 3');
       });

       it('should add even class to even entries', function() {
         var button = element(by.buttonText('Add item'));
         var rows = element.all(by.repeater('item in items'));

         expect(rows.get(0).getAttribute('class')).not.toMatch(/even/);
         expect(rows.get(1).getAttribute('class')).toMatch(/even/);

         button.click();

         expect(rows.get(0).getAttribute('class')).not.toMatch(/even/);
         expect(rows.get(1).getAttribute('class')).toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassEvenDirective = classDirective('Even', 1)

  /**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the AngularJS html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When AngularJS encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example name="ng-cloak">
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
  var ngCloakDirective = ngDirective({
    compile: function (element, attr) {
      attr.$set('ngCloak', undefined)
      element.removeClass('ng-cloak')
    },
  })

  /**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the AngularJS markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the AngularJS community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
 *      <button ng-click="settings.greet()">greet</button><br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *          <button ng-click="settings.clearContact(contact)">clear</button>
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
 *        </li>
 *        <li><button ng-click="settings.addContact()">add</button></li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = 'John Smith';
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'}
 *      ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.buttonText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.buttonText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     <label>Name: <input type="text" ng-model="name"/></label>
 *     <button ng-click="greet()">greet</button><br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type" id="select_{{$index}}">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
 *         <button ng-click="clearContact(contact)">clear</button>
 *         <button ng-click="removeContact(contact)">X</button>
 *       </li>
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = 'John Smith';
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'}
 *     ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.buttonText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.buttonText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
  var ngControllerDirective = [
    function () {
      return {
        restrict: 'A',
        scope: true,
        controller: '@',
        priority: 500,
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngCsp
 *
 * @restrict A
 * @element ANY
 * @description
 *
 * AngularJS has some features that can conflict with certain restrictions that are applied when using
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
 *
 * If you intend to implement CSP with these rules then you must tell AngularJS not to use these
 * features.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 *
 * The following default rules in CSP affect AngularJS:
 *
 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
 * code from strings is forbidden. AngularJS makes use of this in the {@link $parse} service to
 * provide a 30% increase in the speed of evaluating AngularJS expressions. (This CSP rule can be
 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
 * weaken the protections offered by CSP.)
 *
 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
 * This prevents apps from injecting custom styles directly into the document. AngularJS makes use of
 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
 * it is generally not recommended as it would weaken the protections offered by CSP.)
 *
 * If you do not provide `ngCsp` then AngularJS tries to autodetect if CSP is blocking dynamic code
 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
 * CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on an element of the HTML document that appears before the `<script>` tag that loads
 * the `angular.js` file.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * You can specify which of the CSP related AngularJS features should be deactivated by providing
 * a value for the `ng-csp` attribute. The options are as follows:
 *
 * * no-inline-style: this stops AngularJS from injecting CSS styles into the DOM
 *
 * * no-unsafe-eval: this stops AngularJS from optimizing $parse with unsafe eval of strings
 *
 * You can use these values in the following combinations:
 *
 *
 * * No declaration means that AngularJS will assume that you can do inline styles, but it will do
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
 * versions of AngularJS.
 *
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell AngularJS to deactivate both inline
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
 * versions of AngularJS.
 *
 * * Specifying only `no-unsafe-eval` tells AngularJS that we must not use eval, but that we can
 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
 *
 * * Specifying only `no-inline-style` tells AngularJS that we must not inject styles, but that we can
 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
 *
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells AngularJS that we must not inject
 * styles nor use eval, which is the same as an empty: ng-csp.
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
 *
 * @example
 *
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```

  <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
  <example name="example.csp" module="cspExample" ng-csp="true">
    <file name="index.html">
      <div ng-controller="MainController as ctrl">
        <div>
          <button ng-click="ctrl.inc()" id="inc">Increment</button>
          <span id="counter">
            {{ctrl.counter}}
          </span>
        </div>

        <div>
          <button ng-click="ctrl.evil()" id="evil">Evil</button>
          <span id="evilError">
            {{ctrl.evilError}}
          </span>
        </div>
      </div>
    </file>
    <file name="script.js">
       angular.module('cspExample', [])
         .controller('MainController', function MainController() {
            this.counter = 0;
            this.inc = function() {
              this.counter++;
            };
            this.evil = function() {
              try {
                eval('1+2'); // eslint-disable-line no-eval
              } catch (e) {
                this.evilError = e.message;
              }
            };
          });
    </file>
    <file name="protractor.js" type="protractor">
      var util, webdriver;

      var incBtn = element(by.id('inc'));
      var counter = element(by.id('counter'));
      var evilBtn = element(by.id('evil'));
      var evilError = element(by.id('evilError'));

      function getAndClearSevereErrors() {
        return browser.manage().logs().get('browser').then(function(browserLog) {
          return browserLog.filter(function(logEntry) {
            return logEntry.level.value > webdriver.logging.Level.WARNING.value;
          });
        });
      }

      function clearErrors() {
        getAndClearSevereErrors();
      }

      function expectNoErrors() {
        getAndClearSevereErrors().then(function(filteredLog) {
          expect(filteredLog.length).toEqual(0);
          if (filteredLog.length) {
            console.log('browser console errors: ' + util.inspect(filteredLog));
          }
        });
      }

      function expectError(regex) {
        getAndClearSevereErrors().then(function(filteredLog) {
          var found = false;
          filteredLog.forEach(function(log) {
            if (log.message.match(regex)) {
              found = true;
            }
          });
          if (!found) {
            throw new Error('expected an error that matches ' + regex);
          }
        });
      }

      beforeEach(function() {
        util = require('util');
        webdriver = require('selenium-webdriver');
      });

      // For now, we only test on Chrome,
      // as Safari does not load the page with Protractor's injected scripts,
      // and Firefox webdriver always disables content security policy (#6358)
      if (browser.params.browser !== 'chrome') {
        return;
      }

      it('should not report errors when the page is loaded', function() {
        // clear errors so we are not dependent on previous tests
        clearErrors();
        // Need to reload the page as the page is already loaded when
        // we come here
        browser.driver.getCurrentUrl().then(function(url) {
          browser.get(url);
        });
        expectNoErrors();
      });

      it('should evaluate expressions', function() {
        expect(counter.getText()).toEqual('0');
        incBtn.click();
        expect(counter.getText()).toEqual('1');
        expectNoErrors();
      });

      it('should throw and report an error when using "eval"', function() {
        evilBtn.click();
        expect(evilError.getText()).toMatch(/Content Security Policy/);
        expectError(/Content Security Policy/);
      });
    </file>
  </example>
  */

  // `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
  // we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
  // fn that looks for the `ng-csp` attribute anywhere in the current doc.

  /**
 * @ngdoc directive
 * @name ngClick
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-click">
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
  /*
   * A collection of directives that allows creation of custom event handlers that are defined as
   * AngularJS expressions and are compiled and executed within the current scope.
   */
  var ngEventDirectives = {}

  // For events that might fire synchronously during DOM manipulation
  // we need to execute their event handlers asynchronously using $evalAsync,
  // so that they are not executed in an inconsistent state.
  var forceAsyncEvents = {
    blur: true,
    focus: true,
  }
  forEach(
    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(
      ' '
    ),
    function (eventName) {
      var directiveName = directiveNormalize('ng-' + eventName)
      ngEventDirectives[directiveName] = [
        '$parse',
        '$rootScope',
        '$exceptionHandler',
        function ($parse, $rootScope, $exceptionHandler) {
          return createEventDirective(
            $parse,
            $rootScope,
            $exceptionHandler,
            directiveName,
            eventName,
            forceAsyncEvents[eventName]
          )
        },
      ]
    }
  )

  function createEventDirective(
    $parse,
    $rootScope,
    $exceptionHandler,
    directiveName,
    eventName,
    forceAsync
  ) {
    return {
      restrict: 'A',
      compile: function ($element, attr) {
        // NOTE:
        // We expose the powerful `$event` object on the scope that provides access to the Window,
        // etc. This is OK, because expressions are not sandboxed any more (and the expression
        // sandbox was never meant to be a security feature anyway).
        var fn = $parse(attr[directiveName])
        return function ngEventHandler(scope, element) {
          element.on(eventName, function (event) {
            var callback = function () {
              fn(scope, { $event: event })
            }

            if (!$rootScope.$$phase) {
              scope.$apply(callback)
            } else if (forceAsync) {
              scope.$evalAsync(callback)
            } else {
              try {
                callback()
              } catch (error) {
                $exceptionHandler(error)
              }
            }
          })
        }
      },
    }
  }

  /**
 * @ngdoc directive
 * @name ngDblclick
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example name="ng-dblclick">
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMousedown
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousedown">
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMouseup
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseup">
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMouseover
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseover">
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMouseenter
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseenter">
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMouseleave
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mouseleave">
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngMousemove
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-mousemove">
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngKeydown
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keydown">
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngKeyup
 * @restrict A
 * @element ANY
 * @priority 0
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keyup">
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngKeypress
 * @restrict A
 * @element ANY
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example name="ng-keypress">
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngSubmit
 * @restrict A
 * @element form
 * @priority 0
 *
 * @description
 * Enables binding AngularJS expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample" name="ng-submit">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

  /**
   * @ngdoc directive
   * @name ngFocus
   * @restrict A
   * @element window, input, select, textarea, a
   * @priority 0
   *
   * @description
   * Specify custom behavior on focus event.
   *
   * Note: As the `focus` event is executed synchronously when calling `input.focus()`
   * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
   * during an `$apply` to ensure a consistent state.
   *
   * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
   * focus. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
   * @ngdoc directive
   * @name ngBlur
   * @restrict A
   * @element window, input, select, textarea, a
   * @priority 0
   *
   * @description
   * Specify custom behavior on blur event.
   *
   * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
   * an element has lost focus.
   *
   * Note: As the `blur` event is executed synchronously also during DOM manipulations
   * (e.g. removing a focussed input),
   * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
   * during an `$apply` to ensure a consistent state.
   *
   * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
   * blur. ({@link guide/expression#-event- Event object is available as `$event`})
   *
   * @example
   * See {@link ng.directive:ngClick ngClick}
   */

  /**
 * @ngdoc directive
 * @name ngCopy
 * @restrict A
 * @element window, input, select, textarea, a
 * @priority 0
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-copy">
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngCut
 * @restrict A
 * @element window, input, select, textarea, a
 * @priority 0
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-cut">
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngPaste
 * @restrict A
 * @element window, input, select, textarea, a
 * @priority 0
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example name="ng-paste">
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

  /**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 * @multiElement
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * | Animation                        | Occurs                               |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
    <file name="index.html">
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
  var ngIfDirective = [
    '$animate',
    '$compile',
    function ($animate, $compile) {
      return {
        multiElement: true,
        transclude: 'element',
        priority: 600,
        terminal: true,
        restrict: 'A',
        $$tlb: true,
        link: function ($scope, $element, $attr, ctrl, $transclude) {
          var block, childScope, previousElements
          $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
            if (value) {
              if (!childScope) {
                $transclude(function (clone, newScope) {
                  childScope = newScope
                  clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf)
                  // Note: We only need the first/last node of the cloned nodes.
                  // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                  // by a directive with templateUrl when its template arrives.
                  block = {
                    clone: clone,
                  }
                  $animate.enter(clone, $element.parent(), $element)
                })
              }
            } else {
              if (previousElements) {
                previousElements.remove()
                previousElements = null
              }
              if (childScope) {
                childScope.$destroy()
                childScope = null
              }
              if (block) {
                previousElements = getBlockNodes(block.clone)
                $animate.leave(previousElements).done(function (response) {
                  if (response !== false) previousElements = null
                })
                block = null
              }
            }
          })
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 * @scope
 * @priority -400
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either add them to your {@link ng.$sceDelegateProvider#trustedResourceUrlList trusted
 * resource URL list} or {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to
 * AngularJS's {@link ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
 *
 * The enter and leave animation occur concurrently.
 *
 * @param {string} ngInclude|src AngularJS expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *                  <div class="alert alert-warning">
 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
 *                  a function with the name on the window element, which will usually throw a
 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
 *                  different form that {@link guide/directive#normalization matches} `onload`.
 *                  </div>
   *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [{ name: 'template1.html', url: 'template1.html'},
             { name: 'template2.html', url: 'template2.html'}];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser === 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */

  /**
   * @ngdoc event
   * @name ngInclude#$includeContentRequested
   * @eventType emit on the scope ngInclude was declared in
   * @description
   * Emitted every time the ngInclude content is requested.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {String} src URL of content to load.
   */

  /**
   * @ngdoc event
   * @name ngInclude#$includeContentLoaded
   * @eventType emit on the current ngInclude scope
   * @description
   * Emitted every time the ngInclude content is reloaded.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {String} src URL of content to load.
   */

  /**
   * @ngdoc event
   * @name ngInclude#$includeContentError
   * @eventType emit on the scope ngInclude was declared in
   * @description
   * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {String} src URL of content to load.
   */
  var ngIncludeDirective = [
    '$templateRequest',
    '$anchorScroll',
    '$animate',
    function ($templateRequest, $anchorScroll, $animate) {
      return {
        restrict: 'ECA',
        priority: 400,
        terminal: true,
        transclude: 'element',
        controller: angular.noop,
        compile: function (element, attr) {
          var srcExp = attr.ngInclude || attr.src,
            onloadExp = attr.onload || '',
            autoScrollExp = attr.autoscroll

          return function (scope, $element, $attr, ctrl, $transclude) {
            var changeCounter = 0,
              currentScope,
              previousElement,
              currentElement

            var cleanupLastIncludeContent = function () {
              if (previousElement) {
                previousElement.remove()
                previousElement = null
              }
              if (currentScope) {
                currentScope.$destroy()
                currentScope = null
              }
              if (currentElement) {
                $animate.leave(currentElement).done(function (response) {
                  if (response !== false) previousElement = null
                })
                previousElement = currentElement
                currentElement = null
              }
            }

            scope.$watch(srcExp, function ngIncludeWatchAction(src) {
              var afterAnimation = function (response) {
                if (
                  response !== false &&
                  isDefined(autoScrollExp) &&
                  (!autoScrollExp || scope.$eval(autoScrollExp))
                ) {
                  $anchorScroll()
                }
              }
              var thisChangeId = ++changeCounter

              if (src) {
                //set the 2nd param to true to ignore the template request error so that the inner
                //contents and scope can be cleaned up.
                $templateRequest(src, true).then(
                  function (response) {
                    if (scope.$$destroyed) return

                    if (thisChangeId !== changeCounter) return
                    var newScope = scope.$new()
                    ctrl.template = response

                    // Note: This will also link all children of ng-include that were contained in the original
                    // html. If that content contains controllers, ... they could pollute/change the scope.
                    // However, using ng-include on an element with additional content does not make sense...
                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                    // function is called before linking the content, which would apply child
                    // directives to non existing elements.
                    var clone = $transclude(newScope, function (clone) {
                      cleanupLastIncludeContent()
                      $animate.enter(clone, null, $element).done(afterAnimation)
                    })

                    currentScope = newScope
                    currentElement = clone

                    currentScope.$emit('$includeContentLoaded', src)
                    scope.$eval(onloadExp)
                  },
                  function () {
                    if (scope.$$destroyed) return

                    if (thisChangeId === changeCounter) {
                      cleanupLastIncludeContent()
                      scope.$emit('$includeContentError', src)
                    }
                  }
                )
                scope.$emit('$includeContentRequested', src)
              } else {
                cleanupLastIncludeContent()
                ctrl.template = null
              }
            })
          }
        },
      }
    },
  ]

  // This directive is called during the $transclude call of the first `ngInclude` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngInclude
  // is called.
  var ngIncludeFillContentDirective = [
    '$compile',
    function ($compile) {
      return {
        restrict: 'ECA',
        priority: -400,
        require: 'ngInclude',
        link: function (scope, $element, $attr, ctrl) {
          if (toString.call($element[0]).match(/SVG/)) {
            // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
            // support innerHTML, so detect this here and try to generate the contents
            // specially.
            $element.empty()
            $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(
              scope,
              function namespaceAdaptedClone(clone) {
                $element.append(clone)
              },
              { futureParentElement: $element }
            )
            return
          }

          $element.html(ctrl.template)
          $compile($element.contents())(scope)
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 * @priority 450
 * @element ANY
 *
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-danger">
 * This directive can be abused to add unnecessary amounts of logic into your templates.
 * There are only a few appropriate uses of `ngInit`:
 * <ul>
 *   <li>aliasing special properties of {@link ng.directive:ngRepeat `ngRepeat`},
 *     as seen in the demo below.</li>
 *   <li>initializing data during development, or for examples, as seen throughout these docs.</li>
 *   <li>injecting data via server side scripting.</li>
 * </ul>
 *
 * Besides these few cases, you should use {@link guide/component Components} or
 * {@link guide/controller Controllers} rather than `ngInit` to initialize values on a scope.
 * </div>
 *
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
 * sure you have parentheses to ensure correct operator precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = ($index | toString)"></div>`
 * </pre>
 * </div>
 *
 * @example
   <example module="initExample" name="ng-init">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
  var ngInitDirective = ngDirective({
    priority: 450,
    compile: function () {
      return {
        pre: function (scope, element, attrs) {
          scope.$eval(attrs.ngInit)
        },
      }
    },
  })

  /**
   * @ngdoc directive
   * @name ngList
   * @restrict A
   * @priority 100
   *
   * @param {string=} ngList optional delimiter that should be used to split the value.
   *
   * @description
   * Text input that converts between a delimited string and an array of strings. The default
   * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
   * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
   *
   * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
   * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
   *   list item is respected. This implies that the user of the directive is responsible for
   *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
   *   tab or newline character.
   * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
   *   when joining the list items back together) and whitespace around each list item is stripped
   *   before it is added to the model.
   *
   * @example
   * ### Validation
   *
   * <example name="ngList-directive" module="listExample">
   *   <file name="app.js">
   *      angular.module('listExample', [])
   *        .controller('ExampleController', ['$scope', function($scope) {
   *          $scope.names = ['morpheus', 'neo', 'trinity'];
   *        }]);
   *   </file>
   *   <file name="index.html">
   *    <form name="myForm" ng-controller="ExampleController">
   *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
   *      <span role="alert">
   *        <span class="error" ng-show="myForm.namesInput.$error.required">
   *        Required!</span>
   *      </span>
   *      <br>
   *      <tt>names = {{names}}</tt><br/>
   *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
   *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
   *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
   *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
   *     </form>
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     var listInput = element(by.model('names'));
   *     var names = element(by.exactBinding('names'));
   *     var valid = element(by.binding('myForm.namesInput.$valid'));
   *     var error = element(by.css('span.error'));
   *
   *     it('should initialize to model', function() {
   *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
   *       expect(valid.getText()).toContain('true');
   *       expect(error.getCssValue('display')).toBe('none');
   *     });
   *
   *     it('should be invalid if empty', function() {
   *       listInput.clear();
   *       listInput.sendKeys('');
   *
   *       expect(names.getText()).toContain('');
   *       expect(valid.getText()).toContain('false');
   *       expect(error.getCssValue('display')).not.toBe('none');
   *     });
   *   </file>
   * </example>
   *
   * @example
   * ### Splitting on newline
   *
   * <example name="ngList-directive-newlines">
   *   <file name="index.html">
   *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
   *    <pre>{{ list | json }}</pre>
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *     it("should split the text by newlines", function() {
   *       var listInput = element(by.model('list'));
   *       var output = element(by.binding('list | json'));
   *       listInput.sendKeys('abc\ndef\nghi');
   *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
   *     });
   *   </file>
   * </example>
   *
   */
  var ngListDirective = function () {
    return {
      restrict: 'A',
      priority: 100,
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        var ngList = attr.ngList || ', '
        var trimValues = attr.ngTrim !== 'false'
        var separator = trimValues ? trim(ngList) : ngList

        var parse = function (viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue)) return

          var list = []

          if (viewValue) {
            forEach(viewValue.split(separator), function (value) {
              if (value) list.push(trimValues ? trim(value) : value)
            })
          }

          return list
        }

        ctrl.$parsers.push(parse)
        ctrl.$formatters.push(function (value) {
          if (isArray(value)) {
            return value.join(ngList)
          }

          return undefined
        })

        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function (value) {
          return !value || !value.length
        }
      },
    }
  }

  /* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
  PENDING_CLASS: true,
  addSetValidityMethod: true,
  setupValidity: true,
  defaultModelOptions: false
*/

  var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    EMPTY_CLASS = 'ng-empty',
    NOT_EMPTY_CLASS = 'ng-not-empty'

  var ngModelMinErr = minErr('ngModel')

  /**
 * @ngdoc type
 * @name ngModel.NgModelController
 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
 * is set.
 *
 * @property {*} $modelValue The value in the model that the control is bound to.
 *
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
 *  the control updates the ngModelController with a new {@link ngModel.NgModelController#$viewValue
    `$viewValue`} from the DOM, usually via user input.
    See {@link ngModel.NgModelController#$setViewValue `$setViewValue()`} for a detailed lifecycle explanation.
    Note that the `$parsers` are not called when the bound ngModel expression changes programmatically.

  The functions are called in array order, each passing
    its return value through to the next. The last return value is forwarded to the
    {@link ngModel.NgModelController#$validators `$validators`} collection.

  Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
    `$viewValue`}.

  Returning `undefined` from a parser means a parse error occurred. In that case,
    no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
    will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
    is set to `true`. The parse error is stored in `ngModel.$error.parse`.

  This simple example shows a parser that would convert text input value to lowercase:
 * ```js
 * function parse(value) {
 *   if (value) {
 *     return value.toLowerCase();
 *   }
 * }
 * ngModelController.$parsers.push(parse);
 * ```

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
    the bound ngModel expression changes programmatically. The `$formatters` are not called when the
    value of the control is changed by user interaction.

  Formatters are used to format / convert the {@link ngModel.NgModelController#$modelValue
    `$modelValue`} for display in the control.

  The functions are called in reverse array order, each passing the value through to the
    next. The last return value is used as the actual DOM value.

  This simple example shows a formatter that would convert the model value to uppercase:

 * ```js
 * function format(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(format);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever
 *     a change to {@link ngModel.NgModelController#$viewValue `$viewValue`} has caused a change
 *     to {@link ngModel.NgModelController#$modelValue `$modelValue`}.
 *     It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * AngularJS provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if (attrs.stripBr && html === '<br>') {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
  NgModelController.$inject = [
    '$scope',
    '$exceptionHandler',
    '$attrs',
    '$element',
    '$parse',
    '$animate',
    '$timeout',
    '$q',
    '$interpolate',
  ]
  function NgModelController(
    $scope,
    $exceptionHandler,
    $attr,
    $element,
    $parse,
    $animate,
    $timeout,
    $q,
    $interpolate
  ) {
    this.$viewValue = Number.NaN
    this.$modelValue = Number.NaN
    this.$$rawModelValue = undefined // stores the parsed modelValue / model set from scope regardless of validity.
    this.$validators = {}
    this.$asyncValidators = {}
    this.$parsers = []
    this.$formatters = []
    this.$viewChangeListeners = []
    this.$untouched = true
    this.$touched = false
    this.$pristine = true
    this.$dirty = false
    this.$valid = true
    this.$invalid = false
    this.$error = {} // keep invalid keys here
    this.$$success = {} // keep valid keys here
    this.$pending = undefined // keep pending keys here
    this.$name = $interpolate($attr.name || '', false)($scope)
    this.$$parentForm = nullFormCtrl
    this.$options = defaultModelOptions
    this.$$updateEvents = ''
    // Attach the correct context to the event handler function for updateOn
    this.$$updateEventHandler = this.$$updateEventHandler.bind(this)

    this.$$parsedNgModel = $parse($attr.ngModel)
    this.$$parsedNgModelAssign = this.$$parsedNgModel.assign
    this.$$ngModelGet = this.$$parsedNgModel
    this.$$ngModelSet = this.$$parsedNgModelAssign
    this.$$pendingDebounce = null
    this.$$parserValid = undefined
    this.$$parserName = 'parse'

    this.$$currentValidationRunId = 0

    this.$$scope = $scope
    this.$$rootScope = $scope.$root
    this.$$attr = $attr
    this.$$element = $element
    this.$$animate = $animate
    this.$$timeout = $timeout
    this.$$parse = $parse
    this.$$q = $q
    this.$$exceptionHandler = $exceptionHandler

    setupValidity(this)
    setupModelWatcher(this)
  }

  NgModelController.prototype = {
    $$initGetterSetters: function () {
      if (this.$options.getOption('getterSetter')) {
        var invokeModelGetter = this.$$parse(this.$$attr.ngModel + '()'),
          invokeModelSetter = this.$$parse(this.$$attr.ngModel + '($$$p)')

        this.$$ngModelGet = function ($scope) {
          var modelValue = this.$$parsedNgModel($scope)
          if (isFunction(modelValue)) {
            modelValue = invokeModelGetter($scope)
          }
          return modelValue
        }
        this.$$ngModelSet = function ($scope, newValue) {
          if (isFunction(this.$$parsedNgModel($scope))) {
            invokeModelSetter($scope, { $$$p: newValue })
          } else {
            this.$$parsedNgModelAssign($scope, newValue)
          }
        }
      } else if (!this.$$parsedNgModel.assign) {
        throw ngModelMinErr(
          'nonassign',
          "Expression '{0}' is non-assignable. Element: {1}",
          this.$$attr.ngModel,
          startingTag(this.$$element)
        )
      }
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$render
     *
     * @description
     * Called when the view needs to be updated. It is expected that the user of the ng-model
     * directive will implement this method.
     *
     * The `$render()` method is invoked in the following situations:
     *
     * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
     *   committed value then `$render()` is called to update the input control.
     * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
     *   the `$viewValue` are different from last time.
     *
     * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
     * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
     * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
     * invoked if you only change a property on the objects.
     */
    $render: noop,

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$isEmpty
     *
     * @description
     * This is called when we need to determine if the value of an input is empty.
     *
     * For instance, the required directive does this to work out if the input has data or not.
     *
     * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
     *
     * You can override this for input directives whose concept of being empty is different from the
     * default. The `checkboxInputType` directive does this because in its case a value of `false`
     * implies empty.
     *
     * @param {*} value The value of the input to check for emptiness.
     * @returns {boolean} True if `value` is "empty".
     */
    $isEmpty: function (value) {
      // eslint-disable-next-line no-self-compare
      return isUndefined(value) || value === '' || value === null || value !== value
    },

    $$updateEmptyClasses: function (value) {
      if (this.$isEmpty(value)) {
        this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS)
        this.$$animate.addClass(this.$$element, EMPTY_CLASS)
      } else {
        this.$$animate.removeClass(this.$$element, EMPTY_CLASS)
        this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS)
      }
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$setPristine
     *
     * @description
     * Sets the control to its pristine state.
     *
     * This method can be called to remove the `ng-dirty` class and set the control to its pristine
     * state (`ng-pristine` class). A model is considered to be pristine when the control
     * has not been changed from when first compiled.
     */
    $setPristine: function () {
      this.$dirty = false
      this.$pristine = true
      this.$$animate.removeClass(this.$$element, DIRTY_CLASS)
      this.$$animate.addClass(this.$$element, PRISTINE_CLASS)
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$setDirty
     *
     * @description
     * Sets the control to its dirty state.
     *
     * This method can be called to remove the `ng-pristine` class and set the control to its dirty
     * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
     * from when first compiled.
     */
    $setDirty: function () {
      this.$dirty = true
      this.$pristine = false
      this.$$animate.removeClass(this.$$element, PRISTINE_CLASS)
      this.$$animate.addClass(this.$$element, DIRTY_CLASS)
      this.$$parentForm.$setDirty()
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$setUntouched
     *
     * @description
     * Sets the control to its untouched state.
     *
     * This method can be called to remove the `ng-touched` class and set the control to its
     * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
     * by default, however this function can be used to restore that state if the model has
     * already been touched by the user.
     */
    $setUntouched: function () {
      this.$touched = false
      this.$untouched = true
      this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS)
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$setTouched
     *
     * @description
     * Sets the control to its touched state.
     *
     * This method can be called to remove the `ng-untouched` class and set the control to its
     * touched state (`ng-touched` class). A model is considered to be touched when the user has
     * first focused the control element and then shifted focus away from the control (blur event).
     */
    $setTouched: function () {
      this.$touched = true
      this.$untouched = false
      this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS)
    },

    /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
   * sync with the ngModel's `$modelValue`.
   *
   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
   * and reset the input to the last committed view value.
   *
   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because AngularJS's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * @example
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.model = {value1: '', value2: ''};
   *
   *       $scope.setEmpty = function(e, value, rollback) {
   *         if (e.keyCode === 27) {
   *           e.preventDefault();
   *           if (rollback) {
   *             $scope.myForm[value].$rollbackViewValue();
   *           }
   *           $scope.model[value] = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
   *       empty them. Follow these steps and observe the difference:</p>
   *       <ol>
   *         <li>Type something in the input. You will see that the model is not yet updated</li>
   *         <li>Press the Escape key.
   *           <ol>
   *             <li> In the first example, nothing happens, because the model is already '', and no
   *             update is detected. If you blur the input, the model will be set to the current view.
   *             </li>
   *             <li> In the second example, the pending update is cancelled, and the input is set back
   *             to the last committed view value (''). Blurring the input does nothing.
   *             </li>
   *           </ol>
   *         </li>
   *       </ol>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <div>
   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
   *                  ng-keydown="setEmpty($event, 'value1')">
   *           value1: "{{ model.value1 }}"
   *         </div>
   *
   *         <div>
   *           <p id="inputDescription2">With $rollbackViewValue():</p>
   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
   *                  ng-keydown="setEmpty($event, 'value2', true)">
   *           value2: "{{ model.value2 }}"
   *         </div>
   *       </form>
   *     </div>
   *   </file>
       <file name="style.css">
          div {
            display: table-cell;
          }
          div:nth-child(1) {
            padding-right: 30px;
          }

        </file>
   * </example>
   */
    $rollbackViewValue: function () {
      this.$$timeout.cancel(this.$$pendingDebounce)
      this.$viewValue = this.$$lastCommittedViewValue
      this.$render()
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$validate
     *
     * @description
     * Runs each of the registered validators (first synchronous validators and then
     * asynchronous validators).
     * If the validity changes to invalid, the model will be set to `undefined`,
     * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
     * If the validity changes to valid, it will set the model to the last available valid
     * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
     */
    $validate: function () {
      // ignore $validate before model is initialized
      if (isNumberNaN(this.$modelValue)) {
        return
      }

      var viewValue = this.$$lastCommittedViewValue
      // Note: we use the $$rawModelValue as $modelValue might have been
      // set to undefined during a view -> model update that found validation
      // errors. We can't parse the view here, since that could change
      // the model although neither viewValue nor the model on the scope changed
      var modelValue = this.$$rawModelValue

      var prevValid = this.$valid
      var prevModelValue = this.$modelValue

      var allowInvalid = this.$options.getOption('allowInvalid')

      var that = this
      this.$$runValidators(modelValue, viewValue, function (allValid) {
        // If there was no change in validity, don't update the model
        // This prevents changing an invalid modelValue to undefined
        if (!allowInvalid && prevValid !== allValid) {
          // Note: Don't check this.$valid here, as we could have
          // external validators (e.g. calculated on the server),
          // that just call $setValidity and need the model value
          // to calculate their validity.
          that.$modelValue = allValid ? modelValue : undefined

          if (that.$modelValue !== prevModelValue) {
            that.$$writeModelToScope()
          }
        }
      })
    },

    $$runValidators: function (modelValue, viewValue, doneCallback) {
      this.$$currentValidationRunId++
      var localValidationRunId = this.$$currentValidationRunId
      var that = this

      // check parser error
      if (!processParseErrors()) {
        validationDone(false)
        return
      }
      if (!processSyncValidators()) {
        validationDone(false)
        return
      }
      processAsyncValidators()

      function processParseErrors() {
        var errorKey = that.$$parserName

        if (isUndefined(that.$$parserValid)) {
          setValidity(errorKey, null)
        } else {
          if (!that.$$parserValid) {
            forEach(that.$validators, function (v, name) {
              setValidity(name, null)
            })
            forEach(that.$asyncValidators, function (v, name) {
              setValidity(name, null)
            })
          }

          // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
          setValidity(errorKey, that.$$parserValid)
          return that.$$parserValid
        }
        return true
      }

      function processSyncValidators() {
        var syncValidatorsValid = true
        forEach(that.$validators, function (validator, name) {
          var result = Boolean(validator(modelValue, viewValue))
          syncValidatorsValid = syncValidatorsValid && result
          setValidity(name, result)
        })
        if (!syncValidatorsValid) {
          forEach(that.$asyncValidators, function (v, name) {
            setValidity(name, null)
          })
          return false
        }
        return true
      }

      function processAsyncValidators() {
        var validatorPromises = []
        var allValid = true
        forEach(that.$asyncValidators, function (validator, name) {
          var promise = validator(modelValue, viewValue)
          if (!isPromiseLike(promise)) {
            throw ngModelMinErr(
              'nopromise',
              "Expected asynchronous validator to return a promise but got '{0}' instead.",
              promise
            )
          }
          setValidity(name, undefined)
          validatorPromises.push(
            promise.then(
              function () {
                setValidity(name, true)
              },
              function () {
                allValid = false
                setValidity(name, false)
              }
            )
          )
        })
        if (!validatorPromises.length) {
          validationDone(true)
        } else {
          that.$$q.all(validatorPromises).then(function () {
            validationDone(allValid)
          }, noop)
        }
      }

      function setValidity(name, isValid) {
        if (localValidationRunId === that.$$currentValidationRunId) {
          that.$setValidity(name, isValid)
        }
      }

      function validationDone(allValid) {
        if (localValidationRunId === that.$$currentValidationRunId) {
          doneCallback(allValid)
        }
      }
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$commitViewValue
     *
     * @description
     * Commit a pending update to the `$modelValue`.
     *
     * Updates may be pending by a debounced event or because the input is waiting for a some future
     * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
     * usually handles calling this in response to input events.
     */
    $commitViewValue: function () {
      var viewValue = this.$viewValue

      this.$$timeout.cancel(this.$$pendingDebounce)

      // If the view value has not changed then we should just exit, except in the case where there is
      // a native validator on the element. In this case the validation state may have changed even though
      // the viewValue has stayed empty.
      if (
        this.$$lastCommittedViewValue === viewValue &&
        (viewValue !== '' || !this.$$hasNativeValidators)
      ) {
        return
      }
      this.$$updateEmptyClasses(viewValue)
      this.$$lastCommittedViewValue = viewValue

      // change to dirty
      if (this.$pristine) {
        this.$setDirty()
      }
      this.$$parseAndValidate()
    },

    $$parseAndValidate: function () {
      var viewValue = this.$$lastCommittedViewValue
      var modelValue = viewValue
      var that = this

      this.$$parserValid = isUndefined(modelValue) ? undefined : true

      // Reset any previous parse error
      this.$setValidity(this.$$parserName, null)
      this.$$parserName = 'parse'

      if (this.$$parserValid) {
        for (var i = 0; i < this.$parsers.length; i++) {
          modelValue = this.$parsers[i](modelValue)
          if (isUndefined(modelValue)) {
            this.$$parserValid = false
            break
          }
        }
      }
      if (isNumberNaN(this.$modelValue)) {
        // this.$modelValue has not been touched yet...
        this.$modelValue = this.$$ngModelGet(this.$$scope)
      }
      var prevModelValue = this.$modelValue
      var allowInvalid = this.$options.getOption('allowInvalid')
      this.$$rawModelValue = modelValue

      if (allowInvalid) {
        this.$modelValue = modelValue
        writeToModelIfNeeded()
      }

      // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
      // This can happen if e.g. $setViewValue is called from inside a parser
      this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function (allValid) {
        if (!allowInvalid) {
          // Note: Don't check this.$valid here, as we could have
          // external validators (e.g. calculated on the server),
          // that just call $setValidity and need the model value
          // to calculate their validity.
          that.$modelValue = allValid ? modelValue : undefined
          writeToModelIfNeeded()
        }
      })

      function writeToModelIfNeeded() {
        if (that.$modelValue !== prevModelValue) {
          that.$$writeModelToScope()
        }
      }
    },

    $$writeModelToScope: function () {
      this.$$ngModelSet(this.$$scope, this.$modelValue)
      forEach(
        this.$viewChangeListeners,
        function (listener) {
          try {
            listener()
          } catch (e) {
            // eslint-disable-next-line no-invalid-this
            this.$$exceptionHandler(e)
          }
        },
        this
      )
    },

    /**
     * @ngdoc method
     * @name ngModel.NgModelController#$setViewValue
     *
     * @description
     * Update the view value.
     *
     * This method should be called when a control wants to change the view value; typically,
     * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
     * directive calls it when the value of the input changes and {@link ng.directive:select select}
     * calls it when an option is selected.
     *
     * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
     * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
     * value is sent directly for processing through the `$parsers` pipeline. After this, the `$validators` and
     * `$asyncValidators` are called and the value is applied to `$modelValue`.
     * Finally, the value is set to the **expression** specified in the `ng-model` attribute and
     * all the registered change listeners, in the `$viewChangeListeners` list are called.
     *
     * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
     * and the `default` trigger is not listed, all those actions will remain pending until one of the
     * `updateOn` events is triggered on the DOM element.
     * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
     * directive is used with a custom debounce for this particular event.
     * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
     * is specified, once the timer runs out.
     *
     * When used with standard inputs, the view value will always be a string (which is in some cases
     * parsed into another type, such as a `Date` object for `input[date]`.)
     * However, custom controls might also pass objects to this method. In this case, we should make
     * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
     * perform a deep watch of objects, it only looks for a change of identity. If you only change
     * the property of the object then ngModel will not realize that the object has changed and
     * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
     * not change properties of the copy once it has been passed to `$setViewValue`.
     * Otherwise you may cause the model value on the scope to change incorrectly.
     *
     * <div class="alert alert-info">
     * In any case, the value passed to the method should always reflect the current value
     * of the control. For example, if you are calling `$setViewValue` for an input element,
     * you should pass the input DOM value. Otherwise, the control and the scope model become
     * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
     * the control's DOM value in any way. If we want to change the control's DOM value
     * programmatically, we should update the `ngModel` scope expression. Its new value will be
     * picked up by the model controller, which will run it through the `$formatters`, `$render` it
     * to update the DOM, and finally call `$validate` on it.
     * </div>
     *
     * @param {*} value value from the view.
     * @param {string} trigger Event that triggered the update.
     */
    $setViewValue: function (value, trigger) {
      this.$viewValue = value
      if (this.$options.getOption('updateOnDefault')) {
        this.$$debounceViewValueCommit(trigger)
      }
    },

    $$debounceViewValueCommit: function (trigger) {
      var debounceDelay = this.$options.getOption('debounce')

      if (isNumber(debounceDelay[trigger])) {
        debounceDelay = debounceDelay[trigger]
      } else if (
        isNumber(debounceDelay['default']) &&
        this.$options.getOption('updateOn').indexOf(trigger) === -1
      ) {
        debounceDelay = debounceDelay['default']
      } else if (isNumber(debounceDelay['*'])) {
        debounceDelay = debounceDelay['*']
      }

      this.$$timeout.cancel(this.$$pendingDebounce)
      var that = this
      if (debounceDelay > 0) {
        // this fails if debounceDelay is an object
        this.$$pendingDebounce = this.$$timeout(function () {
          that.$commitViewValue()
        }, debounceDelay)
      } else if (this.$$rootScope.$$phase) {
        this.$commitViewValue()
      } else {
        this.$$scope.$apply(function () {
          that.$commitViewValue()
        })
      }
    },

    /**
     * @ngdoc method
     *
     * @name ngModel.NgModelController#$overrideModelOptions
     *
     * @description
     *
     * Override the current model options settings programmatically.
     *
     * The previous `ModelOptions` value will not be modified. Instead, a
     * new `ModelOptions` object will inherit from the previous one overriding
     * or inheriting settings that are defined in the given parameter.
     *
     * See {@link ngModelOptions} for information about what options can be specified
     * and how model option inheritance works.
     *
     * <div class="alert alert-warning">
     * **Note:** this function only affects the options set on the `ngModelController`,
     * and not the options on the {@link ngModelOptions} directive from which they might have been
     * obtained initially.
     * </div>
     *
     * <div class="alert alert-danger">
     * **Note:** it is not possible to override the `getterSetter` option.
     * </div>
     *
     * @param {Object} options a hash of settings to override the previous options
     *
     */
    $overrideModelOptions: function (options) {
      this.$options = this.$options.createChild(options)
      this.$$setUpdateOnEvents()
    },

    /**
   * @ngdoc method
   *
   * @name  ngModel.NgModelController#$processModelValue

   * @description
   *
   * Runs the model -> view pipeline on the current
   * {@link ngModel.NgModelController#$modelValue $modelValue}.
   *
   * The following actions are performed by this method:
   *
   * - the `$modelValue` is run through the {@link ngModel.NgModelController#$formatters $formatters}
   * and the result is set to the {@link ngModel.NgModelController#$viewValue $viewValue}
   * - the `ng-empty` or `ng-not-empty` class is set on the element
   * - if the `$viewValue` has changed:
   *   - {@link ngModel.NgModelController#$render $render} is called on the control
   *   - the {@link ngModel.NgModelController#$validators $validators} are run and
   *   the validation status is set.
   *
   * This method is called by ngModel internally when the bound scope value changes.
   * Application developers usually do not have to call this function themselves.
   *
   * This function can be used when the `$viewValue` or the rendered DOM value are not correctly
   * formatted and the `$modelValue` must be run through the `$formatters` again.
   *
   * @example
   * Consider a text input with an autocomplete list (for fruit), where the items are
   * objects with a name and an id.
   * A user enters `ap` and then selects `Apricot` from the list.
   * Based on this, the autocomplete widget will call `$setViewValue({name: 'Apricot', id: 443})`,
   * but the rendered value will still be `ap`.
   * The widget can then call `ctrl.$processModelValue()` to run the model -> view
   * pipeline again, which formats the object to the string `Apricot`,
   * then updates the `$viewValue`, and finally renders it in the DOM.
   *
   * <example module="inputExample" name="ng-model-process">
     <file name="index.html">
      <div ng-controller="inputController" style="display: flex;">
        <div style="margin-right: 30px;">
          Search Fruit:
          <basic-autocomplete items="items" on-select="selectedFruit = item"></basic-autocomplete>
        </div>
        <div>
          Model:<br>
          <pre>{{selectedFruit | json}}</pre>
        </div>
      </div>
     </file>
     <file name="app.js">
      angular.module('inputExample', [])
        .controller('inputController', function($scope) {
          $scope.items = [
            {name: 'Apricot', id: 443},
            {name: 'Clementine', id: 972},
            {name: 'Durian', id: 169},
            {name: 'Jackfruit', id: 982},
            {name: 'Strawberry', id: 863}
          ];
        })
        .component('basicAutocomplete', {
          bindings: {
            items: '<',
            onSelect: '&'
          },
          templateUrl: 'autocomplete.html',
          controller: function($element, $scope) {
            var that = this;
            var ngModel;

            that.$postLink = function() {
              ngModel = $element.find('input').controller('ngModel');

              ngModel.$formatters.push(function(value) {
                return (value && value.name) || value;
              });

              ngModel.$parsers.push(function(value) {
                var match = value;
                for (var i = 0; i < that.items.length; i++) {
                  if (that.items[i].name === value) {
                    match = that.items[i];
                    break;
                  }
                }

                return match;
              });
            };

            that.selectItem = function(item) {
              ngModel.$setViewValue(item);
              ngModel.$processModelValue();
              that.onSelect({item: item});
            };
          }
        });
     </file>
     <file name="autocomplete.html">
       <div>
         <input type="search" ng-model="$ctrl.searchTerm" />
         <ul>
           <li ng-repeat="item in $ctrl.items | filter:$ctrl.searchTerm">
             <button ng-click="$ctrl.selectItem(item)">{{ item.name }}</button>
           </li>
         </ul>
       </div>
     </file>
   * </example>
   *
   */
    $processModelValue: function () {
      var viewValue = this.$$format()

      if (this.$viewValue !== viewValue) {
        this.$$updateEmptyClasses(viewValue)
        this.$viewValue = this.$$lastCommittedViewValue = viewValue
        this.$render()
        // It is possible that model and view value have been updated during render
        this.$$runValidators(this.$modelValue, this.$viewValue, noop)
      }
    },

    /**
     * This method is called internally to run the $formatters on the $modelValue
     */
    $$format: function () {
      var formatters = this.$formatters,
        idx = formatters.length

      var viewValue = this.$modelValue
      while (idx--) {
        viewValue = formatters[idx](viewValue)
      }

      return viewValue
    },

    /**
     * This method is called internally when the bound scope value changes.
     */
    $$setModelValue: function (modelValue) {
      this.$modelValue = this.$$rawModelValue = modelValue
      this.$$parserValid = undefined
      this.$processModelValue()
    },

    $$setUpdateOnEvents: function () {
      if (this.$$updateEvents) {
        this.$$element.off(this.$$updateEvents, this.$$updateEventHandler)
      }

      this.$$updateEvents = this.$options.getOption('updateOn')
      if (this.$$updateEvents) {
        this.$$element.on(this.$$updateEvents, this.$$updateEventHandler)
      }
    },

    $$updateEventHandler: function (ev) {
      this.$$debounceViewValueCommit(ev && ev.type)
    },
  }

  function setupModelWatcher(ctrl) {
    // model -> value
    // Note: we cannot use a normal scope.$watch as we want to detect the following:
    // 1. scope value is 'a'
    // 2. user enters 'b'
    // 3. ng-change kicks in and reverts scope value to 'a'
    //    -> scope value did not change since the last digest as
    //       ng-change executes in apply phase
    // 4. view should be changed back to 'a'
    ctrl.$$scope.$watch(function ngModelWatch(scope) {
      var modelValue = ctrl.$$ngModelGet(scope)

      // if scope model value and ngModel value are out of sync
      // This cannot be moved to the action function, because it would not catch the
      // case where the model is changed in the ngChange function or the model setter
      if (
        modelValue !== ctrl.$modelValue &&
        // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
        // eslint-disable-next-line no-self-compare
        (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
      ) {
        ctrl.$$setModelValue(modelValue)
      }

      return modelValue
    })
  }

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        classes and can be bound to as `{{ someForm.someControl.$error.myError }}`.
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by AngularJS when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    clazz: NgModelController,
    set: function (object, property) {
      object[property] = true
    },
    unset: function (object, property) {
      delete object[property]
    },
  })

  /**
 * @ngdoc directive
 * @name ngModel
 * @restrict A
 * @priority 1
 * @param {expression} ngModel assignable {@link guide/expression Expression} to bind to.
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * ## Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
 *
 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
 *
 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
 * if the select is given the `multiple` attribute.
 *
 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
 * not trigger a re-rendering of the model.
 *
 * ## CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
 *     by the {@link ngModel.NgModelController#$isEmpty} method
 *  - `ng-not-empty`: the view contains a non-empty value
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * @animations
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * ### Basic Usage
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       <p id="inputDescription">
        Update input to see transitions when valid/invalid.
        Integer is a valid value.
       </p>
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
                aria-describedby="inputDescription" />
       </form>
     </file>
 * </example>
 *
 * @example
 * ### Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different from what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because AngularJS is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           <label>Name:
             <input type="text" name="userName"
                    ng-model="user.name"
                    ng-model-options="{ getterSetter: true }" />
           </label>
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */
  var ngModelDirective = [
    '$rootScope',
    function ($rootScope) {
      return {
        restrict: 'A',
        require: ['ngModel', '^?form', '^?ngModelOptions'],
        controller: NgModelController,
        // Prelink needs to run before any input directive
        // so that we can set the NgModelOptions in NgModelController
        // before anyone else uses it.
        priority: 1,
        compile: function ngModelCompile(element) {
          // Setup initial state of the control
          element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS)

          return {
            pre: function ngModelPreLink(scope, element, attr, ctrls) {
              var modelCtrl = ctrls[0],
                formCtrl = ctrls[1] || modelCtrl.$$parentForm,
                optionsCtrl = ctrls[2]

              if (optionsCtrl) {
                modelCtrl.$options = optionsCtrl.$options
              }

              modelCtrl.$$initGetterSetters()

              // notify others, especially parent forms
              formCtrl.$addControl(modelCtrl)

              attr.$observe('name', function (newValue) {
                if (modelCtrl.$name !== newValue) {
                  modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue)
                }
              })

              scope.$on('$destroy', function () {
                modelCtrl.$$parentForm.$removeControl(modelCtrl)
              })
            },
            post: function ngModelPostLink(scope, element, attr, ctrls) {
              var modelCtrl = ctrls[0]
              modelCtrl.$$setUpdateOnEvents()

              function setTouched() {
                modelCtrl.$setTouched()
              }

              element.on('blur', function () {
                if (modelCtrl.$touched) return

                if ($rootScope.$$phase) {
                  scope.$evalAsync(setTouched)
                } else {
                  scope.$apply(setTouched)
                }
              })
            },
          }
        },
      }
    },
  ]

  /* exported defaultModelOptions */
  var defaultModelOptions
  var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/

  /**
   * @ngdoc type
   * @name ModelOptions
   * @description
   * A container for the options set by the {@link ngModelOptions} directive
   */
  function ModelOptions(options) {
    this.$$options = options
  }

  ModelOptions.prototype = {
    /**
     * @ngdoc method
     * @name ModelOptions#getOption
     * @param {string} name the name of the option to retrieve
     * @returns {*} the value of the option
     * @description
     * Returns the value of the given option
     */
    getOption: function (name) {
      return this.$$options[name]
    },

    /**
     * @ngdoc method
     * @name ModelOptions#createChild
     * @param {Object} options a hash of options for the new child that will override the parent's options
     * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
     */
    createChild: function (options) {
      var inheritAll = false

      // make a shallow copy
      options = extend({}, options)

      // Inherit options from the parent if specified by the value `"$inherit"`
      forEach(
        options,
        /** @this */ function (option, key) {
          if (option === '$inherit') {
            if (key === '*') {
              inheritAll = true
            } else {
              options[key] = this.$$options[key]
              // `updateOn` is special so we must also inherit the `updateOnDefault` option
              if (key === 'updateOn') {
                options.updateOnDefault = this.$$options.updateOnDefault
              }
            }
          } else {
            if (key === 'updateOn') {
              // If the `updateOn` property contains the `default` event then we have to remove
              // it from the event list and set the `updateOnDefault` flag.
              options.updateOnDefault = false
              options[key] = trim(
                option.replace(DEFAULT_REGEXP, function () {
                  options.updateOnDefault = true
                  return ' '
                })
              )
            }
          }
        },
        this
      )

      if (inheritAll) {
        // We have a property of the form: `"*": "$inherit"`
        delete options['*']
        defaults(options, this.$$options)
      }

      // Finally add in any missing defaults
      defaults(options, defaultModelOptions.$$options)

      return new ModelOptions(options)
    },
  }

  defaultModelOptions = new ModelOptions({
    updateOn: '',
    updateOnDefault: true,
    debounce: 0,
    getterSetter: false,
    allowInvalid: false,
    timezone: null,
  })

  /**
 * @ngdoc directive
 * @name ngModelOptions
 * @restrict A
 * @priority 10
 *
 * @description
 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
 * directives will use the options of their nearest `ngModelOptions` ancestor.
 *
 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
 * an AngularJS expression. This expression should evaluate to an object, whose properties contain
 * the settings. For example: `<div ng-model-options="{ debounce: 100 }"`.
 *
 * ## Inheriting Options
 *
 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
 * directive by giving it the value of `"$inherit"`.
 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
 * will be used.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
 * ```
 *
 * Notice that the `debounce` setting was not inherited and used the default value instead.
 *
 * You can specify that all undefined settings are automatically inherited from an ancestor by
 * including a property with key of `"*"` and value of `"$inherit"`.
 *
 * For example given the following fragment of HTML
 *
 *
 * ```html
 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
 *   </form>
 * </div>
 * ```
 *
 * the `input` element will have the following settings
 *
 * ```js
 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
 * ```
 *
 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
 *
 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
 *
 *
 * ## Triggering and debouncing model updates
 *
 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
 * a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different from the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ### Overriding immediate updates
 *
 * The following example shows how to override immediate updates. Changes on the inputs within the
 * form will update the model only when the control loses focus (blur event). If `escape` key is
 * pressed while the input field is focused, the value is reset to the value in the current model.
 *
 * <example name="ngModelOptions-directive-blur" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ updateOn: 'blur' }"
 *                  ng-keyup="cancel($event)" />
 *         </label><br />
 *         <label>
 *           Other data:
 *           <input type="text" ng-model="user.data" />
 *         </label><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say', data: '' };
 *
 *         $scope.cancel = function(e) {
 *           if (e.keyCode === 27) {
 *             $scope.userForm.userName.$rollbackViewValue();
 *           }
 *         };
 *       }]);
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var model = element(by.binding('user.name'));
 *     var input = element(by.model('user.name'));
 *     var other = element(by.model('user.data'));
 *
 *     it('should allow custom events', function() {
 *       input.sendKeys(' hello');
 *       input.click();
 *       expect(model.getText()).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say hello');
 *     });
 *
 *     it('should $rollbackViewValue when model changes', function() {
 *       input.sendKeys(' hello');
 *       expect(input.getAttribute('value')).toEqual('say hello');
 *       input.sendKeys(protractor.Key.ESCAPE);
 *       expect(input.getAttribute('value')).toEqual('say');
 *       other.click();
 *       expect(model.getText()).toEqual('say');
 *     });
 *   </file>
 * </example>
 *
 * ### Debouncing updates
 *
 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
 *
 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         Name:
 *         <input type="text" name="userName"
 *                ng-model="user.name"
 *                ng-model-options="{ debounce: 1000 }" />
 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('optionsExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         $scope.user = { name: 'say' };
 *       }]);
 *   </file>
 * </example>
 *
 * ### Default events, extra triggers, and catch-all debounce values
 *
 * This example shows the relationship between "default" update events and
 * additional `updateOn` triggers.
 *
 * `default` events are those that are bound to the control, and when fired, update the `$viewValue`
 * via {@link ngModel.NgModelController#$setViewValue $setViewValue}. Every event that is not listed
 * in `updateOn` is considered a "default" event, since different control types have different
 * default events.
 *
 * The control in this example updates by "default", "click", and "blur", with different `debounce`
 * values. You can see that "click" doesn't have an individual `debounce` value -
 * therefore it uses the `*` debounce value.
 *
 * There is also a button that calls {@link ngModel.NgModelController#$setViewValue $setViewValue}
 * directly with a "custom" event. Since "custom" is not defined in the `updateOn` list,
 * it is considered a "default" event and will update the
 * control if "default" is defined in `updateOn`, and will receive the "default" debounce value.
 * Note that this is just to illustrate how custom controls would possibly call `$setViewValue`.
 *
 * You can change the `updateOn` and `debounce` configuration to test different scenarios. This
 * is done with {@link ngModel.NgModelController#$overrideModelOptions $overrideModelOptions}.
 *
  <example name="ngModelOptions-advanced" module="optionsExample">
    <file name="index.html">
       <model-update-demo></model-update-demo>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .component('modelUpdateDemo', {
          templateUrl: 'template.html',
          controller: function() {
            this.name = 'Chinua';

            this.options = {
              updateOn: 'default blur click',
              debounce: {
                default: 2000,
                blur: 0,
                '*': 1000
              }
            };

            this.updateEvents = function() {
              var eventList = this.options.updateOn.split(' ');
              eventList.push('*');
              var events = {};

              for (var i = 0; i < eventList.length; i++) {
                events[eventList[i]] = this.options.debounce[eventList[i]];
              }

              this.events = events;
            };

            this.updateOptions = function() {
              var options = angular.extend(this.options, {
                updateOn: Object.keys(this.events).join(' ').replace('*', ''),
                debounce: this.events
              });

              this.form.input.$overrideModelOptions(options);
            };

            // Initialize the event form
            this.updateEvents();
          }
        });
    </file>
    <file name="template.html">
      <form name="$ctrl.form">
        Input: <input type="text" name="input" ng-model="$ctrl.name" ng-model-options="$ctrl.options" />
      </form>
      Model: <tt>{{$ctrl.name}}</tt>
      <hr>
      <button ng-click="$ctrl.form.input.$setViewValue('some value', 'custom')">Trigger setViewValue with 'some value' and 'custom' event</button>

      <hr>
      <form ng-submit="$ctrl.updateOptions()">
        <b>updateOn</b><br>
        <input type="text" ng-model="$ctrl.options.updateOn" ng-change="$ctrl.updateEvents()" ng-model-options="{debounce: 500}">

        <table>
          <tr>
            <th>Option</th>
            <th>Debounce value</th>
          </tr>
          <tr ng-repeat="(key, value) in $ctrl.events">
            <td>{{key}}</td>
            <td><input type="number" ng-model="$ctrl.events[key]" /></td>
          </tr>
        </table>

        <br>
        <input type="submit" value="Update options">
      </form>
    </file>
  </example>
 *
 *
 * ## Model updates and validation
 *
 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
 * the model will still be updated even if the value is invalid.
 *
 *
 * ## Connecting to the scope
 *
 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
 * on the scope refers to a "getter/setter" function rather than the value itself.
 *
 * The following example shows how to bind to getter/setters:
 *
 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
 *   <file name="index.html">
 *     <div ng-controller="ExampleController">
 *       <form name="userForm">
 *         <label>
 *           Name:
 *           <input type="text" name="userName"
 *                  ng-model="user.name"
 *                  ng-model-options="{ getterSetter: true }" />
 *         </label>
 *       </form>
 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
 *     </div>
 *   </file>
 *   <file name="app.js">
 *     angular.module('getterSetterExample', [])
 *       .controller('ExampleController', ['$scope', function($scope) {
 *         var _name = 'Brian';
 *         $scope.user = {
 *           name: function(newName) {
 *             return angular.isDefined(newName) ? (_name = newName) : _name;
 *           }
 *         };
 *       }]);
 *   </file>
 * </example>
 *
 *
 * ## Programmatically changing options
 *
 * The `ngModelOptions` expression is only evaluated once when the directive is linked; it is not
 * watched for changes. However, it is possible to override the options on a single
 * {@link ngModel.NgModelController} instance with
 * {@link ngModel.NgModelController#$overrideModelOptions `NgModelController#$overrideModelOptions()`}.
 * See also the example for
 * {@link ngModelOptions#default-events-extra-triggers-and-catch-all-debounce-values
 * Default events, extra triggers, and catch-all debounce values}.
 *
 *
 * ## Specifying timezones
 *
 * You can specify the timezone that date/time input directives expect by providing its name in the
 * `timezone` property.
 *
 *
 * ## Formatting the value of `time` and `datetime-local`
 *
 * With the options `timeSecondsFormat` and `timeStripZeroSeconds` it is possible to adjust the value
 * that is displayed in the control. Note that browsers may apply their own formatting
 * in the user interface.
 *
   <example name="ngModelOptions-time-format" module="timeExample">
     <file name="index.html">
       <time-example></time-example>
     </file>
     <file name="script.js">
        angular.module('timeExample', [])
          .component('timeExample', {
            templateUrl: 'timeExample.html',
            controller: function() {
              this.time = new Date(1970, 0, 1, 14, 57, 0);

              this.options = {
                timeSecondsFormat: 'ss',
                timeStripZeroSeconds: true
              };

              this.optionChange = function() {
                this.timeForm.timeFormatted.$overrideModelOptions(this.options);
                this.time = new Date(this.time);
              };
            }
          });
     </file>
     <file name="timeExample.html">
       <form name="$ctrl.timeForm">
         <strong>Default</strong>:
         <input type="time" ng-model="$ctrl.time" step="any" /><br>
         <strong>With options</strong>:
         <input type="time" name="timeFormatted" ng-model="$ctrl.time" step="any" ng-model-options="$ctrl.options" />
         <br>

         Options:<br>
         <code>timeSecondsFormat</code>:
         <input
           type="text"
           ng-model="$ctrl.options.timeSecondsFormat"
           ng-change="$ctrl.optionChange()">
         <br>
         <code>timeStripZeroSeconds</code>:
         <input
           type="checkbox"
           ng-model="$ctrl.options.timeStripZeroSeconds"
           ng-change="$ctrl.optionChange()">
        </form>
      </file>
 *  </example>
 *
 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
 *   and its descendents.
 *
 * **General options**:
 *
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging to the control. These are the events that are bound to
 *     the control, and when fired, update the `$viewValue` via `$setViewValue`.
 *
 *     `ngModelOptions` considers every event that is not listed in `updateOn` a "default" event,
 *     since different control types use different default events.
 *
 *     See also the section {@link ngModelOptions#triggering-and-debouncing-model-updates
 *     Triggering and debouncing model updates}.
 *
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     ```
 *     ng-model-options="{
 *       updateOn: 'default blur',
 *       debounce: { 'default': 500, 'blur': 0 }
 *     }"
 *     ```
 *     You can use the `*` key to specify a debounce value that applies to all events that are not
 *     specifically listed. In the following example, `mouseup` would have a debounce delay of 1000:
 *     ```
 *     ng-model-options="{
 *       updateOn: 'default blur mouseup',
 *       debounce: { 'default': 500, 'blur': 0, '*': 1000 }
 *     }"
 *     ```
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
 *     `ngModel` as getters/setters.
 *
 *
 *  **Input-type specific options**:
 *
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
 *     If not specified, the timezone of the browser will be used.
 *     Note that changing the timezone will have no effect on the current date, and is only applied after
 *     the next input / model change.
 *
 *   - `timeSecondsFormat`: Defines if the `time` and `datetime-local` types should show seconds and
 *     milliseconds. The option follows the format string of {@link date date filter}.
 *     By default, the options is `undefined` which is equal to `'ss.sss'` (seconds and milliseconds).
 *     The other options are `'ss'` (strips milliseconds), and `''` (empty string), which strips both
 *     seconds and milliseconds.
 *     Note that browsers that support `time` and `datetime-local` require the hour and minutes
 *     part of the time string, and may show the value differently in the user interface.
 *     {@link ngModelOptions#formatting-the-value-of-time-and-datetime-local- See the example}.
 *
 *   - `timeStripZeroSeconds`: Defines if the `time` and `datetime-local` types should strip the
 *     seconds and milliseconds from the formatted value if they are zero. This option is applied
 *     after `timeSecondsFormat`.
 *     This option can be used to make the formatting consistent over different browsers, as some
 *     browsers with support for `time` will natively hide the milliseconds and
 *     seconds if they are zero, but others won't, and browsers that don't implement these input
 *     types will always show the full string.
 *     {@link ngModelOptions#formatting-the-value-of-time-and-datetime-local- See the example}.
 *
 */
  var ngModelOptionsDirective = function () {
    NgModelOptionsController.$inject = ['$attrs', '$scope']
    function NgModelOptionsController($attrs, $scope) {
      this.$$attrs = $attrs
      this.$$scope = $scope
    }
    NgModelOptionsController.prototype = {
      $onInit: function () {
        var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions
        var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions)

        this.$options = parentOptions.createChild(modelOptionsDefinition)
      },
    }

    return {
      restrict: 'A',
      // ngModelOptions needs to run before ngModel and input directives
      priority: 10,
      require: { parentCtrl: '?^^ngModelOptions' },
      bindToController: true,
      controller: NgModelOptionsController,
    }
  }

  // shallow copy over values from `src` that are not already specified on `dst`
  function defaults(dst, src) {
    forEach(src, function (value, key) {
      if (!isDefined(dst[key])) {
        dst[key] = value
      }
    })
  }

  /**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 * @element ANY
 *
 * @description
 * The `ngNonBindable` directive tells AngularJS not to compile or bind the contents of the current
 * DOM element, including directives on the element itself that have a lower priority than
 * `ngNonBindable`. This is useful if the element contains what appears to be AngularJS directives
 * and bindings but which should be ignored by AngularJS. This could be the case if you have a site
 * that displays snippets of code, for instance.
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
  <example name="ng-non-bindable">
    <file name="index.html">
      <div>Normal: {{1 + 2}}</div>
      <div ng-non-bindable>Ignored: {{1 + 2}}</div>
    </file>
    <file name="protractor.js" type="protractor">
     it('should check ng-non-bindable', function() {
       expect(element(by.binding('1 + 2')).getText()).toContain('3');
       expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
     });
    </file>
  </example>
 */
  var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 })

  /* exported ngOptionsDirective */

  /* global jqLiteRemove */

  var ngOptionsMinErr = minErr('ngOptions')

  /**
 * @ngdoc directive
 * @name ngOptions
 * @restrict A
 *
 * @description
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Complex Models (objects or collections)
 *
 * By default, `ngModel` watches the model by reference, not value. This is important to know when
 * binding the select to a model that is an object or a collection.
 *
 * One issue occurs if you want to preselect an option. For example, if you set
 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
 * because the objects are not identical. So by default, you should always reference the item in your collection
 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
 *
 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
 * of the item not by reference, but by the result of the `track by` expression. For example, if your
 * collection items have an id property, you would `track by item.id`.
 *
 * A different issue with objects or collections is that ngModel won't detect if an object property or
 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
 * has not changed identity, but only a property on the object or an item in the collection changes.
 *
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper than the first level inside the
 * object/collection will not trigger a re-rendering.
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
 * </div>
 *
 * Given this array of items on the $scope:
 *
 * ```js
 * $scope.items = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 * ```
 *
 * This will work:
 *
 * ```html
 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0];
 * ```
 *
 * but this will not work:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
 * ```
 * ```js
 * $scope.selected = $scope.items[0].subItem;
 * ```
 *
 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
 * `items` array. Because the selected option has been set programmatically in the controller, the
 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
 *
 *
 * @param {string} ngModel Assignable AngularJS expression to data-bind to.
 * @param {comprehension_expression} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`disable when`** `disable`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
 *      element. Return `true` to disable.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
 *
 * @example
    <example module="selectExample" name="select">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light', notAnOption: true},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark', notAnOption: true},
              {name:'yellow', shade:'light', notAnOption: false}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              <label>Name: <input ng-model="color.name"></label>
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
            </li>
            <li>
              <button ng-click="colors.push({})">add</button>
            </li>
          </ul>
          <hr/>
          <label>Color (null not allowed):
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
          </label><br/>
          <label>Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span></label><br/>

          <label>Color grouped by shade:
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
            </select>
          </label><br/>

          <label>Color grouped by shade, with some disabled:
            <select ng-model="myColor"
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
            </select>
          </label><br/>



          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
          <br/>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

  /* eslint-disable max-len */
  //                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
  var NG_OPTIONS_REGEXP =
    /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/
  // 1: value expression (valueFn)
  // 2: label expression (displayFn)
  // 3: group by expression (groupByFn)
  // 4: disable when expression (disableWhenFn)
  // 5: array item variable name
  // 6: object item key variable name
  // 7: object item value variable name
  // 8: collection expression
  // 9: track by expression
  /* eslint-enable */

  var ngOptionsDirective = [
    '$compile',
    '$document',
    '$parse',
    function ($compile, $document, $parse) {
      function parseOptionsExpression(optionsExp, selectElement, scope) {
        var match = optionsExp.match(NG_OPTIONS_REGEXP)
        if (!match) {
          throw ngOptionsMinErr(
            'iexp',
            'Expected expression in form of ' +
              "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
              " but got '{0}'. Element: {1}",
            optionsExp,
            startingTag(selectElement)
          )
        }

        // Extract the parts from the ngOptions expression

        // The variable name for the value of the item in the collection
        var valueName = match[5] || match[7]
        // The variable name for the key of the item in the collection
        var keyName = match[6]

        // An expression that generates the viewValue for an option if there is a label expression
        var selectAs = / as /.test(match[0]) && match[1]
        // An expression that is used to track the id of each object in the options collection
        var trackBy = match[9]
        // An expression that generates the viewValue for an option if there is no label expression
        var valueFn = $parse(match[2] ? match[1] : valueName)
        var selectAsFn = selectAs && $parse(selectAs)
        var viewValueFn = selectAsFn || valueFn
        var trackByFn = trackBy && $parse(trackBy)

        // Get the value by which we are going to track the option
        // if we have a trackFn then use that (passing scope and locals)
        // otherwise just hash the given viewValue
        var getTrackByValueFn = trackBy
          ? function (value, locals) {
              return trackByFn(scope, locals)
            }
          : function getHashOfValue(value) {
              return hashKey(value)
            }
        var getTrackByValue = function (value, key) {
          return getTrackByValueFn(value, getLocals(value, key))
        }

        var displayFn = $parse(match[2] || match[1])
        var groupByFn = $parse(match[3] || '')
        var disableWhenFn = $parse(match[4] || '')
        var valuesFn = $parse(match[8])

        var locals = {}
        var getLocals = keyName
          ? function (value, key) {
              locals[keyName] = key
              locals[valueName] = value
              return locals
            }
          : function (value) {
              locals[valueName] = value
              return locals
            }

        function Option(selectValue, viewValue, label, group, disabled) {
          this.selectValue = selectValue
          this.viewValue = viewValue
          this.label = label
          this.group = group
          this.disabled = disabled
        }

        function getOptionValuesKeys(optionValues) {
          var optionValuesKeys

          if (!keyName && isArrayLike(optionValues)) {
            optionValuesKeys = optionValues
          } else {
            // if object, extract keys, in enumeration order, unsorted
            optionValuesKeys = []
            for (var itemKey in optionValues) {
              if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
                optionValuesKeys.push(itemKey)
              }
            }
          }
          return optionValuesKeys
        }

        return {
          trackBy: trackBy,
          getTrackByValue: getTrackByValue,
          getWatchables: $parse(valuesFn, function (optionValues) {
            // Create a collection of things that we would like to watch (watchedArray)
            // so that they can all be watched using a single $watchCollection
            // that only runs the handler once if anything changes
            var watchedArray = []
            optionValues = optionValues || []

            var optionValuesKeys = getOptionValuesKeys(optionValues)
            var optionValuesLength = optionValuesKeys.length
            for (var index = 0; index < optionValuesLength; index++) {
              var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index]
              var value = optionValues[key]

              var locals = getLocals(value, key)
              var selectValue = getTrackByValueFn(value, locals)
              watchedArray.push(selectValue)

              // Only need to watch the displayFn if there is a specific label expression
              if (match[2] || match[1]) {
                var label = displayFn(scope, locals)
                watchedArray.push(label)
              }

              // Only need to watch the disableWhenFn if there is a specific disable expression
              if (match[4]) {
                var disableWhen = disableWhenFn(scope, locals)
                watchedArray.push(disableWhen)
              }
            }
            return watchedArray
          }),

          getOptions: function () {
            var optionItems = []
            var selectValueMap = {}

            // The option values were already computed in the `getWatchables` fn,
            // which must have been called to trigger `getOptions`
            var optionValues = valuesFn(scope) || []
            var optionValuesKeys = getOptionValuesKeys(optionValues)
            var optionValuesLength = optionValuesKeys.length

            for (var index = 0; index < optionValuesLength; index++) {
              var key = optionValues === optionValuesKeys ? index : optionValuesKeys[index]
              var value = optionValues[key]
              var locals = getLocals(value, key)
              var viewValue = viewValueFn(scope, locals)
              var selectValue = getTrackByValueFn(viewValue, locals)
              var label = displayFn(scope, locals)
              var group = groupByFn(scope, locals)
              var disabled = disableWhenFn(scope, locals)
              var optionItem = new Option(selectValue, viewValue, label, group, disabled)

              optionItems.push(optionItem)
              selectValueMap[selectValue] = optionItem
            }

            return {
              items: optionItems,
              selectValueMap: selectValueMap,
              getOptionFromViewValue: function (value) {
                return selectValueMap[getTrackByValue(value)]
              },
              getViewValueFromOption: function (option) {
                // If the viewValue could be an object that may be mutated by the application,
                // we need to make a copy and not return the reference to the value on the option.
                return trackBy ? copy(option.viewValue) : option.viewValue
              },
            }
          },
        }
      }

      // Support: IE 9 only
      // We can't just jqLite('<option>') since jqLite is not smart enough
      // to create it in <select> and IE barfs otherwise.
      var optionTemplate = window.document.createElement('option'),
        optGroupTemplate = window.document.createElement('optgroup')

      function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
        var selectCtrl = ctrls[0]
        var ngModelCtrl = ctrls[1]
        var multiple = attr.multiple

        // The emptyOption allows the application developer to provide their own custom "empty"
        // option when the viewValue does not match any of the option values.
        for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
          if (children[i].value === '') {
            selectCtrl.hasEmptyOption = true
            selectCtrl.emptyOption = children.eq(i)
            break
          }
        }

        // The empty option will be compiled and rendered before we first generate the options
        selectElement.empty()

        var providedEmptyOption = !!selectCtrl.emptyOption

        var unknownOption = jqLite(optionTemplate.cloneNode(false))
        unknownOption.val('?')

        var options
        var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope)
        // This stores the newly created options before they are appended to the select.
        // Since the contents are removed from the fragment when it is appended,
        // we only need to create it once.
        var listFragment = $document[0].createDocumentFragment()

        // Overwrite the implementation. ngOptions doesn't use hashes
        selectCtrl.generateUnknownOptionValue = function (val) {
          return '?'
        }

        // Update the controller methods for multiple selectable options
        if (!multiple) {
          selectCtrl.writeValue = function writeNgOptionsValue(value) {
            // The options might not be defined yet when ngModel tries to render
            if (!options) return

            var selectedOption = selectElement[0].options[selectElement[0].selectedIndex]
            var option = options.getOptionFromViewValue(value)

            // Make sure to remove the selected attribute from the previously selected option
            // Otherwise, screen readers might get confused
            if (selectedOption) selectedOption.removeAttribute('selected')

            if (option) {
              // Don't update the option when it is already selected.
              // For example, the browser will select the first option by default. In that case,
              // most properties are set automatically - except the `selected` attribute, which we
              // set always

              if (selectElement[0].value !== option.selectValue) {
                selectCtrl.removeUnknownOption()

                selectElement[0].value = option.selectValue
                option.element.selected = true
              }

              option.element.setAttribute('selected', 'selected')
            } else {
              selectCtrl.selectUnknownOrEmptyOption(value)
            }
          }

          selectCtrl.readValue = function readNgOptionsValue() {
            var selectedOption = options.selectValueMap[selectElement.val()]

            if (selectedOption && !selectedOption.disabled) {
              selectCtrl.unselectEmptyOption()
              selectCtrl.removeUnknownOption()
              return options.getViewValueFromOption(selectedOption)
            }
            return null
          }

          // If we are using `track by` then we must watch the tracked value on the model
          // since ngModel only watches for object identity change
          // FIXME: When a user selects an option, this watch will fire needlessly
          if (ngOptions.trackBy) {
            scope.$watch(
              function () {
                return ngOptions.getTrackByValue(ngModelCtrl.$viewValue)
              },
              function () {
                ngModelCtrl.$render()
              }
            )
          }
        } else {
          selectCtrl.writeValue = function writeNgOptionsMultiple(values) {
            // The options might not be defined yet when ngModel tries to render
            if (!options) return

            // Only set `<option>.selected` if necessary, in order to prevent some browsers from
            // scrolling to `<option>` elements that are outside the `<select>` element's viewport.
            var selectedOptions = (values && values.map(getAndUpdateSelectedOption)) || []

            options.items.forEach(function (option) {
              if (option.element.selected && !includes(selectedOptions, option)) {
                option.element.selected = false
              }
            })
          }

          selectCtrl.readValue = function readNgOptionsMultiple() {
            var selectedValues = selectElement.val() || [],
              selections = []

            forEach(selectedValues, function (value) {
              var option = options.selectValueMap[value]
              if (option && !option.disabled)
                selections.push(options.getViewValueFromOption(option))
            })

            return selections
          }

          // If we are using `track by` then we must watch these tracked values on the model
          // since ngModel only watches for object identity change
          if (ngOptions.trackBy) {
            scope.$watchCollection(
              function () {
                if (isArray(ngModelCtrl.$viewValue)) {
                  return ngModelCtrl.$viewValue.map(function (value) {
                    return ngOptions.getTrackByValue(value)
                  })
                }
              },
              function () {
                ngModelCtrl.$render()
              }
            )
          }
        }

        if (providedEmptyOption) {
          // compile the element since there might be bindings in it
          $compile(selectCtrl.emptyOption)(scope)

          selectElement.prepend(selectCtrl.emptyOption)

          if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
            // This means the empty option has currently no actual DOM node, probably because
            // it has been modified by a transclusion directive.
            selectCtrl.hasEmptyOption = false

            // Redefine the registerOption function, which will catch
            // options that are added by ngIf etc. (rendering of the node is async because of
            // lazy transclusion)
            selectCtrl.registerOption = function (optionScope, optionEl) {
              if (optionEl.val() === '') {
                selectCtrl.hasEmptyOption = true
                selectCtrl.emptyOption = optionEl
                selectCtrl.emptyOption.removeClass('ng-scope')
                // This ensures the new empty option is selected if previously no option was selected
                ngModelCtrl.$render()

                optionEl.on('$destroy', function () {
                  var needsRerender = selectCtrl.$isEmptyOptionSelected()

                  selectCtrl.hasEmptyOption = false
                  selectCtrl.emptyOption = undefined

                  if (needsRerender) ngModelCtrl.$render()
                })
              }
            }
          } else {
            // remove the class, which is added automatically because we recompile the element and it
            // becomes the compilation root
            selectCtrl.emptyOption.removeClass('ng-scope')
          }
        }

        // We will re-render the option elements if the option values or labels change
        scope.$watchCollection(ngOptions.getWatchables, updateOptions)

        // ------------------------------------------------------------------ //

        function addOptionElement(option, parent) {
          var optionElement = optionTemplate.cloneNode(false)
          parent.appendChild(optionElement)
          updateOptionElement(option, optionElement)
        }

        function getAndUpdateSelectedOption(viewValue) {
          var option = options.getOptionFromViewValue(viewValue)
          var element = option && option.element

          if (element && !element.selected) element.selected = true

          return option
        }

        function updateOptionElement(option, element) {
          option.element = element
          element.disabled = option.disabled
          // Support: IE 11 only, Edge 12-13 only
          // NOTE: The label must be set before the value, otherwise IE 11 & Edge create unresponsive
          // selects in certain circumstances when multiple selects are next to each other and display
          // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
          // See https://github.com/angular/angular.js/issues/11314 for more info.
          // This is unfortunately untestable with unit / e2e tests
          if (option.label !== element.label) {
            element.label = option.label
            element.textContent = option.label
          }
          element.value = option.selectValue
        }

        function updateOptions() {
          var previousValue = options && selectCtrl.readValue()

          // We must remove all current options, but cannot simply set innerHTML = null
          // since the providedEmptyOption might have an ngIf on it that inserts comments which we
          // must preserve.
          // Instead, iterate over the current option elements and remove them or their optgroup
          // parents
          if (options) {
            for (var i = options.items.length - 1; i >= 0; i--) {
              var option = options.items[i]
              if (isDefined(option.group)) {
                jqLiteRemove(option.element.parentNode)
              } else {
                jqLiteRemove(option.element)
              }
            }
          }

          options = ngOptions.getOptions()

          var groupElementMap = {}

          options.items.forEach(function addOption(option) {
            var groupElement

            if (isDefined(option.group)) {
              // This option is to live in a group
              // See if we have already created this group
              groupElement = groupElementMap[option.group]

              if (!groupElement) {
                groupElement = optGroupTemplate.cloneNode(false)
                listFragment.appendChild(groupElement)

                // Update the label on the group element
                // "null" is special cased because of Safari
                groupElement.label = option.group === null ? 'null' : option.group

                // Store it for use later
                groupElementMap[option.group] = groupElement
              }

              addOptionElement(option, groupElement)
            } else {
              // This option is not in a group
              addOptionElement(option, listFragment)
            }
          })

          selectElement[0].appendChild(listFragment)

          ngModelCtrl.$render()

          // Check to see if the value has changed due to the update to the options
          if (!ngModelCtrl.$isEmpty(previousValue)) {
            var nextValue = selectCtrl.readValue()
            var isNotPrimitive = ngOptions.trackBy || multiple
            if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
              ngModelCtrl.$setViewValue(nextValue)
              ngModelCtrl.$render()
            }
          }
        }
      }

      return {
        restrict: 'A',
        terminal: true,
        require: ['select', 'ngModel'],
        link: {
          pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
            // Deactivate the SelectController.register method to prevent
            // option directives from accidentally registering themselves
            // (and unwanted $destroy handlers etc.)
            ctrls[0].registerOption = noop
          },
          post: ngOptionsPostLink,
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n AngularJS i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * ## Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in AngularJS's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * ## Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * AngularJS expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, AngularJS will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
 *
 * ## Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and AngularJS uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample" name="ng-pluralize">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
  var ngPluralizeDirective = [
    '$locale',
    '$interpolate',
    '$log',
    function ($locale, $interpolate, $log) {
      var BRACE = /{}/g,
        IS_WHEN = /^when(Minus)?(.+)$/

      return {
        link: function (scope, element, attr) {
          var numberExp = attr.count,
            whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
            offset = attr.offset || 0,
            whens = scope.$eval(whenExp) || {},
            whensExpFns = {},
            startSymbol = $interpolate.startSymbol(),
            endSymbol = $interpolate.endSymbol(),
            braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
            watchRemover = angular.noop,
            lastCount

          forEach(attr, function (expression, attributeName) {
            var tmpMatch = IS_WHEN.exec(attributeName)
            if (tmpMatch) {
              var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2])
              whens[whenKey] = element.attr(attr.$attr[attributeName])
            }
          })
          forEach(whens, function (expression, key) {
            whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement))
          })

          scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
            var count = parseFloat(newVal)
            var countIsNaN = isNumberNaN(count)

            if (!countIsNaN && !(count in whens)) {
              // If an explicit number rule such as 1, 2, 3... is defined, just use it.
              // Otherwise, check it against pluralization rules in $locale service.
              count = $locale.pluralCat(count - offset)
            }

            // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
            // In JS `NaN !== NaN`, so we have to explicitly check.
            if (count !== lastCount && !(countIsNaN && isNumberNaN(lastCount))) {
              watchRemover()
              var whenExpFn = whensExpFns[count]
              if (isUndefined(whenExpFn)) {
                if (newVal != null) {
                  $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp)
                }
                watchRemover = noop
                updateElementText()
              } else {
                watchRemover = scope.$watch(whenExpFn, updateElementText)
              }
              lastCount = count
            }
          })

          function updateElementText(newText) {
            element.text(newText || '')
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngRef
 * @restrict A
 *
 * @description
 * The `ngRef` attribute tells AngularJS to assign the controller of a component (or a directive)
 * to the given property in the current scope. It is also possible to add the jqlite-wrapped DOM
 * element to the scope.
 *
 * If the element with `ngRef` is destroyed `null` is assigned to the property.
 *
 * Note that if you want to assign from a child into the parent scope, you must initialize the
 * target property on the parent scope, otherwise `ngRef` will assign on the child scope.
 * This commonly happens when assigning elements or components wrapped in {@link ngIf} or
 * {@link ngRepeat}. See the second example below.
 *
 *
 * @element ANY
 * @param {string} ngRef property name - A valid AngularJS expression identifier to which the
 *                       controller or jqlite-wrapped DOM element will be bound.
 * @param {string=} ngRefRead read value - The name of a directive (or component) on this element,
 *                            or the special string `$element`. If a name is provided, `ngRef` will
 *                            assign the matching controller. If `$element` is provided, the element
 *                            itself is assigned (even if a controller is available).
 *
 *
 * @example
 * ### Simple toggle
 * This example shows how the controller of the component toggle
 * is reused in the template through the scope to use its logic.
 * <example name="ng-ref-component" module="myApp">
 *   <file name="index.html">
 *     <my-toggle ng-ref="myToggle"></my-toggle>
 *     <button ng-click="myToggle.toggle()">Toggle</button>
 *     <div ng-show="myToggle.isOpen()">
 *       You are using a component in the same template to show it.
 *     </div>
 *   </file>
 *   <file name="index.js">
 *     angular.module('myApp', [])
 *     .component('myToggle', {
 *       controller: function ToggleController() {
 *         var opened = false;
 *         this.isOpen = function() { return opened; };
 *         this.toggle = function() { opened = !opened; };
 *       }
 *     });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      it('should publish the toggle into the scope', function() {
 *        var toggle = element(by.buttonText('Toggle'));
 *        expect(toggle.evaluate('myToggle.isOpen()')).toEqual(false);
 *        toggle.click();
 *        expect(toggle.evaluate('myToggle.isOpen()')).toEqual(true);
 *      });
 *   </file>
 * </example>
 *
 * @example
 * ### ngRef inside scopes
 * This example shows how `ngRef` works with child scopes. The `ngRepeat`-ed `myWrapper` components
 * are assigned to the scope of `myRoot`, because the `toggles` property has been initialized.
 * The repeated `myToggle` components are published to the child scopes created by `ngRepeat`.
 * `ngIf` behaves similarly - the assignment of `myToggle` happens in the `ngIf` child scope,
 * because the target property has not been initialized on the `myRoot` component controller.
 *
 * <example name="ng-ref-scopes" module="myApp">
 *   <file name="index.html">
 *     <my-root></my-root>
 *   </file>
 *   <file name="index.js">
 *     angular.module('myApp', [])
 *     .component('myRoot', {
 *       templateUrl: 'root.html',
 *       controller: function() {
 *         this.wrappers = []; // initialize the array so that the wrappers are assigned into the parent scope
 *       }
 *     })
 *     .component('myToggle', {
 *       template: '<strong>myToggle</strong><button ng-click="$ctrl.toggle()" ng-transclude></button>',
 *       transclude: true,
 *       controller: function ToggleController() {
 *         var opened = false;
 *         this.isOpen = function() { return opened; };
 *         this.toggle = function() { opened = !opened; };
 *       }
 *     })
 *     .component('myWrapper', {
 *       transclude: true,
 *       template: '<strong>myWrapper</strong>' +
 *         '<div>ngRepeatToggle.isOpen(): {{$ctrl.ngRepeatToggle.isOpen() | json}}</div>' +
 *         '<my-toggle ng-ref="$ctrl.ngRepeatToggle"><ng-transclude></ng-transclude></my-toggle>'
 *     });
 *   </file>
 *   <file name="root.html">
 *     <strong>myRoot</strong>
 *     <my-toggle ng-ref="$ctrl.outerToggle">Outer Toggle</my-toggle>
 *     <div>outerToggle.isOpen(): {{$ctrl.outerToggle.isOpen() | json}}</div>
 *     <div><em>wrappers assigned to root</em><br>
 *     <div ng-repeat="wrapper in $ctrl.wrappers">
 *       wrapper.ngRepeatToggle.isOpen(): {{wrapper.ngRepeatToggle.isOpen() | json}}
 *     </div>
 *
 *     <ul>
 *       <li ng-repeat="(index, value) in [1,2,3]">
 *         <strong>ngRepeat</strong>
 *         <div>outerToggle.isOpen(): {{$ctrl.outerToggle.isOpen() | json}}</div>
 *         <my-wrapper ng-ref="$ctrl.wrappers[index]">ngRepeat Toggle {{$index + 1}}</my-wrapper>
 *       </li>
 *     </ul>
 *
 *     <div>ngIfToggle.isOpen(): {{ngIfToggle.isOpen()}} // This is always undefined because it's
 *       assigned to the child scope created by ngIf.
 *     </div>
 *     <div ng-if="true">
          <strong>ngIf</strong>
 *        <my-toggle ng-ref="ngIfToggle">ngIf Toggle</my-toggle>
 *        <div>ngIfToggle.isOpen(): {{ngIfToggle.isOpen() | json}}</div>
 *        <div>outerToggle.isOpen(): {{$ctrl.outerToggle.isOpen() | json}}</div>
 *     </div>
 *   </file>
 *   <file name="styles.css">
 *     ul {
 *       list-style: none;
 *       padding-left: 0;
 *     }
 *
 *     li[ng-repeat] {
 *       background: lightgreen;
 *       padding: 8px;
 *       margin: 8px;
 *     }
 *
 *     [ng-if] {
 *       background: lightgrey;
 *       padding: 8px;
 *     }
 *
 *     my-root {
 *       background: lightgoldenrodyellow;
 *       padding: 8px;
 *       display: block;
 *     }
 *
 *     my-wrapper {
 *       background: lightsalmon;
 *       padding: 8px;
 *       display: block;
 *     }
 *
 *     my-toggle {
 *       background: lightblue;
 *       padding: 8px;
 *       display: block;
 *     }
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *      var OuterToggle = function() {
 *        this.toggle = function() {
 *          element(by.buttonText('Outer Toggle')).click();
 *        };
 *        this.isOpen = function() {
 *          return element.all(by.binding('outerToggle.isOpen()')).first().getText();
 *        };
 *      };
 *      var NgRepeatToggle = function(i) {
 *        var parent = element.all(by.repeater('(index, value) in [1,2,3]')).get(i - 1);
 *        this.toggle = function() {
 *          element(by.buttonText('ngRepeat Toggle ' + i)).click();
 *        };
 *        this.isOpen = function() {
 *          return parent.element(by.binding('ngRepeatToggle.isOpen() | json')).getText();
 *        };
 *        this.isOuterOpen = function() {
 *          return parent.element(by.binding('outerToggle.isOpen() | json')).getText();
 *        };
 *      };
 *      var NgRepeatToggles = function() {
 *        var toggles = [1,2,3].map(function(i) { return new NgRepeatToggle(i); });
 *        this.forEach = function(fn) {
 *          toggles.forEach(fn);
 *        };
 *        this.isOuterOpen = function(i) {
 *          return toggles[i - 1].isOuterOpen();
 *        };
 *      };
 *      var NgIfToggle = function() {
 *        var parent = element(by.css('[ng-if]'));
 *        this.toggle = function() {
 *          element(by.buttonText('ngIf Toggle')).click();
 *        };
 *        this.isOpen = function() {
 *          return by.binding('ngIfToggle.isOpen() | json').getText();
 *        };
 *        this.isOuterOpen = function() {
 *          return parent.element(by.binding('outerToggle.isOpen() | json')).getText();
 *        };
 *      };
 *
 *      it('should toggle the outer toggle', function() {
 *        var outerToggle = new OuterToggle();
 *        expect(outerToggle.isOpen()).toEqual('outerToggle.isOpen(): false');
 *        outerToggle.toggle();
 *        expect(outerToggle.isOpen()).toEqual('outerToggle.isOpen(): true');
 *      });
 *
 *      it('should toggle all outer toggles', function() {
 *        var outerToggle = new OuterToggle();
 *        var repeatToggles = new NgRepeatToggles();
 *        var ifToggle = new NgIfToggle();
 *        expect(outerToggle.isOpen()).toEqual('outerToggle.isOpen(): false');
 *        expect(repeatToggles.isOuterOpen(1)).toEqual('outerToggle.isOpen(): false');
 *        expect(repeatToggles.isOuterOpen(2)).toEqual('outerToggle.isOpen(): false');
 *        expect(repeatToggles.isOuterOpen(3)).toEqual('outerToggle.isOpen(): false');
 *        expect(ifToggle.isOuterOpen()).toEqual('outerToggle.isOpen(): false');
 *        outerToggle.toggle();
 *        expect(outerToggle.isOpen()).toEqual('outerToggle.isOpen(): true');
 *        expect(repeatToggles.isOuterOpen(1)).toEqual('outerToggle.isOpen(): true');
 *        expect(repeatToggles.isOuterOpen(2)).toEqual('outerToggle.isOpen(): true');
 *        expect(repeatToggles.isOuterOpen(3)).toEqual('outerToggle.isOpen(): true');
 *        expect(ifToggle.isOuterOpen()).toEqual('outerToggle.isOpen(): true');
 *      });
 *
 *      it('should toggle each repeat iteration separately', function() {
 *        var repeatToggles = new NgRepeatToggles();
 *
 *        repeatToggles.forEach(function(repeatToggle) {
 *          expect(repeatToggle.isOpen()).toEqual('ngRepeatToggle.isOpen(): false');
 *          expect(repeatToggle.isOuterOpen()).toEqual('outerToggle.isOpen(): false');
 *          repeatToggle.toggle();
 *          expect(repeatToggle.isOpen()).toEqual('ngRepeatToggle.isOpen(): true');
 *          expect(repeatToggle.isOuterOpen()).toEqual('outerToggle.isOpen(): false');
 *        });
 *      });
 *   </file>
 * </example>
 *
 */

  var ngRefMinErr = minErr('ngRef')

  var ngRefDirective = [
    '$parse',
    function ($parse) {
      return {
        priority: -1, // Needed for compatibility with element transclusion on the same element
        restrict: 'A',
        compile: function (tElement, tAttrs) {
          // Get the expected controller name, converts <data-some-thing> into "someThing"
          var controllerName = directiveNormalize(nodeName_(tElement))

          // Get the expression for value binding
          var getter = $parse(tAttrs.ngRef)
          var setter =
            getter.assign ||
            function () {
              throw ngRefMinErr(
                'nonassign',
                'Expression in ngRef="{0}" is non-assignable!',
                tAttrs.ngRef
              )
            }

          return function (scope, element, attrs) {
            var refValue

            if (attrs.hasOwnProperty('ngRefRead')) {
              if (attrs.ngRefRead === '$element') {
                refValue = element
              } else {
                refValue = element.data('$' + attrs.ngRefRead + 'Controller')

                if (!refValue) {
                  throw ngRefMinErr(
                    'noctrl',
                    'The controller for ngRefRead="{0}" could not be found on ngRef="{1}"',
                    attrs.ngRefRead,
                    tAttrs.ngRef
                  )
                }
              }
            } else {
              refValue = element.data('$' + controllerName + 'Controller')
            }

            refValue = refValue || element

            setter(scope, refValue)

            // when the element is removed, remove it (nullify it)
            element.on('$destroy', function () {
              // only remove it if value has not changed,
              // because animations (and other procedures) may duplicate elements
              if (getter(scope) === refValue) {
                setter(scope, null)
              }
            })
          }
        },
      }
    },
  ]

  /* exported ngRepeatDirective */

  /**
 * @ngdoc directive
 * @name ngRepeat
 * @multiElement
 * @restrict A
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * <div class="alert alert-info">
 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 *   This may be useful when, for instance, nesting ngRepeats.
 * </div>
 *
 *
 * ## Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * However, there are a few limitations compared to array iteration:
 *
 * - The JavaScript specification does not define the order of keys
 *   returned for an object, so AngularJS relies on the order returned by the browser
 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
 *   and reinstated. See the
 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
 *
 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
 *   it's a prefix used by AngularJS for public (`$`) and private (`$$`) properties.
 *
 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
 *   objects, and will throw an error if used with one.
 *
 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 *
 * ## Tracking and Duplicates
 *
 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * To minimize creation of DOM elements, `ngRepeat` uses a function
 * to "keep track" of all items in the collection and their corresponding DOM elements.
 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
 * already have DOM elements, and will not re-render them.
 *
 * All different types of tracking functions, their syntax, and their support for duplicate
 * items in collections can be found in the
 * {@link ngRepeat#ngRepeat-arguments ngRepeat expression description}.
 *
 * <div class="alert alert-success">
 * **Best Practice:** If you are working with objects that have a unique identifier property, you
 * should track by this identifier instead of the object instance,
 * e.g. `item in items track by item.id`.
 * Should you reload your data later, `ngRepeat` will not have to rebuild the DOM elements for items
 * it has already rendered, even if the JavaScript objects in the collection have been substituted
 * for new ones. For large collections, this significantly improves rendering performance.
 * </div>
 *
 * ### Effects of DOM Element re-use
 *
 * When DOM elements are re-used, ngRepeat updates the scope for the element, which will
 * automatically update any active bindings on the template. However, other
 * functionality will not be updated, because the element is not re-created:
 *
 * - Directives are not re-compiled
 * - {@link guide/expression#one-time-binding one-time expressions} on the repeated template are not
 * updated if they have stabilized.
 *
 * The above affects all kinds of element re-use due to tracking, but may be especially visible
 * when tracking by `$index` due to the way ngRepeat re-uses elements.
 *
 * The following example shows the effects of different actions with tracking:

  <example module="ngRepeat" name="ngRepeat-tracking" deps="angular-animate.js" animations="true">
    <file name="script.js">
      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
        var friends = [
          {name:'John', age:25},
          {name:'Mary', age:40},
          {name:'Peter', age:85}
        ];

        $scope.removeFirst = function() {
          $scope.friends.shift();
        };

        $scope.updateAge = function() {
          $scope.friends.forEach(function(el) {
            el.age = el.age + 5;
          });
        };

        $scope.copy = function() {
          $scope.friends = angular.copy($scope.friends);
        };

        $scope.reset = function() {
          $scope.friends = angular.copy(friends);
        };

        $scope.reset();
      });
    </file>
    <file name="index.html">
      <div ng-controller="repeatController">
        <ol>
          <li>When you click "Update Age", only the first list updates the age, because all others have
          a one-time binding on the age property. If you then click "Copy", the current friend list
          is copied, and now the second list updates the age, because the identity of the collection items
          has changed and the list must be re-rendered. The 3rd and 4th list stay the same, because all the
          items are already known according to their tracking functions.
          </li>
          <li>When you click "Remove First", the 4th list has the wrong age on both remaining items. This is
          due to tracking by $index: when the first collection item is removed, ngRepeat reuses the first
          DOM element for the new first collection item, and so on. Since the age property is one-time
          bound, the value remains from the collection item which was previously at this index.
          </li>
        </ol>

        <button ng-click="removeFirst()">Remove First</button>
        <button ng-click="updateAge()">Update Age</button>
        <button ng-click="copy()">Copy</button>
        <br><button ng-click="reset()">Reset List</button>
        <br>
        <code>track by $id(friend)</code> (default):
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends">
            {{friend.name}} is {{friend.age}} years old.
          </li>
        </ul>
        <code>track by $id(friend)</code> (default), with age one-time binding:
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends">
            {{friend.name}} is {{::friend.age}} years old.
          </li>
        </ul>
        <code>track by friend.name</code>, with age one-time binding:
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends track by friend.name">
            {{friend.name}}  is {{::friend.age}} years old.
          </li>
        </ul>
        <code>track by $index</code>, with age one-time binding:
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends track by $index">
            {{friend.name}} is {{::friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:30px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:30px;
      }
    </file>
  </example>

 *
 * ## Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
 *
 * See the example below for defining CSS animations with ngRepeat.
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)
 *
 *     *Default tracking: $id()*: `item in items` is equivalent to `item in items track by $id(item)`.
 *     This implies that the DOM elements will be associated by item identity in the collection.
 *
 *     The built-in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the collection. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the collection by identity. Moving the same object would move
 *     the DOM element in the same way in the DOM.
 *     Note that the default id function does not support duplicate primitive values (`number`, `string`),
 *     but supports duplictae non-primitive values (`object`) that are *equal* in shape.
 *
 *     *Custom Expression*: It is possible to use any AngularJS expression to compute the tracking
 *     id, for example with a function, or using a property on the collection items.
 *     `item in items track by item.id` is a typical pattern when the items have a unique identifier,
 *     e.g. database id. In this case the object identity does not matter. Two objects are considered
 *     equivalent as long as their `id` property is same.
 *     Tracking by unique identifier is the most performant way and should be used whenever possible.
 *
 *     *$index*: This special property tracks the collection items by their index, and
 *     re-uses the DOM elements that match that index, e.g. `item in items track by $index`. This can
 *     be used for a performance improvement if no unique identfier is available and the identity of
 *     the collection items cannot be easily computed. It also allows duplicates.
 *
 *     <div class="alert alert-warning">
 *       <strong>Note:</strong> Re-using DOM elements can have unforeseen effects. Read the
 *       {@link ngRepeat#tracking-and-duplicates section on tracking and duplicates} for
 *       more info.
 *     </div>
 *
 *     <div class="alert alert-warning">
 *       <strong>Note:</strong> the `track by` expression must come last - after any filters, and the alias expression:
 *       `item in items | filter:searchText as results  track by item.id`
 *     </div>
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 *     Please note that `as [variable name]` is not an operator but rather a part of ngRepeat
 *     micro-syntax so it can be used only after all filters (and not as operator, inside an expression).
 *
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id` .
 *
 * @example
 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
 * results by name or by age. New (entering) and removed (leaving) items are animated.
  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="repeatController">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results track by friend.name">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length === 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="script.js">
      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
        $scope.friends = [
          {name:'John', age:25, gender:'boy'},
          {name:'Jessie', age:30, gender:'girl'},
          {name:'Johanna', age:28, gender:'girl'},
          {name:'Joy', age:15, gender:'girl'},
          {name:'Mary', age:28, gender:'girl'},
          {name:'Peter', age:95, gender:'boy'},
          {name:'Sebastian', age:50, gender:'boy'},
          {name:'Erika', age:27, gender:'girl'},
          {name:'Patrick', age:40, gender:'boy'},
          {name:'Samantha', age:60, gender:'girl'}
        ];
      });
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:30px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:30px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
  var ngRepeatDirective = [
    '$parse',
    '$animate',
    '$compile',
    function ($parse, $animate, $compile) {
      var NG_REMOVED = '$$NG_REMOVED'
      var ngRepeatMinErr = minErr('ngRepeat')

      var updateScope = function (
        scope,
        index,
        valueIdentifier,
        value,
        keyIdentifier,
        key,
        arrayLength
      ) {
        // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
        scope[valueIdentifier] = value
        if (keyIdentifier) scope[keyIdentifier] = key
        scope.$index = index
        scope.$first = index === 0
        scope.$last = index === arrayLength - 1
        scope.$middle = !(scope.$first || scope.$last)
        // eslint-disable-next-line no-bitwise
        scope.$odd = !(scope.$even = (index & 1) === 0)
      }

      var getBlockStart = function (block) {
        return block.clone[0]
      }

      var getBlockEnd = function (block) {
        return block.clone[block.clone.length - 1]
      }

      var trackByIdArrayFn = function ($scope, key, value) {
        return hashKey(value)
      }

      var trackByIdObjFn = function ($scope, key) {
        return key
      }

      return {
        restrict: 'A',
        multiElement: true,
        transclude: 'element',
        priority: 1000,
        terminal: true,
        $$tlb: true,
        compile: function ngRepeatCompile($element, $attr) {
          var expression = $attr.ngRepeat
          var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression)

          var match = expression.match(
            /^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/
          )

          if (!match) {
            throw ngRepeatMinErr(
              'iexp',
              "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
              expression
            )
          }

          var lhs = match[1]
          var rhs = match[2]
          var aliasAs = match[3]
          var trackByExp = match[4]

          match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)

          if (!match) {
            throw ngRepeatMinErr(
              'iidexp',
              "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
              lhs
            )
          }
          var valueIdentifier = match[3] || match[1]
          var keyIdentifier = match[2]

          if (
            aliasAs &&
            (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
              /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(
                aliasAs
              ))
          ) {
            throw ngRepeatMinErr(
              'badident',
              "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
              aliasAs
            )
          }

          var trackByIdExpFn

          if (trackByExp) {
            var hashFnLocals = { $id: hashKey }
            var trackByExpGetter = $parse(trackByExp)

            trackByIdExpFn = function ($scope, key, value, index) {
              // assign key, value, and $index to the locals so that they can be used in hash functions
              if (keyIdentifier) hashFnLocals[keyIdentifier] = key
              hashFnLocals[valueIdentifier] = value
              hashFnLocals.$index = index
              return trackByExpGetter($scope, hashFnLocals)
            }
          }

          return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
            // Store a list of elements from previous run. This is a hash where key is the item from the
            // iterator, and the value is objects with following properties.
            //   - scope: bound scope
            //   - clone: previous element.
            //   - index: position
            //
            // We are using no-proto object so that we don't need to guard against inherited props via
            // hasOwnProperty.
            var lastBlockMap = createMap()

            //watch props
            $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
              var index,
                length,
                previousNode = $element[0], // node that cloned nodes should be inserted after
                // initialized to the comment node anchor
                nextNode,
                // Same as lastBlockMap but it has the current state. It will become the
                // lastBlockMap on the next iteration.
                nextBlockMap = createMap(),
                collectionLength,
                key,
                value, // key/value of iteration
                trackById,
                trackByIdFn,
                collectionKeys,
                block, // last object information {scope, element, id}
                nextBlockOrder,
                elementsToRemove

              if (aliasAs) {
                $scope[aliasAs] = collection
              }

              if (isArrayLike(collection)) {
                collectionKeys = collection
                trackByIdFn = trackByIdExpFn || trackByIdArrayFn
              } else {
                trackByIdFn = trackByIdExpFn || trackByIdObjFn
                // if object, extract keys, in enumeration order, unsorted
                collectionKeys = []
                for (var itemKey in collection) {
                  if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
                    collectionKeys.push(itemKey)
                  }
                }
              }

              collectionLength = collectionKeys.length
              nextBlockOrder = new Array(collectionLength)

              // locate existing items
              for (index = 0; index < collectionLength; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index]
                value = collection[key]
                trackById = trackByIdFn($scope, key, value, index)
                if (lastBlockMap[trackById]) {
                  // found previously seen block
                  block = lastBlockMap[trackById]
                  delete lastBlockMap[trackById]
                  nextBlockMap[trackById] = block
                  nextBlockOrder[index] = block
                } else if (nextBlockMap[trackById]) {
                  // if collision detected. restore lastBlockMap and throw an error
                  forEach(nextBlockOrder, function (block) {
                    if (block && block.scope) lastBlockMap[block.id] = block
                  })
                  throw ngRepeatMinErr(
                    'dupes',
                    "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                    expression,
                    trackById,
                    value
                  )
                } else {
                  // new never before seen block
                  nextBlockOrder[index] = { id: trackById, scope: undefined, clone: undefined }
                  nextBlockMap[trackById] = true
                }
              }

              // Clear the value property from the hashFnLocals object to prevent a reference to the last value
              // being leaked into the ngRepeatCompile function scope
              if (hashFnLocals) {
                hashFnLocals[valueIdentifier] = undefined
              }

              // remove leftover items
              for (var blockKey in lastBlockMap) {
                block = lastBlockMap[blockKey]
                elementsToRemove = getBlockNodes(block.clone)
                $animate.leave(elementsToRemove)
                if (elementsToRemove[0].parentNode) {
                  // if the element was not removed yet because of pending animation, mark it as deleted
                  // so that we can ignore it later
                  for (index = 0, length = elementsToRemove.length; index < length; index++) {
                    elementsToRemove[index][NG_REMOVED] = true
                  }
                }
                block.scope.$destroy()
              }

              // we are not using forEach for perf reasons (trying to avoid #call)
              for (index = 0; index < collectionLength; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index]
                value = collection[key]
                block = nextBlockOrder[index]

                if (block.scope) {
                  // if we have already seen this object, then we need to reuse the
                  // associated scope/element

                  nextNode = previousNode

                  // skip nodes that are already pending removal via leave animation
                  do {
                    nextNode = nextNode.nextSibling
                  } while (nextNode && nextNode[NG_REMOVED])

                  if (getBlockStart(block) !== nextNode) {
                    // existing item which got moved
                    $animate.move(getBlockNodes(block.clone), null, previousNode)
                  }
                  previousNode = getBlockEnd(block)
                  updateScope(
                    block.scope,
                    index,
                    valueIdentifier,
                    value,
                    keyIdentifier,
                    key,
                    collectionLength
                  )
                } else {
                  // new item which we don't know about
                  $transclude(function ngRepeatTransclude(clone, scope) {
                    block.scope = scope
                    // http://jsperf.com/clone-vs-createcomment
                    var endNode = ngRepeatEndComment.cloneNode(false)
                    clone[clone.length++] = endNode

                    $animate.enter(clone, null, previousNode)
                    previousNode = endNode
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block.clone = clone
                    nextBlockMap[block.id] = block
                    updateScope(
                      block.scope,
                      index,
                      valueIdentifier,
                      value,
                      keyIdentifier,
                      key,
                      collectionLength
                    )
                  })
                }
              }
              lastBlockMap = nextBlockMap
            })
          }
        },
      }
    },
  ]

  var NG_HIDE_CLASS = 'ng-hide'
  var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate'
  /**
 * @ngdoc directive
 * @name ngShow
 * @multiElement
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression provided to
 * the `ngShow` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When truthy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override anything in CSS and the animations will work around the
 * display style.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                        |
 * |-----------------------------------------------------|---------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden. |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngShow` expression evaluates to a truthy value and just before contents are set to visible.        |
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is shown/hidden respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-simple">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element animate-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show-complex">
    <file name="index.html">
      Show: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br />
      <div class="check-element funky-show-hide" ng-show="checked">
        I show up when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngShow', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(false);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(true);
      });
    </file>
  </example>
 *
 * @knownIssue
 *
 * ### Flickering when using ngShow to toggle between elements
 *
 * When using {@link ngShow} and / or {@link ngHide} to toggle between elements, it can
 * happen that both the element to show and the element to hide are visible for a very short time.
 *
 * This usually happens when the {@link ngAnimate ngAnimate module} is included, but no actual animations
 * are defined for {@link ngShow} / {@link ngHide}. Internet Explorer is affected more often than
 * other browsers.
 *
 * There are several way to mitigate this problem:
 *
 * - {@link guide/animations#how-to-selectively-enable-disable-and-skip-animations Disable animations on the affected elements}.
 * - Use {@link ngIf} or {@link ngSwitch} instead of {@link ngShow} / {@link ngHide}.
 * - Use the special CSS selector `ng-hide.ng-hide-animate` to set `{display: none}` or similar on the affected elements.
 * - Use `ng-class="{'ng-hide': expression}` instead of instead of {@link ngShow} / {@link ngHide}.
 * - Define an animation on the affected elements.
 */
  var ngShowDirective = [
    '$animate',
    function ($animate) {
      return {
        restrict: 'A',
        multiElement: true,
        link: function (scope, element, attr) {
          scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
            // we're adding a temporary, animation-specific class for ng-hide since this way
            // we can control when the element is actually displayed on screen without having
            // to have a global/greedy CSS selector that breaks when other animations are run.
            // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
            $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
              tempClasses: NG_HIDE_IN_PROGRESS_CLASS,
            })
          })
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngHide
 * @multiElement
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression provided to
 * the `ngHide` attribute.
 *
 * The element is shown or hidden by removing or adding the `.ng-hide` CSS class onto the element.
 * The `.ng-hide` CSS class is predefined in AngularJS and sets the display style to none (using an
 * `!important` flag). For CSP mode please add `angular-csp.css` to your HTML file (see
 * {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added
 * to the class attribute on the element causing it to become hidden. When falsy, the `.ng-hide`
 * CSS class is removed from the element causing the element not to appear hidden.
 *
 * ## Why is `!important` used?
 *
 * You may be wondering why `!important` is used for the `.ng-hide` CSS class. This is because the
 * `.ng-hide` selector can be easily overridden by heavier selectors. For example, something as
 * simple as changing the display style on a HTML list item would make hidden elements appear
 * visible. This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using `!important`, the show and hide behavior will work as expected despite any clash between
 * CSS selector specificity (when `!important` isn't used with any conflicting styles). If a
 * developer chooses to override the styling to change how to hide an element then it is just a
 * matter of using `!important` in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none !important`. If you
 * wish to change the hide behavior with `ngShow`/`ngHide`, you can simply overwrite the styles for
 * the `.ng-hide` CSS class. Note that the selector that needs to be used is actually
 * `.ng-hide:not(.ng-hide-animate)` to cope with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; These are just alternative ways of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the
 * display style.
 *
 * @animations
 * | Animation                                           | Occurs                                                                                                     |
 * |-----------------------------------------------------|------------------------------------------------------------------------------------------------------------|
 * | {@link $animate#addClass addClass} `.ng-hide`       | After the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden.  |
 * | {@link $animate#removeClass removeClass} `.ng-hide` | After the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible. |
 *
 * Animations in `ngShow`/`ngHide` work with the show and hide events that are triggered when the
 * directive expression is true and false. This system works like the animation system present with
 * `ngClass` except that you must also include the `!important` flag to override the display
 * property so that the elements are not actually hidden during the animation.
 *
 * ```css
 * /&#42; A working example can be found at the bottom of this page. &#42;/
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: all 0.5s linear;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property
 * to block during animation states - ngAnimate will automatically handle the style toggling for you.
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy/falsy then the
 *                            element is hidden/shown respectively.
 *
 * @example
 * A simple example, animating the element's opacity:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-simple">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element animate-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      .animate-show-hide.ng-hide {
        opacity: 0;
      }

      .animate-show-hide.ng-hide-add,
      .animate-show-hide.ng-hide-remove {
        transition: all linear 0.5s;
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 *
 * <hr />
 * @example
 * A more complex example, featuring different show/hide animations:
 *
  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide-complex">
    <file name="index.html">
      Hide: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br />
      <div class="check-element funky-show-hide" ng-hide="checked">
        I hide when your checkbox is checked.
      </div>
    </file>
    <file name="animations.css">
      body {
        overflow: hidden;
        perspective: 1000px;
      }

      .funky-show-hide.ng-hide-add {
        transform: rotateZ(0);
        transform-origin: right;
        transition: all 0.5s ease-in-out;
      }

      .funky-show-hide.ng-hide-add.ng-hide-add-active {
        transform: rotateZ(-135deg);
      }

      .funky-show-hide.ng-hide-remove {
        transform: rotateY(90deg);
        transform-origin: left;
        transition: all 0.5s ease;
      }

      .funky-show-hide.ng-hide-remove.ng-hide-remove-active {
        transform: rotateY(0);
      }

      .check-element {
        border: 1px solid black;
        opacity: 1;
        padding: 10px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      it('should check ngHide', function() {
        var checkbox = element(by.model('checked'));
        var checkElem = element(by.css('.check-element'));

        expect(checkElem.isDisplayed()).toBe(true);
        checkbox.click();
        expect(checkElem.isDisplayed()).toBe(false);
      });
    </file>
  </example>
 *
 * @knownIssue
 *
 * ### Flickering when using ngHide to toggle between elements
 *
 * When using {@link ngShow} and / or {@link ngHide} to toggle between elements, it can
 * happen that both the element to show and the element to hide are visible for a very short time.
 *
 * This usually happens when the {@link ngAnimate ngAnimate module} is included, but no actual animations
 * are defined for {@link ngShow} / {@link ngHide}. Internet Explorer is affected more often than
 * other browsers.
 *
 * There are several way to mitigate this problem:
 *
 * - {@link guide/animations#how-to-selectively-enable-disable-and-skip-animations Disable animations on the affected elements}.
 * - Use {@link ngIf} or {@link ngSwitch} instead of {@link ngShow} / {@link ngHide}.
 * - Use the special CSS selector `ng-hide.ng-hide-animate` to set `{display: none}` or similar on the affected elements.
 * - Use `ng-class="{'ng-hide': expression}` instead of instead of {@link ngShow} / {@link ngHide}.
 * - Define an animation on the affected elements.
 */
  var ngHideDirective = [
    '$animate',
    function ($animate) {
      return {
        restrict: 'A',
        multiElement: true,
        link: function (scope, element, attr) {
          scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
            // The comment inside of the ngShowDirective explains why we add and
            // remove a temporary class for the show/hide animation
            $animate[value ? 'addClass' : 'removeClass'](element, NG_HIDE_CLASS, {
              tempClasses: NG_HIDE_IN_PROGRESS_CLASS,
            })
          })
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @knownIssue
 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
 * attribute, when using the `ngStyle` directive on the same element.
 * See {@link guide/interpolation#known-issues here} for more info.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example name="ng-style">
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toMatch(/rgba\(0, 0, 0, 1\)|rgb\(0, 0, 0\)/);
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toMatch(/rgba\(255, 0, 0, 1\)|rgb\(255, 0, 0\)/);
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toMatch(/rgba\(0, 0, 0, 1\)|rgb\(0, 0, 0\)/);
       });
     </file>
   </example>
 */
  var ngStyleDirective = ngDirective(function (scope, element, attr) {
    scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
      if (oldStyles && newStyles !== oldStyles) {
        forEach(oldStyles, function (val, style) {
          element.css(style, '')
        })
      }
      if (newStyles) element.css(newStyles)
    })
  })

  /**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed. It is possible to associate multiple values to
 *   the same `ngSwitchWhen` by defining the optional attribute
 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
 *   if any of the `ngSwitch` evaluates to any of these tokens.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'options', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should change to settings via "options"', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(3).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
  var ngSwitchDirective = [
    '$animate',
    '$compile',
    function ($animate, $compile) {
      return {
        require: 'ngSwitch',

        // asks for $scope to fool the BC controller module
        controller: [
          '$scope',
          function NgSwitchController() {
            this.cases = {}
          },
        ],
        link: function (scope, element, attr, ngSwitchController) {
          var watchExpr = attr.ngSwitch || attr.on,
            selectedTranscludes = [],
            selectedElements = [],
            previousLeaveAnimations = [],
            selectedScopes = []

          var spliceFactory = function (array, index) {
            return function (response) {
              if (response !== false) array.splice(index, 1)
            }
          }

          scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
            var i, ii

            // Start with the last, in case the array is modified during the loop
            while (previousLeaveAnimations.length) {
              $animate.cancel(previousLeaveAnimations.pop())
            }

            for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
              var selected = getBlockNodes(selectedElements[i].clone)
              selectedScopes[i].$destroy()
              var runner = (previousLeaveAnimations[i] = $animate.leave(selected))
              runner.done(spliceFactory(previousLeaveAnimations, i))
            }

            selectedElements.length = 0
            selectedScopes.length = 0

            if (
              (selectedTranscludes =
                ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])
            ) {
              forEach(selectedTranscludes, function (selectedTransclude) {
                selectedTransclude.transclude(function (caseElement, selectedScope) {
                  selectedScopes.push(selectedScope)
                  var anchor = selectedTransclude.element
                  caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen')
                  var block = { clone: caseElement }

                  selectedElements.push(block)
                  $animate.enter(caseElement, anchor.parent(), anchor)
                })
              })
            }
          })
        },
      }
    },
  ]

  var ngSwitchWhenDirective = ngDirective({
    transclude: 'element',
    priority: 1200,
    require: '^ngSwitch',
    multiElement: true,
    link: function (scope, element, attrs, ctrl, $transclude) {
      var cases = attrs.ngSwitchWhen
        .split(attrs.ngSwitchWhenSeparator)
        .sort()
        .filter(
          // Filter duplicate cases
          function (element, index, array) {
            return array[index - 1] !== element
          }
        )

      forEach(cases, function (whenCase) {
        ctrl.cases['!' + whenCase] = ctrl.cases['!' + whenCase] || []
        ctrl.cases['!' + whenCase].push({ transclude: $transclude, element: element })
      })
    },
  })

  var ngSwitchDefaultDirective = ngDirective({
    transclude: 'element',
    priority: 1200,
    require: '^ngSwitch',
    multiElement: true,
    link: function (scope, element, attr, ctrl, $transclude) {
      ctrl.cases['?'] = ctrl.cases['?'] || []
      ctrl.cases['?'].push({ transclude: $transclude, element: element })
    },
  })

  /**
   * @ngdoc directive
   * @name ngTransclude
   * @restrict EAC
   *
   * @description
   * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
   *
   * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
   * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
   *
   * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
   * content of this element will be removed before the transcluded content is inserted.
   * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
   * content in the case that no transcluded content is provided.
   *
   * @element ANY
   *
   * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
   *                                               or its value is the same as the name of the attribute then the default slot is used.
   *
   * @example
   * ### Basic transclusion
   * This example demonstrates basic transclusion of content into a component directive.
   * <example name="simpleTranscludeExample" module="transcludeExample">
   *   <file name="index.html">
   *     <script>
   *       angular.module('transcludeExample', [])
   *        .directive('pane', function(){
   *           return {
   *             restrict: 'E',
   *             transclude: true,
   *             scope: { title:'@' },
   *             template: '<div style="border: 1px solid black;">' +
   *                         '<div style="background-color: gray">{{title}}</div>' +
   *                         '<ng-transclude></ng-transclude>' +
   *                       '</div>'
   *           };
   *       })
   *       .controller('ExampleController', ['$scope', function($scope) {
   *         $scope.title = 'Lorem Ipsum';
   *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
   *       }]);
   *     </script>
   *     <div ng-controller="ExampleController">
   *       <input ng-model="title" aria-label="title"> <br/>
   *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
   *       <pane title="{{title}}"><span>{{text}}</span></pane>
   *     </div>
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *      it('should have transcluded', function() {
   *        var titleElement = element(by.model('title'));
   *        titleElement.clear();
   *        titleElement.sendKeys('TITLE');
   *        var textElement = element(by.model('text'));
   *        textElement.clear();
   *        textElement.sendKeys('TEXT');
   *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
   *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
   *      });
   *   </file>
   * </example>
   *
   * @example
   * ### Transclude fallback content
   * This example shows how to use `NgTransclude` with fallback content, that
   * is displayed if no transcluded content is provided.
   *
   * <example module="transcludeFallbackContentExample" name="ng-transclude">
   * <file name="index.html">
   * <script>
   * angular.module('transcludeFallbackContentExample', [])
   * .directive('myButton', function(){
   *             return {
   *               restrict: 'E',
   *               transclude: true,
   *               scope: true,
   *               template: '<button style="cursor: pointer;">' +
   *                           '<ng-transclude>' +
   *                             '<b style="color: red;">Button1</b>' +
   *                           '</ng-transclude>' +
   *                         '</button>'
   *             };
   *         });
   * </script>
   * <!-- fallback button content -->
   * <my-button id="fallback"></my-button>
   * <!-- modified button content -->
   * <my-button id="modified">
   *   <i style="color: green;">Button2</i>
   * </my-button>
   * </file>
   * <file name="protractor.js" type="protractor">
   * it('should have different transclude element content', function() {
   *          expect(element(by.id('fallback')).getText()).toBe('Button1');
   *          expect(element(by.id('modified')).getText()).toBe('Button2');
   *        });
   * </file>
   * </example>
   *
   * @example
   * ### Multi-slot transclusion
   * This example demonstrates using multi-slot transclusion in a component directive.
   * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
   *   <file name="index.html">
   *    <style>
   *      .title, .footer {
   *        background-color: gray
   *      }
   *    </style>
   *    <div ng-controller="ExampleController">
   *      <input ng-model="title" aria-label="title"> <br/>
   *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
   *      <pane>
   *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
   *        <pane-body><p>{{text}}</p></pane-body>
   *      </pane>
   *    </div>
   *   </file>
   *   <file name="app.js">
   *    angular.module('multiSlotTranscludeExample', [])
   *     .directive('pane', function() {
   *        return {
   *          restrict: 'E',
   *          transclude: {
   *            'title': '?paneTitle',
   *            'body': 'paneBody',
   *            'footer': '?paneFooter'
   *          },
   *          template: '<div style="border: 1px solid black;">' +
   *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
   *                      '<div ng-transclude="body"></div>' +
   *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
   *                    '</div>'
   *        };
   *    })
   *    .controller('ExampleController', ['$scope', function($scope) {
   *      $scope.title = 'Lorem Ipsum';
   *      $scope.link = 'https://google.com';
   *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
   *    }]);
   *   </file>
   *   <file name="protractor.js" type="protractor">
   *      it('should have transcluded the title and the body', function() {
   *        var titleElement = element(by.model('title'));
   *        titleElement.clear();
   *        titleElement.sendKeys('TITLE');
   *        var textElement = element(by.model('text'));
   *        textElement.clear();
   *        textElement.sendKeys('TEXT');
   *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
   *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
   *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
   *      });
   *   </file>
   * </example>
   */
  var ngTranscludeMinErr = minErr('ngTransclude')
  var ngTranscludeDirective = [
    '$compile',
    function ($compile) {
      return {
        restrict: 'EAC',
        compile: function ngTranscludeCompile(tElement) {
          // Remove and cache any original content to act as a fallback
          var fallbackLinkFn = $compile(tElement.contents())
          tElement.empty()

          return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {
            if (!$transclude) {
              throw ngTranscludeMinErr(
                'orphan',
                'Illegal use of ngTransclude directive in the template! ' +
                  'No parent directive that requires a transclusion found. ' +
                  'Element: {0}',
                startingTag($element)
              )
            }

            // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
            if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
              $attrs.ngTransclude = ''
            }
            var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot

            // If the slot is required and no transclusion content is provided then this call will throw an error
            $transclude(ngTranscludeCloneAttachFn, null, slotName)

            // If the slot is optional and no transclusion content is provided then use the fallback content
            if (slotName && !$transclude.isSlotFilled(slotName)) {
              useFallbackContent()
            }

            function ngTranscludeCloneAttachFn(clone, transcludedScope) {
              if (clone.length && notWhitespace(clone)) {
                $element.append(clone)
              } else {
                useFallbackContent()
                // There is nothing linked against the transcluded scope since no content was available,
                // so it should be safe to clean up the generated scope.
                transcludedScope.$destroy()
              }
            }

            function useFallbackContent() {
              // Since this is the fallback content rather than the transcluded content,
              // we link against the scope of this directive rather than the transcluded scope
              fallbackLinkFn($scope, function (clone) {
                $element.append(clone)
              })
            }

            function notWhitespace(nodes) {
              for (var i = 0, ii = nodes.length; i < ii; i++) {
                var node = nodes[i]
                if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
                  return true
                }
              }
            }
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example  name="script-tag">
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
  var scriptDirective = [
    '$templateCache',
    function ($templateCache) {
      return {
        restrict: 'E',
        terminal: true,
        compile: function (element, attr) {
          if (attr.type === 'text/ng-template') {
            var templateUrl = attr.id,
              text = element[0].text

            $templateCache.put(templateUrl, text)
          }
        },
      }
    },
  ]

  /* exported selectDirective, optionDirective */

  var noopNgModelController = { $setViewValue: noop, $render: noop }

  function setOptionSelectedStatus(optionEl, value) {
    optionEl.prop('selected', value)
    /**
     * When unselecting an option, setting the property to null / false should be enough
     * However, screenreaders might react to the selected attribute instead, see
     * https://github.com/angular/angular.js/issues/14419
     * Note: "selected" is a boolean attr and will be removed when the "value" arg in attr() is false
     * or null
     */
    optionEl.attr('selected', value)
  }

  /**
 * @ngdoc type
 * @name  select.SelectController
 *
 * @description
 * The controller for the {@link ng.select select} directive. The controller exposes
 * a few utility methods that can be used to augment the behavior of a regular or an
 * {@link ng.ngOptions ngOptions} select element.
 *
 * @example
 * ### Set a custom error when the unknown option is selected
 *
 * This example sets a custom error "unknownValue" on the ngModelController
 * when the select element's unknown option is selected, i.e. when the model is set to a value
 * that is not matched by any option.
 *
 * <example name="select-unknown-value-error" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="testSelect"> Single select: </label><br>
 *     <select name="testSelect" ng-model="selected" unknown-value-error>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <span class="error" ng-if="myForm.testSelect.$error.unknownValue">
 *       Error: The current model doesn't match any option</span><br>
 *
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.selected = null;
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.selected = 'nonsense';
 *      };
 *   }])
 *   .directive('unknownValueError', function() {
 *     return {
 *       require: ['ngModel', 'select'],
 *       link: function(scope, element, attrs, ctrls) {
 *         var ngModelCtrl = ctrls[0];
 *         var selectCtrl = ctrls[1];
 *
 *         ngModelCtrl.$validators.unknownValue = function(modelValue, viewValue) {
 *           if (selectCtrl.$isUnknownOptionSelected()) {
 *             return false;
 *           }
 *
 *           return true;
 *         };
 *       }
 *
 *     };
 *   });
 * </file>
 *</example>
 *
 *
 * @example
 * ### Set the "required" error when the unknown option is selected.
 *
 * By default, the "required" error on the ngModelController is only set on a required select
 * when the empty option is selected. This example adds a custom directive that also sets the
 * error when the unknown option is selected.
 *
 * <example name="select-unknown-value-required" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="testSelect"> Select: </label><br>
 *     <select name="testSelect" ng-model="selected" required unknown-value-required>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <span class="error" ng-if="myForm.testSelect.$error.required">Error: Please select a value</span><br>
 *
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.selected = null;
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.selected = 'nonsense';
 *      };
 *   }])
 *   .directive('unknownValueRequired', function() {
 *     return {
 *       priority: 1, // This directive must run after the required directive has added its validator
 *       require: ['ngModel', 'select'],
 *       link: function(scope, element, attrs, ctrls) {
 *         var ngModelCtrl = ctrls[0];
 *         var selectCtrl = ctrls[1];
 *
 *         var originalRequiredValidator = ngModelCtrl.$validators.required;
 *
 *         ngModelCtrl.$validators.required = function() {
 *           if (attrs.required && selectCtrl.$isUnknownOptionSelected()) {
 *             return false;
 *           }
 *
 *           return originalRequiredValidator.apply(this, arguments);
 *         };
 *       }
 *     };
 *   });
 * </file>
 * <file name="protractor.js" type="protractor">
 *  it('should show the error message when the unknown option is selected', function() {

      var error = element(by.className('error'));

      expect(error.getText()).toBe('Error: Please select a value');

      element(by.cssContainingText('option', 'Option 1')).click();

      expect(error.isPresent()).toBe(false);

      element(by.tagName('button')).click();

      expect(error.getText()).toBe('Error: Please select a value');
    });
 * </file>
 *</example>
 *
 *
 */
  var SelectController = [
    '$element',
    '$scope',
    /** @this */ function ($element, $scope) {
      var self = this,
        optionsMap = new NgMap()

      self.selectValueMap = {} // Keys are the hashed values, values the original values

      // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
      self.ngModelCtrl = noopNgModelController
      self.multiple = false

      // The "unknown" option is one that is prepended to the list if the viewValue
      // does not match any of the options. When it is rendered the value of the unknown
      // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
      //
      // Support: IE 9 only
      // We can't just jqLite('<option>') since jqLite is not smart enough
      // to create it in <select> and IE barfs otherwise.
      self.unknownOption = jqLite(window.document.createElement('option'))

      // The empty option is an option with the value '' that the application developer can
      // provide inside the select. It is always selectable and indicates that a "null" selection has
      // been made by the user.
      // If the select has an empty option, and the model of the select is set to "undefined" or "null",
      // the empty option is selected.
      // If the model is set to a different unmatched value, the unknown option is rendered and
      // selected, i.e both are present, because a "null" selection and an unknown value are different.
      self.hasEmptyOption = false
      self.emptyOption = undefined

      self.renderUnknownOption = function (val) {
        var unknownVal = self.generateUnknownOptionValue(val)
        self.unknownOption.val(unknownVal)
        $element.prepend(self.unknownOption)
        setOptionSelectedStatus(self.unknownOption, true)
        $element.val(unknownVal)
      }

      self.updateUnknownOption = function (val) {
        var unknownVal = self.generateUnknownOptionValue(val)
        self.unknownOption.val(unknownVal)
        setOptionSelectedStatus(self.unknownOption, true)
        $element.val(unknownVal)
      }

      self.generateUnknownOptionValue = function (val) {
        return '? ' + hashKey(val) + ' ?'
      }

      self.removeUnknownOption = function () {
        if (self.unknownOption.parent()) self.unknownOption.remove()
      }

      self.selectEmptyOption = function () {
        if (self.emptyOption) {
          $element.val('')
          setOptionSelectedStatus(self.emptyOption, true)
        }
      }

      self.unselectEmptyOption = function () {
        if (self.hasEmptyOption) {
          setOptionSelectedStatus(self.emptyOption, false)
        }
      }

      $scope.$on('$destroy', function () {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop
      })

      // Read the value of the select control, the implementation of this changes depending
      // upon whether the select can have multiple values and whether ngOptions is at work.
      self.readValue = function readSingleValue() {
        var val = $element.val()
        // ngValue added option values are stored in the selectValueMap, normal interpolations are not
        var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val

        if (self.hasOption(realVal)) {
          return realVal
        }

        return null
      }

      // Write the value to the select control, the implementation of this changes depending
      // upon whether the select can have multiple values and whether ngOptions is at work.
      self.writeValue = function writeSingleValue(value) {
        // Make sure to remove the selected attribute from the previously selected option
        // Otherwise, screen readers might get confused
        var currentlySelectedOption = $element[0].options[$element[0].selectedIndex]
        if (currentlySelectedOption) setOptionSelectedStatus(jqLite(currentlySelectedOption), false)

        if (self.hasOption(value)) {
          self.removeUnknownOption()

          var hashedVal = hashKey(value)
          $element.val(hashedVal in self.selectValueMap ? hashedVal : value)

          // Set selected attribute and property on selected option for screen readers
          var selectedOption = $element[0].options[$element[0].selectedIndex]
          setOptionSelectedStatus(jqLite(selectedOption), true)
        } else {
          self.selectUnknownOrEmptyOption(value)
        }
      }

      // Tell the select control that an option, with the given value, has been added
      self.addOption = function (value, element) {
        // Skip comment nodes, as they only pollute the `optionsMap`
        if (element[0].nodeType === NODE_TYPE_COMMENT) return

        assertNotHasOwnProperty(value, '"option value"')
        if (value === '') {
          self.hasEmptyOption = true
          self.emptyOption = element
        }
        var count = optionsMap.get(value) || 0
        optionsMap.set(value, count + 1)
        // Only render at the end of a digest. This improves render performance when many options
        // are added during a digest and ensures all relevant options are correctly marked as selected
        scheduleRender()
      }

      // Tell the select control that an option, with the given value, has been removed
      self.removeOption = function (value) {
        var count = optionsMap.get(value)
        if (count) {
          if (count === 1) {
            optionsMap.delete(value)
            if (value === '') {
              self.hasEmptyOption = false
              self.emptyOption = undefined
            }
          } else {
            optionsMap.set(value, count - 1)
          }
        }
      }

      // Check whether the select control has an option matching the given value
      self.hasOption = function (value) {
        return !!optionsMap.get(value)
      }

      /**
       * @ngdoc method
       * @name select.SelectController#$hasEmptyOption
       *
       * @description
       *
       * Returns `true` if the select element currently has an empty option
       * element, i.e. an option that signifies that the select is empty / the selection is null.
       *
       */
      self.$hasEmptyOption = function () {
        return self.hasEmptyOption
      }

      /**
       * @ngdoc method
       * @name select.SelectController#$isUnknownOptionSelected
       *
       * @description
       *
       * Returns `true` if the select element's unknown option is selected. The unknown option is added
       * and automatically selected whenever the select model doesn't match any option.
       *
       */
      self.$isUnknownOptionSelected = function () {
        // Presence of the unknown option means it is selected
        return $element[0].options[0] === self.unknownOption[0]
      }

      /**
       * @ngdoc method
       * @name select.SelectController#$isEmptyOptionSelected
       *
       * @description
       *
       * Returns `true` if the select element has an empty option and this empty option is currently
       * selected. Returns `false` if the select element has no empty option or it is not selected.
       *
       */
      self.$isEmptyOptionSelected = function () {
        return (
          self.hasEmptyOption &&
          $element[0].options[$element[0].selectedIndex] === self.emptyOption[0]
        )
      }

      self.selectUnknownOrEmptyOption = function (value) {
        if (value == null && self.emptyOption) {
          self.removeUnknownOption()
          self.selectEmptyOption()
        } else if (self.unknownOption.parent().length) {
          self.updateUnknownOption(value)
        } else {
          self.renderUnknownOption(value)
        }
      }

      var renderScheduled = false
      function scheduleRender() {
        if (renderScheduled) return
        renderScheduled = true
        $scope.$$postDigest(function () {
          renderScheduled = false
          self.ngModelCtrl.$render()
        })
      }

      var updateScheduled = false
      function scheduleViewValueUpdate(renderAfter) {
        if (updateScheduled) return

        updateScheduled = true

        $scope.$$postDigest(function () {
          if ($scope.$$destroyed) return

          updateScheduled = false
          self.ngModelCtrl.$setViewValue(self.readValue())
          if (renderAfter) self.ngModelCtrl.$render()
        })
      }

      self.registerOption = function (
        optionScope,
        optionElement,
        optionAttrs,
        interpolateValueFn,
        interpolateTextFn
      ) {
        if (optionAttrs.$attr.ngValue) {
          // The value attribute is set by ngValue
          var oldVal, hashedVal
          optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
            var removal
            var previouslySelected = optionElement.prop('selected')

            if (isDefined(hashedVal)) {
              self.removeOption(oldVal)
              delete self.selectValueMap[hashedVal]
              removal = true
            }

            hashedVal = hashKey(newVal)
            oldVal = newVal
            self.selectValueMap[hashedVal] = newVal
            self.addOption(newVal, optionElement)
            // Set the attribute directly instead of using optionAttrs.$set - this stops the observer
            // from firing a second time. Other $observers on value will also get the result of the
            // ngValue expression, not the hashed value
            optionElement.attr('value', hashedVal)

            if (removal && previouslySelected) {
              scheduleViewValueUpdate()
            }
          })
        } else if (interpolateValueFn) {
          // The value attribute is interpolated
          optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
            // This method is overwritten in ngOptions and has side-effects!
            self.readValue()

            var removal
            var previouslySelected = optionElement.prop('selected')

            if (isDefined(oldVal)) {
              self.removeOption(oldVal)
              removal = true
            }
            oldVal = newVal
            self.addOption(newVal, optionElement)

            if (removal && previouslySelected) {
              scheduleViewValueUpdate()
            }
          })
        } else if (interpolateTextFn) {
          // The text content is interpolated
          optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
            optionAttrs.$set('value', newVal)
            var previouslySelected = optionElement.prop('selected')
            if (oldVal !== newVal) {
              self.removeOption(oldVal)
            }
            self.addOption(newVal, optionElement)

            if (oldVal && previouslySelected) {
              scheduleViewValueUpdate()
            }
          })
        } else {
          // The value attribute is static
          self.addOption(optionAttrs.value, optionElement)
        }

        optionAttrs.$observe('disabled', function (newVal) {
          // Since model updates will also select disabled options (like ngOptions),
          // we only have to handle options becoming disabled, not enabled

          if (newVal === 'true' || (newVal && optionElement.prop('selected'))) {
            if (self.multiple) {
              scheduleViewValueUpdate(true)
            } else {
              self.ngModelCtrl.$setViewValue(null)
              self.ngModelCtrl.$render()
            }
          }
        })

        optionElement.on('$destroy', function () {
          var currentValue = self.readValue()
          var removeValue = optionAttrs.value

          self.removeOption(removeValue)
          scheduleRender()

          if (
            (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1) ||
            currentValue === removeValue
          ) {
            // When multiple (selected) options are destroyed at the same time, we don't want
            // to run a model update for each of them. Instead, run a single update in the $$postDigest
            scheduleViewValueUpdate(true)
          }
        })
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `select` element with AngularJS data-binding.
 *
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
 * between the scope and the `<select>` control (including setting default values).
 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
 * {@link ngOptions `ngOptions`} directives.
 *
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
 * to the model identified by the `ngModel` directive. With static or repeated options, this is
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
 * Value and textContent can be interpolated.
 *
 * The {@link select.SelectController select controller} exposes utility functions that can be used
 * to manipulate the select's behavior.
 *
 * ## Matching model and option values
 *
 * In general, the match between the model and an option is evaluated by strictly comparing the model
 * value against the value of the available options.
 *
 * If you are setting the option value with the option's `value` attribute, or textContent, the
 * value will always be a `string` which means that the model value must also be a string.
 * Otherwise the `select` directive cannot match them correctly.
 *
 * To bind the model to a non-string value, you can use one of the following strategies:
 * - the {@link ng.ngOptions `ngOptions`} directive
 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
 * - model $parsers / $formatters to convert the string value
 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
 *
 * If the viewValue of `ngModel` does not match any of the options, then the control
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * ## Choosing between `ngRepeat` and `ngOptions`
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression
 * - reduced memory consumption by not creating a new scope for each repeated instance
 * - increased render speed by creating the options in a documentFragment instead of individually
 *
 * Specifically, select with repeated options slows down significantly starting at 2000 options in
 * Chrome and Internet Explorer / Edge.
 *
 *
 * @param {string} ngModel Assignable AngularJS expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
 *     bound to the model as an array.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds required attribute and required validation constraint to
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
 * when you want to data-bind to the required attribute.
 * @param {string=} ngChange AngularJS expression to be executed when selected option(s) changes due to user
 *    interaction with the select element.
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
 * set on the model on selection. See {@link ngOptions `ngOptions`}.
 * @param {string=} ngAttrSize sets the size of the select element dynamically. Uses the
 * {@link guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes ngAttr} directive.
 *
 *
 * @example
 * ### Simple `select` elements with static options
 *
 * <example name="static-select" module="staticSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="singleSelect"> Single select: </label><br>
 *     <select name="singleSelect" ng-model="data.singleSelect">
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
 *       <option value="option-2">Option 2</option>
 *     </select><br>
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
 *     <tt>singleSelect = {{data.singleSelect}}</tt>
 *
 *     <hr>
 *     <label for="multipleSelect"> Multiple select: </label><br>
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
 *       <option value="option-1">Option 1</option>
 *       <option value="option-2">Option 2</option>
 *       <option value="option-3">Option 3</option>
 *     </select><br>
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
 *   </form>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('staticSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       singleSelect: null,
 *       multipleSelect: [],
 *       option1: 'option-1'
 *      };
 *
 *      $scope.forceUnknownOption = function() {
 *        $scope.data.singleSelect = 'nonsense';
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * @example
 * ### Using `ngRepeat` to generate `select` options
 * <example name="select-ngrepeat" module="ngrepeatSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="repeatSelect"> Repeat select: </label>
 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <tt>model = {{data.model}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngrepeatSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * @example
 * ### Using `ngValue` to bind the model to an array of objects
 * <example name="select-ngvalue" module="ngvalueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="ngvalueselect"> ngvalue select: </label>
 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
 *     </select>
 *   </form>
 *   <hr>
 *   <pre>model = {{data.model | json}}</pre><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('ngvalueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       model: null,
 *       availableOptions: [
           {value: 'myString', name: 'string'},
           {value: 1, name: 'integer'},
           {value: true, name: 'boolean'},
           {value: null, name: 'null'},
           {value: {prop: 'value'}, name: 'object'},
           {value: ['a'], name: 'array'}
 *       ]
 *      };
 *   }]);
 * </file>
 *</example>
 *
 * @example
 * ### Using `select` with `ngOptions` and setting a default value
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
 *
 * <example name="select-with-default-values" module="defaultValueSelect">
 * <file name="index.html">
 * <div ng-controller="ExampleController">
 *   <form name="myForm">
 *     <label for="mySelect">Make a choice:</label>
 *     <select name="mySelect" id="mySelect"
 *       ng-options="option.name for option in data.availableOptions track by option.id"
 *       ng-model="data.selectedOption"></select>
 *   </form>
 *   <hr>
 *   <tt>option = {{data.selectedOption}}</tt><br/>
 * </div>
 * </file>
 * <file name="app.js">
 *  angular.module('defaultValueSelect', [])
 *    .controller('ExampleController', ['$scope', function($scope) {
 *      $scope.data = {
 *       availableOptions: [
 *         {id: '1', name: 'Option A'},
 *         {id: '2', name: 'Option B'},
 *         {id: '3', name: 'Option C'}
 *       ],
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
 *       };
 *   }]);
 * </file>
 *</example>
 *
 * @example
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
 *
 * <example name="select-with-non-string-options" module="nonStringSelect">
 *   <file name="index.html">
 *     <select ng-model="model.id" convert-to-number>
 *       <option value="0">Zero</option>
 *       <option value="1">One</option>
 *       <option value="2">Two</option>
 *     </select>
 *     {{ model }}
 *   </file>
 *   <file name="app.js">
 *     angular.module('nonStringSelect', [])
 *       .run(function($rootScope) {
 *         $rootScope.model = { id: 2 };
 *       })
 *       .directive('convertToNumber', function() {
 *         return {
 *           require: 'ngModel',
 *           link: function(scope, element, attrs, ngModel) {
 *             ngModel.$parsers.push(function(val) {
 *               return parseInt(val, 10);
 *             });
 *             ngModel.$formatters.push(function(val) {
 *               return '' + val;
 *             });
 *           }
 *         };
 *       });
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should initialize to model', function() {
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
 *     });
 *   </file>
 * </example>
 *
 */
  var selectDirective = function () {
    return {
      restrict: 'E',
      require: ['select', '?ngModel'],
      controller: SelectController,
      priority: 1,
      link: {
        pre: selectPreLink,
        post: selectPostLink,
      },
    }

    function selectPreLink(scope, element, attr, ctrls) {
      var selectCtrl = ctrls[0]
      var ngModelCtrl = ctrls[1]

      // if ngModel is not defined, we don't need to do anything but set the registerOption
      // function to noop, so options don't get added internally
      if (!ngModelCtrl) {
        selectCtrl.registerOption = noop
        return
      }

      selectCtrl.ngModelCtrl = ngModelCtrl

      // When the selected item(s) changes we delegate getting the value of the select control
      // to the `readValue` method, which can be changed if the select can have multiple
      // selected values or if the options are being generated by `ngOptions`
      element.on('change', function () {
        selectCtrl.removeUnknownOption()
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(selectCtrl.readValue())
        })
      })

      // If the select allows multiple values then we need to modify how we read and write
      // values from and to the control; also what it means for the value to be empty and
      // we have to add an extra watch since ngModel doesn't work well with arrays - it
      // doesn't trigger rendering if only an item in the array changes.
      if (attr.multiple) {
        selectCtrl.multiple = true

        // Read value now needs to check each option to see if it is selected
        selectCtrl.readValue = function readMultipleValue() {
          var array = []
          forEach(element.find('option'), function (option) {
            if (option.selected && !option.disabled) {
              var val = option.value
              array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val)
            }
          })
          return array
        }

        // Write value now needs to set the selected property of each matching option
        selectCtrl.writeValue = function writeMultipleValue(value) {
          forEach(element.find('option'), function (option) {
            var shouldBeSelected =
              !!value &&
              (includes(value, option.value) ||
                includes(value, selectCtrl.selectValueMap[option.value]))
            var currentlySelected = option.selected

            // Support: IE 9-11 only, Edge 12-15+
            // In IE and Edge adding options to the selection via shift+click/UP/DOWN
            // will de-select already selected options if "selected" on those options was set
            // more than once (i.e. when the options were already selected)
            // So we only modify the selected property if necessary.
            // Note: this behavior cannot be replicated via unit tests because it only shows in the
            // actual user interface.
            if (shouldBeSelected !== currentlySelected) {
              setOptionSelectedStatus(jqLite(option), shouldBeSelected)
            }
          })
        }

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        var lastView,
          lastViewRef = NaN
        scope.$watch(function selectMultipleWatch() {
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
            lastView = shallowCopy(ngModelCtrl.$viewValue)
            ngModelCtrl.$render()
          }
          lastViewRef = ngModelCtrl.$viewValue
        })

        // If we are a multiple select then value is now a collection
        // so the meaning of $isEmpty changes
        ngModelCtrl.$isEmpty = function (value) {
          return !value || value.length === 0
        }
      }
    }

    function selectPostLink(scope, element, attrs, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      var ngModelCtrl = ctrls[1]
      if (!ngModelCtrl) return

      var selectCtrl = ctrls[0]

      // We delegate rendering to the `writeValue` method, which can be changed
      // if the select can have multiple selected values or if the options are being
      // generated by `ngOptions`.
      // This must be done in the postLink fn to prevent $render to be called before
      // all nodes have been linked correctly.
      ngModelCtrl.$render = function () {
        selectCtrl.writeValue(ngModelCtrl.$viewValue)
      }
    }
  }

  // The option directive is purely designed to communicate the existence (or lack of)
  // of dynamically created (and destroyed) option elements to their containing select
  // directive via its controller.
  var optionDirective = [
    '$interpolate',
    function ($interpolate) {
      return {
        restrict: 'E',
        priority: 100,
        compile: function (element, attr) {
          var interpolateValueFn, interpolateTextFn

          if (isDefined(attr.ngValue)) {
            // Will be handled by registerOption
          } else if (isDefined(attr.value)) {
            // If the value attribute is defined, check if it contains an interpolation
            interpolateValueFn = $interpolate(attr.value, true)
          } else {
            // If the value attribute is not defined then we fall back to the
            // text content of the option element, which may be interpolated
            interpolateTextFn = $interpolate(element.text(), true)
            if (!interpolateTextFn) {
              attr.$set('value', element.text())
            }
          }

          return function (scope, element, attr) {
            // This is an optimization over using ^^ since we don't want to have to search
            // all the way to the root of the DOM for every single option element
            var selectCtrlName = '$selectController',
              parent = element.parent(),
              selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName) // in case we are in optgroup

            if (selectCtrl) {
              selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn)
            }
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngRequired
 * @restrict A
 *
 * @param {expression} ngRequired AngularJS expression. If it evaluates to `true`, it sets the
 *                                `required` attribute to the element and adds the `required`
 *                                {@link ngModel.NgModelController#$validators `validator`}.
 *
 * @description
 *
 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
 * applied to custom controls.
 *
 * The directive sets the `required` attribute on the element if the AngularJS expression inside
 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
 * for more info.
 *
 * The validator will set the `required` error key to true if the `required` attribute is set and
 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
 *
 * @example
 * <example name="ngRequiredDirective" module="ngRequiredExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngRequiredExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.required = true;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="required">Toggle required: </label>
 *         <input type="checkbox" ng-model="required" id="required" />
 *         <br>
 *         <label for="input">This input must be filled if `required` is true: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
 *         <hr>
 *         required error set? = <code>{{form.input.$error.required}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var required = element(by.binding('form.input.$error.required'));
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should set the required error', function() {
         expect(required.getText()).toContain('true');

         input.sendKeys('123');
         expect(required.getText()).not.toContain('true');
         expect(model.getText()).toContain('123');
       });
 *   </file>
 * </example>
 */
  var requiredDirective = [
    '$parse',
    function ($parse) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, elm, attr, ctrl) {
          if (!ctrl) return
          // For boolean attributes like required, presence means true
          var value = attr.hasOwnProperty('required') || $parse(attr.ngRequired)(scope)

          if (!attr.ngRequired) {
            // force truthy in case we are on non input element
            // (input elements do this automatically for boolean attributes like required)
            attr.required = true
          }

          ctrl.$validators.required = function (modelValue, viewValue) {
            return !value || !ctrl.$isEmpty(viewValue)
          }

          attr.$observe('required', function (newVal) {
            if (value !== newVal) {
              value = newVal
              ctrl.$validate()
            }
          })
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngPattern
 * @restrict A
 *
 * @param {expression|RegExp} ngPattern AngularJS expression that must evaluate to a `RegExp` or a `String`
 *                                      parsable into a `RegExp`, or a `RegExp` literal. See above for
 *                                      more details.
 *
 * @description
 *
 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * does not match a RegExp which is obtained from the `ngPattern` attribute value:
 * - the value is an AngularJS expression:
 *   - If the expression evaluates to a RegExp object, then this is used directly.
 *   - If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
 *     in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
 * - If the value is a RegExp literal, e.g. `ngPattern="/^\d+$/"`, it is used directly.
 *
 * <div class="alert alert-info">
 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
 * start at the index of the last search's match, thus not taking the whole input value into
 * account.
 * </div>
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
 *     not available.
 *   </li>
 *   <li>
 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngPatternDirective" module="ngPatternExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngPatternExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.regex = '\\d+';
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="regex">Set a pattern (regex string): </label>
 *         <input type="text" ng-model="regex" id="regex" />
 *         <br>
 *         <label for="input">This input is restricted by the current pattern: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default pattern', function() {
         input.sendKeys('aaa');
         expect(model.getText()).not.toContain('aaa');

         input.clear().then(function() {
           input.sendKeys('123');
           expect(model.getText()).toContain('123');
         });
       });
 *   </file>
 * </example>
 */
  var patternDirective = [
    '$parse',
    function ($parse) {
      return {
        restrict: 'A',
        require: '?ngModel',
        compile: function (tElm, tAttr) {
          var patternExp
          var parseFn

          if (tAttr.ngPattern) {
            patternExp = tAttr.ngPattern

            // ngPattern might be a scope expression, or an inlined regex, which is not parsable.
            // We get value of the attribute here, so we can compare the old and the new value
            // in the observer to avoid unnecessary validations
            if (tAttr.ngPattern.charAt(0) === '/' && REGEX_STRING_REGEXP.test(tAttr.ngPattern)) {
              parseFn = function () {
                return tAttr.ngPattern
              }
            } else {
              parseFn = $parse(tAttr.ngPattern)
            }
          }

          return function (scope, elm, attr, ctrl) {
            if (!ctrl) return

            var attrVal = attr.pattern

            if (attr.ngPattern) {
              attrVal = parseFn(scope)
            } else {
              patternExp = attr.pattern
            }

            var regexp = parsePatternAttr(attrVal, patternExp, elm)

            attr.$observe('pattern', function (newVal) {
              var oldRegexp = regexp

              regexp = parsePatternAttr(newVal, patternExp, elm)

              if ((oldRegexp && oldRegexp.toString()) !== (regexp && regexp.toString())) {
                ctrl.$validate()
              }
            })

            ctrl.$validators.pattern = function (modelValue, viewValue) {
              // HTML5 pattern constraint validates the input value, so we validate the viewValue
              return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue)
            }
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngMaxlength
 * @restrict A
 *
 * @param {expression} ngMaxlength AngularJS expression that must evaluate to a `Number` or `String`
 *                                 parsable into a `Number`. Used as value for the `maxlength`
 *                                 {@link ngModel.NgModelController#$validators validator}.
 *
 * @description
 *
 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is longer than the integer obtained by evaluating the AngularJS expression given in the
 * `ngMaxlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMaxlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.maxlength = 5;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="maxlength">Set a maxlength: </label>
 *         <input type="number" ng-model="maxlength" id="maxlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current maxlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default maxlength', function() {
         input.sendKeys('abcdef');
         expect(model.getText()).not.toContain('abcdef');

         input.clear().then(function() {
           input.sendKeys('abcde');
           expect(model.getText()).toContain('abcde');
         });
       });
 *   </file>
 * </example>
 */
  var maxlengthDirective = [
    '$parse',
    function ($parse) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, elm, attr, ctrl) {
          if (!ctrl) return

          var maxlength = attr.maxlength || $parse(attr.ngMaxlength)(scope)
          var maxlengthParsed = parseLength(maxlength)

          attr.$observe('maxlength', function (value) {
            if (maxlength !== value) {
              maxlengthParsed = parseLength(value)
              maxlength = value
              ctrl.$validate()
            }
          })
          ctrl.$validators.maxlength = function (modelValue, viewValue) {
            return (
              maxlengthParsed < 0 || ctrl.$isEmpty(viewValue) || viewValue.length <= maxlengthParsed
            )
          }
        },
      }
    },
  ]

  /**
 * @ngdoc directive
 * @name ngMinlength
 * @restrict A
 *
 * @param {expression} ngMinlength AngularJS expression that must evaluate to a `Number` or `String`
 *                                 parsable into a `Number`. Used as value for the `minlength`
 *                                 {@link ngModel.NgModelController#$validators validator}.
 *
 * @description
 *
 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
 *
 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
 * is shorter than the integer obtained by evaluating the AngularJS expression given in the
 * `ngMinlength` attribute value.
 *
 * <div class="alert alert-info">
 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
 * differences:
 * <ol>
 *   <li>
 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
 *     validation is not available.
 *   </li>
 *   <li>
 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
 *     interpolated.
 *   </li>
 * </ol>
 * </div>
 *
 * @example
 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('ngMinlengthExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.minlength = 3;
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <form name="form">
 *         <label for="minlength">Set a minlength: </label>
 *         <input type="number" ng-model="minlength" id="minlength" />
 *         <br>
 *         <label for="input">This input is restricted by the current minlength: </label>
 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
 *         <hr>
 *         input valid? = <code>{{form.input.$valid}}</code><br>
 *         model = <code>{{model}}</code>
 *       </form>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
       var model = element(by.binding('model'));
       var input = element(by.id('input'));

       it('should validate the input with the default minlength', function() {
         input.sendKeys('ab');
         expect(model.getText()).not.toContain('ab');

         input.sendKeys('abc');
         expect(model.getText()).toContain('abc');
       });
 *   </file>
 * </example>
 */
  var minlengthDirective = [
    '$parse',
    function ($parse) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function (scope, elm, attr, ctrl) {
          if (!ctrl) return

          var minlength = attr.minlength || $parse(attr.ngMinlength)(scope)
          var minlengthParsed = parseLength(minlength) || -1

          attr.$observe('minlength', function (value) {
            if (minlength !== value) {
              minlengthParsed = parseLength(value) || -1
              minlength = value
              ctrl.$validate()
            }
          })
          ctrl.$validators.minlength = function (modelValue, viewValue) {
            return ctrl.$isEmpty(viewValue) || viewValue.length >= minlengthParsed
          }
        },
      }
    },
  ]

  function parsePatternAttr(regex, patternExp, elm) {
    if (!regex) return undefined

    if (isString(regex)) {
      regex = new RegExp('^' + regex + '$')
    }

    if (!regex.test) {
      throw minErr('ngPattern')(
        'noregexp',
        'Expected {0} to be a RegExp but was {1}. Element: {2}',
        patternExp,
        regex,
        startingTag(elm)
      )
    }

    return regex
  }

  function parseLength(val) {
    var intVal = toInt(val)
    return isNumberNaN(intVal) ? -1 : intVal
  }

  if (window.angular.bootstrap) {
    // AngularJS is already loaded, so we can return here...
    if (window.console) {
      console.log('WARNING: Tried to load AngularJS more than once.')
    }
    return
  }

  // try to bind to jquery now so that one can write jqLite(fn)
  // but we will rebind on bootstrap again.
  bindJQuery()

  publishExternalAPI(angular)

  angular.module(
    'ngLocale',
    [],
    [
      '$provide',
      function ($provide) {
        var PLURAL_CATEGORY = {
          ZERO: 'zero',
          ONE: 'one',
          TWO: 'two',
          FEW: 'few',
          MANY: 'many',
          OTHER: 'other',
        }
        function getDecimals(n) {
          n = n + ''
          var i = n.indexOf('.')
          return i == -1 ? 0 : n.length - i - 1
        }

        function getVF(n, opt_precision) {
          var v = opt_precision

          if (undefined === v) {
            v = Math.min(getDecimals(n), 3)
          }

          var base = Math.pow(10, v)
          var f = ((n * base) | 0) % base
          return { v: v, f: f }
        }

        $provide.value('$locale', {
          DATETIME_FORMATS: {
            AMPMS: ['AM', 'PM'],
            DAY: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            ERANAMES: ['Before Christ', 'Anno Domini'],
            ERAS: ['BC', 'AD'],
            FIRSTDAYOFWEEK: 6,
            MONTH: [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ],
            SHORTDAY: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            SHORTMONTH: [
              'Jan',
              'Feb',
              'Mar',
              'Apr',
              'May',
              'Jun',
              'Jul',
              'Aug',
              'Sep',
              'Oct',
              'Nov',
              'Dec',
            ],
            STANDALONEMONTH: [
              'January',
              'February',
              'March',
              'April',
              'May',
              'June',
              'July',
              'August',
              'September',
              'October',
              'November',
              'December',
            ],
            WEEKENDRANGE: [5, 6],
            fullDate: 'EEEE, MMMM d, y',
            longDate: 'MMMM d, y',
            medium: 'MMM d, y h:mm:ss a',
            mediumDate: 'MMM d, y',
            mediumTime: 'h:mm:ss a',
            short: 'M/d/yy h:mm a',
            shortDate: 'M/d/yy',
            shortTime: 'h:mm a',
          },
          NUMBER_FORMATS: {
            CURRENCY_SYM: '$',
            DECIMAL_SEP: '.',
            GROUP_SEP: ',',
            PATTERNS: [
              {
                gSize: 3,
                lgSize: 3,
                maxFrac: 3,
                minFrac: 0,
                minInt: 1,
                negPre: '-',
                negSuf: '',
                posPre: '',
                posSuf: '',
              },
              {
                gSize: 3,
                lgSize: 3,
                maxFrac: 2,
                minFrac: 2,
                minInt: 1,
                negPre: '-\u00a4',
                negSuf: '',
                posPre: '\u00a4',
                posSuf: '',
              },
            ],
          },
          id: 'en-us',
          localeID: 'en_US',
          pluralCat: function (n, opt_precision) {
            var i = n | 0
            var vf = getVF(n, opt_precision)
            if (i == 1 && vf.v == 0) {
              return PLURAL_CATEGORY.ONE
            }
            return PLURAL_CATEGORY.OTHER
          },
        })
      },
    ]
  )

  jqLite(function () {
    angularInit(window.document, bootstrap)
  })
})(window)

!window.angular.$$csp().noInlineStyle &&
  window.angular
    .element(document.head)
    .prepend(
      window.angular
        .element('<style>')
        .text(
          '@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}'
        )
    )
/**
 * @license AngularJS v1.8.2
 * (c) 2010-2020 Google LLC. http://angularjs.org
 * License: MIT
 */
;(function (window, angular) {
  'use strict'

  /**
   * @ngdoc module
   * @name ngAria
   * @description
   *
   * The `ngAria` module provides support for common
   * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
   * attributes that convey state or semantic information about the application for users
   * of assistive technologies, such as screen readers.
   *
   * ## Usage
   *
   * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following
   * directives are supported:
   * `ngModel`, `ngChecked`, `ngReadonly`, `ngRequired`, `ngValue`, `ngDisabled`, `ngShow`, `ngHide`,
   * `ngClick`, `ngDblClick`, and `ngMessages`.
   *
   * Below is a more detailed breakdown of the attributes handled by ngAria:
   *
   * | Directive                                   | Supported Attributes                                                                                |
   * |---------------------------------------------|-----------------------------------------------------------------------------------------------------|
   * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |
   * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                                       |
   * | {@link ng.directive:ngRequired ngRequired}  | aria-required                                                                                       |
   * | {@link ng.directive:ngChecked ngChecked}    | aria-checked                                                                                        |
   * | {@link ng.directive:ngReadonly ngReadonly}  | aria-readonly                                                                                       |
   * | {@link ng.directive:ngValue ngValue}        | aria-checked                                                                                        |
   * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                                         |
   * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                                         |
   * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                                            |
   * | {@link module:ngMessages ngMessages}        | aria-live                                                                                           |
   * | {@link ng.directive:ngClick ngClick}        | tabindex, keydown event, button role                                                                |
   *
   * Find out more information about each directive by reading the
   * {@link guide/accessibility ngAria Developer Guide}.
   *
   * ## Example
   * Using ngDisabled with ngAria:
   * ```html
   * <md-checkbox ng-disabled="disabled">
   * ```
   * Becomes:
   * ```html
   * <md-checkbox ng-disabled="disabled" aria-disabled="true">
   * ```
   *
   * ## Disabling Specific Attributes
   * It is possible to disable individual attributes added by ngAria with the
   * {@link ngAria.$ariaProvider#config config} method. For more details, see the
   * {@link guide/accessibility Developer Guide}.
   *
   * ## Disabling `ngAria` on Specific Elements
   * It is possible to make `ngAria` ignore a specific element, by adding the `ng-aria-disable`
   * attribute on it. Note that only the element itself (and not its child elements) will be ignored.
   */
  var ARIA_DISABLE_ATTR = 'ngAriaDisable'

  var ngAriaModule = angular
    .module('ngAria', ['ng'])
    .info({ angularVersion: '1.8.2' })
    .provider('$aria', $AriaProvider)

  /**
   * Internal Utilities
   */
  var nativeAriaNodeNames = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY']

  var isNodeOneOf = function (elem, nodeTypeArray) {
    if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
      return true
    }
  }
  /**
   * @ngdoc provider
   * @name $ariaProvider
   * @this
   *
   * @description
   *
   * Used for configuring the ARIA attributes injected and managed by ngAria.
   *
   * ```js
   * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
   *   $ariaProvider.config({
   *     ariaValue: true,
   *     tabindex: false
   *   });
   * });
   *```
   *
   * ## Dependencies
   * Requires the {@link ngAria} module to be installed.
   *
   */
  function $AriaProvider() {
    var config = {
      ariaHidden: true,
      ariaChecked: true,
      ariaReadonly: true,
      ariaDisabled: true,
      ariaRequired: true,
      ariaInvalid: true,
      ariaValue: true,
      tabindex: true,
      bindKeydown: true,
      bindRoleForClick: true,
    }

    /**
     * @ngdoc method
     * @name $ariaProvider#config
     *
     * @param {object} config object to enable/disable specific ARIA attributes
     *
     *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
     *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
     *  - **ariaReadonly** – `{boolean}` – Enables/disables aria-readonly tags
     *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
     *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
     *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
     *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and
     *    aria-valuenow tags
     *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
     *  - **bindKeydown** – `{boolean}` – Enables/disables keyboard event binding on non-interactive
     *    elements (such as `div` or `li`) using ng-click, making them more accessible to users of
     *    assistive technologies
     *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements (such as
     *    `div` or `li`) using ng-click, making them more accessible to users of assistive
     *    technologies
     *
     * @description
     * Enables/disables various ARIA attributes
     */
    this.config = function (newConfig) {
      config = angular.extend(config, newConfig)
    }

    function watchExpr(attrName, ariaAttr, nativeAriaNodeNames, negate) {
      return function (scope, elem, attr) {
        if (attr.hasOwnProperty(ARIA_DISABLE_ATTR)) return

        var ariaCamelName = attr.$normalize(ariaAttr)
        if (
          config[ariaCamelName] &&
          !isNodeOneOf(elem, nativeAriaNodeNames) &&
          !attr[ariaCamelName]
        ) {
          scope.$watch(attr[attrName], function (boolVal) {
            // ensure boolean value
            boolVal = negate ? !boolVal : !!boolVal
            elem.attr(ariaAttr, boolVal)
          })
        }
      }
    }
    /**
     * @ngdoc service
     * @name $aria
     *
     * @description
     *
     * The $aria service contains helper methods for applying common
     * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
     *
     * ngAria injects common accessibility attributes that tell assistive technologies when HTML
     * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
     * let's review a code snippet from ngAria itself:
     *
     *```js
     * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
     *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nativeAriaNodeNames, false);
     * }])
     *```
     * Shown above, the ngAria module creates a directive with the same signature as the
     * traditional `ng-disabled` directive. But this ngAria version is dedicated to
     * solely managing accessibility attributes on custom elements. The internal `$aria` service is
     * used to watch the boolean attribute `ngDisabled`. If it has not been explicitly set by the
     * developer, `aria-disabled` is injected as an attribute with its value synchronized to the
     * value in `ngDisabled`.
     *
     * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
     * anything to enable this feature. The `aria-disabled` attribute is automatically managed
     * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
     *
     * The full list of directives that interface with ngAria:
     * * **ngModel**
     * * **ngChecked**
     * * **ngReadonly**
     * * **ngRequired**
     * * **ngDisabled**
     * * **ngValue**
     * * **ngShow**
     * * **ngHide**
     * * **ngClick**
     * * **ngDblclick**
     * * **ngMessages**
     *
     * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
     * directive.
     *
     *
     * ## Dependencies
     * Requires the {@link ngAria} module to be installed.
     */
    this.$get = function () {
      return {
        config: function (key) {
          return config[key]
        },
        $$watchExpr: watchExpr,
      }
    }
  }

  ngAriaModule
    .directive('ngShow', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true)
      },
    ])
    .directive('ngHide', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false)
      },
    ])
    .directive('ngValue', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngValue', 'aria-checked', nativeAriaNodeNames, false)
      },
    ])
    .directive('ngChecked', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngChecked', 'aria-checked', nativeAriaNodeNames, false)
      },
    ])
    .directive('ngReadonly', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngReadonly', 'aria-readonly', nativeAriaNodeNames, false)
      },
    ])
    .directive('ngRequired', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngRequired', 'aria-required', nativeAriaNodeNames, false)
      },
    ])
    .directive('ngModel', [
      '$aria',
      function ($aria) {
        function shouldAttachAttr(attr, normalizedAttr, elem, allowNonAriaNodes) {
          return (
            $aria.config(normalizedAttr) &&
            !elem.attr(attr) &&
            (allowNonAriaNodes || !isNodeOneOf(elem, nativeAriaNodeNames)) &&
            (elem.attr('type') !== 'hidden' || elem[0].nodeName !== 'INPUT')
          )
        }

        function shouldAttachRole(role, elem) {
          // if element does not have role attribute
          // AND element type is equal to role (if custom element has a type equaling shape) <-- remove?
          // AND element is not in nativeAriaNodeNames
          return (
            !elem.attr('role') &&
            elem.attr('type') === role &&
            !isNodeOneOf(elem, nativeAriaNodeNames)
          )
        }

        function getShape(attr, elem) {
          var type = attr.type,
            role = attr.role

          return (type || role) === 'checkbox' || role === 'menuitemcheckbox'
            ? 'checkbox'
            : (type || role) === 'radio' || role === 'menuitemradio'
            ? 'radio'
            : type === 'range' || role === 'progressbar' || role === 'slider'
            ? 'range'
            : ''
        }

        return {
          restrict: 'A',
          require: 'ngModel',
          priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value
          compile: function (elem, attr) {
            if (attr.hasOwnProperty(ARIA_DISABLE_ATTR)) return

            var shape = getShape(attr, elem)

            return {
              post: function (scope, elem, attr, ngModel) {
                var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem, false)

                function ngAriaWatchModelValue() {
                  return ngModel.$modelValue
                }

                function getRadioReaction(newVal) {
                  // Strict comparison would cause a BC
                  // eslint-disable-next-line eqeqeq
                  var boolVal = attr.value == ngModel.$viewValue
                  elem.attr('aria-checked', boolVal)
                }

                function getCheckboxReaction() {
                  elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue))
                }

                switch (shape) {
                  case 'radio':
                  case 'checkbox':
                    if (shouldAttachRole(shape, elem)) {
                      elem.attr('role', shape)
                    }
                    if (shouldAttachAttr('aria-checked', 'ariaChecked', elem, false)) {
                      scope.$watch(
                        ngAriaWatchModelValue,
                        shape === 'radio' ? getRadioReaction : getCheckboxReaction
                      )
                    }
                    if (needsTabIndex) {
                      elem.attr('tabindex', 0)
                    }
                    break
                  case 'range':
                    if (shouldAttachRole(shape, elem)) {
                      elem.attr('role', 'slider')
                    }
                    if ($aria.config('ariaValue')) {
                      var needsAriaValuemin =
                        !elem.attr('aria-valuemin') &&
                        (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'))
                      var needsAriaValuemax =
                        !elem.attr('aria-valuemax') &&
                        (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'))
                      var needsAriaValuenow = !elem.attr('aria-valuenow')

                      if (needsAriaValuemin) {
                        attr.$observe('min', function ngAriaValueMinReaction(newVal) {
                          elem.attr('aria-valuemin', newVal)
                        })
                      }
                      if (needsAriaValuemax) {
                        attr.$observe('max', function ngAriaValueMinReaction(newVal) {
                          elem.attr('aria-valuemax', newVal)
                        })
                      }
                      if (needsAriaValuenow) {
                        scope.$watch(
                          ngAriaWatchModelValue,
                          function ngAriaValueNowReaction(newVal) {
                            elem.attr('aria-valuenow', newVal)
                          }
                        )
                      }
                    }
                    if (needsTabIndex) {
                      elem.attr('tabindex', 0)
                    }
                    break
                }

                if (
                  !attr.hasOwnProperty('ngRequired') &&
                  ngModel.$validators.required &&
                  shouldAttachAttr('aria-required', 'ariaRequired', elem, false)
                ) {
                  // ngModel.$error.required is undefined on custom controls
                  attr.$observe('required', function () {
                    elem.attr('aria-required', !!attr['required'])
                  })
                }

                if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem, true)) {
                  scope.$watch(
                    function ngAriaInvalidWatch() {
                      return ngModel.$invalid
                    },
                    function ngAriaInvalidReaction(newVal) {
                      elem.attr('aria-invalid', !!newVal)
                    }
                  )
                }
              },
            }
          },
        }
      },
    ])
    .directive('ngDisabled', [
      '$aria',
      function ($aria) {
        return $aria.$$watchExpr('ngDisabled', 'aria-disabled', nativeAriaNodeNames, false)
      },
    ])
    .directive('ngMessages', function () {
      return {
        restrict: 'A',
        require: '?ngMessages',
        link: function (scope, elem, attr, ngMessages) {
          if (attr.hasOwnProperty(ARIA_DISABLE_ATTR)) return

          if (!elem.attr('aria-live')) {
            elem.attr('aria-live', 'assertive')
          }
        },
      }
    })
    .directive('ngClick', [
      '$aria',
      '$parse',
      function ($aria, $parse) {
        return {
          restrict: 'A',
          compile: function (elem, attr) {
            if (attr.hasOwnProperty(ARIA_DISABLE_ATTR)) return

            var fn = $parse(attr.ngClick)
            return function (scope, elem, attr) {
              if (!isNodeOneOf(elem, nativeAriaNodeNames)) {
                if ($aria.config('bindRoleForClick') && !elem.attr('role')) {
                  elem.attr('role', 'button')
                }

                if ($aria.config('tabindex') && !elem.attr('tabindex')) {
                  elem.attr('tabindex', 0)
                }

                if (
                  $aria.config('bindKeydown') &&
                  !attr.ngKeydown &&
                  !attr.ngKeypress &&
                  !attr.ngKeyup
                ) {
                  elem.on('keydown', function (event) {
                    var keyCode = event.which || event.keyCode

                    if (keyCode === 13 || keyCode === 32) {
                      // If the event is triggered on a non-interactive element ...
                      if (
                        nativeAriaNodeNames.indexOf(event.target.nodeName) === -1 &&
                        !event.target.isContentEditable
                      ) {
                        // ... prevent the default browser behavior (e.g. scrolling when pressing spacebar)
                        // See https://github.com/angular/angular.js/issues/16664
                        event.preventDefault()
                      }
                      scope.$apply(callback)
                    }

                    function callback() {
                      fn(scope, { $event: event })
                    }
                  })
                }
              }
            }
          },
        }
      },
    ])
    .directive('ngDblclick', [
      '$aria',
      function ($aria) {
        return function (scope, elem, attr) {
          if (attr.hasOwnProperty(ARIA_DISABLE_ATTR)) return

          if (
            $aria.config('tabindex') &&
            !elem.attr('tabindex') &&
            !isNodeOneOf(elem, nativeAriaNodeNames)
          ) {
            elem.attr('tabindex', 0)
          }
        }
      },
    ])
})(window, window.angular)

;(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory()
  else if (typeof define === 'function' && define.amd) define([], factory)
  else {
    var a = factory()
    for (var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i]
  }
})(this, function () {
  return /******/ (function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/ var installedModules = {}

    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
      /******/ // Check if module is in cache
      /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports

      /******/ // Create a new module (and put it into the cache)
      /******/ var module = (installedModules[moduleId] = {
        /******/ exports: {},
        /******/ id: moduleId,
        /******/ loaded: false,
        /******/
      })

      /******/ // Execute the module function
      /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__)

      /******/ // Flag the module as loaded
      /******/ module.loaded = true

      /******/ // Return the exports of the module
      /******/ return module.exports
      /******/
    }

    /******/ // expose the modules object (__webpack_modules__)
    /******/ __webpack_require__.m = modules

    /******/ // expose the module cache
    /******/ __webpack_require__.c = installedModules

    /******/ // __webpack_public_path__
    /******/ __webpack_require__.p = ''

    /******/ // Load entry module and return exports
    /******/ return __webpack_require__(0)
    /******/
  })(
    /************************************************************************/
    /******/ [
      /* 0 */
      /***/ function (module, exports, __webpack_require__) {
        'use strict'

        /*
         *
         * A AngularJS module that implements the HTML5 W3C saveAs() in browsers that
         * do not natively support it
         *
         * (c) 2015 Philipp Alferov
         * License: MIT
         *
         */

        module.exports = 'ngFileSaver'

        angular
          .module('ngFileSaver', [])
          .factory('FileSaver', ['Blob', 'SaveAs', 'FileSaverUtils', __webpack_require__(1)])
          .factory('FileSaverUtils', [__webpack_require__(2)])
          .factory('Blob', ['$window', 'FileSaverUtils', __webpack_require__(3)])
          .factory('SaveAs', ['$window', 'FileSaverUtils', __webpack_require__(4)])

        /***/
      },
      /* 1 */
      /***/ function (module, exports) {
        'use strict'

        module.exports = function FileSaver(Blob, SaveAs, FileSaverUtils) {
          function save(blob, filename, disableAutoBOM) {
            try {
              SaveAs(blob, filename, disableAutoBOM)
            } catch (err) {
              FileSaverUtils.handleErrors(err.message)
            }
          }

          return {
            /**
             * saveAs
             * Immediately starts saving a file, returns undefined.
             *
             * @name saveAs
             * @function
             * @param {Blob} data A Blob instance
             * @param {Object} filename Custom filename (extension is optional)
             * @param {Boolean} disableAutoBOM Disable automatically provided Unicode
             * text encoding hints
             *
             * @return {Undefined}
             */

            saveAs: function (data, filename, disableAutoBOM) {
              if (!FileSaverUtils.isBlobInstance(data)) {
                FileSaverUtils.handleErrors('Data argument should be a blob instance')
              }

              if (!FileSaverUtils.isString(filename)) {
                FileSaverUtils.handleErrors('Filename argument should be a string')
              }

              return save(data, filename, disableAutoBOM)
            },
          }
        }

        /***/
      },
      /* 2 */
      /***/ function (module, exports) {
        'use strict'

        module.exports = function FileSaverUtils() {
          return {
            handleErrors: function (msg) {
              throw new Error(msg)
            },
            isString: function (obj) {
              return typeof obj === 'string' || obj instanceof String
            },
            isUndefined: function (obj) {
              return typeof obj === 'undefined'
            },
            isBlobInstance: function (obj) {
              return obj instanceof Blob
            },
          }
        }

        /***/
      },
      /* 3 */
      /***/ function (module, exports) {
        'use strict'

        module.exports = function Blob($window, FileSaverUtils) {
          var blob = $window.Blob

          if (FileSaverUtils.isUndefined(blob)) {
            FileSaverUtils.handleErrors('Blob is not supported. Please include blob polyfilll')
          }

          return blob
        }

        /***/
      },
      /* 4 */
      /***/ function (module, exports) {
        'use strict'

        module.exports = function SaveAs($window, FileSaverUtils) {
          var saveAs = $window.saveAs

          if (FileSaverUtils.isUndefined(saveAs)) {
            FileSaverUtils.handleErrors('saveAs is not supported. Please include saveAs polyfill')
          }

          return saveAs
        }

        /***/
      },
      /******/
    ]
  )
})
/**
 * Bunch of useful filters for angularJS(with no external dependencies!)
 * @version v0.5.17 - 2017-09-22 * @link https://github.com/a8m/angular-filter
 * @author Ariel Mashraki <ariel@mashraki.co.il>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
;(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  'use strict'

  var isDefined = angular.isDefined,
    isUndefined = angular.isUndefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isNumber = angular.isNumber,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy,
    equals = angular.equals

  /**
   * @description
   * get an object and return array of values
   * @param object
   * @returns {Array}
   */
  function toArray(object) {
    return isArray(object)
      ? object
      : Object.keys(object).map(function (key) {
          return object[key]
        })
  }

  /**
   * @param value
   * @returns {boolean}
   */
  function isNull(value) {
    return value === null
  }

  /**
   * @description
   * return if object contains partial object
   * @param partial{object}
   * @param object{object}
   * @returns {boolean}
   */
  function objectContains(partial, object) {
    var keys = Object.keys(partial)

    return (
      keys
        .map(function (el) {
          return object[el] !== undefined && object[el] == partial[el]
        })
        .indexOf(false) == -1
    )
  }

  /**
   * @description
   * search for approximate pattern in string
   * @param word
   * @param pattern
   * @returns {*}
   */
  function hasApproxPattern(word, pattern) {
    // cheaper version of indexOf; instead of creating each
    // iteration new str.
    function indexOf(word, p, c) {
      var j = 0
      while (p + j <= word.length) {
        if (word.charAt(p + j) == c) return j
        j++
      }
      return -1
    }
    var p = 0
    for (var i = 0; i <= pattern.length; i++) {
      var index = indexOf(word, p, pattern.charAt(i))
      if (index == -1) return false
      p += index + 1
    }
    return true
  }

  /**
   * @description
   * return the first n element of an array,
   * if expression provided, is returns as long the expression return truthy
   * @param array
   * @param n {number}
   * @param expression {$parse}
   * @return array or single object
   */
  function getFirstMatches(array, n, expression) {
    var count = 0

    return array.filter(function (elm) {
      var rest = isDefined(expression) ? count < n && expression(elm) : count < n
      count = rest ? count + 1 : count

      return rest
    })
  }
  /**
   * Polyfill to ECMA6 String.prototype.contains
   */
  if (!String.prototype.contains) {
    String.prototype.contains = function () {
      return String.prototype.indexOf.apply(this, arguments) !== -1
    }
  }

  /**
   * @param num {Number}
   * @param decimal {Number}
   * @returns {Number}
   */
  function convertToDecimal(num, decimal) {
    return Math.round(num * Math.pow(10, decimal)) / Math.pow(10, decimal)
  }

  /**
   * @description
   * Get an object, and return an array composed of it's properties names(nested too).
   * @param obj {Object}
   * @param stack {Array}
   * @param parent {String}
   * @returns {Array}
   * @example
   * parseKeys({ a:1, b: { c:2, d: { e: 3 } } }) ==> ["a", "b.c", "b.d.e"]
   */
  function deepKeys(obj, stack, parent) {
    stack = stack || []
    var keys = Object.keys(obj)

    keys.forEach(function (el) {
      //if it's a nested object
      if (isObject(obj[el]) && !isArray(obj[el])) {
        //concatenate the new parent if exist
        var p = parent ? parent + '.' + el : parent
        deepKeys(obj[el], stack, p || el)
      } else {
        //create and save the key
        var key = parent ? parent + '.' + el : el
        stack.push(key)
      }
    })
    return stack
  }

  /**
   * @description
   * Test if given object is a Scope instance
   * @param obj
   * @returns {Boolean}
   */
  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch
  }

  /**
   * @ngdoc filter
   * @name a8m.angular
   * @kind function
   *
   * @description
   * reference to angular function
   */

  angular
    .module('a8m.angular', [])

    .filter('isUndefined', function () {
      return function (input) {
        return angular.isUndefined(input)
      }
    })
    .filter('isDefined', function () {
      return function (input) {
        return angular.isDefined(input)
      }
    })
    .filter('isFunction', function () {
      return function (input) {
        return angular.isFunction(input)
      }
    })
    .filter('isString', function () {
      return function (input) {
        return angular.isString(input)
      }
    })
    .filter('isNumber', function () {
      return function (input) {
        return angular.isNumber(input)
      }
    })
    .filter('isArray', function () {
      return function (input) {
        return angular.isArray(input)
      }
    })
    .filter('isObject', function () {
      return function (input) {
        return angular.isObject(input)
      }
    })
    .filter('isEqual', function () {
      return function (o1, o2) {
        return angular.equals(o1, o2)
      }
    })

  /**
   * @ngdoc filter
   * @name a8m.conditions
   * @kind function
   *
   * @description
   * reference to math conditions
   */
  angular
    .module('a8m.conditions', [])

    .filter({
      isGreaterThan: isGreaterThanFilter,
      '>': isGreaterThanFilter,

      isGreaterThanOrEqualTo: isGreaterThanOrEqualToFilter,
      '>=': isGreaterThanOrEqualToFilter,

      isLessThan: isLessThanFilter,
      '<': isLessThanFilter,

      isLessThanOrEqualTo: isLessThanOrEqualToFilter,
      '<=': isLessThanOrEqualToFilter,

      isEqualTo: isEqualToFilter,
      '==': isEqualToFilter,

      isNotEqualTo: isNotEqualToFilter,
      '!=': isNotEqualToFilter,

      isIdenticalTo: isIdenticalToFilter,
      '===': isIdenticalToFilter,

      isNotIdenticalTo: isNotIdenticalToFilter,
      '!==': isNotIdenticalToFilter,
    })

  function isGreaterThanFilter() {
    return function (input, check) {
      return input > check
    }
  }

  function isGreaterThanOrEqualToFilter() {
    return function (input, check) {
      return input >= check
    }
  }

  function isLessThanFilter() {
    return function (input, check) {
      return input < check
    }
  }

  function isLessThanOrEqualToFilter() {
    return function (input, check) {
      return input <= check
    }
  }

  function isEqualToFilter() {
    return function (input, check) {
      return input == check
    }
  }

  function isNotEqualToFilter() {
    return function (input, check) {
      return input != check
    }
  }

  function isIdenticalToFilter() {
    return function (input, check) {
      return input === check
    }
  }

  function isNotIdenticalToFilter() {
    return function (input, check) {
      return input !== check
    }
  }
  /**
   * @ngdoc filter
   * @name isNull
   * @kind function
   *
   * @description
   * checks if value is null or not
   * @return Boolean
   */
  angular.module('a8m.is-null', []).filter('isNull', function () {
    return function (input) {
      return isNull(input)
    }
  })

  /**
   * @ngdoc filter
   * @name after-where
   * @kind function
   *
   * @description
   * get a collection and properties object, and returns all of the items
   * in the collection after the first that found with the given properties.
   *
   */
  angular.module('a8m.after-where', []).filter('afterWhere', function () {
    return function (collection, object) {
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection) || isUndefined(object)) return collection

      var index = collection
        .map(function (elm) {
          return objectContains(object, elm)
        })
        .indexOf(true)

      return collection.slice(index === -1 ? 0 : index)
    }
  })

  /**
   * @ngdoc filter
   * @name after
   * @kind function
   *
   * @description
   * get a collection and specified count, and returns all of the items
   * in the collection after the specified count.
   *
   */

  angular.module('a8m.after', []).filter('after', function () {
    return function (collection, count) {
      collection = isObject(collection) ? toArray(collection) : collection

      return isArray(collection) ? collection.slice(count) : collection
    }
  })

  /**
   * @ngdoc filter
   * @name before-where
   * @kind function
   *
   * @description
   * get a collection and properties object, and returns all of the items
   * in the collection before the first that found with the given properties.
   */
  angular.module('a8m.before-where', []).filter('beforeWhere', function () {
    return function (collection, object) {
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection) || isUndefined(object)) return collection

      var index = collection
        .map(function (elm) {
          return objectContains(object, elm)
        })
        .indexOf(true)

      return collection.slice(0, index === -1 ? collection.length : ++index)
    }
  })

  /**
   * @ngdoc filter
   * @name before
   * @kind function
   *
   * @description
   * get a collection and specified count, and returns all of the items
   * in the collection before the specified count.
   */
  angular.module('a8m.before', []).filter('before', function () {
    return function (collection, count) {
      collection = isObject(collection) ? toArray(collection) : collection

      return isArray(collection) ? collection.slice(0, !count ? count : --count) : collection
    }
  })

  /**
   * @ngdoc filter
   * @name chunkBy
   * @kind function
   *
   * @description
   * Collect data into fixed-length chunks or blocks
   */

  angular.module('a8m.chunk-by', ['a8m.filter-watcher']).filter('chunkBy', [
    'filterWatcher',
    function (filterWatcher) {
      return function (array, n, fillVal) {
        return (
          filterWatcher.isMemoized('chunkBy', arguments) ||
          filterWatcher.memoize('chunkBy', arguments, this, _chunkBy(array, n, fillVal))
        )
        /**
         * @description
         * Get array with size `n` in `val` inside it.
         * @param n
         * @param val
         * @returns {Array}
         */
        function fill(n, val) {
          var ret = []
          while (n--) ret[n] = val
          return ret
        }

        function _chunkBy(array, n, fillVal) {
          if (!isArray(array)) return array
          return array
            .map(function (el, i, self) {
              i = i * n
              el = self.slice(i, i + n)
              return !isUndefined(fillVal) && el.length < n
                ? el.concat(fill(n - el.length, fillVal))
                : el
            })
            .slice(0, Math.ceil(array.length / n))
        }
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name concat
   * @kind function
   *
   * @description
   * get (array/object, object/array) and return merged collection
   */
  angular.module('a8m.concat', []).filter('concat', [
    function () {
      return function (collection, joined) {
        if (isUndefined(joined)) return collection

        if (isArray(collection)) {
          return isObject(joined) ? collection.concat(toArray(joined)) : collection.concat(joined)
        }

        if (isObject(collection)) {
          var array = toArray(collection)
          return isObject(joined) ? array.concat(toArray(joined)) : array.concat(joined)
        }
        return collection
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name contains
   * @kind function
   *
   * @description
   * Checks if given expression is present in one or more object in the collection
   */
  angular.module('a8m.contains', []).filter({
    contains: ['$parse', containsFilter],
    some: ['$parse', containsFilter],
  })

  function containsFilter($parse) {
    return function (collection, expression) {
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection) || isUndefined(expression)) {
        return false
      }

      return collection.some(function (elm) {
        return (isString(expression) && isObject(elm)) || isFunction(expression)
          ? $parse(expression)(elm)
          : elm === expression
      })
    }
  }

  /**
   * @ngdoc filter
   * @name countBy
   * @kind function
   *
   * @description
   * Sorts a list into groups and returns a count for the number of objects in each group.
   */

  angular
    .module('a8m.count-by', [])

    .filter('countBy', [
      '$parse',
      function ($parse) {
        return function (collection, property) {
          var result = {},
            get = $parse(property),
            prop

          collection = isObject(collection) ? toArray(collection) : collection

          if (!isArray(collection) || isUndefined(property)) {
            return collection
          }

          collection.forEach(function (elm) {
            prop = get(elm)

            if (!result[prop]) {
              result[prop] = 0
            }

            result[prop]++
          })

          return result
        }
      },
    ])

  /**
   * @ngdoc filter
   * @name defaults
   * @kind function
   *
   * @description
   * defaultsFilter allows to specify a default fallback value for properties that resolve to undefined.
   */
  angular.module('a8m.defaults', []).filter('defaults', [
    '$parse',
    function ($parse) {
      return function (collection, defaults) {
        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection) || !isObject(defaults)) {
          return collection
        }

        var keys = deepKeys(defaults)

        collection.forEach(function (elm) {
          //loop through all the keys
          keys.forEach(function (key) {
            var getter = $parse(key)
            var setter = getter.assign
            //if it's not exist
            if (isUndefined(getter(elm))) {
              //get from defaults, and set to the returned object
              setter(elm, getter(defaults))
            }
          })
        })

        return collection
      }
    },
  ])
  /**
   * @ngdoc filter
   * @name every
   * @kind function
   *
   * @description
   * Checks if given expression is present in all members in the collection
   *
   */
  angular.module('a8m.every', []).filter('every', [
    '$parse',
    function ($parse) {
      return function (collection, expression) {
        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection) || isUndefined(expression)) {
          return true
        }

        return collection.every(function (elm) {
          return isObject(elm) || isFunction(expression)
            ? $parse(expression)(elm)
            : elm === expression
        })
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name filterBy
   * @kind function
   *
   * @description
   * filter by specific properties, avoid the rest
   */
  angular.module('a8m.filter-by', []).filter('filterBy', [
    '$parse',
    function ($parse) {
      return function (collection, properties, search, strict) {
        var comparator

        search = isString(search) || isNumber(search) ? String(search).toLowerCase() : undefined

        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection) || isUndefined(search)) {
          return collection
        }

        return collection.filter(function (elm) {
          return properties.some(function (prop) {
            /**
             * check if there is concatenate properties
             * example:
             * object: { first: 'foo', last:'bar' }
             * filterBy: ['first + last'] => search by full name(i.e 'foo bar')
             */
            if (!~prop.indexOf('+')) {
              comparator = $parse(prop)(elm)
            } else {
              var propList = prop.replace(/\s+/g, '').split('+')
              comparator = propList
                .map(function (prop) {
                  return $parse(prop)(elm)
                })
                .join(' ')
            }

            if (!isString(comparator) && !isNumber(comparator)) {
              return false
            }

            comparator = String(comparator).toLowerCase()

            return strict ? comparator === search : comparator.contains(search)
          })
        })
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name first
   * @kind function
   *
   * @description
   * Gets the first element or first n elements of an array
   * if callback is provided, is returns as long the callback return truthy
   */
  angular.module('a8m.first', []).filter('first', [
    '$parse',
    function ($parse) {
      return function (collection) {
        var n, getter, args

        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection)) {
          return collection
        }

        args = Array.prototype.slice.call(arguments, 1)
        n = isNumber(args[0]) ? args[0] : 1
        getter = !isNumber(args[0]) ? args[0] : !isNumber(args[1]) ? args[1] : undefined

        return args.length
          ? getFirstMatches(collection, n, getter ? $parse(getter) : getter)
          : collection[0]
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name flatten
   * @kind function
   *
   * @description
   * Flattens a nested array (the nesting can be to any depth).
   * If you pass shallow, the array will only be flattened a single level
   */
  angular.module('a8m.flatten', []).filter('flatten', function () {
    return function (collection, shallow) {
      shallow = shallow || false
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection)) {
        return collection
      }

      return !shallow ? flatten(collection, 0) : [].concat.apply([], collection)
    }
  })

  /**
   * flatten nested array (the nesting can be to any depth).
   * @param array {Array}
   * @param i {int}
   * @returns {Array}
   * @private
   */
  function flatten(array, i) {
    i = i || 0

    if (i >= array.length) return array

    if (isArray(array[i])) {
      return flatten(array.slice(0, i).concat(array[i], array.slice(i + 1)), i)
    }
    return flatten(array, i + 1)
  }

  /**
   * @ngdoc filter
   * @name fuzzyByKey
   * @kind function
   *
   * @description
   * fuzzy string searching by key
   */
  angular.module('a8m.fuzzy-by', []).filter('fuzzyBy', [
    '$parse',
    function ($parse) {
      return function (collection, property, search, csensitive) {
        var sensitive = csensitive || false,
          prop,
          getter

        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection) || isUndefined(property) || isUndefined(search)) {
          return collection
        }

        getter = $parse(property)

        return collection.filter(function (elm) {
          prop = getter(elm)
          if (!isString(prop)) {
            return false
          }

          prop = sensitive ? prop : prop.toLowerCase()
          search = sensitive ? search : search.toLowerCase()

          return hasApproxPattern(prop, search) !== false
        })
      }
    },
  ])
  /**
   * @ngdoc filter
   * @name fuzzy
   * @kind function
   *
   * @description
   * fuzzy string searching for array of strings, objects
   */
  angular.module('a8m.fuzzy', []).filter('fuzzy', function () {
    return function (collection, search, csensitive) {
      var sensitive = csensitive || false
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection) || isUndefined(search)) {
        return collection
      }

      search = sensitive ? search : search.toLowerCase()

      return collection.filter(function (elm) {
        if (isString(elm)) {
          elm = sensitive ? elm : elm.toLowerCase()
          return hasApproxPattern(elm, search) !== false
        }
        return isObject(elm) ? _hasApproximateKey(elm, search) : false
      })

      /**
       * checks if object has key{string} that match
       * to fuzzy search pattern
       * @param object
       * @param search
       * @returns {boolean}
       * @private
       */
      function _hasApproximateKey(object, search) {
        var properties = Object.keys(object),
          prop,
          flag
        return (
          0 <
          properties.filter(function (elm) {
            prop = object[elm]

            //avoid iteration if we found some key that equal[performance]
            if (flag) return true

            if (isString(prop)) {
              prop = sensitive ? prop : prop.toLowerCase()
              return (flag = hasApproxPattern(prop, search) !== false)
            }

            return false
          }).length
        )
      }
    }
  })

  /**
   * @ngdoc filter
   * @name groupBy
   * @kind function
   *
   * @description
   * Create an object composed of keys generated from the result of running each element of a collection,
   * each key is an array of the elements.
   */

  angular.module('a8m.group-by', ['a8m.filter-watcher']).filter('groupBy', [
    '$parse',
    'filterWatcher',
    function ($parse, filterWatcher) {
      return function (collection, property) {
        if (!isObject(collection) || isUndefined(property)) {
          return collection
        }

        return (
          filterWatcher.isMemoized('groupBy', arguments) ||
          filterWatcher.memoize('groupBy', arguments, this, _groupBy(collection, $parse(property)))
        )

        /**
         * groupBy function
         * @param collection
         * @param getter
         * @returns {{}}
         */
        function _groupBy(collection, getter) {
          var result = {}
          var prop

          forEach(collection, function (elm) {
            prop = getter(elm)

            if (!result[prop]) {
              result[prop] = []
            }
            result[prop].push(elm)
          })
          return result
        }
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name isEmpty
   * @kind function
   *
   * @description
   * get collection or string and return if it empty
   */
  angular.module('a8m.is-empty', []).filter('isEmpty', function () {
    return function (collection) {
      return isObject(collection) ? !toArray(collection).length : !collection.length
    }
  })

  /**
   * @ngdoc filter
   * @name join
   * @kind function
   *
   * @description
   * join a collection by a provided delimiter (space by default)
   */
  angular.module('a8m.join', []).filter('join', function () {
    return function (input, delimiter) {
      if (isUndefined(input) || !isArray(input)) {
        return input
      }
      if (isUndefined(delimiter)) delimiter = ' '

      return input.join(delimiter)
    }
  })

  /**
   * @ngdoc filter
   * @name last
   * @kind function
   *
   * @description
   * Gets the last element or last n elements of an array
   * if callback is provided, is returns as long the callback return truthy
   */
  angular.module('a8m.last', []).filter('last', [
    '$parse',
    function ($parse) {
      return function (collection) {
        var n,
          getter,
          args,
          //cuz reverse change our src collection
          //and we don't want side effects
          reversed = copy(collection)

        reversed = isObject(reversed) ? toArray(reversed) : reversed

        if (!isArray(reversed)) {
          return reversed
        }

        args = Array.prototype.slice.call(arguments, 1)
        n = isNumber(args[0]) ? args[0] : 1
        getter = !isNumber(args[0]) ? args[0] : !isNumber(args[1]) ? args[1] : undefined

        return args.length
          ? //send reversed collection as arguments, and reverse it back as result
            getFirstMatches(reversed.reverse(), n, getter ? $parse(getter) : getter).reverse()
          : //get the last element
            reversed[reversed.length - 1]
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name map
   * @kind function
   *
   * @description
   * Returns a new collection of the results of each expression execution.
   */
  angular.module('a8m.map', []).filter('map', [
    '$parse',
    function ($parse) {
      return function (collection, expression) {
        collection = isObject(collection) ? toArray(collection) : collection

        if (!isArray(collection) || isUndefined(expression)) {
          return collection
        }

        return collection.map(function (elm) {
          return $parse(expression)(elm)
        })
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name omit
   * @kind function
   *
   * @description
   * filter collection by expression
   */

  angular
    .module('a8m.omit', [])

    .filter('omit', [
      '$parse',
      function ($parse) {
        return function (collection, expression) {
          collection = isObject(collection) ? toArray(collection) : collection

          if (!isArray(collection) || isUndefined(expression)) {
            return collection
          }

          return collection.filter(function (elm) {
            return !$parse(expression)(elm)
          })
        }
      },
    ])

  /**
   * @ngdoc filter
   * @name pick
   * @kind function
   *
   * @description
   * filter collection by expression
   */

  angular
    .module('a8m.pick', [])

    .filter('pick', [
      '$parse',
      function ($parse) {
        return function (collection, expression) {
          collection = isObject(collection) ? toArray(collection) : collection

          if (!isArray(collection) || isUndefined(expression)) {
            return collection
          }

          return collection.filter(function (elm) {
            return $parse(expression)(elm)
          })
        }
      },
    ])

  /**
   * @ngdoc filter
   * @name range
   * @kind function
   *
   * @description
   * rangeFilter provides some support for a for loop using numbers
   */
  angular.module('a8m.range', []).filter('range', function () {
    return function (input, total, start, increment, cb) {
      start = start || 0
      increment = increment || 1
      for (var i = 0; i < parseInt(total); i++) {
        var j = start + i * increment
        input.push(isFunction(cb) ? cb(j) : j)
      }
      return input
    }
  })
  /**
   * @ngdoc filter
   * @name removeWith
   * @kind function
   *
   * @description
   * get collection and properties object, and removed elements
   * with this properties
   */

  angular.module('a8m.remove-with', []).filter('removeWith', function () {
    return function (collection, object) {
      if (isUndefined(object)) {
        return collection
      }
      collection = isObject(collection) ? toArray(collection) : collection

      return collection.filter(function (elm) {
        return !objectContains(object, elm)
      })
    }
  })

  /**
   * @ngdoc filter
   * @name remove
   * @kind function
   *
   * @description
   * remove specific members from collection
   */

  angular
    .module('a8m.remove', [])

    .filter('remove', function () {
      return function (collection) {
        collection = isObject(collection) ? toArray(collection) : collection
        var args = Array.prototype.slice.call(arguments, 1)

        if (!isArray(collection)) {
          return collection
        }

        return collection.filter(function (member) {
          return !args.some(function (nest) {
            return equals(nest, member)
          })
        })
      }
    })

  /**
   * @ngdoc filter
   * @name reverse
   * @kind function
   *
   * @description
   * Reverses a string or collection
   */
  angular.module('a8m.reverse', []).filter('reverse', [
    function () {
      return function (input) {
        input = isObject(input) ? toArray(input) : input

        if (isString(input)) {
          return input.split('').reverse().join('')
        }

        return isArray(input) ? input.slice().reverse() : input
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name searchField
   * @kind function
   *
   * @description
   * for each member, join several strings field and add them to
   * new field called 'searchField' (use for search filtering)
   */
  angular.module('a8m.search-field', []).filter('searchField', [
    '$parse',
    function ($parse) {
      return function (collection) {
        var get, field

        collection = isObject(collection) ? toArray(collection) : collection

        var args = Array.prototype.slice.call(arguments, 1)

        if (!isArray(collection) || !args.length) {
          return collection
        }

        return collection.map(function (member) {
          field = args
            .map(function (field) {
              get = $parse(field)
              return get(member)
            })
            .join(' ')

          return extend(member, { searchField: field })
        })
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name toArray
   * @kind function
   *
   * @description
   * Convert objects into stable arrays.
   * if addKey set to true,the filter also attaches a new property
   * $key to the value containing the original key that was used in
   * the object we are iterating over to reference the property
   */
  angular.module('a8m.to-array', []).filter('toArray', function () {
    return function (collection, addKey) {
      if (!isObject(collection)) {
        return collection
      }

      return !addKey
        ? toArray(collection)
        : Object.keys(collection).map(function (key) {
            return extend(collection[key], { $key: key })
          })
    }
  })

  /**
   * @ngdoc filter
   * @name unique/uniq
   * @kind function
   *
   * @description
   * get collection and filter duplicate members
   * if uniqueFilter get a property(nested to) as argument it's
   * filter by this property as unique identifier
   */

  angular.module('a8m.unique', []).filter({
    unique: ['$parse', uniqFilter],
    uniq: ['$parse', uniqFilter],
  })

  function uniqFilter($parse) {
    return function (collection, property) {
      collection = isObject(collection) ? toArray(collection) : collection

      if (!isArray(collection)) {
        return collection
      }

      //store all unique identifiers
      var uniqueItems = [],
        get = $parse(property)

      return isUndefined(property)
        ? //if it's kind of primitive array
          collection.filter(function (elm, pos, self) {
            return self.indexOf(elm) === pos
          })
        : //else compare with equals
          collection.filter(function (elm) {
            var prop = get(elm)
            if (some(uniqueItems, prop)) {
              return false
            }
            uniqueItems.push(prop)
            return true
          })

      //checked if the unique identifier is already exist
      function some(array, member) {
        if (isUndefined(member)) {
          return false
        }
        return array.some(function (el) {
          return equals(el, member)
        })
      }
    }
  }

  /**
   * @ngdoc filter
   * @name where
   * @kind function
   *
   * @description
   * of each element in a collection to the given properties object,
   * returning an array of all elements that have equivalent property values.
   *
   */
  angular.module('a8m.where', []).filter('where', function () {
    return function (collection, object) {
      if (isUndefined(object)) return collection
      collection = isObject(collection) ? toArray(collection) : collection

      return collection.filter(function (elm) {
        return objectContains(object, elm)
      })
    }
  })

  /**
   * @ngdoc filter
   * @name xor
   * @kind function
   *
   * @description
   * Exclusive or filter by expression
   */

  angular
    .module('a8m.xor', [])

    .filter('xor', [
      '$parse',
      function ($parse) {
        return function (col1, col2, expression) {
          expression = expression || false

          col1 = isObject(col1) ? toArray(col1) : col1
          col2 = isObject(col2) ? toArray(col2) : col2

          if (!isArray(col1) || !isArray(col2)) return col1

          return col1.concat(col2).filter(function (elm) {
            return !(some(elm, col1) && some(elm, col2))
          })

          function some(el, col) {
            var getter = $parse(expression)
            return col.some(function (dElm) {
              return expression ? equals(getter(dElm), getter(el)) : equals(dElm, el)
            })
          }
        }
      },
    ])

  /**
   * @ngdoc filter
   * @name abs
   * @kind function
   *
   * @description
   * Will return the absolute value of a number
   */
  angular.module('a8m.math.abs', []).filter('abs', function () {
    return function (input) {
      return Math.abs(input)
    }
  })

  /**
   * @ngdoc filter
   * @name formatBytes
   * @kind function
   *
   * @description
   * Convert bytes into appropriate display
   * 1024 bytes => 1 KB
   */
  angular.module('a8m.math.byteFmt', []).filter('byteFmt', function () {
    var compared = [{ str: 'B', val: 1024 }]
    ;['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'].forEach(function (el, i) {
      compared.push({ str: el, val: compared[i].val * 1024 })
    })
    return function (bytes, decimal) {
      if (
        isNumber(decimal) &&
        isFinite(decimal) &&
        decimal % 1 === 0 &&
        decimal >= 0 &&
        isNumber(bytes) &&
        isFinite(bytes)
      ) {
        var i = 0
        while (i < compared.length - 1 && bytes >= compared[i].val) i++
        bytes /= i > 0 ? compared[i - 1].val : 1
        return convertToDecimal(bytes, decimal) + ' ' + compared[i].str
      }
      return 'NaN'
    }
  })

  /**
   * @ngdoc filter
   * @name degrees
   * @kind function
   *
   * @description
   * Convert angle from radians to degrees
   */
  angular.module('a8m.math.degrees', []).filter('degrees', function () {
    return function (radians, decimal) {
      // if decimal is not an integer greater than -1, we cannot do. quit with error "NaN"
      // if degrees is not a real number, we cannot do also. quit with error "NaN"
      if (
        isNumber(decimal) &&
        isFinite(decimal) &&
        decimal % 1 === 0 &&
        decimal >= 0 &&
        isNumber(radians) &&
        isFinite(radians)
      ) {
        var degrees = (radians * 180) / Math.PI
        return Math.round(degrees * Math.pow(10, decimal)) / Math.pow(10, decimal)
      } else {
        return 'NaN'
      }
    }
  })

  /**
   * @ngdoc filter
   * @name formatBytes
   * @kind function
   *
   * @description
   * Convert bytes into appropriate display
   * 1024 kilobytes => 1 MB
   */
  angular.module('a8m.math.kbFmt', []).filter('kbFmt', function () {
    var compared = [{ str: 'KB', val: 1024 }]
    ;['MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'].forEach(function (el, i) {
      compared.push({ str: el, val: compared[i].val * 1024 })
    })
    return function (bytes, decimal) {
      if (
        isNumber(decimal) &&
        isFinite(decimal) &&
        decimal % 1 === 0 &&
        decimal >= 0 &&
        isNumber(bytes) &&
        isFinite(bytes)
      ) {
        var i = 0
        while (i < compared.length - 1 && bytes >= compared[i].val) i++
        bytes /= i > 0 ? compared[i - 1].val : 1
        return convertToDecimal(bytes, decimal) + ' ' + compared[i].str
      }
      return 'NaN'
    }
  })
  /**
   * @ngdoc filter
   * @name max
   * @kind function
   *
   * @description
   * Math.max will get an array and return the max value. if an expression
   * is provided, will return max value by expression.
   */
  angular.module('a8m.math.max', []).filter('max', [
    '$parse',
    function ($parse) {
      return function (input, expression) {
        if (!isArray(input)) {
          return input
        }
        return isUndefined(expression)
          ? Math.max.apply(Math, input)
          : input[indexByMax(input, expression)]
      }

      /**
       * @private
       * @param array
       * @param exp
       * @returns {number|*|Number}
       */
      function indexByMax(array, exp) {
        var mappedArray = array.map(function (elm) {
          return $parse(exp)(elm)
        })
        return mappedArray.indexOf(Math.max.apply(Math, mappedArray))
      }
    },
  ])
  /**
   * @ngdoc filter
   * @name min
   * @kind function
   *
   * @description
   * Math.min will get an array and return the min value. if an expression
   * is provided, will return min value by expression.
   */
  angular.module('a8m.math.min', []).filter('min', [
    '$parse',
    function ($parse) {
      return function (input, expression) {
        if (!isArray(input)) {
          return input
        }
        return isUndefined(expression)
          ? Math.min.apply(Math, input)
          : input[indexByMin(input, expression)]
      }

      /**
       * @private
       * @param array
       * @param exp
       * @returns {number|*|Number}
       */
      function indexByMin(array, exp) {
        var mappedArray = array.map(function (elm) {
          return $parse(exp)(elm)
        })
        return mappedArray.indexOf(Math.min.apply(Math, mappedArray))
      }
    },
  ])
  /**
   * @ngdoc filter
   * @name Percent
   * @kind function
   *
   * @description
   * percentage between two numbers
   */
  angular.module('a8m.math.percent', []).filter('percent', function () {
    return function (input, divided, round) {
      var divider = isString(input) ? Number(input) : input
      divided = divided || 100
      round = round || false

      if (!isNumber(divider) || isNaN(divider)) return input

      return round ? Math.round((divider / divided) * 100) : (divider / divided) * 100
    }
  })

  /**
   * @ngdoc filter
   * @name toRadians
   * @kind function
   *
   * @description
   * Convert angle from degrees to radians
   */
  angular.module('a8m.math.radians', []).filter('radians', function () {
    return function (degrees, decimal) {
      // if decimal is not an integer greater than -1, we cannot do. quit with error "NaN"
      // if degrees is not a real number, we cannot do also. quit with error "NaN"
      if (
        isNumber(decimal) &&
        isFinite(decimal) &&
        decimal % 1 === 0 &&
        decimal >= 0 &&
        isNumber(degrees) &&
        isFinite(degrees)
      ) {
        var radians = (degrees * 3.14159265359) / 180
        return Math.round(radians * Math.pow(10, decimal)) / Math.pow(10, decimal)
      }
      return 'NaN'
    }
  })

  /**
   * @ngdoc filter
   * @name Radix
   * @kind function
   *
   * @description
   * converting decimal numbers to different bases(radix)
   */
  angular.module('a8m.math.radix', []).filter('radix', function () {
    return function (input, radix) {
      var RANGE = /^[2-9]$|^[1-2]\d$|^3[0-6]$/

      if (!isNumber(input) || !RANGE.test(radix)) {
        return input
      }

      return input.toString(radix).toUpperCase()
    }
  })

  /**
   * @ngdoc filter
   * @name formatBytes
   * @kind function
   *
   * @description
   * Convert number into abbreviations.
   * i.e: K for one thousand, M for Million, B for billion
   * e.g: number of users:235,221, decimal:1 => 235.2 K
   */
  angular.module('a8m.math.shortFmt', []).filter('shortFmt', function () {
    return function (number, decimal) {
      if (
        isNumber(decimal) &&
        isFinite(decimal) &&
        decimal % 1 === 0 &&
        decimal >= 0 &&
        isNumber(number) &&
        isFinite(number)
      ) {
        if (number < 1e3) {
          return '' + number // Coerce to string
        } else if (number < 1e6) {
          return convertToDecimal(number / 1e3, decimal) + ' K'
        } else if (number < 1e9) {
          return convertToDecimal(number / 1e6, decimal) + ' M'
        } else {
          return convertToDecimal(number / 1e9, decimal) + ' B'
        }
      }
      return 'NaN'
    }
  })
  /**
   * @ngdoc filter
   * @name sum
   * @kind function
   *
   * @description
   * Sum up all values within an array
   */
  angular.module('a8m.math.sum', []).filter('sum', function () {
    return function (input, initial) {
      return !isArray(input)
        ? input
        : input.reduce(function (prev, curr) {
            return prev + curr
          }, initial || 0)
    }
  })

  /**
   * @ngdoc filter
   * @name endsWith
   * @kind function
   *
   * @description
   * checks whether string ends with the ends parameter.
   */
  angular
    .module('a8m.ends-with', [])

    .filter('endsWith', function () {
      return function (input, ends, csensitive) {
        var sensitive = csensitive || false,
          position

        if (!isString(input) || isUndefined(ends)) {
          return input
        }

        input = sensitive ? input : input.toLowerCase()
        position = input.length - ends.length

        return input.indexOf(sensitive ? ends : ends.toLowerCase(), position) !== -1
      }
    })

  /**
   * @ngdoc filter
   * @name latinize
   * @kind function
   *
   * @description
   * remove accents/diacritics from a string
   */
  angular.module('a8m.latinize', []).filter('latinize', [
    function () {
      var defaultDiacriticsRemovalap = [
        {
          base: 'A',
          letters:
            '\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F',
        },
        { base: 'AA', letters: '\uA732' },
        { base: 'AE', letters: '\u00C6\u01FC\u01E2' },
        { base: 'AO', letters: '\uA734' },
        { base: 'AU', letters: '\uA736' },
        { base: 'AV', letters: '\uA738\uA73A' },
        { base: 'AY', letters: '\uA73C' },
        { base: 'B', letters: '\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181' },
        {
          base: 'C',
          letters: '\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E',
        },
        {
          base: 'D',
          letters:
            '\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779',
        },
        { base: 'DZ', letters: '\u01F1\u01C4' },
        { base: 'Dz', letters: '\u01F2\u01C5' },
        {
          base: 'E',
          letters:
            '\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E',
        },
        { base: 'F', letters: '\u0046\u24BB\uFF26\u1E1E\u0191\uA77B' },
        {
          base: 'G',
          letters:
            '\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E',
        },
        {
          base: 'H',
          letters:
            '\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D',
        },
        {
          base: 'I',
          letters:
            '\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197',
        },
        { base: 'J', letters: '\u004A\u24BF\uFF2A\u0134\u0248' },
        {
          base: 'K',
          letters:
            '\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2',
        },
        {
          base: 'L',
          letters:
            '\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780',
        },
        { base: 'LJ', letters: '\u01C7' },
        { base: 'Lj', letters: '\u01C8' },
        { base: 'M', letters: '\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C' },
        {
          base: 'N',
          letters:
            '\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4',
        },
        { base: 'NJ', letters: '\u01CA' },
        { base: 'Nj', letters: '\u01CB' },
        {
          base: 'O',
          letters:
            '\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C',
        },
        { base: 'OI', letters: '\u01A2' },
        { base: 'OO', letters: '\uA74E' },
        { base: 'OU', letters: '\u0222' },
        { base: 'OE', letters: '\u008C\u0152' },
        { base: 'oe', letters: '\u009C\u0153' },
        { base: 'P', letters: '\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754' },
        { base: 'Q', letters: '\u0051\u24C6\uFF31\uA756\uA758\u024A' },
        {
          base: 'R',
          letters:
            '\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782',
        },
        {
          base: 'S',
          letters:
            '\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784',
        },
        {
          base: 'T',
          letters:
            '\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786',
        },
        { base: 'TZ', letters: '\uA728' },
        {
          base: 'U',
          letters:
            '\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244',
        },
        { base: 'V', letters: '\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245' },
        { base: 'VY', letters: '\uA760' },
        { base: 'W', letters: '\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72' },
        { base: 'X', letters: '\u0058\u24CD\uFF38\u1E8A\u1E8C' },
        {
          base: 'Y',
          letters:
            '\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE',
        },
        {
          base: 'Z',
          letters:
            '\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762',
        },
        {
          base: 'a',
          letters:
            '\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250',
        },
        { base: 'aa', letters: '\uA733' },
        { base: 'ae', letters: '\u00E6\u01FD\u01E3' },
        { base: 'ao', letters: '\uA735' },
        { base: 'au', letters: '\uA737' },
        { base: 'av', letters: '\uA739\uA73B' },
        { base: 'ay', letters: '\uA73D' },
        { base: 'b', letters: '\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253' },
        {
          base: 'c',
          letters: '\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184',
        },
        {
          base: 'd',
          letters:
            '\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A',
        },
        { base: 'dz', letters: '\u01F3\u01C6' },
        {
          base: 'e',
          letters:
            '\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD',
        },
        { base: 'f', letters: '\u0066\u24D5\uFF46\u1E1F\u0192\uA77C' },
        {
          base: 'g',
          letters:
            '\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F',
        },
        {
          base: 'h',
          letters:
            '\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265',
        },
        { base: 'hv', letters: '\u0195' },
        {
          base: 'i',
          letters:
            '\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131',
        },
        { base: 'j', letters: '\u006A\u24D9\uFF4A\u0135\u01F0\u0249' },
        {
          base: 'k',
          letters:
            '\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3',
        },
        {
          base: 'l',
          letters:
            '\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747',
        },
        { base: 'lj', letters: '\u01C9' },
        { base: 'm', letters: '\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F' },
        {
          base: 'n',
          letters:
            '\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5',
        },
        { base: 'nj', letters: '\u01CC' },
        {
          base: 'o',
          letters:
            '\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275',
        },
        { base: 'oi', letters: '\u01A3' },
        { base: 'ou', letters: '\u0223' },
        { base: 'oo', letters: '\uA74F' },
        { base: 'p', letters: '\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755' },
        { base: 'q', letters: '\u0071\u24E0\uFF51\u024B\uA757\uA759' },
        {
          base: 'r',
          letters:
            '\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783',
        },
        {
          base: 's',
          letters:
            '\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B',
        },
        {
          base: 't',
          letters:
            '\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787',
        },
        { base: 'tz', letters: '\uA729' },
        {
          base: 'u',
          letters:
            '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289',
        },
        { base: 'v', letters: '\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C' },
        { base: 'vy', letters: '\uA761' },
        {
          base: 'w',
          letters: '\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73',
        },
        { base: 'x', letters: '\u0078\u24E7\uFF58\u1E8B\u1E8D' },
        {
          base: 'y',
          letters:
            '\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF',
        },
        {
          base: 'z',
          letters:
            '\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763',
        },
      ]

      var diacriticsMap = {}
      for (var i = 0; i < defaultDiacriticsRemovalap.length; i++) {
        var letters = defaultDiacriticsRemovalap[i].letters.split('')
        for (var j = 0; j < letters.length; j++) {
          diacriticsMap[letters[j]] = defaultDiacriticsRemovalap[i].base
        }
      }

      // "what?" version ... http://jsperf.com/diacritics/12
      function removeDiacritics(str) {
        return str.replace(/[^\u0000-\u007E]/g, function (a) {
          return diacriticsMap[a] || a
        })
      }

      return function (input) {
        return isString(input) ? removeDiacritics(input) : input
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name ltrim
   * @kind function
   *
   * @description
   * Left trim. Similar to trimFilter, but only for left side.
   */
  angular.module('a8m.ltrim', []).filter('ltrim', function () {
    return function (input, chars) {
      var trim = chars || '\\s'

      return isString(input) ? input.replace(new RegExp('^' + trim + '+'), '') : input
    }
  })

  /**
   * @ngdoc filter
   * @name match
   * @kind function
   *
   * @description
   * Return the matched pattern in a string.
   */
  angular.module('a8m.match', []).filter('match', function () {
    return function (input, pattern, flag) {
      var reg = new RegExp(pattern, flag)

      return isString(input) ? input.match(reg) : null
    }
  })

  /**
   * @ngdoc filter
   * @name phone-us
   * @kind function
   *
   * @description
   * format a string or a number into a us-style
   * phone number in the form (***) ***-****
   */
  angular.module('a8m.phoneUS', []).filter('phoneUS', function () {
    return function (num) {
      num += ''
      return '(' + num.slice(0, 3) + ') ' + num.slice(3, 6) + '-' + num.slice(6)
    }
  })

  /**
   * @ngdoc filter
   * @name repeat
   * @kind function
   *
   * @description
   * Repeats a string n times
   */
  angular.module('a8m.repeat', []).filter('repeat', [
    function () {
      return function (input, n, separator) {
        var times = ~~n

        if (!isString(input)) {
          return input
        }

        return !times ? input : strRepeat(input, --n, separator || '')
      }
    },
  ])

  /**
   * Repeats a string n times with given separator
   * @param str string to repeat
   * @param n number of times
   * @param sep separator
   * @returns {*}
   */
  function strRepeat(str, n, sep) {
    if (!n) {
      return str
    }
    return str + sep + strRepeat(str, --n, sep)
  }
  /**
   * @ngdoc filter
   * @name rtrim
   * @kind function
   *
   * @description
   * Right trim. Similar to trimFilter, but only for right side.
   */
  angular.module('a8m.rtrim', []).filter('rtrim', function () {
    return function (input, chars) {
      var trim = chars || '\\s'

      return isString(input) ? input.replace(new RegExp(trim + '+$'), '') : input
    }
  })

  /**
   * @ngdoc filter
   * @name slugify
   * @kind function
   *
   * @description
   * remove spaces from string, replace with "-" or given argument
   */
  angular.module('a8m.slugify', []).filter('slugify', [
    function () {
      return function (input, sub) {
        var replace = isUndefined(sub) ? '-' : sub

        return isString(input) ? input.toLowerCase().replace(/\s+/g, replace) : input
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name split
   * @kind function
   *
   * @description
   * split a string by a provided delimiter (none '' by default) and skip first n-delimiters
   */
  angular.module('a8m.split', []).filter('split', function () {
    function escapeRegExp(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&')
    }

    return function (input, delimiter, skip) {
      var _regexp, _matches, _splitted, _temp

      if (isUndefined(input) || !isString(input)) {
        return null
      }
      if (isUndefined(delimiter)) delimiter = ''
      if (isNaN(skip)) skip = 0

      _regexp = new RegExp(escapeRegExp(delimiter), 'g')
      _matches = input.match(_regexp)

      if (isNull(_matches) || skip >= _matches.length) {
        return [input]
      }

      if (skip === 0) return input.split(delimiter)

      _splitted = input.split(delimiter)
      _temp = _splitted.splice(0, skip + 1)
      _splitted.unshift(_temp.join(delimiter))

      return _splitted
    }
  })

  /**
   * @ngdoc filter
   * @name startWith
   * @kind function
   *
   * @description
   * checks whether string starts with the starts parameter.
   */
  angular.module('a8m.starts-with', []).filter('startsWith', function () {
    return function (input, start, csensitive) {
      var sensitive = csensitive || false

      if (!isString(input) || isUndefined(start)) {
        return input
      }

      input = sensitive ? input : input.toLowerCase()

      return !input.indexOf(sensitive ? start : start.toLowerCase())
    }
  })

  /**
   * @ngdoc filter
   * @name stringular
   * @kind function
   *
   * @description
   * get string with {n} and replace match with enumeration values
   */
  angular.module('a8m.stringular', []).filter('stringular', function () {
    return function (input) {
      var args = Array.prototype.slice.call(arguments, 1)

      return input.replace(/{(\d+)}/g, function (match, number) {
        return isUndefined(args[number]) ? match : args[number]
      })
    }
  })

  /**
   * @ngdoc filter
   * @name stripTags
   * @kind function
   *
   * @description
   * strip html tags from string
   */
  angular.module('a8m.strip-tags', []).filter('stripTags', function () {
    return function (input) {
      return isString(input) ? input.replace(/<\S[^><]*>/g, '') : input
    }
  })

  /**
   * @ngdoc filter
   * @name test
   * @kind function
   *
   * @description
   * test if a string match a pattern.
   */
  angular.module('a8m.test', []).filter('test', function () {
    return function (input, pattern, flag) {
      var reg = new RegExp(pattern, flag)

      return isString(input) ? reg.test(input) : input
    }
  })

  /**
   * @ngdoc filter
   * @name trim
   * @kind function
   *
   * @description
   *  Strip whitespace (or other characters) from the beginning and end of a string
   */
  angular.module('a8m.trim', []).filter('trim', function () {
    return function (input, chars) {
      var trim = chars || '\\s'

      return isString(input)
        ? input.replace(new RegExp('^' + trim + '+|' + trim + '+$', 'g'), '')
        : input
    }
  })

  /**
   * @ngdoc filter
   * @name truncate
   * @kind function
   *
   * @description
   * truncates a string given a specified length, providing a custom string to denote an omission.
   */
  angular.module('a8m.truncate', []).filter('truncate', function () {
    return function (input, length, suffix, preserve) {
      length = isUndefined(length) ? input.length : length
      preserve = preserve || false
      suffix = suffix || ''

      if (!isString(input) || input.length <= length) return input

      return (
        input.substring(
          0,
          preserve
            ? input.indexOf(' ', length) === -1
              ? input.length
              : input.indexOf(' ', length)
            : length
        ) + suffix
      )
    }
  })

  /**
   * @ngdoc filter
   * @name ucfirst
   * @kind function
   *
   * @description
   * ucfirst
   */
  angular.module('a8m.ucfirst', []).filter({
    ucfirst: ucfirstFilter,
    titleize: ucfirstFilter,
  })

  function ucfirstFilter() {
    return function (input) {
      return isString(input)
        ? input
            .split(' ')
            .map(function (ch) {
              return ch.charAt(0).toUpperCase() + ch.substring(1)
            })
            .join(' ')
        : input
    }
  }

  /**
   * @ngdoc filter
   * @name uriComponentEncode
   * @kind function
   *
   * @description
   * get string as parameter and return encoded string
   */
  angular.module('a8m.uri-component-encode', []).filter('uriComponentEncode', [
    '$window',
    function ($window) {
      return function (input) {
        return isString(input) ? $window.encodeURIComponent(input) : input
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name uriEncode
   * @kind function
   *
   * @description
   * get string as parameter and return encoded string
   */
  angular.module('a8m.uri-encode', []).filter('uriEncode', [
    '$window',
    function ($window) {
      return function (input) {
        return isString(input) ? $window.encodeURI(input) : input
      }
    },
  ])

  /**
   * @ngdoc filter
   * @name wrap
   * @kind function
   *
   * @description
   * Wrap a string with another string
   */
  angular.module('a8m.wrap', []).filter('wrap', function () {
    return function (input, wrap, ends) {
      return isString(input) && isDefined(wrap) ? [wrap, input, ends || wrap].join('') : input
    }
  })

  /**
   * @ngdoc provider
   * @name filterWatcher
   * @kind function
   *
   * @description
   * store specific filters result in $$cache, based on scope life time(avoid memory leak).
   * on scope.$destroy remove it's cache from $$cache container
   */

  angular.module('a8m.filter-watcher', []).provider('filterWatcher', function () {
    this.$get = [
      '$window',
      '$rootScope',
      function ($window, $rootScope) {
        /**
         * Cache storing
         * @type {Object}
         */
        var $$cache = {}

        /**
         * Scope listeners container
         * scope.$destroy => remove all cache keys
         * bind to current scope.
         * @type {Object}
         */
        var $$listeners = {}

        /**
         * $timeout without triggering the digest cycle
         * @type {function}
         */
        var $$timeout = $window.setTimeout

        /**
         * @description
         * get `HashKey` string based on the given arguments.
         * @param fName
         * @param args
         * @returns {string}
         */
        function getHashKey(fName, args) {
          function replacerFactory() {
            var cache = []
            return function (key, val) {
              if (isObject(val) && !isNull(val)) {
                if (~cache.indexOf(val)) return '[Circular]'
                cache.push(val)
              }
              if ($window == val) return '$WINDOW'
              if ($window.document == val) return '$DOCUMENT'
              if (isScope(val)) return '$SCOPE'
              return val
            }
          }
          return [fName, JSON.stringify(args, replacerFactory())].join('#').replace(/"/g, '')
        }

        /**
         * @description
         * fir on $scope.$destroy,
         * remove cache based scope from `$$cache`,
         * and remove itself from `$$listeners`
         * @param event
         */
        function removeCache(event) {
          var id = event.targetScope.$id
          forEach($$listeners[id], function (key) {
            delete $$cache[key]
          })
          delete $$listeners[id]
        }

        /**
         * @description
         * for angular version that greater than v.1.3.0
         * it clear cache when the digest cycle is end.
         */
        function cleanStateless() {
          $$timeout(function () {
            if (!$rootScope.$$phase) $$cache = {}
          }, 2000)
        }

        /**
         * @description
         * Store hashKeys in $$listeners container
         * on scope.$destroy, remove them all(bind an event).
         * @param scope
         * @param hashKey
         * @returns {*}
         */
        function addListener(scope, hashKey) {
          var id = scope.$id
          if (isUndefined($$listeners[id])) {
            scope.$on('$destroy', removeCache)
            $$listeners[id] = []
          }
          return $$listeners[id].push(hashKey)
        }

        /**
         * @description
         * return the `cacheKey` or undefined.
         * @param filterName
         * @param args
         * @returns {*}
         */
        function $$isMemoized(filterName, args) {
          var hashKey = getHashKey(filterName, args)
          return $$cache[hashKey]
        }

        /**
         * @description
         * store `result` in `$$cache` container, based on the hashKey.
         * add $destroy listener and return result
         * @param filterName
         * @param args
         * @param scope
         * @param result
         * @returns {*}
         */
        function $$memoize(filterName, args, scope, result) {
          var hashKey = getHashKey(filterName, args)
          //store result in `$$cache` container
          $$cache[hashKey] = result
          // for angular versions that less than 1.3
          // add to `$destroy` listener, a cleaner callback
          if (isScope(scope)) {
            addListener(scope, hashKey)
          } else {
            cleanStateless()
          }
          return result
        }

        return {
          isMemoized: $$isMemoized,
          memoize: $$memoize,
        }
      },
    ]
  })

  /**
   * @ngdoc module
   * @name angular.filters
   * @description
   * Bunch of useful filters for angularJS
   */

  angular.module('angular.filter', [
    'a8m.ucfirst',
    'a8m.uri-encode',
    'a8m.uri-component-encode',
    'a8m.slugify',
    'a8m.latinize',
    'a8m.strip-tags',
    'a8m.stringular',
    'a8m.truncate',
    'a8m.starts-with',
    'a8m.ends-with',
    'a8m.wrap',
    'a8m.trim',
    'a8m.ltrim',
    'a8m.rtrim',
    'a8m.repeat',
    'a8m.test',
    'a8m.match',
    'a8m.split',
    'a8m.phoneUS',

    'a8m.to-array',
    'a8m.concat',
    'a8m.contains',
    'a8m.unique',
    'a8m.is-empty',
    'a8m.after',
    'a8m.after-where',
    'a8m.before',
    'a8m.before-where',
    'a8m.defaults',
    'a8m.where',
    'a8m.reverse',
    'a8m.remove',
    'a8m.remove-with',
    'a8m.group-by',
    'a8m.count-by',
    'a8m.chunk-by',
    'a8m.search-field',
    'a8m.fuzzy-by',
    'a8m.fuzzy',
    'a8m.omit',
    'a8m.pick',
    'a8m.every',
    'a8m.filter-by',
    'a8m.xor',
    'a8m.map',
    'a8m.first',
    'a8m.last',
    'a8m.flatten',
    'a8m.join',
    'a8m.range',

    'a8m.math.max',
    'a8m.math.min',
    'a8m.math.abs',
    'a8m.math.percent',
    'a8m.math.radix',
    'a8m.math.sum',
    'a8m.math.degrees',
    'a8m.math.radians',
    'a8m.math.byteFmt',
    'a8m.math.kbFmt',
    'a8m.math.shortFmt',

    'a8m.angular',
    'a8m.conditions',
    'a8m.is-null',

    'a8m.filter-watcher',
  ])
})(window, window.angular)
/*** Directives and services for responding to idle users in AngularJS
 * @author Mike Grabski <me@mikegrabski.com>
 * @version v1.3.2
 * @link https://github.com/HackedByChinese/ng-idle.git
 * @license MIT
 */

!(function (a, b, c) {
  'use strict'
  b.module('ngIdle', [
    'ngIdle.keepalive',
    'ngIdle.idle',
    'ngIdle.countdown',
    'ngIdle.title',
    'ngIdle.localStorage',
  ]),
    b.module('ngIdle.keepalive', []).provider('Keepalive', function () {
      var a = { http: null, interval: 600 }
      this.http = function (c) {
        if (!c)
          throw new Error(
            'Argument must be a string containing a URL, or an object containing the HTTP request configuration.'
          )
        b.isString(c) && (c = { url: c, method: 'GET' }), (c.cache = !1), (a.http = c)
      }
      var c = (this.interval = function (b) {
        if (((b = parseInt(b)), isNaN(b) || 0 >= b))
          throw new Error('Interval must be expressed in seconds and be greater than 0.')
        a.interval = b
      })
      this.$get = [
        '$rootScope',
        '$log',
        '$interval',
        '$http',
        function (d, e, f, g) {
          function h(a) {
            d.$broadcast('KeepaliveResponse', a.data, a.status)
          }
          function i() {
            d.$broadcast('Keepalive'), b.isObject(a.http) && g(a.http).then(h)['catch'](h)
          }
          var j = { ping: null }
          return {
            _options: function () {
              return a
            },
            setInterval: c,
            start: function () {
              return f.cancel(j.ping), (j.ping = f(i, 1e3 * a.interval)), j.ping
            },
            stop: function () {
              f.cancel(j.ping)
            },
            ping: function () {
              i()
            },
          }
        },
      ]
    }),
    b
      .module('ngIdle.idle', ['ngIdle.keepalive', 'ngIdle.localStorage'])
      .provider('Idle', function () {
        var a = {
            idle: 1200,
            timeout: 30,
            autoResume: 'idle',
            interrupt:
              'mousemove keydown DOMMouseScroll mousewheel mousedown touchstart touchmove scroll',
            windowInterrupt: null,
            keepalive: !0,
          },
          c = (this.timeout = function (c) {
            if (c === !1) a.timeout = 0
            else {
              if (!(b.isNumber(c) && c >= 0))
                throw new Error(
                  'Timeout must be zero or false to disable the feature, or a positive integer (in seconds) to enable it.'
                )
              a.timeout = c
            }
          })
        ;(this.interrupt = function (b) {
          a.interrupt = b
        }),
          (this.windowInterrupt = function (b) {
            a.windowInterrupt = b
          })
        var d = (this.idle = function (b) {
          if (0 >= b) throw new Error('Idle must be a value in seconds, greater than 0.')
          a.idle = b
        })
        ;(this.autoResume = function (b) {
          b === !0
            ? (a.autoResume = 'idle')
            : b === !1
            ? (a.autoResume = 'off')
            : (a.autoResume = b)
        }),
          (this.keepalive = function (b) {
            a.keepalive = b === !0
          }),
          (this.$get = [
            '$interval',
            '$log',
            '$rootScope',
            '$document',
            'Keepalive',
            'IdleLocalStorage',
            '$window',
            function (e, f, g, h, i, j, k) {
              function l() {
                a.keepalive && (u.running && i.ping(), i.start())
              }
              function m() {
                a.keepalive && i.stop()
              }
              function n() {
                u.idling = !u.idling
                var b = u.idling ? 'IdleStart' : 'IdleEnd'
                u.idling
                  ? (g.$broadcast(b),
                    m(),
                    a.timeout &&
                      ((u.countdown = a.timeout), o(), (u.timeout = e(o, 1e3, a.timeout, !1))))
                  : (l(), g.$broadcast(b)),
                  e.cancel(u.idle)
              }
              function o() {
                if (u.idling) {
                  if (u.countdown <= 0) return void q()
                  g.$broadcast('IdleWarn', u.countdown), u.countdown--
                }
              }
              function p(a) {
                g.$broadcast('IdleInterrupt', a)
              }
              function q() {
                m(),
                  e.cancel(u.idle),
                  e.cancel(u.timeout),
                  (u.idling = !0),
                  (u.running = !1),
                  (u.countdown = 0),
                  g.$broadcast('IdleTimeout')
              }
              function r(a, b, c) {
                var d = a.running()
                a.unwatch(), b(c), d && a.watch()
              }
              function s() {
                var a = j.get('expiry')
                return a && a.time ? new Date(a.time) : null
              }
              function t(a) {
                a ? j.set('expiry', { id: v, time: a }) : j.remove('expiry')
              }
              var u = { idle: null, timeout: null, idling: !1, running: !1, countdown: null },
                v = new Date().getTime(),
                w = {
                  _options: function () {
                    return a
                  },
                  _getNow: function () {
                    return new Date()
                  },
                  getIdle: function () {
                    return a.idle
                  },
                  getTimeout: function () {
                    return a.timeout
                  },
                  setIdle: function (a) {
                    r(this, d, a)
                  },
                  setTimeout: function (a) {
                    r(this, c, a)
                  },
                  isExpired: function () {
                    var a = s()
                    return null !== a && a <= this._getNow()
                  },
                  running: function () {
                    return u.running
                  },
                  idling: function () {
                    return u.idling
                  },
                  watch: function (b) {
                    e.cancel(u.idle), e.cancel(u.timeout)
                    var c = a.timeout ? a.timeout : 0
                    b || t(new Date(new Date().getTime() + 1e3 * (a.idle + c))),
                      u.idling ? n() : u.running || l(),
                      (u.running = !0),
                      (u.idle = e(n, 1e3 * a.idle, 0, !1))
                  },
                  unwatch: function () {
                    e.cancel(u.idle),
                      e.cancel(u.timeout),
                      (u.idling = !1),
                      (u.running = !1),
                      t(null),
                      m()
                  },
                  interrupt: function (b) {
                    if (u.running) {
                      if (a.timeout && this.isExpired()) return void q()
                      p(b),
                        (b ||
                          'idle' === a.autoResume ||
                          ('notIdle' === a.autoResume && !u.idling)) &&
                          this.watch(b)
                    }
                  },
                },
                x = {
                  clientX: null,
                  clientY: null,
                  swap: function (a) {
                    var b = { clientX: this.clientX, clientY: this.clientY }
                    return (this.clientX = a.clientX), (this.clientY = a.clientY), b
                  },
                  hasMoved: function (a) {
                    var b = this.swap(a)
                    return null === this.clientX || a.movementX || a.movementY
                      ? !0
                      : b.clientX != a.clientX || b.clientY != a.clientY
                      ? !0
                      : !1
                  },
                }
              if (
                (h.find('html').on(a.interrupt, function (a) {
                  ;('mousemove' === a.type &&
                    a.originalEvent &&
                    0 === a.originalEvent.movementX &&
                    0 === a.originalEvent.movementY) ||
                    (('mousemove' !== a.type || x.hasMoved(a)) && w.interrupt())
                }),
                a.windowInterrupt)
              )
                for (
                  var y = a.windowInterrupt.split(' '),
                    z = function () {
                      w.interrupt()
                    },
                    A = 0;
                  A < y.length;
                  A++
                )
                  k.addEventListener ? k.addEventListener(y[A], z, !1) : k.attachEvent(y[A], z)
              var B = function (a) {
                if ('ngIdle.expiry' === a.key && a.newValue && a.newValue !== a.oldValue) {
                  var c = b.fromJson(a.newValue)
                  if (c.id === v) return
                  w.interrupt(!0)
                }
              }
              return (
                k.addEventListener
                  ? k.addEventListener('storage', B, !1)
                  : k.attachEvent && k.attachEvent('onstorage', B),
                w
              )
            },
          ])
      }),
    b.module('ngIdle.countdown', ['ngIdle.idle']).directive('idleCountdown', [
      'Idle',
      function (a) {
        return {
          restrict: 'A',
          scope: { value: '=idleCountdown' },
          link: function (b) {
            ;(b.value = a.getTimeout()),
              b.$on('IdleWarn', function (a, c) {
                b.$evalAsync(function () {
                  b.value = c
                })
              }),
              b.$on('IdleTimeout', function () {
                b.$evalAsync(function () {
                  b.value = 0
                })
              })
          },
        }
      },
    ]),
    b
      .module('ngIdle.title', [])
      .provider('Title', function () {
        function a(a, b, c) {
          return new Array(b - String(a).length + 1).join(c || '0') + a
        }
        var c = { enabled: !0 },
          d = (this.enabled = function (a) {
            c.enabled = a === !0
          })
        this.$get = [
          '$document',
          '$interpolate',
          function (e, f) {
            var g = {
              original: null,
              idle: '{{minutes}}:{{seconds}} until your session times out!',
              timedout: 'Your session has expired.',
            }
            return {
              setEnabled: d,
              isEnabled: function () {
                return c.enabled
              },
              original: function (a) {
                return b.isUndefined(a) ? g.original : void (g.original = a)
              },
              store: function (a) {
                ;(a || !g.original) && (g.original = this.value())
              },
              value: function (a) {
                return b.isUndefined(a) ? e[0].title : void (e[0].title = a)
              },
              idleMessage: function (a) {
                return b.isUndefined(a) ? g.idle : void (g.idle = a)
              },
              timedOutMessage: function (a) {
                return b.isUndefined(a) ? g.timedout : void (g.timedout = a)
              },
              setAsIdle: function (b) {
                this.store()
                var c = { totalSeconds: b }
                ;(c.minutes = Math.floor(b / 60)),
                  (c.seconds = a(b - 60 * c.minutes, 2)),
                  this.value(f(this.idleMessage())(c))
              },
              setAsTimedOut: function () {
                this.store(), this.value(this.timedOutMessage())
              },
              restore: function () {
                this.original() && this.value(this.original())
              },
            }
          },
        ]
      })
      .directive('title', [
        'Title',
        function (a) {
          return {
            restrict: 'E',
            link: function (b, c, d) {
              a.isEnabled() &&
                !d.idleDisabled &&
                (a.store(!0),
                b.$on('IdleStart', function () {
                  a.original(c[0].innerText)
                }),
                b.$on('IdleWarn', function (b, c) {
                  a.setAsIdle(c)
                }),
                b.$on('IdleEnd', function () {
                  a.restore()
                }),
                b.$on('IdleTimeout', function () {
                  a.setAsTimedOut()
                }))
            },
          }
        },
      ]),
    b
      .module('ngIdle.localStorage', [])
      .service('IdleStorageAccessor', [
        '$window',
        function (a) {
          return {
            get: function () {
              return a.localStorage
            },
          }
        },
      ])
      .service('IdleLocalStorage', [
        'IdleStorageAccessor',
        function (a) {
          function d() {
            var a = {}
            ;(this.setItem = function (b, c) {
              a[b] = c
            }),
              (this.getItem = function (b) {
                return 'undefined' != typeof a[b] ? a[b] : null
              }),
              (this.removeItem = function (b) {
                a[b] = c
              })
          }
          function e() {
            try {
              var b = a.get()
              return b.setItem('ngIdleStorage', ''), b.removeItem('ngIdleStorage'), b
            } catch (c) {
              return new d()
            }
          }
          var f = e()
          return {
            set: function (a, c) {
              f.setItem('ngIdle.' + a, b.toJson(c))
            },
            get: function (a) {
              return b.fromJson(f.getItem('ngIdle.' + a))
            },
            remove: function (a) {
              f.removeItem('ngIdle.' + a)
            },
            _wrapped: function () {
              return f
            },
          }
        },
      ])
})(window, window.angular)
//# sourceMappingURL=angular-idle.map
/*
 * angular-qrcode
 * (c) 2017 Monospaced http://monospaced.com
 * License: MIT
 */

if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  module.exports = 'monospaced.qrcode'
}

angular.module('monospaced.qrcode', []).directive('qrcode', [
  '$window',
  function ($window) {
    var canvas2D = !!$window.CanvasRenderingContext2D,
      levels = {
        L: 'Low',
        M: 'Medium',
        Q: 'Quartile',
        H: 'High',
      },
      draw = function (context, qr, modules, tile, color) {
        for (var row = 0; row < modules; row++) {
          for (var col = 0; col < modules; col++) {
            var w = Math.ceil((col + 1) * tile) - Math.floor(col * tile),
              h = Math.ceil((row + 1) * tile) - Math.floor(row * tile)

            context.fillStyle = qr.isDark(row, col) ? color.foreground : color.background
            context.fillRect(Math.round(col * tile), Math.round(row * tile), w, h)
          }
        }
      }

    return {
      restrict: 'E',
      template: '<canvas class="qrcode"></canvas>',
      link: function (scope, element, attrs) {
        var domElement = element[0],
          $canvas = element.find('canvas'),
          canvas = $canvas[0],
          context = canvas2D ? canvas.getContext('2d') : null,
          download = 'download' in attrs,
          href = attrs.href,
          link = download || href ? document.createElement('a') : '',
          trim = /^\s+|\s+$/g,
          error,
          version,
          errorCorrectionLevel,
          data,
          size,
          modules,
          tile,
          qr,
          $img,
          color = {
            foreground: '#000',
            background: '#fff',
          },
          setColor = function (value) {
            color.foreground = value || color.foreground
          },
          setBackground = function (value) {
            color.background = value || color.background
          },
          setVersion = function (value) {
            version = Math.max(1, Math.min(parseInt(value, 10), 40)) || 5
          },
          setErrorCorrectionLevel = function (value) {
            errorCorrectionLevel = value in levels ? value : 'M'
          },
          setData = function (value) {
            if (!value) {
              return
            }

            data = value.replace(trim, '')
            qr = qrcode(version, errorCorrectionLevel)
            qr.addData(data)

            try {
              qr.make()
            } catch (e) {
              var newVersion
              if (version >= 40) {
                throw new Error('Data is too long', e)
              }
              newVersion = version + 1
              setVersion(newVersion)
              console.warn('qrcode version is too low and has been incremented to', newVersion)
              setData(value)
              return
            }

            error = false
            modules = qr.getModuleCount()
          },
          setSize = function (value) {
            size = parseInt(value, 10) || modules * 2
            tile = size / modules
            canvas.width = canvas.height = size
          },
          render = function () {
            if (!qr) {
              return
            }

            if (error) {
              if (link) {
                link.removeAttribute('download')
                link.title = ''
                link.href = '#_'
              }
              if (!canvas2D) {
                domElement.innerHTML =
                  '<img src width="' + size + '"' + 'height="' + size + '"' + 'class="qrcode">'
              }
              scope.$emit('qrcode:error', error)
              return
            }

            if (download) {
              domElement.download = 'qrcode.png'
              domElement.title = 'Download QR code'
            }

            if (canvas2D) {
              draw(context, qr, modules, tile, color)

              if (download) {
                domElement.href = canvas.toDataURL('image/png')
                return
              }
            } else {
              domElement.innerHTML = qr.createImgTag(tile, 0)
              $img = element.find('img')
              $img.addClass('qrcode')

              if (download) {
                domElement.href = $img[0].src
                return
              }
            }

            if (href) {
              domElement.href = href
            }
          }

        if (link) {
          link.className = 'qrcode-link'
          $canvas.wrap(link)
          domElement = domElement.firstChild
        }

        setColor(attrs.color)
        setBackground(attrs.background)
        setVersion(attrs.version)
        setErrorCorrectionLevel(attrs.errorCorrectionLevel)
        setSize(attrs.size)

        attrs.$observe('version', function (value) {
          if (!value) {
            return
          }

          setVersion(value)
          setData(data)
          setSize(size)
          render()
        })

        attrs.$observe('errorCorrectionLevel', function (value) {
          if (!value) {
            return
          }

          setErrorCorrectionLevel(value)
          setData(data)
          setSize(size)
          render()
        })

        attrs.$observe('data', function (value) {
          if (!value) {
            return
          }

          setData(value)
          setSize(size)
          render()
        })

        attrs.$observe('size', function (value) {
          if (!value) {
            return
          }

          setSize(value)
          render()
        })

        attrs.$observe('color', function (value) {
          if (!value) {
            return
          }

          setColor(value)
          render()
        })

        attrs.$observe('background', function (value) {
          if (!value) {
            return
          }

          setBackground(value)
          render()
        })

        attrs.$observe('href', function (value) {
          if (!value) {
            return
          }

          href = value
          render()
        })
      },
    }
  },
])

/**
 * @license AngularJS v1.8.2
 * (c) 2010-2020 Google LLC. http://angularjs.org
 * License: MIT
 */
;(function (window, angular) {
  'use strict'

  var $resourceMinErr = angular.$$minErr('$resource')

  // Helper functions and regex to lookup a dotted path on an object
  // stopping at undefined/null.  The path must be composed of ASCII
  // identifiers (just like $parse)
  var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/

  function isValidDottedPath(path) {
    return (
      path != null && path !== '' && path !== 'hasOwnProperty' && MEMBER_NAME_REGEX.test('.' + path)
    )
  }

  function lookupDottedPath(obj, path) {
    if (!isValidDottedPath(path)) {
      throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path)
    }
    var keys = path.split('.')
    for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
      var key = keys[i]
      obj = obj !== null ? obj[key] : undefined
    }
    return obj
  }

  /**
   * Create a shallow copy of an object and clear other fields from the destination
   */
  function shallowClearAndCopy(src, dst) {
    dst = dst || {}

    angular.forEach(dst, function (value, key) {
      delete dst[key]
    })

    for (var key in src) {
      if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key]
      }
    }

    return dst
  }

  /**
   * @ngdoc module
   * @name ngResource
   * @description
   *
   * The `ngResource` module provides interaction support with RESTful services
   * via the $resource service.
   *
   * See {@link ngResource.$resourceProvider} and {@link ngResource.$resource} for usage.
   */

  /**
   * @ngdoc provider
   * @name $resourceProvider
   *
   * @description
   *
   * Use `$resourceProvider` to change the default behavior of the {@link ngResource.$resource}
   * service.
   *
   * ## Dependencies
   * Requires the {@link ngResource } module to be installed.
   *
   */

  /**
 * @ngdoc service
 * @name $resource
 * @requires $http
 * @requires ng.$log
 * @requires $q
 * @requires ng.$timeout
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * By default, trailing slashes will be stripped from the calculated URLs,
 * which can pose problems with server backends that do not expect that
 * behavior.  This can be disabled by configuring the `$resourceProvider` like
 * this:
 *
 * ```js
     app.config(['$resourceProvider', function($resourceProvider) {
       // Don't strip trailing slashes from calculated URLs
       $resourceProvider.defaults.stripTrailingSlashes = false;
     }]);
 * ```
 *
 * @param {string} url A parameterized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If a parameter value is a function, it will be called every time
 *   a param value needs to be obtained for a request (unless the param was overridden). The
 *   function will be passed the current data value as an argument.
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb: 'greet', salutation: 'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@`, then the value for that parameter will be
 *   extracted from the corresponding property on the `data` object (provided when calling actions
 *   with a request body).
 *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of
 *   `someParam` will be `data.someProp`.
 *   Note that the parameter will be ignored, when calling a "GET" action method (i.e. an action
 *   method that does not accept a request body).
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom actions that will be available
 *   in addition to the default set of resource actions (see below). If a custom action has the same
 *   key as a default action (e.g. `save`), then the default action will be *overwritten*, and not
 *   extended.
 *
 *   The declaration should be created in the format of {@link ng.$http#usage $http.config}:
 *
 *       {
 *         action1: {method:?, params:?, isArray:?, headers:?, ...},
 *         action2: {method:?, params:?, isArray:?, headers:?, ...},
 *         ...
 *       }
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be called every time when a param value needs to
 *     be obtained for a request (unless the param was overridden). The function will be passed the
 *     current data value as an argument.
 *   - **`url`** – {string} – Action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     Transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes it using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
 *     Transform function or an array of such functions. The transform function takes the HTTP
 *     response body, headers and status and returns its transformed (typically deserialized)
 *     version.
 *     By default, transformResponse will contain one function that checks if the response looks
 *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,
 *     set `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – A boolean value or object created with
 *     {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
 *     See {@link $http#caching $http Caching} for more information.
 *   - **`timeout`** – `{number}` – Timeout in milliseconds.<br />
 *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are
 *     **not** supported in `$resource`, because the same value would be used for multiple requests.
 *     If you are looking for a way to cancel requests, you should use the `cancellable` option.
 *   - **`cancellable`** – `{boolean}` – If true, the request made by a "non-instance" call will be
 *     cancelled (if not already completed) by calling `$cancelRequest()` on the call's return
 *     value. Calling `$cancelRequest()` for a non-cancellable or an already completed/cancelled
 *     request will have no effect.
 *   - **`withCredentials`** – `{boolean}` – Whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [XMLHttpRequest.withCredentials](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials)
 *     for more information.
 *   - **`responseType`** – `{string}` – See
 *     [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType).
 *   - **`interceptor`** – `{Object=}` – The interceptor object has four optional methods -
 *     `request`, `requestError`, `response`, and `responseError`. See
 *     {@link ng.$http#interceptors $http interceptors} for details. Note that
 *     `request`/`requestError` interceptors are applied before calling `$http`, thus before any
 *     global `$http` interceptors. Also, rejecting or throwing an error inside the `request`
 *     interceptor will result in calling the `responseError` interceptor.
 *     The resource instance or collection is available on the `resource` property of the
 *     `http response` object passed to `response`/`responseError` interceptors.
 *     Keep in mind that the associated promise will be resolved with the value returned by the
 *     response interceptors. Make sure you return an appropriate value and not the `response`
 *     object passed as input. For reference, the default `response` interceptor (which gets applied
 *     if you don't specify a custom one) returns `response.resource`.<br />
 *     See {@link ngResource.$resource#using-interceptors below} for an example of using
 *     interceptors in `$resource`.
 *   - **`hasBody`** – `{boolean}` – If true, then the request will have a body.
 *     If not specified, then only POST, PUT and PATCH requests will have a body. *
 * @param {Object} options Hash with custom settings that should extend the
 *   default `$resourceProvider` behavior.  The supported options are:
 *
 *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
 *   slashes from any calculated URL will be stripped. (Defaults to true.)
 *   - **`cancellable`** – {boolean} – If true, the request made by a "non-instance" call will be
 *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.
 *   This can be overwritten per action. (Defaults to false.)
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   {
 *     'get':    {method: 'GET'},
 *     'save':   {method: 'POST'},
 *     'query':  {method: 'GET', isArray: true},
 *     'remove': {method: 'DELETE'},
 *     'delete': {method: 'DELETE'}
 *   }
 *   ```
 *
 *   Calling these methods invoke {@link ng.$http} with the specified http method, destination and
 *   parameters. When the data is returned from the server then the object is an instance of the
 *   resource class. The actions `save`, `remove` and `delete` are available on it as methods with
 *   the `$` prefix. This allows you to easily perform CRUD operations (create, read, update,
 *   delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId: '@id'});
 *   User.get({userId: 123}).$promise.then(function(user) {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a `$resource` object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - "class" actions without a body: `Resource.action([parameters], [success], [error])`
 *   - "class" actions with a body: `Resource.action([parameters], postData, [success], [error])`
 *   - instance actions: `instance.$action([parameters], [success], [error])`
 *
 *
 *   When calling instance methods, the instance itself is used as the request body (if the action
 *   should have a body). By default, only actions using `POST`, `PUT` or `PATCH` have request
 *   bodies, but you can use the `hasBody` configuration option to specify whether an action
 *   should have a body or not (regardless of its HTTP method).
 *
 *
 *   Success callback is called with (value (Object|Array), responseHeaders (Function),
 *   status (number), statusText (string)) arguments, where `value` is the populated resource
 *   instance or collection object. The error callback is called with (httpResponse) argument.
 *
 *   Class actions return an empty instance (with the additional properties listed below).
 *   Instance actions return a promise for the operation.
 *
 *   The Resource instances and collections have these additional properties:
 *
 *   - `$promise`: The {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in the
 *     {@link ngRoute.$routeProvider `resolve` section of `$routeProvider.when()`} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is rejected with the {@link ng.$http http response} object.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the response interceptor (on success) or responceError interceptor (on failure).
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding. If there is a response/responseError interceptor and it returns a promise,
 *      `$resolved` will wait for that too.
 *
 *   The Resource instances and collections have these additional methods:
 *
 *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or
 *      collection, calling this method will abort the request.
 *
 *   The Resource instances have these additional methods:
 *
 *   - `toJSON`: It returns a simple object without any of the extra properties added as part of
 *     the Resource API. This object can be serialized through {@link angular.toJson} safely
 *     without attaching AngularJS-specific fields. Notice that `JSON.stringify` (and
 *     `angular.toJson`) automatically use this method when serializing a Resource instance
 *     (see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON%28%29_behavior)).
 *
 * @example
 *
 * ### Basic usage
 *
   ```js
     // Define a CreditCard class
     var CreditCard = $resource('/users/:userId/cards/:cardId',
       {userId: 123, cardId: '@id'}, {
         charge: {method: 'POST', params: {charge: true}}
       });

     // We can retrieve a collection from the server
     var cards = CreditCard.query();
         // GET: /users/123/cards
         // server returns: [{id: 456, number: '1234', name: 'Smith'}]

     // Wait for the request to complete
     cards.$promise.then(function() {
       var card = cards[0];

       // Each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);

       // Non-GET methods are mapped onto the instances
       card.name = 'J. Smith';
       card.$save();
           // POST: /users/123/cards/456 {id: 456, number: '1234', name: 'J. Smith'}
           // server returns: {id: 456, number: '1234', name: 'J. Smith'}

       // Our custom method is mapped as well (since it uses POST)
       card.$charge({amount: 9.99});
           // POST: /users/123/cards/456?amount=9.99&charge=true {id: 456, number: '1234', name: 'J. Smith'}
     });

     // We can create an instance as well
     var newCard = new CreditCard({number: '0123'});
     newCard.name = 'Mike Smith';

     var savePromise = newCard.$save();
         // POST: /users/123/cards {number: '0123', name: 'Mike Smith'}
         // server returns: {id: 789, number: '0123', name: 'Mike Smith'}

     savePromise.then(function() {
       // Once the promise is resolved, the created instance
       // is populated with the data returned by the server
       expect(newCard.id).toEqual(789);
     });
   ```
 *
 * The object returned from a call to `$resource` is a resource "class" which has one "static"
 * method for each action in the definition.
 *
 * Calling these methods invokes `$http` on the `url` template with the given HTTP `method`,
 * `params` and `headers`.
 *
 * @example
 *
 * ### Accessing the response
 *
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.
 *
   ```js
     var User = $resource('/users/:userId', {userId: '@id'});
     User.get({userId: 123}).$promise.then(function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets called with
 * the resource instance (populated with the data that came from the server) as well as an `$http`
 * header getter function, the HTTP status code and the response status text. So one could rewrite
 * the above example and get access to HTTP headers as follows:
 *
   ```js
     var User = $resource('/users/:userId', {userId: '@id'});
     User.get({userId: 123}, function(user, getResponseHeaders) {
       user.abc = true;
       user.$save(function(user, putResponseHeaders) {
         // `user` => saved `User` object
         // `putResponseHeaders` => `$http` header getter
       });
     });
   ```
 *
 * @example
 *
 * ### Creating custom actions
 *
 * In this example we create a custom method on our resource to make a PUT request:
 *
   ```js
      var app = angular.module('app', ['ngResource']);

      // Some APIs expect a PUT request in the format URL/object/ID
      // Here we are creating an 'update' method
      app.factory('Notes', ['$resource', function($resource) {
        return $resource('/notes/:id', {id: '@id'}, {
          update: {method: 'PUT'}
        });
      }]);

      // In our controller we get the ID from the URL using `$location`
      app.controller('NotesCtrl', ['$location', 'Notes', function($location, Notes) {
        // First, retrieve the corresponding `Note` object from the server
        // (Assuming a URL of the form `.../notes?id=XYZ`)
        var noteId = $location.search().id;
        var note = Notes.get({id: noteId});

        note.$promise.then(function() {
          note.content = 'Hello, world!';

          // Now call `update` to save the changes on the server
          Notes.update(note);
              // This will PUT /notes/ID with the note object as the request payload

          // Since `update` is a non-GET method, it will also be available on the instance
          // (prefixed with `$`), so we could replace the `Note.update()` call with:
          //note.$update();
        });
      }]);
   ```
 *
 * @example
 *
 * ### Cancelling requests
 *
 * If an action's configuration specifies that it is cancellable, you can cancel the request related
 * to an instance or collection (as long as it is a result of a "non-instance" call):
 *
   ```js
     // ...defining the `Hotel` resource...
     var Hotel = $resource('/api/hotels/:id', {id: '@id'}, {
       // Let's make the `query()` method cancellable
       query: {method: 'get', isArray: true, cancellable: true}
     });

     // ...somewhere in the PlanVacationController...
     ...
     this.onDestinationChanged = function onDestinationChanged(destination) {
       // We don't care about any pending request for hotels
       // in a different destination any more
       if (this.availableHotels) {
         this.availableHotels.$cancelRequest();
       }

       // Let's query for hotels in `destination`
       // (calls: /api/hotels?location=<destination>)
       this.availableHotels = Hotel.query({location: destination});
     };
   ```
 *
 * @example
 *
 * ### Using interceptors
 *
 * You can use interceptors to transform the request or response, perform additional operations, and
 * modify the returned instance/collection. The following example, uses `request` and `response`
 * interceptors to augment the returned instance with additional info:
 *
   ```js
     var Thing = $resource('/api/things/:id', {id: '@id'}, {
       save: {
         method: 'POST',
         interceptor: {
           request: function(config) {
             // Before the request is sent out, store a timestamp on the request config
             config.requestTimestamp = Date.now();
             return config;
           },
           response: function(response) {
             // Get the instance from the response object
             var instance = response.resource;

             // Augment the instance with a custom `saveLatency` property, computed as the time
             // between sending the request and receiving the response.
             instance.saveLatency = Date.now() - response.config.requestTimestamp;

             // Return the instance
             return instance;
           }
         }
       }
     });

     Thing.save({foo: 'bar'}).$promise.then(function(thing) {
       console.log('That thing was saved in ' + thing.saveLatency + 'ms.');
     });
   ```
 *
 */
  angular
    .module('ngResource', ['ng'])
    .info({ angularVersion: '1.8.2' })
    .provider('$resource', function ResourceProvider() {
      var PROTOCOL_AND_IPV6_REGEX = /^https?:\/\/\[[^\]]*][^/]*/

      var provider = this

      /**
       * @ngdoc property
       * @name $resourceProvider#defaults
       * @description
       * Object containing default options used when creating `$resource` instances.
       *
       * The default values satisfy a wide range of usecases, but you may choose to overwrite any of
       * them to further customize your instances. The available properties are:
       *
       * - **stripTrailingSlashes** – `{boolean}` – If true, then the trailing slashes from any
       *   calculated URL will be stripped.<br />
       *   (Defaults to true.)
       * - **cancellable** – `{boolean}` – If true, the request made by a "non-instance" call will be
       *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return
       *   value. For more details, see {@link ngResource.$resource}. This can be overwritten per
       *   resource class or action.<br />
       *   (Defaults to false.)
       * - **actions** - `{Object.<Object>}` - A hash with default actions declarations. Actions are
       *   high-level methods corresponding to RESTful actions/methods on resources. An action may
       *   specify what HTTP method to use, what URL to hit, if the return value will be a single
       *   object or a collection (array) of objects etc. For more details, see
       *   {@link ngResource.$resource}. The actions can also be enhanced or overwritten per resource
       *   class.<br />
       *   The default actions are:
       *   ```js
       *   {
       *     get: {method: 'GET'},
       *     save: {method: 'POST'},
       *     query: {method: 'GET', isArray: true},
       *     remove: {method: 'DELETE'},
       *     delete: {method: 'DELETE'}
       *   }
       *   ```
       *
       * #### Example
       *
       * For example, you can specify a new `update` action that uses the `PUT` HTTP verb:
       *
       * ```js
       *   angular.
       *     module('myApp').
       *     config(['$resourceProvider', function ($resourceProvider) {
       *       $resourceProvider.defaults.actions.update = {
       *         method: 'PUT'
       *       };
       *     }]);
       * ```
       *
       * Or you can even overwrite the whole `actions` list and specify your own:
       *
       * ```js
       *   angular.
       *     module('myApp').
       *     config(['$resourceProvider', function ($resourceProvider) {
       *       $resourceProvider.defaults.actions = {
       *         create: {method: 'POST'},
       *         get:    {method: 'GET'},
       *         getAll: {method: 'GET', isArray:true},
       *         update: {method: 'PUT'},
       *         delete: {method: 'DELETE'}
       *       };
       *     });
       * ```
       *
       */
      this.defaults = {
        // Strip slashes by default
        stripTrailingSlashes: true,

        // Make non-instance requests cancellable (via `$cancelRequest()`)
        cancellable: false,

        // Default actions configuration
        actions: {
          get: { method: 'GET' },
          save: { method: 'POST' },
          query: { method: 'GET', isArray: true },
          remove: { method: 'DELETE' },
          delete: { method: 'DELETE' },
        },
      }

      this.$get = [
        '$http',
        '$log',
        '$q',
        '$timeout',
        function ($http, $log, $q, $timeout) {
          var noop = angular.noop,
            forEach = angular.forEach,
            extend = angular.extend,
            copy = angular.copy,
            isArray = angular.isArray,
            isDefined = angular.isDefined,
            isFunction = angular.isFunction,
            isNumber = angular.isNumber,
            encodeUriQuery = angular.$$encodeUriQuery,
            encodeUriSegment = angular.$$encodeUriSegment

          function Route(template, defaults) {
            this.template = template
            this.defaults = extend({}, provider.defaults, defaults)
            this.urlParams = {}
          }

          Route.prototype = {
            setUrlParams: function (config, params, actionUrl) {
              var self = this,
                url = actionUrl || self.template,
                val,
                encodedVal,
                protocolAndIpv6 = ''

              var urlParams = (self.urlParams = Object.create(null))
              forEach(url.split(/\W/), function (param) {
                if (param === 'hasOwnProperty') {
                  throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.')
                }
                if (
                  !new RegExp('^\\d+$').test(param) &&
                  param &&
                  new RegExp('(^|[^\\\\]):' + param + '(\\W|$)').test(url)
                ) {
                  urlParams[param] = {
                    isQueryParamValue: new RegExp('\\?.*=:' + param + '(?:\\W|$)').test(url),
                  }
                }
              })
              url = url.replace(/\\:/g, ':')
              url = url.replace(PROTOCOL_AND_IPV6_REGEX, function (match) {
                protocolAndIpv6 = match
                return ''
              })

              params = params || {}
              forEach(self.urlParams, function (paramInfo, urlParam) {
                val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam]
                if (isDefined(val) && val !== null) {
                  if (paramInfo.isQueryParamValue) {
                    encodedVal = encodeUriQuery(val, true)
                  } else {
                    encodedVal = encodeUriSegment(val)
                  }
                  url = url.replace(
                    new RegExp(':' + urlParam + '(\\W|$)', 'g'),
                    function (match, p1) {
                      return encodedVal + p1
                    }
                  )
                } else {
                  url = url.replace(
                    new RegExp('(/?):' + urlParam + '(\\W|$)', 'g'),
                    function (match, leadingSlashes, tail) {
                      if (tail.charAt(0) === '/') {
                        return tail
                      } else {
                        return leadingSlashes + tail
                      }
                    }
                  )
                }
              })

              // strip trailing slashes and set the url (unless this behavior is specifically disabled)
              if (self.defaults.stripTrailingSlashes) {
                url = url.replace(/\/+$/, '') || '/'
              }

              // Collapse `/.` if found in the last URL path segment before the query.
              // E.g. `http://url.com/id/.format?q=x` becomes `http://url.com/id.format?q=x`.
              url = url.replace(/\/\.(?=\w+($|\?))/, '.')
              // Replace escaped `/\.` with `/.`.
              // (If `\.` comes from a param value, it will be encoded as `%5C.`.)
              config.url = protocolAndIpv6 + url.replace(/\/(\\|%5C)\./, '/.')

              // set params - delegate param encoding to $http
              forEach(params, function (value, key) {
                if (!self.urlParams[key]) {
                  config.params = config.params || {}
                  config.params[key] = value
                }
              })
            },
          }

          function resourceFactory(url, paramDefaults, actions, options) {
            var route = new Route(url, options)

            actions = extend({}, provider.defaults.actions, actions)

            function extractParams(data, actionParams) {
              var ids = {}
              actionParams = extend({}, paramDefaults, actionParams)
              forEach(actionParams, function (value, key) {
                if (isFunction(value)) {
                  value = value(data)
                }
                ids[key] =
                  value && value.charAt && value.charAt(0) === '@'
                    ? lookupDottedPath(data, value.substr(1))
                    : value
              })
              return ids
            }

            function defaultResponseInterceptor(response) {
              return response.resource
            }

            function Resource(value) {
              shallowClearAndCopy(value || {}, this)
            }

            Resource.prototype.toJSON = function () {
              var data = extend({}, this)
              delete data.$promise
              delete data.$resolved
              delete data.$cancelRequest
              return data
            }

            forEach(actions, function (action, name) {
              var hasBody =
                action.hasBody === true ||
                (action.hasBody !== false && /^(POST|PUT|PATCH)$/i.test(action.method))
              var numericTimeout = action.timeout
              var cancellable = isDefined(action.cancellable)
                ? action.cancellable
                : route.defaults.cancellable

              if (numericTimeout && !isNumber(numericTimeout)) {
                $log.debug(
                  'ngResource:\n' +
                    '  Only numeric values are allowed as `timeout`.\n' +
                    '  Promises are not supported in $resource, because the same value would ' +
                    'be used for multiple requests. If you are looking for a way to cancel ' +
                    'requests, you should use the `cancellable` option.'
                )
                delete action.timeout
                numericTimeout = null
              }

              Resource[name] = function (a1, a2, a3, a4) {
                var params = {},
                  data,
                  onSuccess,
                  onError

                switch (arguments.length) {
                  case 4:
                    onError = a4
                    onSuccess = a3
                  // falls through
                  case 3:
                  case 2:
                    if (isFunction(a2)) {
                      if (isFunction(a1)) {
                        onSuccess = a1
                        onError = a2
                        break
                      }

                      onSuccess = a2
                      onError = a3
                      // falls through
                    } else {
                      params = a1
                      data = a2
                      onSuccess = a3
                      break
                    }
                  // falls through
                  case 1:
                    if (isFunction(a1)) onSuccess = a1
                    else if (hasBody) data = a1
                    else params = a1
                    break
                  case 0:
                    break
                  default:
                    throw $resourceMinErr(
                      'badargs',
                      'Expected up to 4 arguments [params, data, success, error], got {0} arguments',
                      arguments.length
                    )
                }

                var isInstanceCall = this instanceof Resource
                var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data)
                var httpConfig = {}
                var requestInterceptor =
                  (action.interceptor && action.interceptor.request) || undefined
                var requestErrorInterceptor =
                  (action.interceptor && action.interceptor.requestError) || undefined
                var responseInterceptor =
                  (action.interceptor && action.interceptor.response) || defaultResponseInterceptor
                var responseErrorInterceptor =
                  (action.interceptor && action.interceptor.responseError) || $q.reject
                var successCallback = onSuccess
                  ? function (val) {
                      onSuccess(val, response.headers, response.status, response.statusText)
                    }
                  : undefined
                var errorCallback = onError || undefined
                var timeoutDeferred
                var numericTimeoutPromise
                var response

                forEach(action, function (value, key) {
                  switch (key) {
                    default:
                      httpConfig[key] = copy(value)
                      break
                    case 'params':
                    case 'isArray':
                    case 'interceptor':
                    case 'cancellable':
                      break
                  }
                })

                if (!isInstanceCall && cancellable) {
                  timeoutDeferred = $q.defer()
                  httpConfig.timeout = timeoutDeferred.promise

                  if (numericTimeout) {
                    numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout)
                  }
                }

                if (hasBody) httpConfig.data = data
                route.setUrlParams(
                  httpConfig,
                  extend({}, extractParams(data, action.params || {}), params),
                  action.url
                )

                // Start the promise chain
                var promise = $q
                  .resolve(httpConfig)
                  .then(requestInterceptor)
                  .catch(requestErrorInterceptor)
                  .then($http)

                promise = promise.then(
                  function (resp) {
                    var data = resp.data

                    if (data) {
                      // Need to convert action.isArray to boolean in case it is undefined
                      if (isArray(data) !== !!action.isArray) {
                        throw $resourceMinErr(
                          'badcfg',
                          'Error in resource configuration for action `{0}`. Expected response to ' +
                            'contain an {1} but got an {2} (Request: {3} {4})',
                          name,
                          action.isArray ? 'array' : 'object',
                          isArray(data) ? 'array' : 'object',
                          httpConfig.method,
                          httpConfig.url
                        )
                      }
                      if (action.isArray) {
                        value.length = 0
                        forEach(data, function (item) {
                          if (typeof item === 'object') {
                            value.push(new Resource(item))
                          } else {
                            // Valid JSON values may be string literals, and these should not be converted
                            // into objects. These items will not have access to the Resource prototype
                            // methods, but unfortunately there
                            value.push(item)
                          }
                        })
                      } else {
                        var promise = value.$promise // Save the promise
                        shallowClearAndCopy(data, value)
                        value.$promise = promise // Restore the promise
                      }
                    }

                    resp.resource = value
                    response = resp
                    return responseInterceptor(resp)
                  },
                  function (rejectionOrResponse) {
                    rejectionOrResponse.resource = value
                    response = rejectionOrResponse
                    return responseErrorInterceptor(rejectionOrResponse)
                  }
                )

                promise = promise['finally'](function () {
                  value.$resolved = true
                  if (!isInstanceCall && cancellable) {
                    value.$cancelRequest = noop
                    $timeout.cancel(numericTimeoutPromise)
                    timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null
                  }
                })

                // Run the `success`/`error` callbacks, but do not let them affect the returned promise.
                promise.then(successCallback, errorCallback)

                if (!isInstanceCall) {
                  // we are creating instance / collection
                  // - set the initial promise
                  // - return the instance / collection
                  value.$promise = promise
                  value.$resolved = false
                  if (cancellable) value.$cancelRequest = cancelRequest

                  return value
                }

                // instance call
                return promise

                function cancelRequest(value) {
                  promise.catch(noop)
                  if (timeoutDeferred !== null) {
                    timeoutDeferred.resolve(value)
                  }
                }
              }

              Resource.prototype['$' + name] = function (params, success, error) {
                if (isFunction(params)) {
                  error = success
                  success = params
                  params = {}
                }
                var result = Resource[name].call(this, params, this, success, error)
                return result.$promise || result
              }
            })

            return Resource
          }

          return resourceFactory
        },
      ]
    })
})(window, window.angular)

/**
 * @license AngularJS v1.8.2
 * (c) 2010-2020 Google LLC. http://angularjs.org
 * License: MIT
 */
;(function (window, angular) {
  'use strict'

  /* global shallowCopy: true */

  /**
   * Creates a shallow copy of an object, an array or a primitive.
   *
   * Assumes that there are no proto properties for objects.
   */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || []

      for (var i = 0, ii = src.length; i < ii; i++) {
        dst[i] = src[i]
      }
    } else if (isObject(src)) {
      dst = dst || {}

      for (var key in src) {
        if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key]
        }
      }
    }

    return dst || src
  }

  /* global routeToRegExp: true */

  /**
   * @param {string} path - The path to parse. (It is assumed to have query and hash stripped off.)
   * @param {Object} opts - Options.
   * @return {Object} - An object containing an array of path parameter names (`keys`) and a regular
   *     expression (`regexp`) that can be used to identify a matching URL and extract the path
   *     parameter values.
   *
   * @description
   * Parses the given path, extracting path parameter names and a regular expression to match URLs.
   *
   * Originally inspired by `pathRexp` in `visionmedia/express/lib/utils.js`.
   */
  function routeToRegExp(path, opts) {
    var keys = []

    var pattern = path
      .replace(/([().])/g, '\\$1')
      .replace(/(\/)?:(\w+)(\*\?|[?*])?/g, function (_, slash, key, option) {
        var optional = option === '?' || option === '*?'
        var star = option === '*' || option === '*?'
        keys.push({ name: key, optional: optional })
        slash = slash || ''
        return (
          (optional ? '(?:' + slash : slash + '(?:') +
          (star ? '(.+?)' : '([^/]+)') +
          (optional ? '?)?' : ')')
        )
      })
      .replace(/([/$*])/g, '\\$1')

    if (opts.ignoreTrailingSlashes) {
      pattern = pattern.replace(/\/+$/, '') + '/*'
    }

    return {
      keys: keys,
      regexp: new RegExp('^' + pattern + '(?:[?#]|$)', opts.caseInsensitiveMatch ? 'i' : ''),
    }
  }

  /* global routeToRegExp: false */
  /* global shallowCopy: false */

  // `isArray` and `isObject` are necessary for `shallowCopy()` (included via `src/shallowCopy.js`).
  // They are initialized inside the `$RouteProvider`, to ensure `window.angular` is available.
  var isArray
  var isObject
  var isDefined
  var noop

  /**
   * @ngdoc module
   * @name ngRoute
   * @description
   *
   * The `ngRoute` module provides routing and deeplinking services and directives for AngularJS apps.
   *
   * ## Example
   * See {@link ngRoute.$route#examples $route} for an example of configuring and using `ngRoute`.
   *
   */
  /* global -ngRouteModule */
  var ngRouteModule = angular
    .module('ngRoute', [])
    .info({ angularVersion: '1.8.2' })
    .provider('$route', $RouteProvider)
    // Ensure `$route` will be instantiated in time to capture the initial `$locationChangeSuccess`
    // event (unless explicitly disabled). This is necessary in case `ngView` is included in an
    // asynchronously loaded template.
    .run(instantiateRoute)
  var $routeMinErr = angular.$$minErr('ngRoute')
  var isEagerInstantiationEnabled

  /**
   * @ngdoc provider
   * @name $routeProvider
   * @this
   *
   * @description
   *
   * Used for configuring routes.
   *
   * ## Example
   * See {@link ngRoute.$route#examples $route} for an example of configuring and using `ngRoute`.
   *
   * ## Dependencies
   * Requires the {@link ngRoute `ngRoute`} module to be installed.
   */
  function $RouteProvider() {
    isArray = angular.isArray
    isObject = angular.isObject
    isDefined = angular.isDefined
    noop = angular.noop

    function inherit(parent, extra) {
      return angular.extend(Object.create(parent), extra)
    }

    var routes = {}

    /**
     * @ngdoc method
     * @name $routeProvider#when
     *
     * @param {string} path Route path (matched against `$location.path`). If `$location.path`
     *    contains redundant trailing slash or is missing one, the route will still match and the
     *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
     *    route definition.
     *
     *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
     *        to the next slash are matched and stored in `$routeParams` under the given `name`
     *        when the route matches.
     *    * `path` can contain named groups starting with a colon and ending with a star:
     *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
     *        when the route matches.
     *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
     *
     *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
     *    `/color/brown/largecode/code/with/slashes/edit` and extract:
     *
     *    * `color: brown`
     *    * `largecode: code/with/slashes`.
     *
     *
     * @param {Object} route Mapping information to be assigned to `$route.current` on route
     *    match.
     *
     *    Object properties:
     *
     *    - `controller` – `{(string|Function)=}` – Controller fn that should be associated with
     *      newly created scope or the name of a {@link angular.Module#controller registered
     *      controller} if passed as a string.
     *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
     *      If present, the controller will be published to scope under the `controllerAs` name.
     *    - `template` – `{(string|Function)=}` – html template as a string or a function that
     *      returns an html template as a string which should be used by {@link
     *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
     *      This property takes precedence over `templateUrl`.
     *
     *      If `template` is a function, it will be called with the following parameters:
     *
     *      - `{Array.<Object>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route
     *
     *      One of `template` or `templateUrl` is required.
     *
     *    - `templateUrl` – `{(string|Function)=}` – path or function that returns a path to an html
     *      template that should be used by {@link ngRoute.directive:ngView ngView}.
     *
     *      If `templateUrl` is a function, it will be called with the following parameters:
     *
     *      - `{Array.<Object>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route
     *
     *      One of `templateUrl` or `template` is required.
     *
     *    - `resolve` - `{Object.<string, Function>=}` - An optional map of dependencies which should
     *      be injected into the controller. If any of these dependencies are promises, the router
     *      will wait for them all to be resolved or one to be rejected before the controller is
     *      instantiated.
     *      If all the promises are resolved successfully, the values of the resolved promises are
     *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
     *      fired. If any of the promises are rejected the
     *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
     *      For easier access to the resolved dependencies from the template, the `resolve` map will
     *      be available on the scope of the route, under `$resolve` (by default) or a custom name
     *      specified by the `resolveAs` property (see below). This can be particularly useful, when
     *      working with {@link angular.Module#component components} as route templates.<br />
     *      <div class="alert alert-warning">
     *        **Note:** If your scope already contains a property with this name, it will be hidden
     *        or overwritten. Make sure, you specify an appropriate name for this property, that
     *        does not collide with other properties on the scope.
     *      </div>
     *      The map object is:
     *
     *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
     *      - `factory` - `{string|Function}`: If `string` then it is an alias for a service.
     *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
     *        and the return value is treated as the dependency. If the result is a promise, it is
     *        resolved before its value is injected into the controller. Be aware that
     *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
     *        functions.  Use `$route.current.params` to access the new route parameters, instead.
     *
     *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
     *      the scope of the route. If omitted, defaults to `$resolve`.
     *
     *    - `redirectTo` – `{(string|Function)=}` – value to update
     *      {@link ng.$location $location} path with and trigger route redirection.
     *
     *      If `redirectTo` is a function, it will be called with the following parameters:
     *
     *      - `{Object.<string>}` - route parameters extracted from the current
     *        `$location.path()` by applying the current route templateUrl.
     *      - `{string}` - current `$location.path()`
     *      - `{Object}` - current `$location.search()`
     *
     *      The custom `redirectTo` function is expected to return a string which will be used
     *      to update `$location.url()`. If the function throws an error, no further processing will
     *      take place and the {@link ngRoute.$route#$routeChangeError $routeChangeError} event will
     *      be fired.
     *
     *      Routes that specify `redirectTo` will not have their controllers, template functions
     *      or resolves called, the `$location` will be changed to the redirect url and route
     *      processing will stop. The exception to this is if the `redirectTo` is a function that
     *      returns `undefined`. In this case the route transition occurs as though there was no
     *      redirection.
     *
     *    - `resolveRedirectTo` – `{Function=}` – a function that will (eventually) return the value
     *      to update {@link ng.$location $location} URL with and trigger route redirection. In
     *      contrast to `redirectTo`, dependencies can be injected into `resolveRedirectTo` and the
     *      return value can be either a string or a promise that will be resolved to a string.
     *
     *      Similar to `redirectTo`, if the return value is `undefined` (or a promise that gets
     *      resolved to `undefined`), no redirection takes place and the route transition occurs as
     *      though there was no redirection.
     *
     *      If the function throws an error or the returned promise gets rejected, no further
     *      processing will take place and the
     *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event will be fired.
     *
     *      `redirectTo` takes precedence over `resolveRedirectTo`, so specifying both on the same
     *      route definition, will cause the latter to be ignored.
     *
     *    - `[reloadOnUrl=true]` - `{boolean=}` - reload route when any part of the URL changes
     *      (including the path) even if the new URL maps to the same route.
     *
     *      If the option is set to `false` and the URL in the browser changes, but the new URL maps
     *      to the same route, then a `$routeUpdate` event is broadcasted on the root scope (without
     *      reloading the route).
     *
     *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
     *      or `$location.hash()` changes.
     *
     *      If the option is set to `false` and the URL in the browser changes, then a `$routeUpdate`
     *      event is broadcasted on the root scope (without reloading the route).
     *
     *      <div class="alert alert-warning">
     *        **Note:** This option has no effect if `reloadOnUrl` is set to `false`.
     *      </div>
     *
     *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
     *
     *      If the option is set to `true`, then the particular route can be matched without being
     *      case sensitive
     *
     * @returns {Object} self
     *
     * @description
     * Adds a new route definition to the `$route` service.
     */
    this.when = function (path, route) {
      //copy original route object to preserve params inherited from proto chain
      var routeCopy = shallowCopy(route)
      if (angular.isUndefined(routeCopy.reloadOnUrl)) {
        routeCopy.reloadOnUrl = true
      }
      if (angular.isUndefined(routeCopy.reloadOnSearch)) {
        routeCopy.reloadOnSearch = true
      }
      if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
        routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch
      }
      routes[path] = angular.extend(
        routeCopy,
        { originalPath: path },
        path && routeToRegExp(path, routeCopy)
      )

      // create redirection for trailing slashes
      if (path) {
        var redirectPath =
          path[path.length - 1] === '/' ? path.substr(0, path.length - 1) : path + '/'

        routes[redirectPath] = angular.extend(
          { originalPath: path, redirectTo: path },
          routeToRegExp(redirectPath, routeCopy)
        )
      }

      return this
    }

    /**
     * @ngdoc property
     * @name $routeProvider#caseInsensitiveMatch
     * @description
     *
     * A boolean property indicating if routes defined
     * using this provider should be matched using a case insensitive
     * algorithm. Defaults to `false`.
     */
    this.caseInsensitiveMatch = false

    /**
     * @ngdoc method
     * @name $routeProvider#otherwise
     *
     * @description
     * Sets route definition that will be used on route change when no other route definition
     * is matched.
     *
     * @param {Object|string} params Mapping information to be assigned to `$route.current`.
     * If called with a string, the value maps to `redirectTo`.
     * @returns {Object} self
     */
    this.otherwise = function (params) {
      if (typeof params === 'string') {
        params = { redirectTo: params }
      }
      this.when(null, params)
      return this
    }

    /**
     * @ngdoc method
     * @name $routeProvider#eagerInstantiationEnabled
     * @kind function
     *
     * @description
     * Call this method as a setter to enable/disable eager instantiation of the
     * {@link ngRoute.$route $route} service upon application bootstrap. You can also call it as a
     * getter (i.e. without any arguments) to get the current value of the
     * `eagerInstantiationEnabled` flag.
     *
     * Instantiating `$route` early is necessary for capturing the initial
     * {@link ng.$location#$locationChangeStart $locationChangeStart} event and navigating to the
     * appropriate route. Usually, `$route` is instantiated in time by the
     * {@link ngRoute.ngView ngView} directive. Yet, in cases where `ngView` is included in an
     * asynchronously loaded template (e.g. in another directive's template), the directive factory
     * might not be called soon enough for `$route` to be instantiated _before_ the initial
     * `$locationChangeSuccess` event is fired. Eager instantiation ensures that `$route` is always
     * instantiated in time, regardless of when `ngView` will be loaded.
     *
     * The default value is true.
     *
     * **Note**:<br />
     * You may want to disable the default behavior when unit-testing modules that depend on
     * `ngRoute`, in order to avoid an unexpected request for the default route's template.
     *
     * @param {boolean=} enabled - If provided, update the internal `eagerInstantiationEnabled` flag.
     *
     * @returns {*} The current value of the `eagerInstantiationEnabled` flag if used as a getter or
     *     itself (for chaining) if used as a setter.
     */
    isEagerInstantiationEnabled = true
    this.eagerInstantiationEnabled = function eagerInstantiationEnabled(enabled) {
      if (isDefined(enabled)) {
        isEagerInstantiationEnabled = enabled
        return this
      }

      return isEagerInstantiationEnabled
    }

    this.$get = [
      '$rootScope',
      '$location',
      '$routeParams',
      '$q',
      '$injector',
      '$templateRequest',
      '$sce',
      '$browser',
      function (
        $rootScope,
        $location,
        $routeParams,
        $q,
        $injector,
        $templateRequest,
        $sce,
        $browser
      ) {
        /**
         * @ngdoc service
         * @name $route
         * @requires $location
         * @requires $routeParams
         *
         * @property {Object} current Reference to the current route definition.
         * The route definition contains:
         *
         *   - `controller`: The controller constructor as defined in the route definition.
         *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
         *     controller instantiation. The `locals` contain
         *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
         *
         *     - `$scope` - The current route scope.
         *     - `$template` - The current route template HTML.
         *
         *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
         *     the property name, using `resolveAs` in the route definition. See
         *     {@link ngRoute.$routeProvider $routeProvider} for more info.
         *
         * @property {Object} routes Object with all route configuration Objects as its properties.
         *
         * @description
         * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
         * It watches `$location.url()` and tries to map the path to an existing route definition.
         *
         * Requires the {@link ngRoute `ngRoute`} module to be installed.
         *
         * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
         *
         * The `$route` service is typically used in conjunction with the
         * {@link ngRoute.directive:ngView `ngView`} directive and the
         * {@link ngRoute.$routeParams `$routeParams`} service.
         *
         * @example
         * This example shows how changing the URL hash causes the `$route` to match a route against the
         * URL, and the `ngView` pulls in the partial.
         *
         * <example name="$route-service" module="ngRouteExample"
         *          deps="angular-route.js" fixBase="true">
         *   <file name="index.html">
         *     <div ng-controller="MainController">
         *       Choose:
         *       <a href="Book/Moby">Moby</a> |
         *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
         *       <a href="Book/Gatsby">Gatsby</a> |
         *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
         *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
         *
         *       <div ng-view></div>
         *
         *       <hr />
         *
         *       <pre>$location.path() = {{$location.path()}}</pre>
         *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
         *       <pre>$route.current.params = {{$route.current.params}}</pre>
         *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
         *       <pre>$routeParams = {{$routeParams}}</pre>
         *     </div>
         *   </file>
         *
         *   <file name="book.html">
         *     controller: {{name}}<br />
         *     Book Id: {{params.bookId}}<br />
         *   </file>
         *
         *   <file name="chapter.html">
         *     controller: {{name}}<br />
         *     Book Id: {{params.bookId}}<br />
         *     Chapter Id: {{params.chapterId}}
         *   </file>
         *
         *   <file name="script.js">
         *     angular.module('ngRouteExample', ['ngRoute'])
         *
         *      .controller('MainController', function($scope, $route, $routeParams, $location) {
         *          $scope.$route = $route;
         *          $scope.$location = $location;
         *          $scope.$routeParams = $routeParams;
         *      })
         *
         *      .controller('BookController', function($scope, $routeParams) {
         *          $scope.name = 'BookController';
         *          $scope.params = $routeParams;
         *      })
         *
         *      .controller('ChapterController', function($scope, $routeParams) {
         *          $scope.name = 'ChapterController';
         *          $scope.params = $routeParams;
         *      })
         *
         *     .config(function($routeProvider, $locationProvider) {
         *       $routeProvider
         *        .when('/Book/:bookId', {
         *         templateUrl: 'book.html',
         *         controller: 'BookController',
         *         resolve: {
         *           // I will cause a 1 second delay
         *           delay: function($q, $timeout) {
         *             var delay = $q.defer();
         *             $timeout(delay.resolve, 1000);
         *             return delay.promise;
         *           }
         *         }
         *       })
         *       .when('/Book/:bookId/ch/:chapterId', {
         *         templateUrl: 'chapter.html',
         *         controller: 'ChapterController'
         *       });
         *
         *       // configure html5 to get links working on jsfiddle
         *       $locationProvider.html5Mode(true);
         *     });
         *
         *   </file>
         *
         *   <file name="protractor.js" type="protractor">
         *     it('should load and compile correct template', function() {
         *       element(by.linkText('Moby: Ch1')).click();
         *       var content = element(by.css('[ng-view]')).getText();
         *       expect(content).toMatch(/controller: ChapterController/);
         *       expect(content).toMatch(/Book Id: Moby/);
         *       expect(content).toMatch(/Chapter Id: 1/);
         *
         *       element(by.partialLinkText('Scarlet')).click();
         *
         *       content = element(by.css('[ng-view]')).getText();
         *       expect(content).toMatch(/controller: BookController/);
         *       expect(content).toMatch(/Book Id: Scarlet/);
         *     });
         *   </file>
         * </example>
         */

        /**
         * @ngdoc event
         * @name $route#$routeChangeStart
         * @eventType broadcast on root scope
         * @description
         * Broadcasted before a route change. At this  point the route services starts
         * resolving all of the dependencies needed for the route change to occur.
         * Typically this involves fetching the view template as well as any dependencies
         * defined in `resolve` route property. Once  all of the dependencies are resolved
         * `$routeChangeSuccess` is fired.
         *
         * The route change (and the `$location` change that triggered it) can be prevented
         * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
         * for more details about event object.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {Route} next Future route information.
         * @param {Route} current Current route information.
         */

        /**
         * @ngdoc event
         * @name $route#$routeChangeSuccess
         * @eventType broadcast on root scope
         * @description
         * Broadcasted after a route change has happened successfully.
         * The `resolve` dependencies are now available in the `current.locals` property.
         *
         * {@link ngRoute.directive:ngView ngView} listens for the directive
         * to instantiate the controller and render the view.
         *
         * @param {Object} angularEvent Synthetic event object.
         * @param {Route} current Current route information.
         * @param {Route|Undefined} previous Previous route information, or undefined if current is
         * first route entered.
         */

        /**
         * @ngdoc event
         * @name $route#$routeChangeError
         * @eventType broadcast on root scope
         * @description
         * Broadcasted if a redirection function fails or any redirection or resolve promises are
         * rejected.
         *
         * @param {Object} angularEvent Synthetic event object
         * @param {Route} current Current route information.
         * @param {Route} previous Previous route information.
         * @param {Route} rejection The thrown error or the rejection reason of the promise. Usually
         * the rejection reason is the error that caused the promise to get rejected.
         */

        /**
         * @ngdoc event
         * @name $route#$routeUpdate
         * @eventType broadcast on root scope
         * @description
         * Broadcasted if the same instance of a route (including template, controller instance,
         * resolved dependencies, etc.) is being reused. This can happen if either `reloadOnSearch` or
         * `reloadOnUrl` has been set to `false`.
         *
         * @param {Object} angularEvent Synthetic event object
         * @param {Route} current Current/previous route information.
         */

        var forceReload = false,
          preparedRoute,
          preparedRouteIsUpdateOnly,
          $route = {
            routes: routes,

            /**
             * @ngdoc method
             * @name $route#reload
             *
             * @description
             * Causes `$route` service to reload the current route even if
             * {@link ng.$location $location} hasn't changed.
             *
             * As a result of that, {@link ngRoute.directive:ngView ngView}
             * creates new scope and reinstantiates the controller.
             */
            reload: function () {
              forceReload = true

              var fakeLocationEvent = {
                defaultPrevented: false,
                preventDefault: function fakePreventDefault() {
                  this.defaultPrevented = true
                  forceReload = false
                },
              }

              $rootScope.$evalAsync(function () {
                prepareRoute(fakeLocationEvent)
                if (!fakeLocationEvent.defaultPrevented) commitRoute()
              })
            },

            /**
             * @ngdoc method
             * @name $route#updateParams
             *
             * @description
             * Causes `$route` service to update the current URL, replacing
             * current route parameters with those specified in `newParams`.
             * Provided property names that match the route's path segment
             * definitions will be interpolated into the location's path, while
             * remaining properties will be treated as query params.
             *
             * @param {!Object<string, string>} newParams mapping of URL parameter names to values
             */
            updateParams: function (newParams) {
              if (this.current && this.current.$$route) {
                newParams = angular.extend({}, this.current.params, newParams)
                $location.path(interpolate(this.current.$$route.originalPath, newParams))
                // interpolate modifies newParams, only query params are left
                $location.search(newParams)
              } else {
                throw $routeMinErr('norout', 'Tried updating route with no current route')
              }
            },
          }

        $rootScope.$on('$locationChangeStart', prepareRoute)
        $rootScope.$on('$locationChangeSuccess', commitRoute)

        return $route

        /////////////////////////////////////////////////////

        /**
         * @param on {string} current url
         * @param route {Object} route regexp to match the url against
         * @return {?Object}
         *
         * @description
         * Check if the route matches the current url.
         *
         * Inspired by match in
         * visionmedia/express/lib/router/router.js.
         */
        function switchRouteMatcher(on, route) {
          var keys = route.keys,
            params = {}

          if (!route.regexp) return null

          var m = route.regexp.exec(on)
          if (!m) return null

          for (var i = 1, len = m.length; i < len; ++i) {
            var key = keys[i - 1]

            var val = m[i]

            if (key && val) {
              params[key.name] = val
            }
          }
          return params
        }

        function prepareRoute($locationEvent) {
          var lastRoute = $route.current

          preparedRoute = parseRoute()
          preparedRouteIsUpdateOnly = isNavigationUpdateOnly(preparedRoute, lastRoute)

          if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
            if (
              $rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented
            ) {
              if ($locationEvent) {
                $locationEvent.preventDefault()
              }
            }
          }
        }

        function commitRoute() {
          var lastRoute = $route.current
          var nextRoute = preparedRoute

          if (preparedRouteIsUpdateOnly) {
            lastRoute.params = nextRoute.params
            angular.copy(lastRoute.params, $routeParams)
            $rootScope.$broadcast('$routeUpdate', lastRoute)
          } else if (nextRoute || lastRoute) {
            forceReload = false
            $route.current = nextRoute

            var nextRoutePromise = $q.resolve(nextRoute)

            $browser.$$incOutstandingRequestCount('$route')

            nextRoutePromise
              .then(getRedirectionData)
              .then(handlePossibleRedirection)
              .then(function (keepProcessingRoute) {
                return (
                  keepProcessingRoute &&
                  nextRoutePromise.then(resolveLocals).then(function (locals) {
                    // after route change
                    if (nextRoute === $route.current) {
                      if (nextRoute) {
                        nextRoute.locals = locals
                        angular.copy(nextRoute.params, $routeParams)
                      }
                      $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute)
                    }
                  })
                )
              })
              .catch(function (error) {
                if (nextRoute === $route.current) {
                  $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error)
                }
              })
              .finally(function () {
                // Because `commitRoute()` is called from a `$rootScope.$evalAsync` block (see
                // `$locationWatch`), this `$$completeOutstandingRequest()` call will not cause
                // `outstandingRequestCount` to hit zero.  This is important in case we are redirecting
                // to a new route which also requires some asynchronous work.

                $browser.$$completeOutstandingRequest(noop, '$route')
              })
          }
        }

        function getRedirectionData(route) {
          var data = {
            route: route,
            hasRedirection: false,
          }

          if (route) {
            if (route.redirectTo) {
              if (angular.isString(route.redirectTo)) {
                data.path = interpolate(route.redirectTo, route.params)
                data.search = route.params
                data.hasRedirection = true
              } else {
                var oldPath = $location.path()
                var oldSearch = $location.search()
                var newUrl = route.redirectTo(route.pathParams, oldPath, oldSearch)

                if (angular.isDefined(newUrl)) {
                  data.url = newUrl
                  data.hasRedirection = true
                }
              }
            } else if (route.resolveRedirectTo) {
              return $q.resolve($injector.invoke(route.resolveRedirectTo)).then(function (newUrl) {
                if (angular.isDefined(newUrl)) {
                  data.url = newUrl
                  data.hasRedirection = true
                }

                return data
              })
            }
          }

          return data
        }

        function handlePossibleRedirection(data) {
          var keepProcessingRoute = true

          if (data.route !== $route.current) {
            keepProcessingRoute = false
          } else if (data.hasRedirection) {
            var oldUrl = $location.url()
            var newUrl = data.url

            if (newUrl) {
              $location.url(newUrl).replace()
            } else {
              newUrl = $location.path(data.path).search(data.search).replace().url()
            }

            if (newUrl !== oldUrl) {
              // Exit out and don't process current next value,
              // wait for next location change from redirect
              keepProcessingRoute = false
            }
          }

          return keepProcessingRoute
        }

        function resolveLocals(route) {
          if (route) {
            var locals = angular.extend({}, route.resolve)
            angular.forEach(locals, function (value, key) {
              locals[key] = angular.isString(value)
                ? $injector.get(value)
                : $injector.invoke(value, null, null, key)
            })
            var template = getTemplateFor(route)
            if (angular.isDefined(template)) {
              locals['$template'] = template
            }
            return $q.all(locals)
          }
        }

        function getTemplateFor(route) {
          var template, templateUrl
          if (angular.isDefined((template = route.template))) {
            if (angular.isFunction(template)) {
              template = template(route.params)
            }
          } else if (angular.isDefined((templateUrl = route.templateUrl))) {
            if (angular.isFunction(templateUrl)) {
              templateUrl = templateUrl(route.params)
            }
            if (angular.isDefined(templateUrl)) {
              route.loadedTemplateUrl = $sce.valueOf(templateUrl)
              template = $templateRequest(templateUrl)
            }
          }
          return template
        }

        /**
         * @returns {Object} the current active route, by matching it against the URL
         */
        function parseRoute() {
          // Match a route
          var params, match
          angular.forEach(routes, function (route, path) {
            if (!match && (params = switchRouteMatcher($location.path(), route))) {
              match = inherit(route, {
                params: angular.extend({}, $location.search(), params),
                pathParams: params,
              })
              match.$$route = route
            }
          })
          // No route matched; fallback to "otherwise" route
          return match || (routes[null] && inherit(routes[null], { params: {}, pathParams: {} }))
        }

        /**
         * @param {Object} newRoute - The new route configuration (as returned by `parseRoute()`).
         * @param {Object} oldRoute - The previous route configuration (as returned by `parseRoute()`).
         * @returns {boolean} Whether this is an "update-only" navigation, i.e. the URL maps to the same
         *                    route and it can be reused (based on the config and the type of change).
         */
        function isNavigationUpdateOnly(newRoute, oldRoute) {
          // IF this is not a forced reload
          return (
            !forceReload &&
            // AND both `newRoute`/`oldRoute` are defined
            newRoute &&
            oldRoute &&
            // AND they map to the same Route Definition Object
            newRoute.$$route === oldRoute.$$route &&
            // AND `reloadOnUrl` is disabled
            (!newRoute.reloadOnUrl ||
              // OR `reloadOnSearch` is disabled
              (!newRoute.reloadOnSearch &&
                // AND both routes have the same path params
                angular.equals(newRoute.pathParams, oldRoute.pathParams)))
          )
        }

        /**
         * @returns {string} interpolation of the redirect path with the parameters
         */
        function interpolate(string, params) {
          var result = []
          angular.forEach((string || '').split(':'), function (segment, i) {
            if (i === 0) {
              result.push(segment)
            } else {
              var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/)
              var key = segmentMatch[1]
              result.push(params[key])
              result.push(segmentMatch[2] || '')
              delete params[key]
            }
          })
          return result.join('')
        }
      },
    ]
  }

  instantiateRoute.$inject = ['$injector']
  function instantiateRoute($injector) {
    if (isEagerInstantiationEnabled) {
      // Instantiate `$route`
      $injector.get('$route')
    }
  }

  ngRouteModule.provider('$routeParams', $RouteParamsProvider)

  /**
   * @ngdoc service
   * @name $routeParams
   * @requires $route
   * @this
   *
   * @description
   * The `$routeParams` service allows you to retrieve the current set of route parameters.
   *
   * Requires the {@link ngRoute `ngRoute`} module to be installed.
   *
   * The route parameters are a combination of {@link ng.$location `$location`}'s
   * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
   * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
   *
   * In case of parameter name collision, `path` params take precedence over `search` params.
   *
   * The service guarantees that the identity of the `$routeParams` object will remain unchanged
   * (but its properties will likely change) even when a route change occurs.
   *
   * Note that the `$routeParams` are only updated *after* a route change completes successfully.
   * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
   * Instead you can use `$route.current.params` to access the new route's parameters.
   *
   * @example
   * ```js
   *  // Given:
   *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
   *  // Route: /Chapter/:chapterId/Section/:sectionId
   *  //
   *  // Then
   *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
   * ```
   */
  function $RouteParamsProvider() {
    this.$get = function () {
      return {}
    }
  }

  ngRouteModule.directive('ngView', ngViewFactory)
  ngRouteModule.directive('ngView', ngViewFillContentFactory)

  /**
 * @ngdoc directive
 * @name ngView
 * @restrict ECA
 *
 * @description
 * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
 * including the rendered template of the current route into the main layout (`index.html`) file.
 * Every time the current route changes, the included view changes with it according to the
 * configuration of the `$route` service.
 *
 * Requires the {@link ngRoute `ngRoute`} module to be installed.
 *
 * @animations
 * | Animation                        | Occurs                              |
 * |----------------------------------|-------------------------------------|
 * | {@link ng.$animate#enter enter}  | when the new element is inserted to the DOM |
 * | {@link ng.$animate#leave leave}  | when the old element is removed from to the DOM  |
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 * @param {string=} onload Expression to evaluate whenever the view updates.
 *
 * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the view is updated.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
 *                    as an expression yields a truthy value.
 * @example
    <example name="ngView-directive" module="ngViewExample"
             deps="angular-route.js;angular-animate.js"
             animations="true" fixBase="true">
      <file name="index.html">
        <div ng-controller="MainCtrl as main">
          Choose:
          <a href="Book/Moby">Moby</a> |
          <a href="Book/Moby/ch/1">Moby: Ch1</a> |
          <a href="Book/Gatsby">Gatsby</a> |
          <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
          <a href="Book/Scarlet">Scarlet Letter</a><br/>

          <div class="view-animate-container">
            <div ng-view class="view-animate"></div>
          </div>
          <hr />

          <pre>$location.path() = {{main.$location.path()}}</pre>
          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
          <pre>$route.current.params = {{main.$route.current.params}}</pre>
          <pre>$routeParams = {{main.$routeParams}}</pre>
        </div>
      </file>

      <file name="book.html">
        <div>
          controller: {{book.name}}<br />
          Book Id: {{book.params.bookId}}<br />
        </div>
      </file>

      <file name="chapter.html">
        <div>
          controller: {{chapter.name}}<br />
          Book Id: {{chapter.params.bookId}}<br />
          Chapter Id: {{chapter.params.chapterId}}
        </div>
      </file>

      <file name="animations.css">
        .view-animate-container {
          position:relative;
          height:100px!important;
          background:white;
          border:1px solid black;
          height:40px;
          overflow:hidden;
        }

        .view-animate {
          padding:10px;
        }

        .view-animate.ng-enter, .view-animate.ng-leave {
          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

          display:block;
          width:100%;
          border-left:1px solid black;

          position:absolute;
          top:0;
          left:0;
          right:0;
          bottom:0;
          padding:10px;
        }

        .view-animate.ng-enter {
          left:100%;
        }
        .view-animate.ng-enter.ng-enter-active {
          left:0;
        }
        .view-animate.ng-leave.ng-leave-active {
          left:-100%;
        }
      </file>

      <file name="script.js">
        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
          .config(['$routeProvider', '$locationProvider',
            function($routeProvider, $locationProvider) {
              $routeProvider
                .when('/Book/:bookId', {
                  templateUrl: 'book.html',
                  controller: 'BookCtrl',
                  controllerAs: 'book'
                })
                .when('/Book/:bookId/ch/:chapterId', {
                  templateUrl: 'chapter.html',
                  controller: 'ChapterCtrl',
                  controllerAs: 'chapter'
                });

              $locationProvider.html5Mode(true);
          }])
          .controller('MainCtrl', ['$route', '$routeParams', '$location',
            function MainCtrl($route, $routeParams, $location) {
              this.$route = $route;
              this.$location = $location;
              this.$routeParams = $routeParams;
          }])
          .controller('BookCtrl', ['$routeParams', function BookCtrl($routeParams) {
            this.name = 'BookCtrl';
            this.params = $routeParams;
          }])
          .controller('ChapterCtrl', ['$routeParams', function ChapterCtrl($routeParams) {
            this.name = 'ChapterCtrl';
            this.params = $routeParams;
          }]);

      </file>

      <file name="protractor.js" type="protractor">
        it('should load and compile correct template', function() {
          element(by.linkText('Moby: Ch1')).click();
          var content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller: ChapterCtrl/);
          expect(content).toMatch(/Book Id: Moby/);
          expect(content).toMatch(/Chapter Id: 1/);

          element(by.partialLinkText('Scarlet')).click();

          content = element(by.css('[ng-view]')).getText();
          expect(content).toMatch(/controller: BookCtrl/);
          expect(content).toMatch(/Book Id: Scarlet/);
        });
      </file>
    </example>
 */

  /**
   * @ngdoc event
   * @name ngView#$viewContentLoaded
   * @eventType emit on the current ngView scope
   * @description
   * Emitted every time the ngView content is reloaded.
   */
  ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate']
  function ngViewFactory($route, $anchorScroll, $animate) {
    return {
      restrict: 'ECA',
      terminal: true,
      priority: 400,
      transclude: 'element',
      link: function (scope, $element, attr, ctrl, $transclude) {
        var currentScope,
          currentElement,
          previousLeaveAnimation,
          autoScrollExp = attr.autoscroll,
          onloadExp = attr.onload || ''

        scope.$on('$routeChangeSuccess', update)
        update()

        function cleanupLastView() {
          if (previousLeaveAnimation) {
            $animate.cancel(previousLeaveAnimation)
            previousLeaveAnimation = null
          }

          if (currentScope) {
            currentScope.$destroy()
            currentScope = null
          }
          if (currentElement) {
            previousLeaveAnimation = $animate.leave(currentElement)
            previousLeaveAnimation.done(function (response) {
              if (response !== false) previousLeaveAnimation = null
            })
            currentElement = null
          }
        }

        function update() {
          var locals = $route.current && $route.current.locals,
            template = locals && locals.$template

          if (angular.isDefined(template)) {
            var newScope = scope.$new()
            var current = $route.current

            // Note: This will also link all children of ng-view that were contained in the original
            // html. If that content contains controllers, ... they could pollute/change the scope.
            // However, using ng-view on an element with additional content does not make sense...
            // Note: We can't remove them in the cloneAttchFn of $transclude as that
            // function is called before linking the content, which would apply child
            // directives to non existing elements.
            var clone = $transclude(newScope, function (clone) {
              $animate
                .enter(clone, null, currentElement || $element)
                .done(function onNgViewEnter(response) {
                  if (
                    response !== false &&
                    angular.isDefined(autoScrollExp) &&
                    (!autoScrollExp || scope.$eval(autoScrollExp))
                  ) {
                    $anchorScroll()
                  }
                })
              cleanupLastView()
            })

            currentElement = clone
            currentScope = current.scope = newScope
            currentScope.$emit('$viewContentLoaded')
            currentScope.$eval(onloadExp)
          } else {
            cleanupLastView()
          }
        }
      },
    }
  }

  // This directive is called during the $transclude call of the first `ngView` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngView
  // is called.
  ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route']
  function ngViewFillContentFactory($compile, $controller, $route) {
    return {
      restrict: 'ECA',
      priority: -400,
      link: function (scope, $element) {
        var current = $route.current,
          locals = current.locals

        $element.html(locals.$template)

        var link = $compile($element.contents())

        if (current.controller) {
          locals.$scope = scope
          var controller = $controller(current.controller, locals)
          if (current.controllerAs) {
            scope[current.controllerAs] = controller
          }
          $element.data('$ngControllerController', controller)
          $element.children().data('$ngControllerController', controller)
        }
        scope[current.resolveAs || '$resolve'] = locals

        link(scope)
      },
    }
  }
})(window, window.angular)

/**
 * @license AngularJS v1.8.2
 * (c) 2010-2020 Google LLC. http://angularjs.org
 * License: MIT
 */
;(function (window, angular) {
  'use strict'

  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   *     Any commits to this file should be reviewed with security in mind.  *
   *   Changes to this file can potentially create security vulnerabilities. *
   *          An approval from 2 Core members with history of modifying      *
   *                         this file is required.                          *
   *                                                                         *
   *  Does the change somehow allow for arbitrary javascript to be executed? *
   *    Or allows for someone to change the prototype of built-in objects?   *
   *     Or gives undesired access to variables likes document or window?    *
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

  var $sanitizeMinErr = angular.$$minErr('$sanitize')
  var bind
  var extend
  var forEach
  var isArray
  var isDefined
  var lowercase
  var noop
  var nodeContains
  var htmlParser
  var htmlSanitizeWriter

  /**
   * @ngdoc module
   * @name ngSanitize
   * @description
   *
   * The `ngSanitize` module provides functionality to sanitize HTML.
   *
   * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
   */

  /**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   Sanitizes an html string by stripping all potentially dangerous tokens.
 *
 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a trusted URI list) are
 *   then serialized back to a properly escaped HTML string. This means that no unsafe input can make
 *   it into the returned string.
 *
 *   The trusted URIs for URL sanitization of attribute values is configured using the functions
 *   `aHrefSanitizationTrustedUrlList` and `imgSrcSanitizationTrustedUrlList` of {@link $compileProvider}.
 *
 *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.
 *
 * @param {string} html HTML input.
 * @returns {string} Sanitized HTML.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js" name="sanitize-service">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */

  /**
   * @ngdoc provider
   * @name $sanitizeProvider
   * @this
   *
   * @description
   * Creates and configures {@link $sanitize} instance.
   */
  function $SanitizeProvider() {
    var hasBeenInstantiated = false
    var svgEnabled = false

    this.$get = [
      '$$sanitizeUri',
      function ($$sanitizeUri) {
        hasBeenInstantiated = true
        if (svgEnabled) {
          extend(validElements, svgElements)
        }
        return function (html) {
          var buf = []
          htmlParser(
            html,
            htmlSanitizeWriter(buf, function (uri, isImage) {
              return !/^unsafe:/.test($$sanitizeUri(uri, isImage))
            })
          )
          return buf.join('')
        }
      },
    ]

    /**
     * @ngdoc method
     * @name $sanitizeProvider#enableSvg
     * @kind function
     *
     * @description
     * Enables a subset of svg to be supported by the sanitizer.
     *
     * <div class="alert alert-warning">
     *   <p>By enabling this setting without taking other precautions, you might expose your
     *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned
     *   outside of the containing element and be rendered over other elements on the page (e.g. a login
     *   link). Such behavior can then result in phishing incidents.</p>
     *
     *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg
     *   tags within the sanitized content:</p>
     *
     *   <br>
     *
     *   <pre><code>
     *   .rootOfTheIncludedContent svg {
     *     overflow: hidden !important;
     *   }
     *   </code></pre>
     * </div>
     *
     * @param {boolean=} flag Enable or disable SVG support in the sanitizer.
     * @returns {boolean|$sanitizeProvider} Returns the currently configured value if called
     *    without an argument or self for chaining otherwise.
     */
    this.enableSvg = function (enableSvg) {
      if (isDefined(enableSvg)) {
        svgEnabled = enableSvg
        return this
      } else {
        return svgEnabled
      }
    }

    /**
     * @ngdoc method
     * @name $sanitizeProvider#addValidElements
     * @kind function
     *
     * @description
     * Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe
     * and are not stripped off during sanitization. You can extend the following lists of elements:
     *
     * - `htmlElements`: A list of elements (tag names) to extend the current list of safe HTML
     *   elements. HTML elements considered safe will not be removed during sanitization. All other
     *   elements will be stripped off.
     *
     * - `htmlVoidElements`: This is similar to `htmlElements`, but marks the elements as
     *   "void elements" (similar to HTML
     *   [void elements](https://rawgit.com/w3c/html/html5.1-2/single-page.html#void-elements)). These
     *   elements have no end tag and cannot have content.
     *
     * - `svgElements`: This is similar to `htmlElements`, but for SVG elements. This list is only
     *   taken into account if SVG is {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for
     *   `$sanitize`.
     *
     * <div class="alert alert-info">
     *   This method must be called during the {@link angular.Module#config config} phase. Once the
     *   `$sanitize` service has been instantiated, this method has no effect.
     * </div>
     *
     * <div class="alert alert-warning">
     *   Keep in mind that extending the built-in lists of elements may expose your app to XSS or
     *   other vulnerabilities. Be very mindful of the elements you add.
     * </div>
     *
     * @param {Array<String>|Object} elements - A list of valid HTML elements or an object with one or
     *   more of the following properties:
     *   - **htmlElements** - `{Array<String>}` - A list of elements to extend the current list of
     *     HTML elements.
     *   - **htmlVoidElements** - `{Array<String>}` - A list of elements to extend the current list of
     *     void HTML elements; i.e. elements that do not have an end tag.
     *   - **svgElements** - `{Array<String>}` - A list of elements to extend the current list of SVG
     *     elements. The list of SVG elements is only taken into account if SVG is
     *     {@link ngSanitize.$sanitizeProvider#enableSvg enabled} for `$sanitize`.
     *
     * Passing an array (`[...]`) is equivalent to passing `{htmlElements: [...]}`.
     *
     * @return {$sanitizeProvider} Returns self for chaining.
     */
    this.addValidElements = function (elements) {
      if (!hasBeenInstantiated) {
        if (isArray(elements)) {
          elements = { htmlElements: elements }
        }

        addElementsTo(svgElements, elements.svgElements)
        addElementsTo(voidElements, elements.htmlVoidElements)
        addElementsTo(validElements, elements.htmlVoidElements)
        addElementsTo(validElements, elements.htmlElements)
      }

      return this
    }

    /**
     * @ngdoc method
     * @name $sanitizeProvider#addValidAttrs
     * @kind function
     *
     * @description
     * Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are
     * not stripped off during sanitization.
     *
     * **Note**:
     * The new attributes will not be treated as URI attributes, which means their values will not be
     * sanitized as URIs using `$compileProvider`'s
     * {@link ng.$compileProvider#aHrefSanitizationTrustedUrlList aHrefSanitizationTrustedUrlList} and
     * {@link ng.$compileProvider#imgSrcSanitizationTrustedUrlList imgSrcSanitizationTrustedUrlList}.
     *
     * <div class="alert alert-info">
     *   This method must be called during the {@link angular.Module#config config} phase. Once the
     *   `$sanitize` service has been instantiated, this method has no effect.
     * </div>
     *
     * <div class="alert alert-warning">
     *   Keep in mind that extending the built-in list of attributes may expose your app to XSS or
     *   other vulnerabilities. Be very mindful of the attributes you add.
     * </div>
     *
     * @param {Array<String>} attrs - A list of valid attributes.
     *
     * @returns {$sanitizeProvider} Returns self for chaining.
     */
    this.addValidAttrs = function (attrs) {
      if (!hasBeenInstantiated) {
        extend(validAttrs, arrayToMap(attrs, true))
      }
      return this
    }

    //////////////////////////////////////////////////////////////////////////////////////////////////
    // Private stuff
    //////////////////////////////////////////////////////////////////////////////////////////////////

    bind = angular.bind
    extend = angular.extend
    forEach = angular.forEach
    isArray = angular.isArray
    isDefined = angular.isDefined
    lowercase = angular.$$lowercase
    noop = angular.noop

    htmlParser = htmlParserImpl
    htmlSanitizeWriter = htmlSanitizeWriterImpl

    nodeContains =
      window.Node.prototype.contains ||
      /** @this */ function (arg) {
        // eslint-disable-next-line no-bitwise
        return !!(this.compareDocumentPosition(arg) & 16)
      }

    // Regular Expressions for parsing tags and attributes
    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
      // Match everything outside of normal chars and " (quote character)
      NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g

    // Good source of info about elements and attributes
    // http://dev.w3.org/html5/spec/Overview.html#semantics
    // http://simon.html5.org/html-elements

    // Safe Void Elements - HTML5
    // http://dev.w3.org/html5/spec/Overview.html#void-elements
    var voidElements = stringToMap('area,br,col,hr,img,wbr')

    // Elements that you can, intentionally, leave open (and which close themselves)
    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
    var optionalEndTagBlockElements = stringToMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),
      optionalEndTagInlineElements = stringToMap('rp,rt'),
      optionalEndTagElements = extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements)

    // Safe Block Elements - HTML5
    var blockElements = extend(
      {},
      optionalEndTagBlockElements,
      stringToMap(
        'address,article,' +
          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'
      )
    )

    // Inline Elements - HTML5
    var inlineElements = extend(
      {},
      optionalEndTagInlineElements,
      stringToMap(
        'a,abbr,acronym,b,' +
          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +
          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'
      )
    )

    // SVG Elements
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
    // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.
    // They can potentially allow for arbitrary javascript to be executed. See #11290
    var svgElements = stringToMap(
      'circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +
        'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +
        'radialGradient,rect,stop,svg,switch,text,title,tspan'
    )

    // Blocked Elements (will be stripped)
    var blockedElements = stringToMap('script,style')

    var validElements = extend(
      {},
      voidElements,
      blockElements,
      inlineElements,
      optionalEndTagElements
    )

    //Attributes that have href and hence need to be sanitized
    var uriAttrs = stringToMap('background,cite,href,longdesc,src,xlink:href,xml:base')

    var htmlAttrs = stringToMap(
      'abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
        'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
        'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
        'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +
        'valign,value,vspace,width'
    )

    // SVG attributes (without "id" and "name" attributes)
    // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
    var svgAttrs = stringToMap(
      'accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
        'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +
        'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +
        'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +
        'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +
        'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +
        'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +
        'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +
        'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +
        'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +
        'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +
        'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +
        'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +
        'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +
        'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan',
      true
    )

    var validAttrs = extend({}, uriAttrs, svgAttrs, htmlAttrs)

    function stringToMap(str, lowercaseKeys) {
      return arrayToMap(str.split(','), lowercaseKeys)
    }

    function arrayToMap(items, lowercaseKeys) {
      var obj = {},
        i
      for (i = 0; i < items.length; i++) {
        obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true
      }
      return obj
    }

    function addElementsTo(elementsMap, newElements) {
      if (newElements && newElements.length) {
        extend(elementsMap, arrayToMap(newElements))
      }
    }

    /**
     * Create an inert document that contains the dirty HTML that needs sanitizing.
     * We use the DOMParser API by default and fall back to createHTMLDocument if DOMParser is not
     * available.
     */
    var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function (
      window,
      document
    ) {
      if (isDOMParserAvailable()) {
        return getInertBodyElement_DOMParser
      }

      if (!document || !document.implementation) {
        throw $sanitizeMinErr('noinert', "Can't create an inert html document")
      }
      var inertDocument = document.implementation.createHTMLDocument('inert')
      var inertBodyElement = (
        inertDocument.documentElement || inertDocument.getDocumentElement()
      ).querySelector('body')
      return getInertBodyElement_InertDocument

      function isDOMParserAvailable() {
        try {
          return !!getInertBodyElement_DOMParser('')
        } catch (e) {
          return false
        }
      }

      function getInertBodyElement_DOMParser(html) {
        // We add this dummy element to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.
        html = '<remove></remove>' + html
        try {
          var body = new window.DOMParser().parseFromString(html, 'text/html').body
          body.firstChild.remove()
          return body
        } catch (e) {
          return undefined
        }
      }

      function getInertBodyElement_InertDocument(html) {
        inertBodyElement.innerHTML = html

        // Support: IE 9-11 only
        // strip custom-namespaced attributes on IE<=11
        if (document.documentMode) {
          stripCustomNsAttrs(inertBodyElement)
        }

        return inertBodyElement
      }
    })(window, window.document)

    /**
     * @example
     * htmlParser(htmlString, {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * });
     *
     * @param {string} html string
     * @param {object} handler
     */
    function htmlParserImpl(html, handler) {
      if (html === null || html === undefined) {
        html = ''
      } else if (typeof html !== 'string') {
        html = '' + html
      }

      var inertBodyElement = getInertBodyElement(html)
      if (!inertBodyElement) return ''

      //mXSS protection
      var mXSSAttempts = 5
      do {
        if (mXSSAttempts === 0) {
          throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable')
        }
        mXSSAttempts--

        // trigger mXSS if it is going to happen by reading and writing the innerHTML
        html = inertBodyElement.innerHTML
        inertBodyElement = getInertBodyElement(html)
      } while (html !== inertBodyElement.innerHTML)

      var node = inertBodyElement.firstChild
      while (node) {
        switch (node.nodeType) {
          case 1: // ELEMENT_NODE
            handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes))
            break
          case 3: // TEXT NODE
            handler.chars(node.textContent)
            break
        }

        var nextNode
        if (!(nextNode = node.firstChild)) {
          if (node.nodeType === 1) {
            handler.end(node.nodeName.toLowerCase())
          }
          nextNode = getNonDescendant('nextSibling', node)
          if (!nextNode) {
            while (nextNode == null) {
              node = getNonDescendant('parentNode', node)
              if (node === inertBodyElement) break
              nextNode = getNonDescendant('nextSibling', node)
              if (node.nodeType === 1) {
                handler.end(node.nodeName.toLowerCase())
              }
            }
          }
        }
        node = nextNode
      }

      while ((node = inertBodyElement.firstChild)) {
        inertBodyElement.removeChild(node)
      }
    }

    function attrToMap(attrs) {
      var map = {}
      for (var i = 0, ii = attrs.length; i < ii; i++) {
        var attr = attrs[i]
        map[attr.name] = attr.value
      }
      return map
    }

    /**
     * Escapes all potentially dangerous characters, so that the
     * resulting string can be safely inserted into attribute or
     * element text.
     * @param value
     * @returns {string} escaped text
     */
    function encodeEntities(value) {
      return value
        .replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, function (value) {
          var hi = value.charCodeAt(0)
          var low = value.charCodeAt(1)
          return '&#' + ((hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000) + ';'
        })
        .replace(NON_ALPHANUMERIC_REGEXP, function (value) {
          return '&#' + value.charCodeAt(0) + ';'
        })
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
    }

    /**
     * create an HTML/XML writer which writes to buffer
     * @param {Array} buf use buf.join('') to get out sanitized html string
     * @returns {object} in the form of {
     *     start: function(tag, attrs) {},
     *     end: function(tag) {},
     *     chars: function(text) {},
     *     comment: function(text) {}
     * }
     */
    function htmlSanitizeWriterImpl(buf, uriValidator) {
      var ignoreCurrentElement = false
      var out = bind(buf, buf.push)
      return {
        start: function (tag, attrs) {
          tag = lowercase(tag)
          if (!ignoreCurrentElement && blockedElements[tag]) {
            ignoreCurrentElement = tag
          }
          if (!ignoreCurrentElement && validElements[tag] === true) {
            out('<')
            out(tag)
            forEach(attrs, function (value, key) {
              var lkey = lowercase(key)
              var isImage = (tag === 'img' && lkey === 'src') || lkey === 'background'
              if (
                validAttrs[lkey] === true &&
                (uriAttrs[lkey] !== true || uriValidator(value, isImage))
              ) {
                out(' ')
                out(key)
                out('="')
                out(encodeEntities(value))
                out('"')
              }
            })
            out('>')
          }
        },
        end: function (tag) {
          tag = lowercase(tag)
          if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {
            out('</')
            out(tag)
            out('>')
          }
          // eslint-disable-next-line eqeqeq
          if (tag == ignoreCurrentElement) {
            ignoreCurrentElement = false
          }
        },
        chars: function (chars) {
          if (!ignoreCurrentElement) {
            out(encodeEntities(chars))
          }
        },
      }
    }

    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare
     * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want
     * to allow any of these custom attributes. This method strips them all.
     *
     * @param node Root element to process
     */
    function stripCustomNsAttrs(node) {
      while (node) {
        if (node.nodeType === window.Node.ELEMENT_NODE) {
          var attrs = node.attributes
          for (var i = 0, l = attrs.length; i < l; i++) {
            var attrNode = attrs[i]
            var attrName = attrNode.name.toLowerCase()
            if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {
              node.removeAttributeNode(attrNode)
              i--
              l--
            }
          }
        }

        var nextNode = node.firstChild
        if (nextNode) {
          stripCustomNsAttrs(nextNode)
        }

        node = getNonDescendant('nextSibling', node)
      }
    }

    function getNonDescendant(propName, node) {
      // An element is clobbered if its `propName` property points to one of its descendants
      var nextNode = node[propName]
      if (nextNode && nodeContains.call(node, nextNode)) {
        throw $sanitizeMinErr(
          'elclob',
          'Failed to sanitize html because the element is clobbered: {0}',
          node.outerHTML || node.outerText
        )
      }
      return nextNode
    }
  }

  function sanitizeText(chars) {
    var buf = []
    var writer = htmlSanitizeWriter(buf, noop)
    writer.chars(chars)
    return buf.join('')
  }

  // define ngSanitize module and register $sanitize service
  angular
    .module('ngSanitize', [])
    .provider('$sanitize', $SanitizeProvider)
    .info({ angularVersion: '1.8.2' })

  /**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.
 * @param {object|function(url)} [attributes] Add custom attributes to the link element.
 *
 *    Can be one of:
 *
 *    - `object`: A map of attributes
 *    - `function`: Takes the url as a parameter and returns a map of attributes
 *
 *    If the map of attributes contains a value for `target`, it overrides the value of
 *    the target parameter.
 *
 *
 * @returns {string} Html-linkified and {@link $sanitize sanitized} text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js" name="linky-filter">
     <file name="index.html">
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <th>Filter</th>
           <th>Source</th>
           <th>Rendered</th>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="linky-custom-attributes">
          <td>linky custom attributes</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="script.js">
       angular.module('linkyExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.snippet =
             'Pretty text with some links:\n' +
             'http://angularjs.org/,\n' +
             'mailto:us@somewhere.org,\n' +
             'another@somewhere.org,\n' +
             'and one more: ftp://127.0.0.1/.';
           $scope.snippetWithSingleURL = 'http://angularjs.org/';
         }]);
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithSingleURL | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });

       it('should optionally add custom attributes', function() {
        expect(element(by.id('linky-custom-attributes')).
            element(by.binding("snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');
       });
     </file>
   </example>
 */
  angular.module('ngSanitize').filter('linky', [
    '$sanitize',
    function ($sanitize) {
      var LINKY_URL_REGEXP =
          /((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
        MAILTO_REGEXP = /^mailto:/i

      var linkyMinErr = angular.$$minErr('linky')
      var isDefined = angular.isDefined
      var isFunction = angular.isFunction
      var isObject = angular.isObject
      var isString = angular.isString

      return function (text, target, attributes) {
        if (text == null || text === '') return text
        if (!isString(text))
          throw linkyMinErr('notstring', 'Expected string but received: {0}', text)

        var attributesFn = isFunction(attributes)
          ? attributes
          : isObject(attributes)
          ? function getAttributesObject() {
              return attributes
            }
          : function getEmptyAttributesObject() {
              return {}
            }

        var match
        var raw = text
        var html = []
        var url
        var i
        while ((match = raw.match(LINKY_URL_REGEXP))) {
          // We can not end in these as they are sometimes found at the end of the sentence
          url = match[0]
          // if we did not match ftp/http/www/mailto then assume mailto
          if (!match[2] && !match[4]) {
            url = (match[3] ? 'http://' : 'mailto:') + url
          }
          i = match.index
          addText(raw.substr(0, i))
          addLink(url, match[0].replace(MAILTO_REGEXP, ''))
          raw = raw.substring(i + match[0].length)
        }
        addText(raw)
        return $sanitize(html.join(''))

        function addText(text) {
          if (!text) {
            return
          }
          html.push(sanitizeText(text))
        }

        function addLink(url, text) {
          var key,
            linkAttributes = attributesFn(url)
          html.push('<a ')

          for (key in linkAttributes) {
            html.push(key + '="' + linkAttributes[key] + '" ')
          }

          if (isDefined(target) && !('target' in linkAttributes)) {
            html.push('target="', target, '" ')
          }
          html.push('href="', url.replace(/"/g, '&quot;'), '">')
          addText(text)
          html.push('</a>')
        }
      }
    },
  ])
})(window, window.angular)

/*!
 * angular-translate - v2.19.0 - 2021-09-02
 *
 * Copyright (c) 2021 The angular-translate team, Pascal Precht; Licensed MIT
 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return factory()
    })
  } else if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory()
  } else {
    factory()
  }
})(this, function () {
  /**
   * @ngdoc overview
   * @name pascalprecht.translate
   *
   * @description
   * The main module which holds everything together.
   */
  runTranslate.$inject = ['$translate']
  $translate.$inject = [
    '$STORAGE_KEY',
    '$windowProvider',
    '$translateSanitizationProvider',
    'pascalprechtTranslateOverrider',
  ]
  $translateDefaultInterpolation.$inject = ['$interpolate', '$translateSanitization']
  translateDirective.$inject = ['$translate', '$interpolate', '$compile', '$parse', '$rootScope']
  translateAttrDirective.$inject = ['$translate', '$rootScope']
  translateCloakDirective.$inject = ['$translate', '$rootScope']
  translateFilterFactory.$inject = ['$parse', '$translate']
  $translationCache.$inject = ['$cacheFactory']
  angular.module('pascalprecht.translate', ['ng']).run(runTranslate)

  function runTranslate($translate) {
    'use strict'

    var key = $translate.storageKey(),
      storage = $translate.storage()

    var fallbackFromIncorrectStorageValue = function () {
      var preferred = $translate.preferredLanguage()
      if (angular.isString(preferred)) {
        $translate.use(preferred)
        // $translate.use() will also remember the language.
        // So, we don't need to call storage.put() here.
      } else {
        storage.put(key, $translate.use())
      }
    }

    fallbackFromIncorrectStorageValue.displayName = 'fallbackFromIncorrectStorageValue'

    if (storage) {
      if (!storage.get(key)) {
        fallbackFromIncorrectStorageValue()
      } else {
        $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue)
      }
    } else if (angular.isString($translate.preferredLanguage())) {
      $translate.use($translate.preferredLanguage())
    }
  }

  runTranslate.displayName = 'runTranslate'

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   *
   * Configurations for $translateSanitization
   */
  angular
    .module('pascalprecht.translate')
    .provider('$translateSanitization', $translateSanitizationProvider)

  function $translateSanitizationProvider() {
    'use strict'

    var $sanitize,
      $sce,
      currentStrategy = null, // TODO change to either 'sanitize', 'escape' or ['sanitize', 'escapeParameters'] in 3.0.
      hasConfiguredStrategy = false,
      hasShownNoStrategyConfiguredWarning = false,
      strategies

    /**
     * Definition of a sanitization strategy function
     * @callback StrategyFunction
     * @param {string|object} value - value to be sanitized (either a string or an interpolated value map)
     * @param {string} mode - either 'text' for a string (translation) or 'params' for the interpolated params
     * @return {string|object}
     */

    /**
     * @ngdoc property
     * @name strategies
     * @propertyOf pascalprecht.translate.$translateSanitizationProvider
     *
     * @description
     * Following strategies are built-in:
     * <dl>
     *   <dt>sanitize</dt>
     *   <dd>Sanitizes HTML in the translation text using $sanitize</dd>
     *   <dt>escape</dt>
     *   <dd>Escapes HTML in the translation</dd>
     *   <dt>sanitizeParameters</dt>
     *   <dd>Sanitizes HTML in the values of the interpolation parameters using $sanitize</dd>
     *   <dt>escapeParameters</dt>
     *   <dd>Escapes HTML in the values of the interpolation parameters</dd>
     *   <dt>escaped</dt>
     *   <dd>Support legacy strategy name 'escaped' for backwards compatibility (will be removed in 3.0)</dd>
     * </dl>
     *
     */

    strategies = {
      sanitize: function (value, mode /*, context*/) {
        if (mode === 'text') {
          value = htmlSanitizeValue(value)
        }
        return value
      },
      escape: function (value, mode /*, context*/) {
        if (mode === 'text') {
          value = htmlEscapeValue(value)
        }
        return value
      },
      sanitizeParameters: function (value, mode /*, context*/) {
        if (mode === 'params') {
          value = mapInterpolationParameters(value, htmlSanitizeValue)
        }
        return value
      },
      escapeParameters: function (value, mode /*, context*/) {
        if (mode === 'params') {
          value = mapInterpolationParameters(value, htmlEscapeValue)
        }
        return value
      },
      sce: function (value, mode, context) {
        if (mode === 'text') {
          value = htmlTrustValue(value)
        } else if (mode === 'params') {
          if (context !== 'filter') {
            // do html escape in filter context #1101
            value = mapInterpolationParameters(value, htmlEscapeValue)
          }
        }
        return value
      },
      sceParameters: function (value, mode /*, context*/) {
        if (mode === 'params') {
          value = mapInterpolationParameters(value, htmlTrustValue)
        }
        return value
      },
    }
    // Support legacy strategy name 'escaped' for backwards compatibility.
    // TODO should be removed in 3.0
    strategies.escaped = strategies.escapeParameters

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateSanitizationProvider#addStrategy
     * @methodOf pascalprecht.translate.$translateSanitizationProvider
     *
     * @description
     * Adds a sanitization strategy to the list of known strategies.
     *
     * @param {string} strategyName - unique key for a strategy
     * @param {StrategyFunction} strategyFunction - strategy function
     * @returns {object} this
     */
    this.addStrategy = function (strategyName, strategyFunction) {
      strategies[strategyName] = strategyFunction
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateSanitizationProvider#removeStrategy
     * @methodOf pascalprecht.translate.$translateSanitizationProvider
     *
     * @description
     * Removes a sanitization strategy from the list of known strategies.
     *
     * @param {string} strategyName - unique key for a strategy
     * @returns {object} this
     */
    this.removeStrategy = function (strategyName) {
      delete strategies[strategyName]
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateSanitizationProvider#useStrategy
     * @methodOf pascalprecht.translate.$translateSanitizationProvider
     *
     * @description
     * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
     *
     * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
     * @returns {object} this
     */
    this.useStrategy = function (strategy) {
      hasConfiguredStrategy = true
      currentStrategy = strategy
      return this
    }

    /**
     * @ngdoc object
     * @name pascalprecht.translate.$translateSanitization
     * @requires $injector
     * @requires $log
     *
     * @description
     * Sanitizes interpolation parameters and translated texts.
     *
     */
    this.$get = [
      '$injector',
      '$log',
      function ($injector, $log) {
        var cachedStrategyMap = {}

        var applyStrategies = function (value, mode, context, selectedStrategies) {
          angular.forEach(selectedStrategies, function (selectedStrategy) {
            if (angular.isFunction(selectedStrategy)) {
              value = selectedStrategy(value, mode, context)
            } else if (angular.isFunction(strategies[selectedStrategy])) {
              value = strategies[selectedStrategy](value, mode, context)
            } else if (angular.isString(strategies[selectedStrategy])) {
              if (!cachedStrategyMap[strategies[selectedStrategy]]) {
                try {
                  cachedStrategyMap[strategies[selectedStrategy]] = $injector.get(
                    strategies[selectedStrategy]
                  )
                } catch (e) {
                  cachedStrategyMap[strategies[selectedStrategy]] = function () {}
                  throw new Error(
                    "pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '" +
                      selectedStrategy +
                      "'"
                  )
                }
              }
              value = cachedStrategyMap[strategies[selectedStrategy]](value, mode, context)
            } else {
              throw new Error(
                "pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '" +
                  selectedStrategy +
                  "'"
              )
            }
          })
          return value
        }

        // TODO: should be removed in 3.0
        var showNoStrategyConfiguredWarning = function () {
          if (!hasConfiguredStrategy && !hasShownNoStrategyConfiguredWarning) {
            $log.warn(
              'pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.'
            )
            hasShownNoStrategyConfiguredWarning = true
          }
        }

        if ($injector.has('$sanitize')) {
          $sanitize = $injector.get('$sanitize')
        }
        if ($injector.has('$sce')) {
          $sce = $injector.get('$sce')
        }

        return {
          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translateSanitization#useStrategy
           * @methodOf pascalprecht.translate.$translateSanitization
           *
           * @description
           * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
           *
           * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
           */
          useStrategy: (function (self) {
            return function (strategy) {
              self.useStrategy(strategy)
            }
          })(this),

          /**
           * @ngdoc function
           * @name pascalprecht.translate.$translateSanitization#sanitize
           * @methodOf pascalprecht.translate.$translateSanitization
           *
           * @description
           * Sanitizes a value.
           *
           * @param {string|object} value The value which should be sanitized.
           * @param {string} mode The current sanitization mode, either 'params' or 'text'.
           * @param {string|StrategyFunction|array} [strategy] Optional custom strategy which should be used instead of the currently selected strategy.
           * @param {string} [context] The context of this call: filter, service. Default is service
           * @returns {string|object} sanitized value
           */
          sanitize: function (value, mode, strategy, context) {
            if (!currentStrategy) {
              showNoStrategyConfiguredWarning()
            }

            if (!strategy && strategy !== null) {
              strategy = currentStrategy
            }

            if (!strategy) {
              return value
            }

            if (!context) {
              context = 'service'
            }

            var selectedStrategies = angular.isArray(strategy) ? strategy : [strategy]
            return applyStrategies(value, mode, context, selectedStrategies)
          },
        }
      },
    ]

    var htmlEscapeValue = function (value) {
      var element = angular.element('<div></div>')
      element.text(value) // not chainable, see #1044
      return element.html()
    }

    var htmlSanitizeValue = function (value) {
      if (!$sanitize) {
        throw new Error(
          "pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'."
        )
      }
      return $sanitize(value)
    }

    var htmlTrustValue = function (value) {
      if (!$sce) {
        throw new Error(
          'pascalprecht.translate.$translateSanitization: Error cannot find $sce service.'
        )
      }
      return $sce.trustAsHtml(value)
    }

    var mapInterpolationParameters = function (value, iteratee, stack) {
      if (angular.isDate(value)) {
        return value
      } else if (angular.isObject(value)) {
        var result = angular.isArray(value) ? [] : {}

        if (!stack) {
          stack = []
        } else {
          if (stack.indexOf(value) > -1) {
            throw new Error(
              'pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object'
            )
          }
        }

        stack.push(value)
        angular.forEach(value, function (propertyValue, propertyKey) {
          /* Skipping function properties. */
          if (angular.isFunction(propertyValue)) {
            return
          }

          result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee, stack)
        })
        stack.splice(-1, 1) // remove last

        return result
      } else if (angular.isNumber(value)) {
        return value
      } else if (value === true || value === false) {
        return value
      } else if (!angular.isUndefined(value) && value !== null) {
        return iteratee(value)
      } else {
        return value
      }
    }
  }

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translateProvider
   * @description
   *
   * $translateProvider allows developers to register translation-tables, asynchronous loaders
   * and similar to configure translation behavior directly inside of a module.
   *
   */
  angular
    .module('pascalprecht.translate')
    .constant('pascalprechtTranslateOverrider', {})
    .provider('$translate', $translate)

  function $translate(
    $STORAGE_KEY,
    $windowProvider,
    $translateSanitizationProvider,
    pascalprechtTranslateOverrider
  ) {
    'use strict'

    var $translationTable = {},
      $preferredLanguage,
      $availableLanguageKeys = [],
      $languageKeyAliases,
      $fallbackLanguage,
      $fallbackWasString,
      $uses,
      $nextLang,
      $storageFactory,
      $storageKey = $STORAGE_KEY,
      $storagePrefix,
      $missingTranslationHandlerFactory,
      $interpolationFactory,
      $interpolatorFactories = [],
      $loaderFactory,
      $cloakClassName = 'translate-cloak',
      $loaderOptions,
      $notFoundIndicatorLeft,
      $notFoundIndicatorRight,
      $postCompilingEnabled = false,
      $forceAsyncReloadEnabled = false,
      $allowNamespaces = true,
      $nestedObjectDelimeter = '.',
      $isReady = false,
      $keepContent = false,
      loaderCache,
      directivePriority = 0,
      statefulFilter = true,
      postProcessFn,
      uniformLanguageTagResolver = 'default',
      languageTagResolver = {
        default: function (tag) {
          return (tag || '').split('-').join('_')
        },
        java: function (tag) {
          var temp = (tag || '').split('-').join('_')
          var parts = temp.split('_')
          return parts.length > 1 ? parts[0].toLowerCase() + '_' + parts[1].toUpperCase() : temp
        },
        bcp47: function (tag) {
          var temp = (tag || '').split('_').join('-')
          var parts = temp.split('-')

          switch (parts.length) {
            case 1: // language only
              parts[0] = parts[0].toLowerCase()
              break
            case 2: // language-script or language-region
              parts[0] = parts[0].toLowerCase()
              if (parts[1].length === 4) {
                // parts[1] is script
                parts[1] = parts[1].charAt(0).toUpperCase() + parts[1].slice(1).toLowerCase()
              } else {
                // parts[1] is region
                parts[1] = parts[1].toUpperCase()
              }
              break
            case 3: // language-script-region
              parts[0] = parts[0].toLowerCase()
              parts[1] = parts[1].charAt(0).toUpperCase() + parts[1].slice(1).toLowerCase()
              parts[2] = parts[2].toUpperCase()
              break
            default:
              return temp
          }

          return parts.join('-')
        },
        'iso639-1': function (tag) {
          var temp = (tag || '').split('_').join('-')
          var parts = temp.split('-')
          return parts[0].toLowerCase()
        },
      }

    var version = '2.19.0'

    // tries to determine the browsers language
    var getFirstBrowserLanguage = function () {
      // internal purpose only
      if (angular.isFunction(pascalprechtTranslateOverrider.getLocale)) {
        return pascalprechtTranslateOverrider.getLocale()
      }

      var nav = $windowProvider.$get().navigator,
        browserLanguagePropertyKeys = [
          'language',
          'browserLanguage',
          'systemLanguage',
          'userLanguage',
        ],
        i,
        language

      // support for HTML 5.1 "navigator.languages"
      if (angular.isArray(nav.languages)) {
        for (i = 0; i < nav.languages.length; i++) {
          language = nav.languages[i]
          if (language && language.length) {
            return language
          }
        }
      }

      // support for other well known properties in browsers
      for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
        language = nav[browserLanguagePropertyKeys[i]]
        if (language && language.length) {
          return language
        }
      }

      return null
    }
    getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage'

    // tries to determine the browsers locale
    var getLocale = function () {
      var locale = getFirstBrowserLanguage() || ''
      if (languageTagResolver[uniformLanguageTagResolver]) {
        locale = languageTagResolver[uniformLanguageTagResolver](locale)
      }
      return locale
    }
    getLocale.displayName = 'angular-translate/service: getLocale'

    /**
     * @name indexOf
     * @private
     *
     * @description
     * indexOf polyfill. Kinda sorta.
     *
     * @param {array} array Array to search in.
     * @param {string} searchElement Element to search for.
     *
     * @returns {int} Index of search element.
     */
    var indexOf = function (array, searchElement) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (array[i] === searchElement) {
          return i
        }
      }
      return -1
    }

    /**
     * @name trim
     * @private
     *
     * @description
     * trim polyfill
     *
     * @returns {string} The string stripped of whitespace from both ends
     */
    var trim = function () {
      return this.toString().replace(/^\s+|\s+$/g, '')
    }

    /**
     * @name lowercase
     * @private
     *
     * @description
     * Return the lowercase string only if the type is string
     *
     * @returns {string} The string all in lowercase
     */
    var lowercase = function (string) {
      return angular.isString(string) ? string.toLowerCase() : string
    }

    var negotiateLocale = function (preferred) {
      if (!preferred) {
        return
      }

      var avail = [],
        locale = lowercase(preferred),
        i = 0,
        n = $availableLanguageKeys.length

      for (; i < n; i++) {
        avail.push(lowercase($availableLanguageKeys[i]))
      }

      // Check for an exact match in our list of available keys
      i = indexOf(avail, locale)
      if (i > -1) {
        return $availableLanguageKeys[i]
      }

      if ($languageKeyAliases) {
        var alias
        for (var langKeyAlias in $languageKeyAliases) {
          if ($languageKeyAliases.hasOwnProperty(langKeyAlias)) {
            var hasWildcardKey = false
            var hasExactKey =
              Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) &&
              lowercase(langKeyAlias) === lowercase(preferred)

            if (langKeyAlias.slice(-1) === '*') {
              hasWildcardKey =
                lowercase(langKeyAlias.slice(0, -1)) ===
                lowercase(preferred.slice(0, langKeyAlias.length - 1))
            }
            if (hasExactKey || hasWildcardKey) {
              alias = $languageKeyAliases[langKeyAlias]
              if (indexOf(avail, lowercase(alias)) > -1) {
                return alias
              }
            }
          }
        }
      }

      // Check for a language code without region
      var parts = preferred.split('_')

      if (parts.length > 1 && indexOf(avail, lowercase(parts[0])) > -1) {
        return parts[0]
      }

      // If everything fails, return undefined.
      return
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#translations
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Registers a new translation table for specific language key.
     *
     * To register a translation table for specific language, pass a defined language
     * key as first parameter.
     *
     * <pre>
     *  // register translation table for language: 'de_DE'
     *  $translateProvider.translations('de_DE', {
     *    'GREETING': 'Hallo Welt!'
     *  });
     *
     *  // register another one
     *  $translateProvider.translations('en_US', {
     *    'GREETING': 'Hello world!'
     *  });
     * </pre>
     *
     * When registering multiple translation tables for for the same language key,
     * the actual translation table gets extended. This allows you to define module
     * specific translation which only get added, once a specific module is loaded in
     * your app.
     *
     * Invoking this method with no arguments returns the translation table which was
     * registered with no language key. Invoking it with a language key returns the
     * related translation table.
     *
     * @param {string} langKey A language key.
     * @param {object} translationTable A plain old JavaScript object that represents a translation table.
     *
     */
    var translations = function (langKey, translationTable) {
      if (!langKey && !translationTable) {
        return $translationTable
      }

      if (langKey && !translationTable) {
        if (angular.isString(langKey)) {
          return $translationTable[langKey]
        }
      } else {
        if (!angular.isObject($translationTable[langKey])) {
          $translationTable[langKey] = {}
        }
        angular.extend($translationTable[langKey], flatObject(translationTable))
      }
      return this
    }

    this.translations = translations

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#cloakClassName
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     *
     * Let's you change the class name for `translate-cloak` directive.
     * Default class name is `translate-cloak`.
     *
     * @param {string} name translate-cloak class name
     */
    this.cloakClassName = function (name) {
      if (!name) {
        return $cloakClassName
      }
      $cloakClassName = name
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#allowNamespaces
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Let's you disable namespaces, if you don't need nested translation
     * object files. Disabling namespaces can improve performance.
     *
     * Default value is `true`. Namespaces are enabled by default.
     *
     * @param {boolean} namespacesEnabled - namespaces are enabled or not
     */
    this.allowNamespaces = function (namespacesEnabled) {
      if (namespacesEnabled === undefined) {
        return $allowNamespaces
      }
      $allowNamespaces = namespacesEnabled
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#nestedObjectDelimeter
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     *
     * Let's you change the delimiter for namespaced translations.
     * Default delimiter is `.`.
     *
     * @param {string} delimiter namespace separator
     */
    this.nestedObjectDelimeter = function (delimiter) {
      if (!delimiter) {
        return $nestedObjectDelimeter
      }
      $nestedObjectDelimeter = delimiter
      return this
    }

    /**
     * @name flatObject
     * @private
     *
     * @description
     * Flats an object. This function is used to flatten given translation data with
     * namespaces, so they are later accessible via dot notation.
     */
    var flatObject = function (data, path, result, prevKey) {
      var key, keyWithPath, keyWithShortPath, val

      if (!path) {
        path = []
      }
      if (!result) {
        result = {}
      }
      if (!$allowNamespaces) {
        return data
      }
      for (key in data) {
        if (!Object.prototype.hasOwnProperty.call(data, key)) {
          continue
        }
        val = data[key]
        if (angular.isObject(val)) {
          flatObject(val, path.concat(key), result, key)
        } else {
          keyWithPath = path.length
            ? '' + path.join($nestedObjectDelimeter) + $nestedObjectDelimeter + key
            : key
          if (path.length && key === prevKey) {
            // Create shortcut path (foo.bar == foo.bar.bar)
            keyWithShortPath = '' + path.join($nestedObjectDelimeter)
            // Link it to original path
            result[keyWithShortPath] = '@:' + keyWithPath
          }
          result[keyWithPath] = val
        }
      }
      return result
    }
    flatObject.displayName = 'flatObject'

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#addInterpolation
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Adds interpolation services to angular-translate, so it can manage them.
     *
     * @param {object} factory Interpolation service factory
     */
    this.addInterpolation = function (factory) {
      $interpolatorFactories.push(factory)
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use interpolation functionality of messageformat.js.
     * This is useful when having high level pluralization and gender selection.
     */
    this.useMessageFormatInterpolation = function () {
      return this.useInterpolation('$translateMessageFormatInterpolation')
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useInterpolation
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate which interpolation style to use as default, application-wide.
     * Simply pass a factory/service name. The interpolation service has to implement
     * the correct interface.
     *
     * @param {string} factory Interpolation service name.
     */
    this.useInterpolation = function (factory) {
      $interpolationFactory = factory
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Simply sets a sanitation strategy type.
     *
     * @param {string} value Strategy type.
     */
    this.useSanitizeValueStrategy = function (value) {
      $translateSanitizationProvider.useStrategy(value)
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#preferredLanguage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells the module which of the registered translation tables to use for translation
     * at initial startup by passing a language key. Similar to `$translateProvider#use`
     * only that it says which language to **prefer**.
     * It is recommended to call this after {@link pascalprecht.translate.$translate#fallbackLanguage fallbackLanguage()}.
     *
     * @param {string} langKey A language key.
     */
    this.preferredLanguage = function (langKey) {
      if (langKey) {
        setupPreferredLanguage(langKey)
        return this
      }
      return $preferredLanguage
    }
    var setupPreferredLanguage = function (langKey) {
      if (langKey) {
        $preferredLanguage = langKey
      }
      return $preferredLanguage
    }
    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Sets an indicator which is used when a translation isn't found. E.g. when
     * setting the indicator as 'X' and one tries to translate a translation id
     * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
     *
     * Internally this methods sets a left indicator and a right indicator using
     * `$translateProvider.translationNotFoundIndicatorLeft()` and
     * `$translateProvider.translationNotFoundIndicatorRight()`.
     *
     * **Note**: These methods automatically add a whitespace between the indicators
     * and the translation id.
     *
     * @param {string} indicator An indicator, could be any string.
     */
    this.translationNotFoundIndicator = function (indicator) {
      this.translationNotFoundIndicatorLeft(indicator)
      this.translationNotFoundIndicatorRight(indicator)
      return this
    }

    /**
     * ngdoc function
     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Sets an indicator which is used when a translation isn't found left to the
     * translation id.
     *
     * @param {string} indicator An indicator.
     */
    this.translationNotFoundIndicatorLeft = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorLeft
      }
      $notFoundIndicatorLeft = indicator
      return this
    }

    /**
     * ngdoc function
     * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Sets an indicator which is used when a translation isn't found right to the
     * translation id.
     *
     * @param {string} indicator An indicator.
     */
    this.translationNotFoundIndicatorRight = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorRight
      }
      $notFoundIndicatorRight = indicator
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#fallbackLanguage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells the module which of the registered translation tables to use when missing translations
     * at initial startup by passing a language key. Similar to `$translateProvider#use`
     * only that it says which language to **fallback**.
     *
     * @param {string||array} langKey A language key.
     *
     */
    this.fallbackLanguage = function (langKey) {
      fallbackStack(langKey)
      return this
    }

    var fallbackStack = function (langKey) {
      if (langKey) {
        if (angular.isString(langKey)) {
          $fallbackWasString = true
          $fallbackLanguage = [langKey]
        } else if (angular.isArray(langKey)) {
          $fallbackWasString = false
          $fallbackLanguage = langKey
        }
        if (
          angular.isString($preferredLanguage) &&
          indexOf($fallbackLanguage, $preferredLanguage) < 0
        ) {
          $fallbackLanguage.push($preferredLanguage)
        }

        return this
      } else {
        if ($fallbackWasString) {
          return $fallbackLanguage[0]
        } else {
          return $fallbackLanguage
        }
      }
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#use
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Set which translation table to use for translation by given language key. When
     * trying to 'use' a language which isn't provided, it'll throw an error.
     *
     * You actually don't have to use this method since `$translateProvider#preferredLanguage`
     * does the job too.
     *
     * @param {string} langKey A language key.
     */
    this.use = function (langKey) {
      if (langKey) {
        if (!$translationTable[langKey] && !$loaderFactory) {
          // only throw an error, when not loading translation data asynchronously
          throw new Error(
            "$translateProvider couldn't find translationTable for langKey: '" + langKey + "'"
          )
        }
        $uses = langKey
        return this
      }
      return $uses
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#resolveClientLocale
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
     *
     * @returns {string} the current client/browser language key
     */
    this.resolveClientLocale = function () {
      return getLocale()
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#storageKey
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells the module which key must represent the choosed language by a user in the storage.
     *
     * @param {string} key A key for the storage.
     */
    var storageKey = function (key) {
      if (!key) {
        if ($storagePrefix) {
          return $storagePrefix + $storageKey
        }
        return $storageKey
      }
      $storageKey = key
      return this
    }

    this.storageKey = storageKey

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useUrlLoader
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
     *
     * @param {string} url Url
     * @param {Object=} options Optional configuration object
     */
    this.useUrlLoader = function (url, options) {
      return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options))
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
     *
     * @param {Object=} options Optional configuration object
     */
    this.useStaticFilesLoader = function (options) {
      return this.useLoader('$translateStaticFilesLoader', options)
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useLoader
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use any other service as loader.
     *
     * @param {string} loaderFactory Factory name to use
     * @param {Object=} options Optional configuration object
     */
    this.useLoader = function (loaderFactory, options) {
      $loaderFactory = loaderFactory
      $loaderOptions = options || {}
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useLocalStorage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
     *
     */
    this.useLocalStorage = function () {
      return this.useStorage('$translateLocalStorage')
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useCookieStorage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
     */
    this.useCookieStorage = function () {
      return this.useStorage('$translateCookieStorage')
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useStorage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use custom service as storage layer.
     */
    this.useStorage = function (storageFactory) {
      $storageFactory = storageFactory
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#storagePrefix
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Sets prefix for storage key.
     *
     * @param {string} prefix Storage key prefix
     */
    this.storagePrefix = function (prefix) {
      if (!prefix) {
        return prefix
      }
      $storagePrefix = prefix
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to use built-in log handler when trying to translate
     * a translation Id which doesn't exist.
     *
     * This is actually a shortcut method for `useMissingTranslationHandler()`.
     *
     */
    this.useMissingTranslationHandlerLog = function () {
      return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog')
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Expects a factory name which later gets instantiated with `$injector`.
     * This method can be used to tell angular-translate to use a custom
     * missingTranslationHandler. Just build a factory which returns a function
     * and expects a translation id as argument.
     *
     * Example:
     * <pre>
     *  app.config(function ($translateProvider) {
     *    $translateProvider.useMissingTranslationHandler('customHandler');
     *  });
     *
     *  app.factory('customHandler', function (dep1, dep2) {
     *    return function (translationId) {
     *      // something with translationId and dep1 and dep2
     *    };
     *  });
     * </pre>
     *
     * @param {string} factory Factory name
     */
    this.useMissingTranslationHandler = function (factory) {
      $missingTranslationHandlerFactory = factory
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#usePostCompiling
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * If post compiling is enabled, all translated values will be processed
     * again with AngularJS' $compile.
     *
     * Example:
     * <pre>
     *  app.config(function ($translateProvider) {
     *    $translateProvider.usePostCompiling(true);
     *  });
     * </pre>
     *
     * @param {string} factory Factory name
     */
    this.usePostCompiling = function (value) {
      $postCompilingEnabled = !!value
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#forceAsyncReload
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * If force async reload is enabled, async loader will always be called
     * even if $translationTable already contains the language key, adding
     * possible new entries to the $translationTable.
     *
     * Example:
     * <pre>
     *  app.config(function ($translateProvider) {
     *    $translateProvider.forceAsyncReload(true);
     *  });
     * </pre>
     *
     * @param {boolean} value - valid values are true or false
     */
    this.forceAsyncReload = function (value) {
      $forceAsyncReloadEnabled = !!value
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#uniformLanguageTag
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate which language tag should be used as a result when determining
     * the current browser language.
     *
     * This setting must be set before invoking {@link pascalprecht.translate.$translateProvider#methods_determinePreferredLanguage determinePreferredLanguage()}.
     *
     * <pre>
     * $translateProvider
     *   .uniformLanguageTag('bcp47')
     *   .determinePreferredLanguage()
     * </pre>
     *
     * The resolver currently supports:
     * * default
     *     (traditionally: hyphens will be converted into underscores, i.e. en-US => en_US)
     *     en-US => en_US
     *     en_US => en_US
     *     en-us => en_us
     * * java
     *     like default, but the second part will be always in uppercase
     *     en-US => en_US
     *     en_US => en_US
     *     en-us => en_US
     * * BCP 47 (RFC 4646 & 4647)
     *     EN => en
     *     en-US => en-US
     *     en_US => en-US
     *     en-us => en-US
     *     sr-latn => sr-Latn
     *     sr-latn-rs => sr-Latn-RS
     *
     * See also:
     * * http://en.wikipedia.org/wiki/IETF_language_tag
     * * http://www.w3.org/International/core/langtags/
     * * http://tools.ietf.org/html/bcp47
     *
     * @param {string|object} options - options (or standard)
     * @param {string} options.standard - valid values are 'default', 'bcp47', 'java'
     */
    this.uniformLanguageTag = function (options) {
      if (!options) {
        options = {}
      } else if (angular.isString(options)) {
        options = {
          standard: options,
        }
      }

      uniformLanguageTagResolver = options.standard

      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Tells angular-translate to try to determine on its own which language key
     * to set as preferred language. When `fn` is given, angular-translate uses it
     * to determine a language key, otherwise it uses the built-in `getLocale()`
     * method.
     *
     * The `getLocale()` returns a language key in the format `[lang]_[country]` or
     * `[lang]` depending on what the browser provides.
     *
     * Use this method at your own risk, since not all browsers return a valid
     * locale (see {@link pascalprecht.translate.$translateProvider#methods_uniformLanguageTag uniformLanguageTag()}).
     *
     * @param {Function=} fn Function to determine a browser's locale
     */
    this.determinePreferredLanguage = function (fn) {
      var locale = fn && angular.isFunction(fn) ? fn() : getLocale()

      if (!$availableLanguageKeys.length) {
        $preferredLanguage = locale
      } else {
        $preferredLanguage = negotiateLocale(locale) || locale
      }

      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Registers a set of language keys the app will work with. Use this method in
     * combination with
     * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
     * When available languages keys are registered, angular-translate
     * tries to find the best fitting language key depending on the browsers locale,
     * considering your language key convention.
     *
     * @param {object} languageKeys Array of language keys the your app will use
     * @param {object=} aliases Alias map.
     */
    this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
      if (languageKeys) {
        $availableLanguageKeys = languageKeys
        if (aliases) {
          $languageKeyAliases = aliases
        }
        return this
      }
      return $availableLanguageKeys
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#useLoaderCache
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Registers a cache for internal $http based loaders.
     * {@link pascalprecht.translate.$translationCache $translationCache}.
     * When false the cache will be disabled (default). When true or undefined
     * the cache will be a default (see $cacheFactory). When an object it will
     * be treat as a cache object itself: the usage is $http({cache: cache})
     *
     * @param {object} cache boolean, string or cache-object
     */
    this.useLoaderCache = function (cache) {
      if (cache === false) {
        // disable cache
        loaderCache = undefined
      } else if (cache === true) {
        // enable cache using AJS defaults
        loaderCache = true
      } else if (typeof cache === 'undefined') {
        // enable cache using default
        loaderCache = '$translationCache'
      } else if (cache) {
        // enable cache using given one (see $cacheFactory)
        loaderCache = cache
      }
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#directivePriority
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Sets the default priority of the translate directive. The standard value is `0`.
     * Calling this function without an argument will return the current value.
     *
     * @param {number} priority for the translate-directive
     */
    this.directivePriority = function (priority) {
      if (priority === undefined) {
        // getter
        return directivePriority
      } else {
        // setter with chaining
        directivePriority = priority
        return this
      }
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#statefulFilter
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * Since AngularJS 1.3, filters which are not stateless (depending at the scope)
     * have to explicit define this behavior.
     * Sets whether the translate filter should be stateful or stateless. The standard value is `true`
     * meaning being stateful.
     * Calling this function without an argument will return the current value.
     *
     * @param {boolean} state - defines the state of the filter
     */
    this.statefulFilter = function (state) {
      if (state === undefined) {
        // getter
        return statefulFilter
      } else {
        // setter with chaining
        statefulFilter = state
        return this
      }
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#postProcess
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * The post processor will be intercept right after the translation result. It can modify the result.
     *
     * @param {object} fn Function or service name (string) to be called after the translation value has been set / resolved. The function itself will enrich every value being processed and then continue the normal resolver process
     */
    this.postProcess = function (fn) {
      if (fn) {
        postProcessFn = fn
      } else {
        postProcessFn = undefined
      }
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateProvider#keepContent
     * @methodOf pascalprecht.translate.$translateProvider
     *
     * @description
     * If keepContent is set to true than translate directive will always use innerHTML
     * as a default translation
     *
     * Example:
     * <pre>
     *  app.config(function ($translateProvider) {
     *    $translateProvider.keepContent(true);
     *  });
     * </pre>
     *
     * @param {boolean} value - valid values are true or false
     */
    this.keepContent = function (value) {
      $keepContent = !!value
      return this
    }

    /**
     * @ngdoc object
     * @name pascalprecht.translate.$translate
     * @requires $interpolate
     * @requires $log
     * @requires $rootScope
     * @requires $q
     *
     * @description
     * The `$translate` service is the actual core of angular-translate. It expects a translation id
     * and optional interpolate parameters to translate contents.
     *
     * <pre>
     *  $translate('HEADLINE_TEXT').then(function (translation) {
     *    $scope.translatedText = translation;
     *  });
     * </pre>
     *
     * @param {string|array} translationId A token which represents a translation id
     *                                     This can be optionally an array of translation ids which
     *                                     results that the function returns an object where each key
     *                                     is the translation id and the value the translation.
     * @param {object=} [interpolateParams={}] An object hash for dynamic values
     * @param {string=} [interpolationId=undefined] The id of the interpolation to use (use default unless set via useInterpolation())
     * @param {string=} [defaultTranslationText=undefined] the optional default translation text that is written as
     *                                        as default text in case it is not found in any configured language
     * @param {string=} [forceLanguage=false] A language to be used instead of the current language
     * @param {string=} [sanitizeStrategy=undefined] force sanitize strategy for this call instead of using the configured one (use default unless set)
     * @returns {object} promise
     */
    this.$get = [
      '$log',
      '$injector',
      '$rootScope',
      '$q',
      function ($log, $injector, $rootScope, $q) {
        var Storage,
          defaultInterpolator = $injector.get(
            $interpolationFactory || '$translateDefaultInterpolation'
          ),
          pendingLoader = false,
          interpolatorHashMap = {},
          langPromises = {},
          fallbackIndex,
          startFallbackIteration

        var $translate = function (
          translationId,
          interpolateParams,
          interpolationId,
          defaultTranslationText,
          forceLanguage,
          sanitizeStrategy
        ) {
          if (!$uses && $preferredLanguage) {
            $uses = $preferredLanguage
          }
          var uses =
            forceLanguage && forceLanguage !== $uses // we don't want to re-negotiate $uses
              ? negotiateLocale(forceLanguage) || forceLanguage
              : $uses

          // Check forceLanguage is present
          if (forceLanguage) {
            loadTranslationsIfMissing(forceLanguage)
          }

          // Duck detection: If the first argument is an array, a bunch of translations was requested.
          // The result is an object.
          if (angular.isArray(translationId)) {
            // Inspired by Q.allSettled by Kris Kowal
            // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
            // This transforms all promises regardless resolved or rejected
            var translateAll = function (translationIds) {
              var results = {} // storing the actual results
              var promises = [] // promises to wait for
              // Wraps the promise a) being always resolved and b) storing the link id->value
              var translate = function (translationId) {
                var deferred = $q.defer()
                var regardless = function (value) {
                  results[translationId] = value
                  deferred.resolve([translationId, value])
                }
                // we don't care whether the promise was resolved or rejected; just store the values
                $translate(
                  translationId,
                  interpolateParams,
                  interpolationId,
                  defaultTranslationText,
                  forceLanguage,
                  sanitizeStrategy
                ).then(regardless, regardless)
                return deferred.promise
              }
              for (var i = 0, c = translationIds.length; i < c; i++) {
                promises.push(translate(translationIds[i]))
              }
              // wait for all (including storing to results)
              return $q.all(promises).then(function () {
                // return the results
                return results
              })
            }
            return translateAll(translationId)
          }

          var deferred = $q.defer()

          // trim off any whitespace
          if (translationId) {
            translationId = trim.apply(translationId)
          } else {
            throw new TypeError('translationId must be a not empty string')
          }

          var promiseToWaitFor = (function () {
            var promise = langPromises[uses] || langPromises[$preferredLanguage]

            fallbackIndex = 0

            if ($storageFactory && !promise) {
              // looks like there's no pending promise for $preferredLanguage or
              // $uses. Maybe there's one pending for a language that comes from
              // storage.
              var langKey = Storage.get($storageKey)
              promise = langPromises[langKey]

              if ($fallbackLanguage && $fallbackLanguage.length) {
                var index = indexOf($fallbackLanguage, langKey)
                // maybe the language from storage is also defined as fallback language
                // we increase the fallback language index to not search in that language
                // as fallback, since it's probably the first used language
                // in that case the index starts after the first element
                fallbackIndex = index === 0 ? 1 : 0

                // but we can make sure to ALWAYS fallback to preferred language at least
                if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
                  $fallbackLanguage.push($preferredLanguage)
                }
              }
            }
            return promise
          })()

          if (!promiseToWaitFor) {
            // no promise to wait for? okay. Then there's no loader registered
            // nor is a one pending for language that comes from storage.
            // We can just translate.
            determineTranslation(
              translationId,
              interpolateParams,
              interpolationId,
              defaultTranslationText,
              uses,
              sanitizeStrategy
            ).then(deferred.resolve, deferred.reject)
          } else {
            var promiseResolved = function () {
              // $uses may have changed while waiting
              if (!forceLanguage) {
                uses = $uses
              }
              determineTranslation(
                translationId,
                interpolateParams,
                interpolationId,
                defaultTranslationText,
                uses,
                sanitizeStrategy
              ).then(deferred.resolve, deferred.reject)
            }
            promiseResolved.displayName = 'promiseResolved'

            promiseToWaitFor['finally'](promiseResolved)['catch'](angular.noop) // we don't care about errors here, already handled
          }
          return deferred.promise
        }

        /**
         * @name applyNotFoundIndicators
         * @private
         *
         * @description
         * Applies not fount indicators to given translation id, if needed.
         * This function gets only executed, if a translation id doesn't exist,
         * which is why a translation id is expected as argument.
         *
         * @param {string} translationId Translation id.
         * @returns {string} Same as given translation id but applied with not found
         * indicators.
         */
        var applyNotFoundIndicators = function (translationId) {
          // applying notFoundIndicators
          if ($notFoundIndicatorLeft) {
            translationId = [$notFoundIndicatorLeft, translationId].join(' ')
          }
          if ($notFoundIndicatorRight) {
            translationId = [translationId, $notFoundIndicatorRight].join(' ')
          }
          return translationId
        }

        /**
         * @name useLanguage
         * @private
         *
         * @description
         * Makes actual use of a language by setting a given language key as used
         * language and informs registered interpolators to also use the given
         * key as locale.
         *
         * @param {string} key Locale key.
         */
        var useLanguage = function (key) {
          $uses = key

          // make sure to store new language key before triggering success event
          if ($storageFactory) {
            Storage.put($translate.storageKey(), $uses)
          }

          $rootScope.$emit('$translateChangeSuccess', { language: key })

          // inform default interpolator
          defaultInterpolator.setLocale($uses)

          var eachInterpolator = function (interpolator, id) {
            interpolatorHashMap[id].setLocale($uses)
          }
          eachInterpolator.displayName = 'eachInterpolatorLocaleSetter'

          // inform all others too!
          angular.forEach(interpolatorHashMap, eachInterpolator)
          $rootScope.$emit('$translateChangeEnd', { language: key })
        }

        /**
         * @name loadAsync
         * @private
         *
         * @description
         * Kicks off registered async loader using `$injector` and applies existing
         * loader options. When resolved, it updates translation tables accordingly
         * or rejects with given language key.
         *
         * @param {string} key Language key.
         * @return {Promise} A promise.
         */
        var loadAsync = function (key) {
          if (!key) {
            throw 'No language key specified for loading.'
          }

          var deferred = $q.defer()

          $rootScope.$emit('$translateLoadingStart', { language: key })
          pendingLoader = true

          var cache = loaderCache
          if (typeof cache === 'string') {
            // getting on-demand instance of loader
            cache = $injector.get(cache)
          }

          var loaderOptions = angular.extend({}, $loaderOptions, {
            key: key,
            $http: angular.extend(
              {},
              {
                cache: cache,
              },
              $loaderOptions.$http
            ),
          })

          var onLoaderSuccess = function (data) {
            var translationTable = {}
            $rootScope.$emit('$translateLoadingSuccess', { language: key })

            if (angular.isArray(data)) {
              angular.forEach(data, function (table) {
                angular.extend(translationTable, flatObject(table))
              })
            } else {
              angular.extend(translationTable, flatObject(data))
            }
            pendingLoader = false
            deferred.resolve({
              key: key,
              table: translationTable,
            })
            $rootScope.$emit('$translateLoadingEnd', { language: key })
          }
          onLoaderSuccess.displayName = 'onLoaderSuccess'

          var onLoaderError = function (key) {
            $rootScope.$emit('$translateLoadingError', { language: key })
            deferred.reject(key)
            $rootScope.$emit('$translateLoadingEnd', { language: key })
          }
          onLoaderError.displayName = 'onLoaderError'

          $injector.get($loaderFactory)(loaderOptions).then(onLoaderSuccess, onLoaderError)

          return deferred.promise
        }

        if ($storageFactory) {
          Storage = $injector.get($storageFactory)

          if (!Storage.get || !Storage.put) {
            throw new Error(
              "Couldn't use storage '" + $storageFactory + "', missing get() or put() method!"
            )
          }
        }

        // if we have additional interpolations that were added via
        // $translateProvider.addInterpolation(), we have to map'em
        if ($interpolatorFactories.length) {
          var eachInterpolationFactory = function (interpolatorFactory) {
            var interpolator = $injector.get(interpolatorFactory)
            // setting initial locale for each interpolation service
            interpolator.setLocale($preferredLanguage || $uses)
            // make'em recognizable through id
            interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator
          }
          eachInterpolationFactory.displayName = 'interpolationFactoryAdder'

          angular.forEach($interpolatorFactories, eachInterpolationFactory)
        }

        /**
         * @name getTranslationTable
         * @private
         *
         * @description
         * Returns a promise that resolves to the translation table
         * or is rejected if an error occurred.
         *
         * @param langKey
         * @returns {Q.promise}
         */
        var getTranslationTable = function (langKey) {
          var deferred = $q.defer()
          if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
            deferred.resolve($translationTable[langKey])
          } else if (langPromises[langKey]) {
            var onResolve = function (data) {
              translations(data.key, data.table)
              deferred.resolve(data.table)
            }
            onResolve.displayName = 'translationTableResolver'
            langPromises[langKey].then(onResolve, deferred.reject)
          } else {
            deferred.reject()
          }
          return deferred.promise
        }

        /**
         * @name getFallbackTranslation
         * @private
         *
         * @description
         * Returns a promise that will resolve to the translation
         * or be rejected if no translation was found for the language.
         * This function is currently only used for fallback language translation.
         *
         * @param langKey The language to translate to.
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param sanitizeStrategy
         * @returns {Q.promise}
         */
        var getFallbackTranslation = function (
          langKey,
          translationId,
          interpolateParams,
          Interpolator,
          sanitizeStrategy
        ) {
          var deferred = $q.defer()

          var onResolve = function (translationTable) {
            if (
              Object.prototype.hasOwnProperty.call(translationTable, translationId) &&
              translationTable[translationId] !== null
            ) {
              Interpolator.setLocale(langKey)
              var translation = translationTable[translationId]
              if (translation.substr(0, 2) === '@:') {
                getFallbackTranslation(
                  langKey,
                  translation.substr(2),
                  interpolateParams,
                  Interpolator,
                  sanitizeStrategy
                ).then(deferred.resolve, deferred.reject)
              } else {
                var interpolatedValue = Interpolator.interpolate(
                  translationTable[translationId],
                  interpolateParams,
                  'service',
                  sanitizeStrategy,
                  translationId
                )
                interpolatedValue = applyPostProcessing(
                  translationId,
                  translationTable[translationId],
                  interpolatedValue,
                  interpolateParams,
                  langKey
                )

                deferred.resolve(interpolatedValue)
              }
              Interpolator.setLocale($uses)
            } else {
              deferred.reject()
            }
          }
          onResolve.displayName = 'fallbackTranslationResolver'

          getTranslationTable(langKey).then(onResolve, deferred.reject)

          return deferred.promise
        }

        /**
         * @name getFallbackTranslationInstant
         * @private
         *
         * @description
         * Returns a translation
         * This function is currently only used for fallback language translation.
         *
         * @param langKey The language to translate to.
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param sanitizeStrategy sanitize strategy override
         *
         * @returns {string} translation
         */
        var getFallbackTranslationInstant = function (
          langKey,
          translationId,
          interpolateParams,
          Interpolator,
          sanitizeStrategy
        ) {
          var result,
            translationTable = $translationTable[langKey]

          if (
            translationTable &&
            Object.prototype.hasOwnProperty.call(translationTable, translationId) &&
            translationTable[translationId] !== null
          ) {
            Interpolator.setLocale(langKey)
            result = Interpolator.interpolate(
              translationTable[translationId],
              interpolateParams,
              'filter',
              sanitizeStrategy,
              translationId
            )
            result = applyPostProcessing(
              translationId,
              translationTable[translationId],
              result,
              interpolateParams,
              langKey,
              sanitizeStrategy
            )
            // workaround for TrustedValueHolderType
            if (!angular.isString(result) && angular.isFunction(result.$$unwrapTrustedValue)) {
              var result2 = result.$$unwrapTrustedValue()
              if (result2.substr(0, 2) === '@:') {
                return getFallbackTranslationInstant(
                  langKey,
                  result2.substr(2),
                  interpolateParams,
                  Interpolator,
                  sanitizeStrategy
                )
              }
            } else if (result.substr(0, 2) === '@:') {
              return getFallbackTranslationInstant(
                langKey,
                result.substr(2),
                interpolateParams,
                Interpolator,
                sanitizeStrategy
              )
            }
            Interpolator.setLocale($uses)
          }

          return result
        }

        /**
         * @name translateByHandler
         * @private
         *
         * Translate by missing translation handler.
         *
         * @param translationId
         * @param interpolateParams
         * @param defaultTranslationText
         * @param sanitizeStrategy sanitize strategy override
         *
         * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
         * absent
         */
        var translateByHandler = function (
          translationId,
          interpolateParams,
          defaultTranslationText,
          sanitizeStrategy
        ) {
          // If we have a handler factory - we might also call it here to determine if it provides
          // a default text for a translationid that can't be found anywhere in our tables
          if ($missingTranslationHandlerFactory) {
            return $injector.get($missingTranslationHandlerFactory)(
              translationId,
              $uses,
              interpolateParams,
              defaultTranslationText,
              sanitizeStrategy
            )
          } else {
            return translationId
          }
        }

        /**
         * @name resolveForFallbackLanguage
         * @private
         *
         * Recursive helper function for fallbackTranslation that will sequentially look
         * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
         *
         * @param fallbackLanguageIndex
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param defaultTranslationText
         * @param sanitizeStrategy
         * @returns {Q.promise} Promise that will resolve to the translation.
         */
        var resolveForFallbackLanguage = function (
          fallbackLanguageIndex,
          translationId,
          interpolateParams,
          Interpolator,
          defaultTranslationText,
          sanitizeStrategy
        ) {
          var deferred = $q.defer()

          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex]
            getFallbackTranslation(
              langKey,
              translationId,
              interpolateParams,
              Interpolator,
              sanitizeStrategy
            ).then(
              function (data) {
                deferred.resolve(data)
              },
              function () {
                // Look in the next fallback language for a translation.
                // It delays the resolving by passing another promise to resolve.
                return resolveForFallbackLanguage(
                  fallbackLanguageIndex + 1,
                  translationId,
                  interpolateParams,
                  Interpolator,
                  defaultTranslationText,
                  sanitizeStrategy
                ).then(deferred.resolve, deferred.reject)
              }
            )
          } else {
            // No translation found in any fallback language
            // if a default translation text is set in the directive, then return this as a result
            if (defaultTranslationText) {
              deferred.resolve(defaultTranslationText)
            } else {
              var missingTranslationHandlerTranslation = translateByHandler(
                translationId,
                interpolateParams,
                defaultTranslationText
              )

              // if no default translation is set and an error handler is defined, send it to the handler
              // and then return the result if it isn't undefined
              if ($missingTranslationHandlerFactory && missingTranslationHandlerTranslation) {
                deferred.resolve(missingTranslationHandlerTranslation)
              } else {
                deferred.reject(applyNotFoundIndicators(translationId))
              }
            }
          }
          return deferred.promise
        }

        /**
         * @name resolveForFallbackLanguageInstant
         * @private
         *
         * Recursive helper function for fallbackTranslation that will sequentially look
         * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
         *
         * @param fallbackLanguageIndex
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param sanitizeStrategy
         * @returns {string} translation
         */
        var resolveForFallbackLanguageInstant = function (
          fallbackLanguageIndex,
          translationId,
          interpolateParams,
          Interpolator,
          sanitizeStrategy
        ) {
          var result

          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex]
            result = getFallbackTranslationInstant(
              langKey,
              translationId,
              interpolateParams,
              Interpolator,
              sanitizeStrategy
            )
            if (!result && result !== '') {
              result = resolveForFallbackLanguageInstant(
                fallbackLanguageIndex + 1,
                translationId,
                interpolateParams,
                Interpolator
              )
            }
          }
          return result
        }

        /**
         * Translates with the usage of the fallback languages.
         *
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param defaultTranslationText
         * @param sanitizeStrategy
         * @returns {Q.promise} Promise, that resolves to the translation.
         */
        var fallbackTranslation = function (
          translationId,
          interpolateParams,
          Interpolator,
          defaultTranslationText,
          sanitizeStrategy
        ) {
          // Start with the fallbackLanguage with index 0
          return resolveForFallbackLanguage(
            startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex,
            translationId,
            interpolateParams,
            Interpolator,
            defaultTranslationText,
            sanitizeStrategy
          )
        }

        /**
         * Translates with the usage of the fallback languages.
         *
         * @param translationId
         * @param interpolateParams
         * @param Interpolator
         * @param sanitizeStrategy
         * @returns {String} translation
         */
        var fallbackTranslationInstant = function (
          translationId,
          interpolateParams,
          Interpolator,
          sanitizeStrategy
        ) {
          // Start with the fallbackLanguage with index 0
          return resolveForFallbackLanguageInstant(
            startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex,
            translationId,
            interpolateParams,
            Interpolator,
            sanitizeStrategy
          )
        }

        var determineTranslation = function (
          translationId,
          interpolateParams,
          interpolationId,
          defaultTranslationText,
          uses,
          sanitizeStrategy
        ) {
          var deferred = $q.defer()

          var table = uses ? $translationTable[uses] : $translationTable,
            Interpolator = interpolationId
              ? interpolatorHashMap[interpolationId]
              : defaultInterpolator

          // if the translation id exists, we can just interpolate it
          if (
            table &&
            Object.prototype.hasOwnProperty.call(table, translationId) &&
            table[translationId] !== null
          ) {
            var translation = table[translationId]

            // If using link, rerun $translate with linked translationId and return it
            if (translation.substr(0, 2) === '@:') {
              $translate(
                translation.substr(2),
                interpolateParams,
                interpolationId,
                defaultTranslationText,
                uses,
                sanitizeStrategy
              ).then(deferred.resolve, deferred.reject)
            } else {
              //
              var resolvedTranslation = Interpolator.interpolate(
                translation,
                interpolateParams,
                'service',
                sanitizeStrategy,
                translationId
              )
              resolvedTranslation = applyPostProcessing(
                translationId,
                translation,
                resolvedTranslation,
                interpolateParams,
                uses
              )
              deferred.resolve(resolvedTranslation)
            }
          } else {
            var missingTranslationHandlerTranslation
            // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              missingTranslationHandlerTranslation = translateByHandler(
                translationId,
                interpolateParams,
                defaultTranslationText
              )
            }

            // since we couldn't translate the inital requested translation id,
            // we try it now with one or more fallback languages, if fallback language(s) is
            // configured.
            if (uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackTranslation(
                translationId,
                interpolateParams,
                Interpolator,
                defaultTranslationText,
                sanitizeStrategy
              ).then(
                function (translation) {
                  deferred.resolve(translation)
                },
                function (_translationId) {
                  deferred.reject(applyNotFoundIndicators(_translationId))
                }
              )
            } else if (
              $missingTranslationHandlerFactory &&
              !pendingLoader &&
              missingTranslationHandlerTranslation
            ) {
              // looks like the requested translation id doesn't exists.
              // Now, if there is a registered handler for missing translations and no
              // asyncLoader is pending, we execute the handler
              if (defaultTranslationText) {
                deferred.resolve(defaultTranslationText)
              } else {
                deferred.resolve(missingTranslationHandlerTranslation)
              }
            } else {
              if (defaultTranslationText) {
                deferred.resolve(defaultTranslationText)
              } else {
                deferred.reject(applyNotFoundIndicators(translationId))
              }
            }
          }
          return deferred.promise
        }

        var determineTranslationInstant = function (
          translationId,
          interpolateParams,
          interpolationId,
          uses,
          sanitizeStrategy
        ) {
          var result,
            table = uses ? $translationTable[uses] : $translationTable,
            Interpolator = defaultInterpolator

          // if the interpolation id exists use custom interpolator
          if (
            interpolatorHashMap &&
            Object.prototype.hasOwnProperty.call(interpolatorHashMap, interpolationId)
          ) {
            Interpolator = interpolatorHashMap[interpolationId]
          }

          // if the translation id exists, we can just interpolate it
          if (
            table &&
            Object.prototype.hasOwnProperty.call(table, translationId) &&
            table[translationId] !== null
          ) {
            var translation = table[translationId]

            // If using link, rerun $translate with linked translationId and return it
            if (translation.substr(0, 2) === '@:') {
              result = determineTranslationInstant(
                translation.substr(2),
                interpolateParams,
                interpolationId,
                uses,
                sanitizeStrategy
              )
            } else {
              result = Interpolator.interpolate(
                translation,
                interpolateParams,
                'filter',
                sanitizeStrategy,
                translationId
              )
              result = applyPostProcessing(
                translationId,
                translation,
                result,
                interpolateParams,
                uses,
                sanitizeStrategy
              )
            }
          } else {
            var missingTranslationHandlerTranslation
            // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              missingTranslationHandlerTranslation = translateByHandler(
                translationId,
                interpolateParams,
                sanitizeStrategy
              )
            }

            // since we couldn't translate the inital requested translation id,
            // we try it now with one or more fallback languages, if fallback language(s) is
            // configured.
            if (uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackIndex = 0
              result = fallbackTranslationInstant(
                translationId,
                interpolateParams,
                Interpolator,
                sanitizeStrategy
              )
            } else if (
              $missingTranslationHandlerFactory &&
              !pendingLoader &&
              missingTranslationHandlerTranslation
            ) {
              // looks like the requested translation id doesn't exists.
              // Now, if there is a registered handler for missing translations and no
              // asyncLoader is pending, we execute the handler
              result = missingTranslationHandlerTranslation
            } else {
              result = applyNotFoundIndicators(translationId)
            }
          }

          return result
        }

        var clearNextLangAndPromise = function (key) {
          if ($nextLang === key) {
            $nextLang = undefined
          }
          langPromises[key] = undefined
        }

        var applyPostProcessing = function (
          translationId,
          translation,
          resolvedTranslation,
          interpolateParams,
          uses,
          sanitizeStrategy
        ) {
          var fn = postProcessFn

          if (fn) {
            if (typeof fn === 'string') {
              // getting on-demand instance
              fn = $injector.get(fn)
            }
            if (fn) {
              return fn(
                translationId,
                translation,
                resolvedTranslation,
                interpolateParams,
                uses,
                sanitizeStrategy
              )
            }
          }

          return resolvedTranslation
        }

        var loadTranslationsIfMissing = function (key) {
          if (!$translationTable[key] && $loaderFactory && !langPromises[key]) {
            langPromises[key] = loadAsync(key).then(function (translation) {
              translations(translation.key, translation.table)
              return translation
            })
          }
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#preferredLanguage
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the language key for the preferred language.
         *
         * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
         *
         * @return {string} preferred language key
         */
        $translate.preferredLanguage = function (langKey) {
          if (langKey) {
            setupPreferredLanguage(langKey)
          }
          return $preferredLanguage
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#cloakClassName
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the configured class name for `translate-cloak` directive.
         *
         * @return {string} cloakClassName
         */
        $translate.cloakClassName = function () {
          return $cloakClassName
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#allowNamespaces
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns if namespaces are enabled
         *
         * @return {boolean} allowNamespaces value
         */
        $translate.allowNamespaces = function () {
          return $allowNamespaces
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#nestedObjectDelimeter
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the configured delimiter for nested namespaces.
         *
         * @return {string} nestedObjectDelimeter
         */
        $translate.nestedObjectDelimeter = function () {
          return $nestedObjectDelimeter
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#fallbackLanguage
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the language key for the fallback languages or sets a new fallback stack.
         * It is recommended to call this before {@link pascalprecht.translate.$translateProvider#preferredLanguage preferredLanguage()}.
         *
         * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
         *
         * @return {string||array} fallback language key
         */
        $translate.fallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            fallbackStack(langKey)

            // as we might have an async loader initiated and a new translation language might have been defined
            // we need to add the promise to the stack also. So - iterate.
            if ($loaderFactory) {
              if ($fallbackLanguage && $fallbackLanguage.length) {
                for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                  if (!langPromises[$fallbackLanguage[i]]) {
                    langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i])
                  }
                }
              }
            }
            $translate.use($translate.use())
          }
          if ($fallbackWasString) {
            return $fallbackLanguage[0]
          } else {
            return $fallbackLanguage
          }
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#useFallbackLanguage
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Sets the first key of the fallback language stack to be used for translation.
         * Therefore all languages in the fallback array BEFORE this key will be skipped!
         *
         * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
         * get back to the whole stack
         */
        $translate.useFallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            if (!langKey) {
              startFallbackIteration = 0
            } else {
              var langKeyPosition = indexOf($fallbackLanguage, langKey)
              if (langKeyPosition > -1) {
                startFallbackIteration = langKeyPosition
              }
            }
          }
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#proposedLanguage
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the language key of language that is currently loaded asynchronously.
         *
         * @return {string} language key
         */
        $translate.proposedLanguage = function () {
          return $nextLang
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#storage
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns registered storage.
         *
         * @return {object} Storage
         */
        $translate.storage = function () {
          return Storage
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#negotiateLocale
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns a language key based on available languages and language aliases. If a
         * language key cannot be resolved, returns undefined.
         *
         * If no or a falsy key is given, returns undefined.
         *
         * @param {string} [key] Language key
         * @return {string|undefined} Language key or undefined if no language key is found.
         */
        $translate.negotiateLocale = negotiateLocale

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#use
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Tells angular-translate which language to use by given language key. This method is
         * used to change language at runtime. It also takes care of storing the language
         * key in a configured store to let your app remember the choosed language.
         *
         * When trying to 'use' a language which isn't available it tries to load it
         * asynchronously with registered loaders.
         *
         * Returns promise object with loaded language file data or string of the currently used language.
         *
         * If no or a falsy key is given it returns the currently used language key.
         * The returned string will be ```undefined``` if setting up $translate hasn't finished.
         * @example
         * $translate.use("en_US").then(function(data){
         *   $scope.text = $translate("HELLO");
         * });
         *
         * @param {string=} key Language key
         * @return {object|string} Promise with loaded language data or the language key if a falsy param was given.
         */
        $translate.use = function (key) {
          if (!key) {
            return $uses
          }

          var deferred = $q.defer()
          deferred.promise.then(null, angular.noop) // AJS "Possibly unhandled rejection"

          $rootScope.$emit('$translateChangeStart', { language: key })

          // Try to get the aliased language key
          var aliasedKey = negotiateLocale(key)
          // Ensure only registered language keys will be loaded
          if ($availableLanguageKeys.length > 0 && !aliasedKey) {
            return $q.reject(key)
          }

          if (aliasedKey) {
            key = aliasedKey
          }

          // if there isn't a translation table for the language we've requested,
          // we load it asynchronously
          $nextLang = key
          if (
            ($forceAsyncReloadEnabled || !$translationTable[key]) &&
            $loaderFactory &&
            !langPromises[key]
          ) {
            langPromises[key] = loadAsync(key).then(
              function (translation) {
                translations(translation.key, translation.table)
                deferred.resolve(translation.key)
                if ($nextLang === key) {
                  useLanguage(translation.key)
                }
                return translation
              },
              function (key) {
                $rootScope.$emit('$translateChangeError', { language: key })
                deferred.reject(key)
                $rootScope.$emit('$translateChangeEnd', { language: key })
                return $q.reject(key)
              }
            )
            langPromises[key]['finally'](function () {
              clearNextLangAndPromise(key)
            })['catch'](angular.noop) // we don't care about errors (clearing)
          } else if (langPromises[key]) {
            // we are already loading this asynchronously
            // resolve our new deferred when the old langPromise is resolved
            langPromises[key].then(
              function (translation) {
                if ($nextLang === translation.key) {
                  useLanguage(translation.key)
                }
                deferred.resolve(translation.key)
                return translation
              },
              function (key) {
                // find first available fallback language if that request has failed
                if (
                  !$uses &&
                  $fallbackLanguage &&
                  $fallbackLanguage.length > 0 &&
                  $fallbackLanguage[0] !== key
                ) {
                  return $translate
                    .use($fallbackLanguage[0])
                    .then(deferred.resolve, deferred.reject)
                } else {
                  return deferred.reject(key)
                }
              }
            )
          } else {
            deferred.resolve(key)
            useLanguage(key)
          }

          return deferred.promise
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#resolveClientLocale
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * This returns the current browser/client's language key. The result is processed with the configured uniform tag resolver.
         *
         * @returns {string} the current client/browser language key
         */
        $translate.resolveClientLocale = function () {
          return getLocale()
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#storageKey
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the key for the storage.
         *
         * @return {string} storage key
         */
        $translate.storageKey = function () {
          return storageKey()
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#isPostCompilingEnabled
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns whether post compiling is enabled or not
         *
         * @return {bool} storage key
         */
        $translate.isPostCompilingEnabled = function () {
          return $postCompilingEnabled
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#isForceAsyncReloadEnabled
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns whether force async reload is enabled or not
         *
         * @return {boolean} forceAsyncReload value
         */
        $translate.isForceAsyncReloadEnabled = function () {
          return $forceAsyncReloadEnabled
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#isKeepContent
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns whether keepContent or not
         *
         * @return {boolean} keepContent value
         */
        $translate.isKeepContent = function () {
          return $keepContent
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#refresh
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
         * the module will drop all existent translation tables and load new version of those which
         * are currently in use.
         *
         * Refresh means that the module will drop target translation table and try to load it again.
         *
         * In case there are no loaders registered the refresh() method will throw an Error.
         *
         * If the module is able to refresh translation tables refresh() method will broadcast
         * $translateRefreshStart and $translateRefreshEnd events.
         *
         * @example
         * // this will drop all currently existent translation tables and reload those which are
         * // currently in use
         * $translate.refresh();
         * // this will refresh a translation table for the en_US language
         * $translate.refresh('en_US');
         *
         * @param {string} langKey A language key of the table, which has to be refreshed
         *
         * @return {promise} Promise, which will be resolved in case a translation tables refreshing
         * process is finished successfully, and reject if not.
         */
        $translate.refresh = function (langKey) {
          if (!$loaderFactory) {
            throw new Error("Couldn't refresh translation table, no loader registered!")
          }

          $rootScope.$emit('$translateRefreshStart', { language: langKey })

          var deferred = $q.defer(),
            updatedLanguages = {}

          //private helper
          function loadNewData(languageKey) {
            var promise = loadAsync(languageKey)
            //update the load promise cache for this language
            langPromises[languageKey] = promise
            //register a data handler for the promise
            promise.then(
              function (data) {
                //clear the cache for this language
                $translationTable[languageKey] = {}
                //add the new data for this language
                translations(languageKey, data.table)
                //track that we updated this language
                updatedLanguages[languageKey] = true
              },
              //handle rejection to appease the $q validation
              angular.noop
            )
            return promise
          }

          //set up post-processing
          deferred.promise
            .then(
              function () {
                for (var key in $translationTable) {
                  if ($translationTable.hasOwnProperty(key)) {
                    //delete cache entries that were not updated
                    if (!(key in updatedLanguages)) {
                      delete $translationTable[key]
                    }
                  }
                }
                if ($uses) {
                  useLanguage($uses)
                }
              },
              //handle rejection to appease the $q validation
              angular.noop
            )
            ['finally'](function () {
              $rootScope.$emit('$translateRefreshEnd', { language: langKey })
            })

          if (!langKey) {
            // if there's no language key specified we refresh ALL THE THINGS!
            var languagesToReload = ($fallbackLanguage && $fallbackLanguage.slice()) || []
            if ($uses && languagesToReload.indexOf($uses) === -1) {
              languagesToReload.push($uses)
            }
            $q.all(languagesToReload.map(loadNewData)).then(deferred.resolve, deferred.reject)
          } else if ($translationTable[langKey]) {
            //just refresh the specified language cache
            loadNewData(langKey).then(deferred.resolve, deferred.reject)
          } else {
            deferred.reject()
          }

          return deferred.promise
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#instant
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns a translation instantly from the internal state of loaded translation. All rules
         * regarding the current language, the preferred language of even fallback languages will be
         * used except any promise handling. If a language was not found, an asynchronous loading
         * will be invoked in the background.
         *
         * @param {string|array} translationId A token which represents a translation id
         *                                     This can be optionally an array of translation ids which
         *                                     results that the function's promise returns an object where
         *                                     each key is the translation id and the value the translation.
         * @param {object=} [interpolateParams={}] Params
         * @param {string=} [interpolationId=undefined] The id of the interpolation to use (use default unless set via useInterpolation())
         * @param {string=} [forceLanguage=false] A language to be used instead of the current language
         * @param {string=} [sanitizeStrategy=undefined] force sanitize strategy for this call instead of using the configured one (use default unless set)
         *
         * @return {string|object} translation
         */
        $translate.instant = function (
          translationId,
          interpolateParams,
          interpolationId,
          forceLanguage,
          sanitizeStrategy
        ) {
          // we don't want to re-negotiate $uses
          var uses =
            forceLanguage && forceLanguage !== $uses // we don't want to re-negotiate $uses
              ? negotiateLocale(forceLanguage) || forceLanguage
              : $uses

          // Detect undefined and null values to shorten the execution and prevent exceptions
          if (translationId === null || angular.isUndefined(translationId)) {
            return translationId
          }

          // Check forceLanguage is present
          if (forceLanguage) {
            loadTranslationsIfMissing(forceLanguage)
          }

          // Duck detection: If the first argument is an array, a bunch of translations was requested.
          // The result is an object.
          if (angular.isArray(translationId)) {
            var results = {}
            for (var i = 0, c = translationId.length; i < c; i++) {
              results[translationId[i]] = $translate.instant(
                translationId[i],
                interpolateParams,
                interpolationId,
                forceLanguage,
                sanitizeStrategy
              )
            }
            return results
          }

          // We discarded unacceptable values. So we just need to verify if translationId is empty String
          if (angular.isString(translationId) && translationId.length < 1) {
            return translationId
          }

          // trim off any whitespace
          if (translationId) {
            translationId = trim.apply(translationId)
          }

          var result,
            possibleLangKeys = []
          if ($preferredLanguage) {
            possibleLangKeys.push($preferredLanguage)
          }
          if (uses) {
            possibleLangKeys.push(uses)
          }
          if ($fallbackLanguage && $fallbackLanguage.length) {
            possibleLangKeys = possibleLangKeys.concat($fallbackLanguage)
          }
          for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
            var possibleLangKey = possibleLangKeys[j]
            if ($translationTable[possibleLangKey]) {
              if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
                result = determineTranslationInstant(
                  translationId,
                  interpolateParams,
                  interpolationId,
                  uses,
                  sanitizeStrategy
                )
              }
            }
            if (typeof result !== 'undefined') {
              break
            }
          }

          if (!result && result !== '') {
            if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {
              result = applyNotFoundIndicators(translationId)
            } else {
              // Return translation of default interpolator if not found anything.
              result = defaultInterpolator.interpolate(
                translationId,
                interpolateParams,
                'filter',
                sanitizeStrategy
              )

              // looks like the requested translation id doesn't exists.
              // Now, if there is a registered handler for missing translations and no
              // asyncLoader is pending, we execute the handler
              var missingTranslationHandlerTranslation
              if ($missingTranslationHandlerFactory && !pendingLoader) {
                missingTranslationHandlerTranslation = translateByHandler(
                  translationId,
                  interpolateParams,
                  sanitizeStrategy
                )
              }

              if (
                $missingTranslationHandlerFactory &&
                !pendingLoader &&
                missingTranslationHandlerTranslation
              ) {
                result = missingTranslationHandlerTranslation
              }
            }
          }

          return result
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#versionInfo
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the current version information for the angular-translate library
         *
         * @return {string} angular-translate version
         */
        $translate.versionInfo = function () {
          return version
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#loaderCache
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns the defined loaderCache.
         *
         * @return {boolean|string|object} current value of loaderCache
         */
        $translate.loaderCache = function () {
          return loaderCache
        }

        // internal purpose only
        $translate.directivePriority = function () {
          return directivePriority
        }

        // internal purpose only
        $translate.statefulFilter = function () {
          return statefulFilter
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#isReady
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns whether the service is "ready" to translate (i.e. loading 1st language).
         *
         * See also {@link pascalprecht.translate.$translate#methods_onReady onReady()}.
         *
         * @return {boolean} current value of ready
         */
        $translate.isReady = function () {
          return $isReady
        }

        var $onReadyDeferred = $q.defer()
        $onReadyDeferred.promise.then(function () {
          $isReady = true
        })

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#onReady
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Calls the function provided or resolved the returned promise after the service is "ready" to translate (i.e. loading 1st language).
         *
         * See also {@link pascalprecht.translate.$translate#methods_isReady isReady()}.
         *
         * @param {Function=} fn Function to invoke when service is ready
         * @return {object} Promise resolved when service is ready
         */
        $translate.onReady = function (fn) {
          var deferred = $q.defer()
          if (angular.isFunction(fn)) {
            deferred.promise.then(fn)
          }
          if ($isReady) {
            deferred.resolve()
          } else {
            $onReadyDeferred.promise.then(deferred.resolve)
          }
          return deferred.promise
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#getAvailableLanguageKeys
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * This function simply returns the registered language keys being defined before in the config phase
         * With this, an application can use the array to provide a language selection dropdown or similar
         * without any additional effort
         *
         * @returns {object} returns the list of possibly registered language keys and mapping or null if not defined
         */
        $translate.getAvailableLanguageKeys = function () {
          if ($availableLanguageKeys.length > 0) {
            return $availableLanguageKeys
          }
          return null
        }

        /**
         * @ngdoc function
         * @name pascalprecht.translate.$translate#getTranslationTable
         * @methodOf pascalprecht.translate.$translate
         *
         * @description
         * Returns translation table by the given language key.
         *
         * Unless a language is provided it returns a translation table of the current one.
         * Note: If translation dictionary is currently downloading or in progress
         * it will return null.
         *
         * @param {string} langKey A token which represents a translation id
         *
         * @return {object} a copy of angular-translate $translationTable
         */
        $translate.getTranslationTable = function (langKey) {
          langKey = langKey || $translate.use()
          if (langKey && $translationTable[langKey]) {
            return angular.copy($translationTable[langKey])
          }
          return null
        }

        // Whenever $translateReady is being fired, this will ensure the state of $isReady
        var globalOnReadyListener = $rootScope.$on('$translateReady', function () {
          $onReadyDeferred.resolve()
          globalOnReadyListener() // one time only
          globalOnReadyListener = null
        })
        var globalOnChangeListener = $rootScope.$on('$translateChangeEnd', function () {
          $onReadyDeferred.resolve()
          globalOnChangeListener() // one time only
          globalOnChangeListener = null
        })

        if ($loaderFactory) {
          // If at least one async loader is defined and there are no
          // (default) translations available we should try to load them.
          if (angular.equals($translationTable, {})) {
            if ($translate.use()) {
              $translate.use($translate.use())
            }
          }

          // Also, if there are any fallback language registered, we start
          // loading them asynchronously as soon as we can.
          if ($fallbackLanguage && $fallbackLanguage.length) {
            var processAsyncResult = function (translation) {
              translations(translation.key, translation.table)
              $rootScope.$emit('$translateChangeEnd', { language: translation.key })
              return translation
            }
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              var fallbackLanguageId = $fallbackLanguage[i]
              if ($forceAsyncReloadEnabled || !$translationTable[fallbackLanguageId]) {
                langPromises[fallbackLanguageId] =
                  loadAsync(fallbackLanguageId).then(processAsyncResult)
              }
            }
          }
        } else {
          $rootScope.$emit('$translateReady', { language: $translate.use() })
        }

        return $translate
      },
    ]
  }

  $translate.displayName = 'displayName'

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translateDefaultInterpolation
   * @requires $interpolate
   *
   * @description
   * Uses angular's `$interpolate` services to interpolate strings against some values.
   *
   * Be aware to configure a proper sanitization strategy.
   *
   * See also:
   * * {@link pascalprecht.translate.$translateSanitization}
   *
   * @return {object} $translateDefaultInterpolation Interpolator service
   */
  angular
    .module('pascalprecht.translate')
    .factory('$translateDefaultInterpolation', $translateDefaultInterpolation)

  function $translateDefaultInterpolation($interpolate, $translateSanitization) {
    'use strict'

    var $translateInterpolator = {},
      $locale,
      $identifier = 'default'

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
     *
     * @description
     * Sets current locale (this is currently not use in this interpolation).
     *
     * @param {string} locale Language key or locale.
     */
    $translateInterpolator.setLocale = function (locale) {
      $locale = locale
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
     *
     * @description
     * Returns an identifier for this interpolation service.
     *
     * @returns {string} $identifier
     */
    $translateInterpolator.getInterpolationIdentifier = function () {
      return $identifier
    }

    /**
     * @deprecated will be removed in 3.0
     * @see {@link pascalprecht.translate.$translateSanitization}
     */
    $translateInterpolator.useSanitizeValueStrategy = function (value) {
      $translateSanitization.useStrategy(value)
      return this
    }

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
     * @methodOf pascalprecht.translate.$translateDefaultInterpolation
     *
     * @description
     * Interpolates given value agains given interpolate params using angulars
     * `$interpolate` service.
     *
     * Since AngularJS 1.5, `value` must not be a string but can be anything input.
     *
     * @param {string} value translation
     * @param {object} [interpolationParams={}] interpolation params
     * @param {string} [context=undefined] current context (filter, directive, service)
     * @param {string} [sanitizeStrategy=undefined] sanitize strategy (use default unless set)
     * @param {string} translationId current translationId
     *
     * @returns {string} interpolated string
     */
    $translateInterpolator.interpolate = function (
      value,
      interpolationParams,
      context,
      sanitizeStrategy,
      translationId
    ) {
      // jshint ignore:line
      interpolationParams = interpolationParams || {}
      interpolationParams = $translateSanitization.sanitize(
        interpolationParams,
        'params',
        sanitizeStrategy,
        context
      )

      var interpolatedText
      if (angular.isNumber(value)) {
        // numbers are safe
        interpolatedText = '' + value
      } else if (angular.isString(value)) {
        // strings must be interpolated (that's the job here)
        interpolatedText = $interpolate(value)(interpolationParams)
        interpolatedText = $translateSanitization.sanitize(
          interpolatedText,
          'text',
          sanitizeStrategy,
          context
        )
      } else {
        // neither a number or a string, cant interpolate => empty string
        interpolatedText = ''
      }

      return interpolatedText
    }

    return $translateInterpolator
  }

  $translateDefaultInterpolation.displayName = '$translateDefaultInterpolation'

  angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY')

  angular
    .module('pascalprecht.translate')
    /**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate
 * @requires $interpolate,
 * @requires $compile,
 * @requires $parse,
 * @requires $rootScope
 * @restrict AE
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses $translate service to translate the translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate Translation id which could be either string or interpolated string.
 * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
 * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
 * @param {string=} translate-default will be used unless translation was successful
 * @param {string=} translate-sanitize-strategy defines locally sanitize strategy
 * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translateProvider#methods_usePostCompiling}
 * @param {boolean=} translate-keep-content (default true if present) defines that in case a KEY could not be translated, that the existing content is left in the innerHTML}
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre translate="TRANSLATION_ID"></pre>
        <pre translate>TRANSLATION_ID</pre>
        <pre translate translate-attr-title="TRANSLATION_ID"></pre>
        <pre translate="{{translationId}}"></pre>
        <pre translate>{{translationId}}</pre>
        <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
        <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
        <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate translate-values="{{values}}">WITH_VALUES</pre>
        <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hi"></pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}',
          'WITH_CAMEL_CASE_KEY': 'The interpolation key is camel cased: {{camelCaseKey}}'
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>{{translationId}}</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.attr('title')).toBe('Hello there!');

          element = $compile('<p translate="WITH_CAMEL_CASE_KEY" translate-value-camel-case-key="Hello"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('The interpolation key is camel cased: Hello');
        });
      });
    </file>
   </example>
 */
    .directive('translate', translateDirective)
  function translateDirective($translate, $interpolate, $compile, $parse, $rootScope) {
    'use strict'

    /**
     * @name trim
     * @private
     *
     * @description
     * trim polyfill
     *
     * @returns {string} The string stripped of whitespace from both ends
     */
    var trim = function () {
      return this.toString().replace(/^\s+|\s+$/g, '')
    }

    /**
     * @name lowercase
     * @private
     *
     * @description
     * Return the lowercase string only if the type is string
     *
     * @returns {string} The string all in lowercase
     */
    var lowercase = function (string) {
      return angular.isString(string) ? string.toLowerCase() : string
    }

    return {
      restrict: 'AE',
      scope: true,
      priority: $translate.directivePriority(),
      compile: function (tElement, tAttr) {
        var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined

        var translateInterpolation = tAttr.translateInterpolation
          ? tAttr.translateInterpolation
          : undefined

        var translateSanitizeStrategyExist = tAttr.translateSanitizeStrategy
          ? tAttr.translateSanitizeStrategy
          : undefined

        var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i)

        var interpolateRegExp =
            '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)',
          watcherRegExp =
            '^(.*)' + $interpolate.startSymbol() + '(.*)' + $interpolate.endSymbol() + '(.*)'

        return function linkFn(scope, iElement, iAttr) {
          scope.interpolateParams = {}
          scope.preText = ''
          scope.postText = ''
          scope.translateNamespace = getTranslateNamespace(scope)
          var translationIds = {}

          var initInterpolationParams = function (interpolateParams, iAttr, tAttr) {
            // initial setup
            if (iAttr.translateValues) {
              angular.extend(interpolateParams, $parse(iAttr.translateValues)(scope.$parent))
            }
            // initially fetch all attributes if existing and fill the params
            if (translateValueExist) {
              for (var attr in tAttr) {
                if (
                  Object.prototype.hasOwnProperty.call(iAttr, attr) &&
                  attr.substr(0, 14) === 'translateValue' &&
                  attr !== 'translateValues'
                ) {
                  var attributeName = lowercase(attr.substr(14, 1)) + attr.substr(15)
                  interpolateParams[attributeName] = tAttr[attr]
                }
              }
            }
          }

          // Ensures any change of the attribute "translate" containing the id will
          // be re-stored to the scope's "translationId".
          // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
          var observeElementTranslation = function (translationId) {
            // Remove any old watcher
            if (angular.isFunction(observeElementTranslation._unwatchOld)) {
              observeElementTranslation._unwatchOld()
              observeElementTranslation._unwatchOld = undefined
            }

            if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {
              var iElementText = trim.apply(iElement.text()).replace(/\n/g, ' ')

              // Resolve translation id by inner html if required
              var interpolateMatches = iElementText.match(interpolateRegExp)
              // Interpolate translation id if required
              if (angular.isArray(interpolateMatches)) {
                scope.preText = interpolateMatches[1]
                scope.postText = interpolateMatches[3]
                translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent)
                var watcherMatches = iElementText.match(watcherRegExp)
                if (
                  angular.isArray(watcherMatches) &&
                  watcherMatches[2] &&
                  watcherMatches[2].length
                ) {
                  observeElementTranslation._unwatchOld = scope.$watch(
                    watcherMatches[2],
                    function (newValue) {
                      translationIds.translate = newValue
                      updateTranslations()
                    }
                  )
                }
              } else {
                // do not assigne the translation id if it is empty.
                translationIds.translate = !iElementText ? undefined : iElementText
              }
            } else {
              translationIds.translate = translationId
            }
            updateTranslations()
          }

          var observeAttributeTranslation = function (translateAttr) {
            iAttr.$observe(translateAttr, function (translationId) {
              translationIds[translateAttr] = translationId
              updateTranslations()
            })
          }

          // initial setup with values
          initInterpolationParams(scope.interpolateParams, iAttr, tAttr)

          var firstAttributeChangedEvent = true
          iAttr.$observe('translate', function (translationId) {
            if (typeof translationId === 'undefined') {
              // case of element "<translate>xyz</translate>"
              observeElementTranslation('')
            } else {
              // case of regular attribute
              if (translationId !== '' || !firstAttributeChangedEvent) {
                translationIds.translate = translationId
                updateTranslations()
              }
            }
            firstAttributeChangedEvent = false
          })

          for (var translateAttr in iAttr) {
            if (
              iAttr.hasOwnProperty(translateAttr) &&
              translateAttr.substr(0, 13) === 'translateAttr' &&
              translateAttr.length > 13
            ) {
              observeAttributeTranslation(translateAttr)
            }
          }

          iAttr.$observe('translateDefault', function (value) {
            scope.defaultText = value
            updateTranslations()
          })

          if (translateSanitizeStrategyExist) {
            iAttr.$observe('translateSanitizeStrategy', function (value) {
              scope.sanitizeStrategy = $parse(value)(scope.$parent)
              updateTranslations()
            })
          }

          if (translateValuesExist) {
            iAttr.$observe('translateValues', function (interpolateParams) {
              if (interpolateParams) {
                scope.$parent.$watch(function () {
                  angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent))
                })
              }
            })
          }

          if (translateValueExist) {
            var observeValueAttribute = function (attrName) {
              iAttr.$observe(attrName, function (value) {
                var attributeName = lowercase(attrName.substr(14, 1)) + attrName.substr(15)
                scope.interpolateParams[attributeName] = value
              })
            }
            for (var attr in iAttr) {
              if (
                Object.prototype.hasOwnProperty.call(iAttr, attr) &&
                attr.substr(0, 14) === 'translateValue' &&
                attr !== 'translateValues'
              ) {
                observeValueAttribute(attr)
              }
            }
          }

          // Master update function
          var updateTranslations = function () {
            for (var key in translationIds) {
              if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {
                updateTranslation(
                  key,
                  translationIds[key],
                  scope,
                  scope.interpolateParams,
                  scope.defaultText,
                  scope.translateNamespace
                )
              }
            }
          }

          // Put translation processing function outside loop
          var updateTranslation = function (
            translateAttr,
            translationId,
            scope,
            interpolateParams,
            defaultTranslationText,
            translateNamespace
          ) {
            if (translationId) {
              // if translation id starts with '.' and translateNamespace given, prepend namespace
              if (translateNamespace && translationId.charAt(0) === '.') {
                translationId = translateNamespace + translationId
              }

              $translate(
                translationId,
                interpolateParams,
                translateInterpolation,
                defaultTranslationText,
                scope.translateLanguage,
                scope.sanitizeStrategy
              ).then(
                function (translation) {
                  applyTranslation(translation, scope, true, translateAttr)
                },
                function (translationId) {
                  applyTranslation(translationId, scope, false, translateAttr)
                }
              )
            } else {
              // as an empty string cannot be translated, we can solve this using successful=false
              applyTranslation(translationId, scope, false, translateAttr)
            }
          }

          var applyTranslation = function (value, scope, successful, translateAttr) {
            if (!successful) {
              if (typeof scope.defaultText !== 'undefined') {
                value = scope.defaultText
              }
            }
            if (translateAttr === 'translate') {
              // default translate into innerHTML
              if (
                successful ||
                (!successful &&
                  !$translate.isKeepContent() &&
                  typeof iAttr.translateKeepContent === 'undefined')
              ) {
                iElement.empty().append(scope.preText + value + scope.postText)
              }
              var globallyEnabled = $translate.isPostCompilingEnabled()
              var locallyDefined = typeof tAttr.translateCompile !== 'undefined'
              var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false'
              if ((globallyEnabled && !locallyDefined) || locallyEnabled) {
                $compile(iElement.contents())(scope)
              }
            } else {
              // translate attribute
              var attributeName = iAttr.$attr[translateAttr]
              if (attributeName.substr(0, 5) === 'data-') {
                // ensure html5 data prefix is stripped
                attributeName = attributeName.substr(5)
              }
              attributeName = attributeName.substr(15)
              iElement.attr(attributeName, value)
            }
          }

          if (translateValuesExist || translateValueExist || iAttr.translateDefault) {
            scope.$watch('interpolateParams', updateTranslations, true)
          }

          // Replaced watcher on translateLanguage with event listener
          scope.$on('translateLanguageChanged', updateTranslations)

          // Ensures the text will be refreshed after the current language was changed
          // w/ $translate.use(...)
          var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations)

          // ensure translation will be looked up at least one
          if (iElement.text().length) {
            if (iAttr.translate) {
              observeElementTranslation(iAttr.translate)
            } else {
              observeElementTranslation('')
            }
          } else if (iAttr.translate) {
            // ensure attribute will be not skipped
            observeElementTranslation(iAttr.translate)
          }
          updateTranslations()
          scope.$on('$destroy', unbind)
        }
      },
    }
  }

  /**
   * Returns the scope's namespace.
   * @private
   * @param scope
   * @returns {string}
   */
  function getTranslateNamespace(scope) {
    'use strict'
    if (scope.translateNamespace) {
      return scope.translateNamespace
    }
    if (scope.$parent) {
      return getTranslateNamespace(scope.$parent)
    }
  }

  translateDirective.displayName = 'translateDirective'

  angular
    .module('pascalprecht.translate')
    /**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate-attr
 * @restrict A
 *
 * @description
 * Translates attributes like translate-attr-ATTR, but with an object like ng-class.
 * Internally it uses `translate` service to translate translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate-attr Object literal mapping attributes to translation ids.
 * @param {string=} translate-values Values to pass into the translation ids. Can be passed as object literal string.
 * @param {string=} translate-sanitize-strategy defines locally sanitize strategy
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{value: 5}" />

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}',
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<input translate-attr="{ placeholder: translationId, title: 'WITH_VALUES' }" translate-values="{ value: 5 }" />')($rootScope);
          $rootScope.$digest();
          expect(element.attr('placeholder)).toBe('Hello there!');
          expect(element.attr('title)).toBe('The following value is dynamic: 5');
        });
      });
    </file>
   </example>
 */
    .directive('translateAttr', translateAttrDirective)
  function translateAttrDirective($translate, $rootScope) {
    'use strict'

    return {
      restrict: 'A',
      priority: $translate.directivePriority(),
      link: function linkFn(scope, element, attr) {
        var translateAttr,
          translateValues,
          translateSanitizeStrategy,
          previousAttributes = {}

        // Main update translations function
        var updateTranslations = function () {
          angular.forEach(translateAttr, function (translationId, attributeName) {
            if (!translationId) {
              return
            }
            previousAttributes[attributeName] = true

            // if translation id starts with '.' and translateNamespace given, prepend namespace
            if (scope.translateNamespace && translationId.charAt(0) === '.') {
              translationId = scope.translateNamespace + translationId
            }
            $translate(
              translationId,
              translateValues,
              attr.translateInterpolation,
              undefined,
              scope.translateLanguage,
              translateSanitizeStrategy
            ).then(
              function (translation) {
                element.attr(attributeName, translation)
              },
              function (translationId) {
                element.attr(attributeName, translationId)
              }
            )
          })

          // Removing unused attributes that were previously used
          angular.forEach(previousAttributes, function (flag, attributeName) {
            if (!translateAttr[attributeName]) {
              element.removeAttr(attributeName)
              delete previousAttributes[attributeName]
            }
          })
        }

        // Watch for attribute changes
        watchAttribute(
          scope,
          attr.translateAttr,
          function (newValue) {
            translateAttr = newValue
          },
          updateTranslations
        )
        // Watch for value changes
        watchAttribute(
          scope,
          attr.translateValues,
          function (newValue) {
            translateValues = newValue
          },
          updateTranslations
        )
        // Watch for sanitize strategy changes
        watchAttribute(
          scope,
          attr.translateSanitizeStrategy,
          function (newValue) {
            translateSanitizeStrategy = newValue
          },
          updateTranslations
        )

        if (attr.translateValues) {
          scope.$watch(attr.translateValues, updateTranslations, true)
        }

        // Replaced watcher on translateLanguage with event listener
        scope.$on('translateLanguageChanged', updateTranslations)

        // Ensures the text will be refreshed after the current language was changed
        // w/ $translate.use(...)
        var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations)

        updateTranslations()
        scope.$on('$destroy', unbind)
      },
    }
  }

  function watchAttribute(scope, attribute, valueCallback, changeCallback) {
    'use strict'
    if (!attribute) {
      return
    }
    if (attribute.substr(0, 2) === '::') {
      attribute = attribute.substr(2)
    } else {
      scope.$watch(
        attribute,
        function (newValue) {
          valueCallback(newValue)
          changeCallback()
        },
        true
      )
    }
    valueCallback(scope.$eval(attribute))
  }

  translateAttrDirective.displayName = 'translateAttrDirective'

  angular
    .module('pascalprecht.translate')
    /**
     * @ngdoc directive
     * @name pascalprecht.translate.directive:translateCloak
     * @requires $translate
     * @restrict A
     *
     * $description
     * Adds a `translate-cloak` class name to the given element where this directive
     * is applied initially and removes it, once a loader has finished loading.
     *
     * This directive can be used to prevent initial flickering when loading translation
     * data asynchronously.
     *
     * The class name is defined in
     * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
     *
     * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
     *                                  or hiding the cloak. Basically it relies on the translation
     *                                  resolve.
     */
    .directive('translateCloak', translateCloakDirective)

  function translateCloakDirective($translate, $rootScope) {
    'use strict'

    return {
      compile: function (tElement) {
        var applyCloak = function (element) {
            element.addClass($translate.cloakClassName())
          },
          removeCloak = function (element) {
            element.removeClass($translate.cloakClassName())
          }
        applyCloak(tElement)

        return function linkFn(scope, iElement, iAttr) {
          //Create bound functions that incorporate the active DOM element.
          var iRemoveCloak = removeCloak.bind(this, iElement),
            iApplyCloak = applyCloak.bind(this, iElement)
          if (iAttr.translateCloak && iAttr.translateCloak.length) {
            // Register a watcher for the defined translation allowing a fine tuned cloak
            iAttr.$observe('translateCloak', function (translationId) {
              $translate(translationId).then(iRemoveCloak, iApplyCloak)
            })
            $rootScope.$on('$translateChangeSuccess', function () {
              $translate(iAttr.translateCloak).then(iRemoveCloak, iApplyCloak)
            })
          } else {
            $translate.onReady(iRemoveCloak)
          }
        }
      },
    }
  }

  translateCloakDirective.displayName = 'translateCloakDirective'

  angular
    .module('pascalprecht.translate')
    /**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateNamespace
 * @restrict A
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses `translate` filter to translate translation id. It is possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate namespace name which could be either string or interpolated string.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div translate-namespace="CONTENT">

        <div>
            <h1 translate>.HEADERS.TITLE</h1>
            <h1 translate>.HEADERS.WELCOME</h1>
        </div>

        <div translate-namespace=".HEADERS">
            <h1 translate>.TITLE</h1>
            <h1 translate>.WELCOME</h1>
        </div>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'CONTENT': {
            'HEADERS': {
                TITLE: 'Title'
            }
          },
          'CONTENT.HEADERS.WELCOME': 'Welcome'
        }).preferredLanguage('en');

      });

    </file>
   </example>
 */
    .directive('translateNamespace', translateNamespaceDirective)

  function translateNamespaceDirective() {
    'use strict'

    return {
      restrict: 'A',
      scope: true,
      compile: function () {
        return {
          pre: function (scope, iElement, iAttrs) {
            scope.translateNamespace = _getTranslateNamespace(scope)

            if (scope.translateNamespace && iAttrs.translateNamespace.charAt(0) === '.') {
              scope.translateNamespace += iAttrs.translateNamespace
            } else {
              scope.translateNamespace = iAttrs.translateNamespace
            }
          },
        }
      },
    }
  }

  /**
   * Returns the scope's namespace.
   * @private
   * @param scope
   * @returns {string}
   */
  function _getTranslateNamespace(scope) {
    'use strict'
    if (scope.translateNamespace) {
      return scope.translateNamespace
    }
    if (scope.$parent) {
      return _getTranslateNamespace(scope.$parent)
    }
  }

  translateNamespaceDirective.displayName = 'translateNamespaceDirective'

  angular
    .module('pascalprecht.translate')
    /**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateLanguage
 * @restrict A
 *
 * @description
 * Forces the language to the directives in the underlying scope.
 *
 * @param {string=} translate language that will be negotiated.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div>

        <div>
            <h1 translate>HELLO</h1>
        </div>

        <div translate-language="de">
            <h1 translate>HELLO</h1>
        </div>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider
          .translations('en',{
            'HELLO': 'Hello world!'
          })
          .translations('de',{
            'HELLO': 'Hallo Welt!'
          })
          .preferredLanguage('en');

      });

    </file>
   </example>
 */
    .directive('translateLanguage', translateLanguageDirective)

  function translateLanguageDirective() {
    'use strict'

    return {
      restrict: 'A',
      scope: true,
      compile: function () {
        return function linkFn(scope, iElement, iAttrs) {
          iAttrs.$observe('translateLanguage', function (newTranslateLanguage) {
            scope.translateLanguage = newTranslateLanguage
          })

          scope.$watch('translateLanguage', function () {
            scope.$broadcast('translateLanguageChanged')
          })
        }
      },
    }
  }

  translateLanguageDirective.displayName = 'translateLanguageDirective'

  angular
    .module('pascalprecht.translate')
    /**
 * @ngdoc filter
 * @name pascalprecht.translate.filter:translate
 * @requires $parse
 * @requires pascalprecht.translate.$translate
 * @function
 *
 * @description
 * Uses `$translate` service to translate contents. Accepts interpolate parameters
 * to pass dynamized values though translation.
 *
 * @param {string} translationId A translation id to be translated.
 * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
 *
 * @returns {string} Translated text.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
        <pre>{{ translationId | translate }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:values }}</pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en', {
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        });
        $translateProvider.preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
   </example>
 */
    .filter('translate', translateFilterFactory)

  function translateFilterFactory($parse, $translate) {
    'use strict'

    var translateFilter = function (
      translationId,
      interpolateParams,
      interpolation,
      forceLanguage
    ) {
      if (!angular.isObject(interpolateParams)) {
        var ctx = this || {
          __SCOPE_IS_NOT_AVAILABLE:
            'More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f',
        }
        interpolateParams = $parse(interpolateParams)(ctx)
      }

      return $translate.instant(translationId, interpolateParams, interpolation, forceLanguage)
    }

    if ($translate.statefulFilter()) {
      translateFilter.$stateful = true
    }

    return translateFilter
  }

  translateFilterFactory.displayName = 'translateFilterFactory'

  angular
    .module('pascalprecht.translate')

    /**
     * @ngdoc object
     * @name pascalprecht.translate.$translationCache
     * @requires $cacheFactory
     *
     * @description
     * The first time a translation table is used, it is loaded in the translation cache for quick retrieval. You
     * can load translation tables directly into the cache by consuming the
     * `$translationCache` service directly.
     *
     * @return {object} $cacheFactory object.
     */
    .factory('$translationCache', $translationCache)

  function $translationCache($cacheFactory) {
    'use strict'

    return $cacheFactory('translations')
  }

  $translationCache.displayName = '$translationCache'
  return 'pascalprecht.translate'
})

/*!
 * angular-translate - v2.19.0 - 2021-09-02
 *
 * Copyright (c) 2021 The angular-translate team, Pascal Precht; Licensed MIT
 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return factory()
    })
  } else if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory()
  } else {
    factory()
  }
})(this, function () {
  $translateStaticFilesLoader.$inject = ['$q', '$http']
  angular
    .module('pascalprecht.translate')
    /**
     * @ngdoc object
     * @name pascalprecht.translate.$translateStaticFilesLoader
     * @requires $q
     * @requires $http
     *
     * @description
     * Creates a loading function for a typical static file url pattern:
     * "lang-en_US.json", "lang-de_DE.json", etc. Using this builder,
     * the response of these urls must be an object of key-value pairs.
     *
     * @param {object} options Options object, which gets prefix, suffix, key, and fileMap
     */
    .factory('$translateStaticFilesLoader', $translateStaticFilesLoader)

  function $translateStaticFilesLoader($q, $http) {
    'use strict'

    return function (options) {
      if (
        !options ||
        (!angular.isArray(options.files) &&
          (!angular.isString(options.prefix) || !angular.isString(options.suffix)))
      ) {
        throw new Error("Couldn't load static files, no files and prefix or suffix specified!")
      }

      if (!options.files) {
        options.files = [
          {
            prefix: options.prefix,
            suffix: options.suffix,
          },
        ]
      }

      var load = function (file) {
        if (!file || !angular.isString(file.prefix) || !angular.isString(file.suffix)) {
          throw new Error("Couldn't load static file, no prefix or suffix specified!")
        }

        var fileUrl = [file.prefix, options.key, file.suffix].join('')

        if (angular.isObject(options.fileMap) && options.fileMap[fileUrl]) {
          fileUrl = options.fileMap[fileUrl]
        }

        return $http(
          angular.extend(
            {
              url: fileUrl,
              method: 'GET',
            },
            options.$http
          )
        ).then(
          function (result) {
            return result.data
          },
          function () {
            return $q.reject(options.key)
          }
        )
      }

      var promises = [],
        length = options.files.length

      for (var i = 0; i < length; i++) {
        promises.push(
          load({
            prefix: options.files[i].prefix,
            key: options.key,
            suffix: options.files[i].suffix,
          })
        )
      }

      return $q.all(promises).then(function (data) {
        var length = data.length,
          mergedData = {}

        for (var i = 0; i < length; i++) {
          for (var key in data[i]) {
            mergedData[key] = data[i][key]
          }
        }

        return mergedData
      })
    }
  }

  $translateStaticFilesLoader.displayName = '$translateStaticFilesLoader'
  return 'pascalprecht.translate'
})

/* FileSaver.js
 * A saveAs() FileSaver implementation.
 * 1.3.2
 * 2016-06-16 18:25:19
 *
 * By Eli Grey, http://eligrey.com
 * License: MIT
 *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs =
  saveAs ||
  (function (view) {
    'use strict'
    // IE <10 is explicitly unsupported
    if (
      typeof view === 'undefined' ||
      (typeof navigator !== 'undefined' && /MSIE [1-9]\./.test(navigator.userAgent))
    ) {
      return
    }
    var doc = view.document,
      // only get URL when necessary in case Blob.js hasn't overridden it yet
      get_URL = function () {
        return view.URL || view.webkitURL || view
      },
      save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a'),
      can_use_save_link = 'download' in save_link,
      click = function (node) {
        var event = new MouseEvent('click')
        node.dispatchEvent(event)
      },
      is_safari = /constructor/i.test(view.HTMLElement) || view.safari,
      is_chrome_ios = /CriOS\/[\d]+/.test(navigator.userAgent),
      throw_outside = function (ex) {
        ;(view.setImmediate || view.setTimeout)(function () {
          throw ex
        }, 0)
      },
      force_saveable_type = 'application/octet-stream',
      // the Blob API is fundamentally broken as there is no "downloadfinished" event to subscribe to
      arbitrary_revoke_timeout = 1000 * 40, // in ms
      revoke = function (file) {
        var revoker = function () {
          if (typeof file === 'string') {
            // file is an object URL
            get_URL().revokeObjectURL(file)
          } else {
            // file is a File
            file.remove()
          }
        }
        setTimeout(revoker, arbitrary_revoke_timeout)
      },
      dispatch = function (filesaver, event_types, event) {
        event_types = [].concat(event_types)
        var i = event_types.length
        while (i--) {
          var listener = filesaver['on' + event_types[i]]
          if (typeof listener === 'function') {
            try {
              listener.call(filesaver, event || filesaver)
            } catch (ex) {
              throw_outside(ex)
            }
          }
        }
      },
      auto_bom = function (blob) {
        // prepend BOM for UTF-8 XML and text/* types (including HTML)
        // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
        if (
          /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(
            blob.type
          )
        ) {
          return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type })
        }
        return blob
      },
      FileSaver = function (blob, name, no_auto_bom) {
        if (!no_auto_bom) {
          blob = auto_bom(blob)
        }
        // First try a.download, then web filesystem, then object URLs
        var filesaver = this,
          type = blob.type,
          force = type === force_saveable_type,
          object_url,
          dispatch_all = function () {
            dispatch(filesaver, 'writestart progress write writeend'.split(' '))
          },
          // on any filesys errors revert to saving with object URLs
          fs_error = function () {
            if ((is_chrome_ios || (force && is_safari)) && view.FileReader) {
              // Safari doesn't allow downloading of blob urls
              var reader = new FileReader()
              reader.onloadend = function () {
                var url = is_chrome_ios
                  ? reader.result
                  : reader.result.replace(/^data:[^;]*;/, 'data:attachment/file;')
                var popup = view.open(url, '_blank')
                if (!popup) view.location.href = url
                url = undefined // release reference before dispatching
                filesaver.readyState = filesaver.DONE
                dispatch_all()
              }
              reader.readAsDataURL(blob)
              filesaver.readyState = filesaver.INIT
              return
            }
            // don't create more object URLs than needed
            if (!object_url) {
              object_url = get_URL().createObjectURL(blob)
            }
            if (force) {
              view.location.href = object_url
            } else {
              var opened = view.open(object_url, '_blank')
              if (!opened) {
                // Apple does not allow window.open, see https://developer.apple.com/library/safari/documentation/Tools/Conceptual/SafariExtensionGuide/WorkingwithWindowsandTabs/WorkingwithWindowsandTabs.html
                view.location.href = object_url
              }
            }
            filesaver.readyState = filesaver.DONE
            dispatch_all()
            revoke(object_url)
          }
        filesaver.readyState = filesaver.INIT

        if (can_use_save_link) {
          object_url = get_URL().createObjectURL(blob)
          setTimeout(function () {
            save_link.href = object_url
            save_link.download = name
            click(save_link)
            dispatch_all()
            revoke(object_url)
            filesaver.readyState = filesaver.DONE
          })
          return
        }

        fs_error()
      },
      FS_proto = FileSaver.prototype,
      saveAs = function (blob, name, no_auto_bom) {
        return new FileSaver(blob, name || blob.name || 'download', no_auto_bom)
      }
    // IE 10+ (native saveAs)
    if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {
      return function (blob, name, no_auto_bom) {
        name = name || blob.name || 'download'

        if (!no_auto_bom) {
          blob = auto_bom(blob)
        }
        return navigator.msSaveOrOpenBlob(blob, name)
      }
    }

    FS_proto.abort = function () {}
    FS_proto.readyState = FS_proto.INIT = 0
    FS_proto.WRITING = 1
    FS_proto.DONE = 2

    FS_proto.error =
      FS_proto.onwritestart =
      FS_proto.onprogress =
      FS_proto.onwrite =
      FS_proto.onabort =
      FS_proto.onerror =
      FS_proto.onwriteend =
        null

    return saveAs
  })(
    (typeof self !== 'undefined' && self) ||
      (typeof window !== 'undefined' && window) ||
      this.content
  )
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== 'undefined' && module.exports) {
  module.exports.saveAs = saveAs
} else if (typeof define !== 'undefined' && define !== null && define.amd !== null) {
  define('FileSaver.js', function () {
    return saveAs
  })
}

/**
 * @license MIT
 */
;(function (window, document, undefined) {
  'use strict'
  if (!window || !document) {
    console.warn('Flowjs needs window and document objects to work')
    return
  }
  // ie10+
  var ie10plus = window.navigator.msPointerEnabled
  /**
   * Flow.js is a library providing multiple simultaneous, stable and
   * resumable uploads via the HTML5 File API.
   * @param [opts]
   * @param {number|Function} [opts.chunkSize]
   * @param {bool} [opts.forceChunkSize]
   * @param {number} [opts.simultaneousUploads]
   * @param {bool} [opts.singleFile]
   * @param {string} [opts.fileParameterName]
   * @param {number} [opts.progressCallbacksInterval]
   * @param {number} [opts.speedSmoothingFactor]
   * @param {Object|Function} [opts.query]
   * @param {Object|Function} [opts.headers]
   * @param {bool} [opts.withCredentials]
   * @param {Function} [opts.preprocess]
   * @param {string} [opts.method]
   * @param {string|Function} [opts.testMethod]
   * @param {string|Function} [opts.uploadMethod]
   * @param {bool} [opts.prioritizeFirstAndLastChunk]
   * @param {bool} [opts.allowDuplicateUploads]
   * @param {string|Function} [opts.target]
   * @param {number} [opts.maxChunkRetries]
   * @param {number} [opts.chunkRetryInterval]
   * @param {Array.<number>} [opts.permanentErrors]
   * @param {Array.<number>} [opts.successStatuses]
   * @param {Function} [opts.initFileFn]
   * @param {Function} [opts.readFileFn]
   * @param {Function} [opts.generateUniqueIdentifier]
   * @constructor
   */
  function Flow(opts) {
    /**
     * Supported by browser?
     * @type {boolean}
     */
    this.support =
      typeof File !== 'undefined' &&
      typeof Blob !== 'undefined' &&
      typeof FileList !== 'undefined' &&
      (!!Blob.prototype.slice || !!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || false) // slicing files support

    if (!this.support) {
      return
    }

    /**
     * Check if directory upload is supported
     * @type {boolean}
     */
    this.supportDirectory =
      /Chrome/.test(window.navigator.userAgent) ||
      /Firefox/.test(window.navigator.userAgent) ||
      /Edge/.test(window.navigator.userAgent)

    /**
     * List of FlowFile objects
     * @type {Array.<FlowFile>}
     */
    this.files = []

    /**
     * Default options for flow.js
     * @type {Object}
     */
    this.defaults = {
      chunkSize: 1024 * 1024,
      forceChunkSize: false,
      simultaneousUploads: 3,
      singleFile: false,
      fileParameterName: 'file',
      progressCallbacksInterval: 500,
      speedSmoothingFactor: 0.1,
      query: {},
      headers: {},
      withCredentials: false,
      preprocess: null,
      changeRawDataBeforeSend: null,
      method: 'multipart',
      testMethod: 'GET',
      uploadMethod: 'POST',
      prioritizeFirstAndLastChunk: false,
      allowDuplicateUploads: false,
      target: '/',
      testChunks: true,
      generateUniqueIdentifier: null,
      maxChunkRetries: 0,
      chunkRetryInterval: null,
      permanentErrors: [404, 413, 415, 500, 501],
      successStatuses: [200, 201, 202],
      onDropStopPropagation: false,
      initFileFn: null,
      readFileFn: webAPIFileRead,
    }

    /**
     * Current options
     * @type {Object}
     */
    this.opts = {}

    /**
     * List of events:
     *  key stands for event name
     *  value array list of callbacks
     * @type {}
     */
    this.events = {}

    var $ = this

    /**
     * On drop event
     * @function
     * @param {MouseEvent} event
     */
    this.onDrop = function (event) {
      if ($.opts.onDropStopPropagation) {
        event.stopPropagation()
      }
      event.preventDefault()
      var dataTransfer = event.dataTransfer
      if (dataTransfer.items && dataTransfer.items[0] && dataTransfer.items[0].webkitGetAsEntry) {
        $.webkitReadDataTransfer(event)
      } else {
        $.addFiles(dataTransfer.files, event)
      }
    }

    /**
     * Prevent default
     * @function
     * @param {MouseEvent} event
     */
    this.preventEvent = function (event) {
      event.preventDefault()
    }

    /**
     * Current options
     * @type {Object}
     */
    this.opts = Flow.extend({}, this.defaults, opts || {})
  }

  Flow.prototype = {
    /**
     * Set a callback for an event, possible events:
     * fileSuccess(file), fileProgress(file), fileAdded(file, event),
     * fileRemoved(file), fileRetry(file), fileError(file, message),
     * complete(), progress(), error(message, file), pause()
     * @function
     * @param {string} event
     * @param {Function} callback
     */
    on: function (event, callback) {
      event = event.toLowerCase()
      if (!this.events.hasOwnProperty(event)) {
        this.events[event] = []
      }
      this.events[event].push(callback)
    },

    /**
     * Remove event callback
     * @function
     * @param {string} [event] removes all events if not specified
     * @param {Function} [fn] removes all callbacks of event if not specified
     */
    off: function (event, fn) {
      if (event !== undefined) {
        event = event.toLowerCase()
        if (fn !== undefined) {
          if (this.events.hasOwnProperty(event)) {
            arrayRemove(this.events[event], fn)
          }
        } else {
          delete this.events[event]
        }
      } else {
        this.events = {}
      }
    },

    /**
     * Fire an event
     * @function
     * @param {string} event event name
     * @param {...} args arguments of a callback
     * @return {bool} value is false if at least one of the event handlers which handled this event
     * returned false. Otherwise it returns true.
     */
    fire: function (event, args) {
      // `arguments` is an object, not array, in FF, so:
      args = Array.prototype.slice.call(arguments)
      event = event.toLowerCase()
      var preventDefault = false
      if (this.events.hasOwnProperty(event)) {
        each(
          this.events[event],
          function (callback) {
            preventDefault = callback.apply(this, args.slice(1)) === false || preventDefault
          },
          this
        )
      }
      if (event != 'catchall') {
        args.unshift('catchAll')
        preventDefault = this.fire.apply(this, args) === false || preventDefault
      }
      return !preventDefault
    },

    /**
     * Read webkit dataTransfer object
     * @param event
     */
    webkitReadDataTransfer: function (event) {
      var $ = this
      var queue = event.dataTransfer.items.length
      var files = []
      each(event.dataTransfer.items, function (item) {
        var entry = item.webkitGetAsEntry()
        if (!entry) {
          decrement()
          return
        }
        if (entry.isFile) {
          // due to a bug in Chrome's File System API impl - #149735
          fileReadSuccess(item.getAsFile(), entry.fullPath)
        } else {
          readDirectory(entry.createReader())
        }
      })
      function readDirectory(reader) {
        reader.readEntries(function (entries) {
          if (entries.length) {
            queue += entries.length
            each(entries, function (entry) {
              if (entry.isFile) {
                var fullPath = entry.fullPath
                entry.file(function (file) {
                  fileReadSuccess(file, fullPath)
                }, readError)
              } else if (entry.isDirectory) {
                readDirectory(entry.createReader())
              }
            })
            readDirectory(reader)
          } else {
            decrement()
          }
        }, readError)
      }
      function fileReadSuccess(file, fullPath) {
        // relative path should not start with "/"
        file.relativePath = fullPath.substring(1)
        files.push(file)
        decrement()
      }
      function readError(fileError) {
        decrement()
        throw fileError
      }
      function decrement() {
        if (--queue == 0) {
          $.addFiles(files, event)
        }
      }
    },

    /**
     * Generate unique identifier for a file
     * @function
     * @param {FlowFile} file
     * @returns {string}
     */
    generateUniqueIdentifier: function (file) {
      var custom = this.opts.generateUniqueIdentifier
      if (typeof custom === 'function') {
        return custom(file)
      }
      // Some confusion in different versions of Firefox
      var relativePath = file.relativePath || file.webkitRelativePath || file.fileName || file.name
      return file.size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/gim, '')
    },

    /**
     * Upload next chunk from the queue
     * @function
     * @returns {boolean}
     * @private
     */
    uploadNextChunk: function (preventEvents) {
      // In some cases (such as videos) it's really handy to upload the first
      // and last chunk of a file quickly; this let's the server check the file's
      // metadata and determine if there's even a point in continuing.
      var found = false
      if (this.opts.prioritizeFirstAndLastChunk) {
        each(this.files, function (file) {
          if (!file.paused && file.chunks.length && file.chunks[0].status() === 'pending') {
            file.chunks[0].send()
            found = true
            return false
          }
          if (
            !file.paused &&
            file.chunks.length > 1 &&
            file.chunks[file.chunks.length - 1].status() === 'pending'
          ) {
            file.chunks[file.chunks.length - 1].send()
            found = true
            return false
          }
        })
        if (found) {
          return found
        }
      }

      // Now, simply look for the next, best thing to upload
      each(this.files, function (file) {
        if (!file.paused) {
          each(file.chunks, function (chunk) {
            if (chunk.status() === 'pending') {
              chunk.send()
              found = true
              return false
            }
          })
        }
        if (found) {
          return false
        }
      })
      if (found) {
        return true
      }

      // The are no more outstanding chunks to upload, check is everything is done
      var outstanding = false
      each(this.files, function (file) {
        if (!file.isComplete()) {
          outstanding = true
          return false
        }
      })
      if (!outstanding && !preventEvents) {
        // All chunks have been uploaded, complete
        async(function () {
          this.fire('complete')
        }, this)
      }
      return false
    },

    /**
     * Assign a browse action to one or more DOM nodes.
     * @function
     * @param {Element|Array.<Element>} domNodes
     * @param {boolean} isDirectory Pass in true to allow directories to
     * @param {boolean} singleFile prevent multi file upload
     * @param {Object} attributes set custom attributes:
     *  http://www.w3.org/TR/html-markup/input.file.html#input.file-attributes
     *  eg: accept: 'image/*'
     * be selected (Chrome only).
     */
    assignBrowse: function (domNodes, isDirectory, singleFile, attributes) {
      if (domNodes instanceof Element) {
        domNodes = [domNodes]
      }

      each(
        domNodes,
        function (domNode) {
          var input
          if (domNode.tagName === 'INPUT' && domNode.type === 'file') {
            input = domNode
          } else {
            input = document.createElement('input')
            input.setAttribute('type', 'file')
            // display:none - not working in opera 12
            extend(input.style, {
              visibility: 'hidden',
              position: 'absolute',
              width: '1px',
              height: '1px',
            })
            // for opera 12 browser, input must be assigned to a document
            domNode.appendChild(input)
            // https://developer.mozilla.org/en/using_files_from_web_applications)
            // event listener is executed two times
            // first one - original mouse click event
            // second - input.click(), input is inside domNode
            domNode.addEventListener(
              'click',
              function () {
                input.click()
              },
              false
            )
          }
          if (!this.opts.singleFile && !singleFile) {
            input.setAttribute('multiple', 'multiple')
          }
          if (isDirectory) {
            input.setAttribute('webkitdirectory', 'webkitdirectory')
          }
          each(attributes, function (value, key) {
            input.setAttribute(key, value)
          })
          // When new files are added, simply append them to the overall list
          var $ = this
          input.addEventListener(
            'change',
            function (e) {
              if (e.target.value) {
                $.addFiles(e.target.files, e)
                e.target.value = ''
              }
            },
            false
          )
        },
        this
      )
    },

    /**
     * Assign one or more DOM nodes as a drop target.
     * @function
     * @param {Element|Array.<Element>} domNodes
     */
    assignDrop: function (domNodes) {
      if (typeof domNodes.length === 'undefined') {
        domNodes = [domNodes]
      }
      each(
        domNodes,
        function (domNode) {
          domNode.addEventListener('dragover', this.preventEvent, false)
          domNode.addEventListener('dragenter', this.preventEvent, false)
          domNode.addEventListener('drop', this.onDrop, false)
        },
        this
      )
    },

    /**
     * Un-assign drop event from DOM nodes
     * @function
     * @param domNodes
     */
    unAssignDrop: function (domNodes) {
      if (typeof domNodes.length === 'undefined') {
        domNodes = [domNodes]
      }
      each(
        domNodes,
        function (domNode) {
          domNode.removeEventListener('dragover', this.preventEvent)
          domNode.removeEventListener('dragenter', this.preventEvent)
          domNode.removeEventListener('drop', this.onDrop)
        },
        this
      )
    },

    /**
     * Returns a boolean indicating whether or not the instance is currently
     * uploading anything.
     * @function
     * @returns {boolean}
     */
    isUploading: function () {
      var uploading = false
      each(this.files, function (file) {
        if (file.isUploading()) {
          uploading = true
          return false
        }
      })
      return uploading
    },

    /**
     * should upload next chunk
     * @function
     * @returns {boolean|number}
     */
    _shouldUploadNext: function () {
      var num = 0
      var should = true
      var simultaneousUploads = this.opts.simultaneousUploads
      each(this.files, function (file) {
        each(file.chunks, function (chunk) {
          if (chunk.status() === 'uploading') {
            num++
            if (num >= simultaneousUploads) {
              should = false
              return false
            }
          }
        })
      })
      // if should is true then return uploading chunks's length
      return should && num
    },

    /**
     * Start or resume uploading.
     * @function
     */
    upload: function () {
      // Make sure we don't start too many uploads at once
      var ret = this._shouldUploadNext()
      if (ret === false) {
        return
      }
      // Kick off the queue
      this.fire('uploadStart')
      var started = false
      for (var num = 1; num <= this.opts.simultaneousUploads - ret; num++) {
        started = this.uploadNextChunk(true) || started
      }
      if (!started) {
        async(function () {
          this.fire('complete')
        }, this)
      }
    },

    /**
     * Resume uploading.
     * @function
     */
    resume: function () {
      each(this.files, function (file) {
        if (!file.isComplete()) {
          file.resume()
        }
      })
    },

    /**
     * Pause uploading.
     * @function
     */
    pause: function () {
      each(this.files, function (file) {
        file.pause()
      })
    },

    /**
     * Cancel upload of all FlowFile objects and remove them from the list.
     * @function
     */
    cancel: function () {
      for (var i = this.files.length - 1; i >= 0; i--) {
        this.files[i].cancel()
      }
    },

    /**
     * Returns a number between 0 and 1 indicating the current upload progress
     * of all files.
     * @function
     * @returns {number}
     */
    progress: function () {
      var totalDone = 0
      var totalSize = 0
      // Resume all chunks currently being uploaded
      each(this.files, function (file) {
        totalDone += file.progress() * file.size
        totalSize += file.size
      })
      return totalSize > 0 ? totalDone / totalSize : 0
    },

    /**
     * Add a HTML5 File object to the list of files.
     * @function
     * @param {File} file
     * @param {Event} [event] event is optional
     */
    addFile: function (file, event) {
      this.addFiles([file], event)
    },

    /**
     * Add a HTML5 File object to the list of files.
     * @function
     * @param {FileList|Array} fileList
     * @param {Event} [event] event is optional
     */
    addFiles: function (fileList, event) {
      var files = []
      each(
        fileList,
        function (file) {
          // https://github.com/flowjs/flow.js/issues/55
          if (
            (!ie10plus || (ie10plus && file.size > 0)) &&
            !(file.size % 4096 === 0 && (file.name === '.' || file.fileName === '.'))
          ) {
            var uniqueIdentifier = this.generateUniqueIdentifier(file)
            if (
              this.opts.allowDuplicateUploads ||
              !this.getFromUniqueIdentifier(uniqueIdentifier)
            ) {
              var f = new FlowFile(this, file, uniqueIdentifier)
              if (this.fire('fileAdded', f, event)) {
                files.push(f)
              }
            }
          }
        },
        this
      )
      if (this.fire('filesAdded', files, event)) {
        each(
          files,
          function (file) {
            if (this.opts.singleFile && this.files.length > 0) {
              this.removeFile(this.files[0])
            }
            this.files.push(file)
          },
          this
        )
        this.fire('filesSubmitted', files, event)
      }
    },

    /**
     * Cancel upload of a specific FlowFile object from the list.
     * @function
     * @param {FlowFile} file
     */
    removeFile: function (file) {
      for (var i = this.files.length - 1; i >= 0; i--) {
        if (this.files[i] === file) {
          this.files.splice(i, 1)
          file.abort()
          this.fire('fileRemoved', file)
        }
      }
    },

    /**
     * Look up a FlowFile object by its unique identifier.
     * @function
     * @param {string} uniqueIdentifier
     * @returns {boolean|FlowFile} false if file was not found
     */
    getFromUniqueIdentifier: function (uniqueIdentifier) {
      var ret = false
      each(this.files, function (file) {
        if (file.uniqueIdentifier === uniqueIdentifier) {
          ret = file
        }
      })
      return ret
    },

    /**
     * Returns the total size of all files in bytes.
     * @function
     * @returns {number}
     */
    getSize: function () {
      var totalSize = 0
      each(this.files, function (file) {
        totalSize += file.size
      })
      return totalSize
    },

    /**
     * Returns the total size uploaded of all files in bytes.
     * @function
     * @returns {number}
     */
    sizeUploaded: function () {
      var size = 0
      each(this.files, function (file) {
        size += file.sizeUploaded()
      })
      return size
    },

    /**
     * Returns remaining time to upload all files in seconds. Accuracy is based on average speed.
     * If speed is zero, time remaining will be equal to positive infinity `Number.POSITIVE_INFINITY`
     * @function
     * @returns {number}
     */
    timeRemaining: function () {
      var sizeDelta = 0
      var averageSpeed = 0
      each(this.files, function (file) {
        if (!file.paused && !file.error) {
          sizeDelta += file.size - file.sizeUploaded()
          averageSpeed += file.averageSpeed
        }
      })
      if (sizeDelta && !averageSpeed) {
        return Number.POSITIVE_INFINITY
      }
      if (!sizeDelta && !averageSpeed) {
        return 0
      }
      return Math.floor(sizeDelta / averageSpeed)
    },
  }

  /**
   * FlowFile class
   * @name FlowFile
   * @param {Flow} flowObj
   * @param {File} file
   * @param {string} uniqueIdentifier
   * @constructor
   */
  function FlowFile(flowObj, file, uniqueIdentifier) {
    /**
     * Reference to parent Flow instance
     * @type {Flow}
     */
    this.flowObj = flowObj

    /**
     * Used to store the bytes read
     * @type {Blob|string}
     */
    this.bytes = null

    /**
     * Reference to file
     * @type {File}
     */
    this.file = file

    /**
     * File name. Some confusion in different versions of Firefox
     * @type {string}
     */
    this.name = file.fileName || file.name

    /**
     * File size
     * @type {number}
     */
    this.size = file.size

    /**
     * Relative file path
     * @type {string}
     */
    this.relativePath = file.relativePath || file.webkitRelativePath || this.name

    /**
     * File unique identifier
     * @type {string}
     */
    this.uniqueIdentifier =
      uniqueIdentifier === undefined ? flowObj.generateUniqueIdentifier(file) : uniqueIdentifier

    /**
     * Size of Each Chunk
     * @type {number}
     */
    this.chunkSize = 0

    /**
     * List of chunks
     * @type {Array.<FlowChunk>}
     */
    this.chunks = []

    /**
     * Indicated if file is paused
     * @type {boolean}
     */
    this.paused = false

    /**
     * Indicated if file has encountered an error
     * @type {boolean}
     */
    this.error = false

    /**
     * Average upload speed
     * @type {number}
     */
    this.averageSpeed = 0

    /**
     * Current upload speed
     * @type {number}
     */
    this.currentSpeed = 0

    /**
     * Date then progress was called last time
     * @type {number}
     * @private
     */
    this._lastProgressCallback = Date.now()

    /**
     * Previously uploaded file size
     * @type {number}
     * @private
     */
    this._prevUploadedSize = 0

    /**
     * Holds previous progress
     * @type {number}
     * @private
     */
    this._prevProgress = 0

    this.bootstrap()
  }

  FlowFile.prototype = {
    /**
     * Update speed parameters
     * @link http://stackoverflow.com/questions/2779600/how-to-estimate-download-time-remaining-accurately
     * @function
     */
    measureSpeed: function () {
      var timeSpan = Date.now() - this._lastProgressCallback
      if (!timeSpan) {
        return
      }
      var smoothingFactor = this.flowObj.opts.speedSmoothingFactor
      var uploaded = this.sizeUploaded()
      // Prevent negative upload speed after file upload resume
      this.currentSpeed = Math.max(((uploaded - this._prevUploadedSize) / timeSpan) * 1000, 0)
      this.averageSpeed =
        smoothingFactor * this.currentSpeed + (1 - smoothingFactor) * this.averageSpeed
      this._prevUploadedSize = uploaded
    },

    /**
     * For internal usage only.
     * Callback when something happens within the chunk.
     * @function
     * @param {FlowChunk} chunk
     * @param {string} event can be 'progress', 'success', 'error' or 'retry'
     * @param {string} [message]
     */
    chunkEvent: function (chunk, event, message) {
      switch (event) {
        case 'progress':
          if (
            Date.now() - this._lastProgressCallback <
            this.flowObj.opts.progressCallbacksInterval
          ) {
            break
          }
          this.measureSpeed()
          this.flowObj.fire('fileProgress', this, chunk)
          this.flowObj.fire('progress')
          this._lastProgressCallback = Date.now()
          break
        case 'error':
          this.error = true
          this.abort(true)
          this.flowObj.fire('fileError', this, message, chunk)
          this.flowObj.fire('error', message, this, chunk)
          break
        case 'success':
          if (this.error) {
            return
          }
          this.measureSpeed()
          this.flowObj.fire('fileProgress', this, chunk)
          this.flowObj.fire('progress')
          this._lastProgressCallback = Date.now()
          if (this.isComplete()) {
            this.currentSpeed = 0
            this.averageSpeed = 0
            this.flowObj.fire('fileSuccess', this, message, chunk)
          }
          break
        case 'retry':
          this.flowObj.fire('fileRetry', this, chunk)
          break
      }
    },

    /**
     * Pause file upload
     * @function
     */
    pause: function () {
      this.paused = true
      this.abort()
    },

    /**
     * Resume file upload
     * @function
     */
    resume: function () {
      this.paused = false
      this.flowObj.upload()
    },

    /**
     * Abort current upload
     * @function
     */
    abort: function (reset) {
      this.currentSpeed = 0
      this.averageSpeed = 0
      var chunks = this.chunks
      if (reset) {
        this.chunks = []
      }
      each(
        chunks,
        function (c) {
          if (c.status() === 'uploading') {
            c.abort()
            this.flowObj.uploadNextChunk()
          }
        },
        this
      )
    },

    /**
     * Cancel current upload and remove from a list
     * @function
     */
    cancel: function () {
      this.flowObj.removeFile(this)
    },

    /**
     * Retry aborted file upload
     * @function
     */
    retry: function () {
      this.bootstrap()
      this.flowObj.upload()
    },

    /**
     * Clear current chunks and slice file again
     * @function
     */
    bootstrap: function () {
      if (typeof this.flowObj.opts.initFileFn === 'function') {
        this.flowObj.opts.initFileFn(this)
      }

      this.abort(true)
      this.error = false
      // Rebuild stack of chunks from file
      this._prevProgress = 0
      var round = this.flowObj.opts.forceChunkSize ? Math.ceil : Math.floor
      this.chunkSize = evalOpts(this.flowObj.opts.chunkSize, this)
      var chunks = Math.max(round(this.size / this.chunkSize), 1)
      for (var offset = 0; offset < chunks; offset++) {
        this.chunks.push(new FlowChunk(this.flowObj, this, offset))
      }
    },

    /**
     * Get current upload progress status
     * @function
     * @returns {number} from 0 to 1
     */
    progress: function () {
      if (this.error) {
        return 1
      }
      if (this.chunks.length === 1) {
        this._prevProgress = Math.max(this._prevProgress, this.chunks[0].progress())
        return this._prevProgress
      }
      // Sum up progress across everything
      var bytesLoaded = 0
      each(this.chunks, function (c) {
        // get chunk progress relative to entire file
        bytesLoaded += c.progress() * (c.endByte - c.startByte)
      })
      var percent = bytesLoaded / this.size
      // We don't want to lose percentages when an upload is paused
      this._prevProgress = Math.max(this._prevProgress, percent > 0.9999 ? 1 : percent)
      return this._prevProgress
    },

    /**
     * Indicates if file is being uploaded at the moment
     * @function
     * @returns {boolean}
     */
    isUploading: function () {
      var uploading = false
      each(this.chunks, function (chunk) {
        if (chunk.status() === 'uploading') {
          uploading = true
          return false
        }
      })
      return uploading
    },

    /**
     * Indicates if file is has finished uploading and received a response
     * @function
     * @returns {boolean}
     */
    isComplete: function () {
      var outstanding = false
      each(this.chunks, function (chunk) {
        var status = chunk.status()
        if (
          status === 'pending' ||
          status === 'uploading' ||
          status === 'reading' ||
          chunk.preprocessState === 1 ||
          chunk.readState === 1
        ) {
          outstanding = true
          return false
        }
      })
      return !outstanding
    },

    /**
     * Count total size uploaded
     * @function
     * @returns {number}
     */
    sizeUploaded: function () {
      var size = 0
      each(this.chunks, function (chunk) {
        size += chunk.sizeUploaded()
      })
      return size
    },

    /**
     * Returns remaining time to finish upload file in seconds. Accuracy is based on average speed.
     * If speed is zero, time remaining will be equal to positive infinity `Number.POSITIVE_INFINITY`
     * @function
     * @returns {number}
     */
    timeRemaining: function () {
      if (this.paused || this.error) {
        return 0
      }
      var delta = this.size - this.sizeUploaded()
      if (delta && !this.averageSpeed) {
        return Number.POSITIVE_INFINITY
      }
      if (!delta && !this.averageSpeed) {
        return 0
      }
      return Math.floor(delta / this.averageSpeed)
    },

    /**
     * Get file type
     * @function
     * @returns {string}
     */
    getType: function () {
      return this.file.type && this.file.type.split('/')[1]
    },

    /**
     * Get file extension
     * @function
     * @returns {string}
     */
    getExtension: function () {
      return this.name.substr((~-this.name.lastIndexOf('.') >>> 0) + 2).toLowerCase()
    },
  }

  /**
   * Default read function using the webAPI
   *
   * @function webAPIFileRead(fileObj, startByte, endByte, fileType, chunk)
   *
   */
  function webAPIFileRead(fileObj, startByte, endByte, fileType, chunk) {
    var function_name = 'slice'

    if (fileObj.file.slice) function_name = 'slice'
    else if (fileObj.file.mozSlice) function_name = 'mozSlice'
    else if (fileObj.file.webkitSlice) function_name = 'webkitSlice'

    chunk.readFinished(fileObj.file[function_name](startByte, endByte, fileType))
  }

  /**
   * Class for storing a single chunk
   * @name FlowChunk
   * @param {Flow} flowObj
   * @param {FlowFile} fileObj
   * @param {number} offset
   * @constructor
   */
  function FlowChunk(flowObj, fileObj, offset) {
    /**
     * Reference to parent flow object
     * @type {Flow}
     */
    this.flowObj = flowObj

    /**
     * Reference to parent FlowFile object
     * @type {FlowFile}
     */
    this.fileObj = fileObj

    /**
     * File offset
     * @type {number}
     */
    this.offset = offset

    /**
     * Indicates if chunk existence was checked on the server
     * @type {boolean}
     */
    this.tested = false

    /**
     * Number of retries performed
     * @type {number}
     */
    this.retries = 0

    /**
     * Pending retry
     * @type {boolean}
     */
    this.pendingRetry = false

    /**
     * Preprocess state
     * @type {number} 0 = unprocessed, 1 = processing, 2 = finished
     */
    this.preprocessState = 0

    /**
     * Read state
     * @type {number} 0 = not read, 1 = reading, 2 = finished
     */
    this.readState = 0

    /**
     * Bytes transferred from total request size
     * @type {number}
     */
    this.loaded = 0

    /**
     * Total request size
     * @type {number}
     */
    this.total = 0

    /**
     * Size of a chunk
     * @type {number}
     */
    this.chunkSize = this.fileObj.chunkSize

    /**
     * Chunk start byte in a file
     * @type {number}
     */
    this.startByte = this.offset * this.chunkSize

    /**
     * A specific filename for this chunk which otherwise default to the main name
     * @type {string}
     */
    this.filename = null

    /**
     * Compute the endbyte in a file
     *
     */
    this.computeEndByte = function () {
      var endByte = Math.min(this.fileObj.size, (this.offset + 1) * this.chunkSize)
      if (this.fileObj.size - endByte < this.chunkSize && !this.flowObj.opts.forceChunkSize) {
        // The last chunk will be bigger than the chunk size,
        // but less than 2 * this.chunkSize
        endByte = this.fileObj.size
      }
      return endByte
    }

    /**
     * Chunk end byte in a file
     * @type {number}
     */
    this.endByte = this.computeEndByte()

    /**
     * XMLHttpRequest
     * @type {XMLHttpRequest}
     */
    this.xhr = null

    var $ = this

    /**
     * Send chunk event
     * @param event
     * @param {...} args arguments of a callback
     */
    this.event = function (event, args) {
      args = Array.prototype.slice.call(arguments)
      args.unshift($)
      $.fileObj.chunkEvent.apply($.fileObj, args)
    }
    /**
     * Catch progress event
     * @param {ProgressEvent} event
     */
    this.progressHandler = function (event) {
      if (event.lengthComputable) {
        $.loaded = event.loaded
        $.total = event.total
      }
      $.event('progress', event)
    }

    /**
     * Catch test event
     * @param {Event} event
     */
    this.testHandler = function (event) {
      var status = $.status(true)
      if (status === 'error') {
        $.event(status, $.message())
        $.flowObj.uploadNextChunk()
      } else if (status === 'success') {
        $.tested = true
        $.event(status, $.message())
        $.flowObj.uploadNextChunk()
      } else if (!$.fileObj.paused) {
        // Error might be caused by file pause method
        // Chunks does not exist on the server side
        $.tested = true
        $.send()
      }
    }

    /**
     * Upload has stopped
     * @param {Event} event
     */
    this.doneHandler = function (event) {
      var status = $.status()
      if (status === 'success' || status === 'error') {
        delete this.data
        $.event(status, $.message())
        $.flowObj.uploadNextChunk()
      } else if (!$.fileObj.paused) {
        $.event('retry', $.message())
        $.pendingRetry = true
        $.abort()
        $.retries++
        var retryInterval = $.flowObj.opts.chunkRetryInterval
        if (retryInterval !== null) {
          setTimeout(function () {
            $.send()
          }, retryInterval)
        } else {
          $.send()
        }
      }
    }
  }

  FlowChunk.prototype = {
    /**
     * Get params for a request
     * @function
     */
    getParams: function () {
      return {
        flowChunkNumber: this.offset + 1,
        flowChunkSize: this.chunkSize,
        flowCurrentChunkSize: this.endByte - this.startByte,
        flowTotalSize: this.fileObj.size,
        flowIdentifier: this.fileObj.uniqueIdentifier,
        flowFilename: this.fileObj.name,
        flowRelativePath: this.fileObj.relativePath,
        flowTotalChunks: this.fileObj.chunks.length,
      }
    },

    /**
     * Get target option with query params
     * @function
     * @param params
     * @returns {string}
     */
    getTarget: function (target, params) {
      if (params.length == 0) {
        return target
      }

      if (target.indexOf('?') < 0) {
        target += '?'
      } else {
        target += '&'
      }
      return target + params.join('&')
    },

    /**
     * Makes a GET request without any data to see if the chunk has already
     * been uploaded in a previous session
     * @function
     */
    test: function () {
      // Set up request and listen for event
      this.xhr = new XMLHttpRequest()
      this.xhr.addEventListener('load', this.testHandler, false)
      this.xhr.addEventListener('error', this.testHandler, false)
      var testMethod = evalOpts(this.flowObj.opts.testMethod, this.fileObj, this)
      var data = this.prepareXhrRequest(testMethod, true)
      this.xhr.send(data)
    },

    /**
     * Finish preprocess state
     * @function
     */
    preprocessFinished: function () {
      // Re-compute the endByte after the preprocess function to allow an
      // implementer of preprocess to set the fileObj size
      this.endByte = this.computeEndByte()

      this.preprocessState = 2
      this.send()
    },

    /**
     * Finish read state
     * @function
     */
    readFinished: function (bytes) {
      this.readState = 2
      this.bytes = bytes
      this.send()
    },

    /**
     * Uploads the actual data in a POST call
     * @function
     */
    send: function () {
      var preprocess = this.flowObj.opts.preprocess
      var read = this.flowObj.opts.readFileFn
      if (typeof preprocess === 'function') {
        switch (this.preprocessState) {
          case 0:
            this.preprocessState = 1
            preprocess(this)
            return
          case 1:
            return
        }
      }
      switch (this.readState) {
        case 0:
          this.readState = 1
          read(this.fileObj, this.startByte, this.endByte, this.fileObj.file.type, this)
          return
        case 1:
          return
      }
      if (this.flowObj.opts.testChunks && !this.tested) {
        this.test()
        return
      }

      this.loaded = 0
      this.total = 0
      this.pendingRetry = false

      // Set up request and listen for event
      this.xhr = new XMLHttpRequest()
      this.xhr.upload.addEventListener('progress', this.progressHandler, false)
      this.xhr.addEventListener('load', this.doneHandler, false)
      this.xhr.addEventListener('error', this.doneHandler, false)

      var uploadMethod = evalOpts(this.flowObj.opts.uploadMethod, this.fileObj, this)
      var data = this.prepareXhrRequest(uploadMethod, false, this.flowObj.opts.method, this.bytes)
      var changeRawDataBeforeSend = this.flowObj.opts.changeRawDataBeforeSend
      if (typeof changeRawDataBeforeSend === 'function') {
        data = changeRawDataBeforeSend(this, data)
      }
      this.xhr.send(data)
    },

    /**
     * Abort current xhr request
     * @function
     */
    abort: function () {
      // Abort and reset
      var xhr = this.xhr
      this.xhr = null
      if (xhr) {
        xhr.abort()
      }
    },

    /**
     * Retrieve current chunk upload status
     * @function
     * @returns {string} 'pending', 'uploading', 'success', 'error'
     */
    status: function (isTest) {
      if (this.readState === 1) {
        return 'reading'
      } else if (this.pendingRetry || this.preprocessState === 1) {
        // if pending retry then that's effectively the same as actively uploading,
        // there might just be a slight delay before the retry starts
        return 'uploading'
      } else if (!this.xhr) {
        return 'pending'
      } else if (this.xhr.readyState < 4) {
        // Status is really 'OPENED', 'HEADERS_RECEIVED'
        // or 'LOADING' - meaning that stuff is happening
        return 'uploading'
      } else {
        if (this.flowObj.opts.successStatuses.indexOf(this.xhr.status) > -1) {
          // HTTP 200, perfect
          // HTTP 202 Accepted - The request has been accepted for processing, but the processing has not been completed.
          return 'success'
        } else if (
          this.flowObj.opts.permanentErrors.indexOf(this.xhr.status) > -1 ||
          (!isTest && this.retries >= this.flowObj.opts.maxChunkRetries)
        ) {
          // HTTP 413/415/500/501, permanent error
          return 'error'
        } else {
          // this should never happen, but we'll reset and queue a retry
          // a likely case for this would be 503 service unavailable
          this.abort()
          return 'pending'
        }
      }
    },

    /**
     * Get response from xhr request
     * @function
     * @returns {String}
     */
    message: function () {
      return this.xhr ? this.xhr.responseText : ''
    },

    /**
     * Get upload progress
     * @function
     * @returns {number}
     */
    progress: function () {
      if (this.pendingRetry) {
        return 0
      }
      var s = this.status()
      if (s === 'success' || s === 'error') {
        return 1
      } else if (s === 'pending') {
        return 0
      } else {
        return this.total > 0 ? this.loaded / this.total : 0
      }
    },

    /**
     * Count total size uploaded
     * @function
     * @returns {number}
     */
    sizeUploaded: function () {
      var size = this.endByte - this.startByte
      // can't return only chunk.loaded value, because it is bigger than chunk size
      if (this.status() !== 'success') {
        size = this.progress() * size
      }
      return size
    },

    /**
     * Prepare Xhr request. Set query, headers and data
     * @param {string} method GET or POST
     * @param {bool} isTest is this a test request
     * @param {string} [paramsMethod] octet or form
     * @param {Blob} [blob] to send
     * @returns {FormData|Blob|Null} data to send
     */
    prepareXhrRequest: function (method, isTest, paramsMethod, blob) {
      // Add data from the query options
      var query = evalOpts(this.flowObj.opts.query, this.fileObj, this, isTest)
      query = extend(query || {}, this.getParams())

      var target = evalOpts(this.flowObj.opts.target, this.fileObj, this, isTest)
      var data = null
      if (method === 'GET' || paramsMethod === 'octet') {
        // Add data from the query options
        var params = []
        each(query, function (v, k) {
          params.push([encodeURIComponent(k), encodeURIComponent(v)].join('='))
        })
        target = this.getTarget(target, params)
        data = blob || null
      } else {
        // Add data from the query options
        data = new FormData()
        each(query, function (v, k) {
          data.append(k, v)
        })
        if (typeof blob !== 'undefined') {
          data.append(
            this.flowObj.opts.fileParameterName,
            blob,
            this.filename || this.fileObj.file.name
          )
        }
      }

      this.xhr.open(method, target, true)
      this.xhr.withCredentials = this.flowObj.opts.withCredentials

      // Add data from header options
      each(
        evalOpts(this.flowObj.opts.headers, this.fileObj, this, isTest),
        function (v, k) {
          this.xhr.setRequestHeader(k, v)
        },
        this
      )

      return data
    },
  }

  /**
   * Remove value from array
   * @param array
   * @param value
   */
  function arrayRemove(array, value) {
    var index = array.indexOf(value)
    if (index > -1) {
      array.splice(index, 1)
    }
  }

  /**
   * If option is a function, evaluate it with given params
   * @param {*} data
   * @param {...} args arguments of a callback
   * @returns {*}
   */
  function evalOpts(data, args) {
    if (typeof data === 'function') {
      // `arguments` is an object, not array, in FF, so:
      args = Array.prototype.slice.call(arguments)
      data = data.apply(null, args.slice(1))
    }
    return data
  }
  Flow.evalOpts = evalOpts

  /**
   * Execute function asynchronously
   * @param fn
   * @param context
   */
  function async(fn, context) {
    setTimeout(fn.bind(context), 0)
  }

  /**
   * Extends the destination object `dst` by copying all of the properties from
   * the `src` object(s) to `dst`. You can specify multiple `src` objects.
   * @function
   * @param {Object} dst Destination object.
   * @param {...Object} src Source object(s).
   * @returns {Object} Reference to `dst`.
   */
  function extend(dst, src) {
    each(arguments, function (obj) {
      if (obj !== dst) {
        each(obj, function (value, key) {
          dst[key] = value
        })
      }
    })
    return dst
  }
  Flow.extend = extend

  /**
   * Iterate each element of an object
   * @function
   * @param {Array|Object} obj object or an array to iterate
   * @param {Function} callback first argument is a value and second is a key.
   * @param {Object=} context Object to become context (`this`) for the iterator function.
   */
  function each(obj, callback, context) {
    if (!obj) {
      return
    }
    var key
    // Is Array?
    // Array.isArray won't work, not only arrays can be iterated by index https://github.com/flowjs/ng-flow/issues/236#
    if (typeof obj.length !== 'undefined') {
      for (key = 0; key < obj.length; key++) {
        if (callback.call(context, obj[key], key) === false) {
          return
        }
      }
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key) && callback.call(context, obj[key], key) === false) {
          return
        }
      }
    }
  }
  Flow.each = each

  /**
   * FlowFile constructor
   * @type {FlowFile}
   */
  Flow.FlowFile = FlowFile

  /**
   * FlowFile constructor
   * @type {FlowChunk}
   */
  Flow.FlowChunk = FlowChunk

  /**
   * Library version
   * @type {string}
   */
  Flow.version = '2.14.1'

  if (typeof module === 'object' && module && typeof module.exports === 'object') {
    // Expose Flow as module.exports in loaders that implement the Node
    // module pattern (including browserify). Do not create the global, since
    // the user will be storing it themselves locally, and globals are frowned
    // upon in the Node module world.
    module.exports = Flow
  } else {
    // Otherwise expose Flow to the global object as usual
    window.Flow = Flow

    // Register as a named AMD module, since Flow can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase flow is used because AMD module names are
    // derived from file names, and Flow is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of Flow, it will work.
    if (typeof define === 'function' && define.amd) {
      define('flow', [], function () {
        return Flow
      })
    }
  }
})(typeof window !== 'undefined' && window, typeof document !== 'undefined' && document)

;(function (window, document) {
  // Create all modules and define dependencies to make sure they exist
  // and are loaded in the correct order to satisfy dependency injection
  // before all nested files are concatenated by Grunt

  // Config
  angular
    .module('ngCsv.config', [])
    .value('ngCsv.config', {
      debug: true,
    })
    .config([
      '$compileProvider',
      function ($compileProvider) {
        if (angular.isDefined($compileProvider.urlSanitizationWhitelist)) {
          $compileProvider.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)
        } else {
          $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)
        }
      },
    ])

  // Modules
  angular.module('ngCsv.directives', ['ngCsv.services'])
  angular.module('ngCsv.services', [])
  angular.module('ngCsv', ['ngCsv.config', 'ngCsv.services', 'ngCsv.directives', 'ngSanitize'])

  // Common.js package manager support (e.g. ComponentJS, WebPack)
  if (
    typeof module !== 'undefined' &&
    typeof exports !== 'undefined' &&
    module.exports === exports
  ) {
    module.exports = 'ngCsv'
  }
  /**
   * Created by asafdav on 15/05/14.
   */
  angular.module('ngCsv.services').service('CSV', [
    '$q',
    function ($q) {
      var EOL = '\r\n'
      var BOM = '\ufeff'

      var specialChars = {
        '\\t': '\t',
        '\\b': '\b',
        '\\v': '\v',
        '\\f': '\f',
        '\\r': '\r',
      }

      /**
       * Stringify one field
       * @param data
       * @param options
       * @returns {*}
       */
      this.stringifyField = function (data, options) {
        if (options.decimalSep === 'locale' && this.isFloat(data)) {
          return data.toLocaleString()
        }

        if (options.decimalSep !== '.' && this.isFloat(data)) {
          return data.toString().replace('.', options.decimalSep)
        }

        if (typeof data === 'string') {
          data = data.replace(/"/g, '""') // Escape double qoutes

          if (
            options.quoteStrings ||
            data.indexOf(',') > -1 ||
            data.indexOf('\n') > -1 ||
            data.indexOf('\r') > -1
          ) {
            data = options.txtDelim + data + options.txtDelim
          }

          return data
        }

        if (typeof data === 'boolean') {
          return data ? 'TRUE' : 'FALSE'
        }

        return data
      }

      /**
       * Helper function to check if input is float
       * @param input
       * @returns {boolean}
       */
      this.isFloat = function (input) {
        return +input === input && (!isFinite(input) || Boolean(input % 1))
      }

      /**
       * Creates a csv from a data array
       * @param data
       * @param options
       *  * header - Provide the first row (optional)
       *  * fieldSep - Field separator, default: ',',
       *  * addByteOrderMarker - Add Byte order mark, default(false)
       * @param callback
       */
      this.stringify = function (data, options) {
        var def = $q.defer()

        var that = this
        var csv = ''
        var csvContent = ''

        var dataPromise = $q.when(data).then(function (responseData) {
          //responseData = angular.copy(responseData);//moved to row creation
          // Check if there's a provided header array
          if (angular.isDefined(options.header) && options.header) {
            var encodingArray, headerString

            encodingArray = []
            angular.forEach(
              options.header,
              function (title, key) {
                this.push(that.stringifyField(title, options))
              },
              encodingArray
            )

            headerString = encodingArray.join(options.fieldSep ? options.fieldSep : ',')
            csvContent += headerString + EOL
          }

          var arrData = []

          if (angular.isArray(responseData)) {
            arrData = responseData
          } else if (angular.isFunction(responseData)) {
            arrData = responseData()
          }

          // Check if using keys as labels
          if (
            angular.isDefined(options.label) &&
            options.label &&
            typeof options.label === 'boolean'
          ) {
            var labelArray, labelString

            labelArray = []
            angular.forEach(
              arrData[0],
              function (value, label) {
                this.push(that.stringifyField(label, options))
              },
              labelArray
            )
            labelString = labelArray.join(options.fieldSep ? options.fieldSep : ',')
            csvContent += labelString + EOL
          }

          angular.forEach(arrData, function (oldRow, index) {
            var row = angular.copy(arrData[index])
            var dataString, infoArray

            infoArray = []

            var iterator = !!options.columnOrder ? options.columnOrder : row
            angular.forEach(
              iterator,
              function (field, key) {
                var val = !!options.columnOrder ? row[field] : field
                this.push(that.stringifyField(val, options))
              },
              infoArray
            )

            dataString = infoArray.join(options.fieldSep ? options.fieldSep : ',')
            csvContent += index < arrData.length ? dataString + EOL : dataString
          })

          // Add BOM if needed
          if (options.addByteOrderMarker) {
            csv += BOM
          }

          // Append the content and resolve.
          csv += csvContent
          def.resolve(csv)
        })

        if (typeof dataPromise['catch'] === 'function') {
          dataPromise['catch'](function (err) {
            def.reject(err)
          })
        }

        return def.promise
      }

      /**
       * Helper function to check if input is really a special character
       * @param input
       * @returns {boolean}
       */
      this.isSpecialChar = function (input) {
        return specialChars[input] !== undefined
      }

      /**
       * Helper function to get what the special character was supposed to be
       * since Angular escapes the first backslash
       * @param input
       * @returns {special character string}
       */
      this.getSpecialChar = function (input) {
        return specialChars[input]
      }
    },
  ])
  /**
   * ng-csv module
   * Export Javascript's arrays to csv files from the browser
   *
   * Author: asafdav - https://github.com/asafdav
   */
  angular.module('ngCsv.directives').directive('ngCsv', [
    '$parse',
    '$q',
    'CSV',
    '$document',
    '$timeout',
    function ($parse, $q, CSV, $document, $timeout) {
      return {
        restrict: 'AC',
        scope: {
          data: '&ngCsv',
          filename: '@filename',
          header: '&csvHeader',
          columnOrder: '&csvColumnOrder',
          txtDelim: '@textDelimiter',
          decimalSep: '@decimalSeparator',
          quoteStrings: '@quoteStrings',
          fieldSep: '@fieldSeparator',
          lazyLoad: '@lazyLoad',
          addByteOrderMarker: '@addBom',
          ngClick: '&',
          charset: '@charset',
          label: '&csvLabel',
        },
        controller: [
          '$scope',
          '$element',
          '$attrs',
          '$transclude',
          function ($scope, $element, $attrs, $transclude) {
            $scope.csv = ''

            if (!angular.isDefined($scope.lazyLoad) || $scope.lazyLoad != 'true') {
              if (angular.isArray($scope.data)) {
                $scope.$watch(
                  'data',
                  function (newValue) {
                    $scope.buildCSV()
                  },
                  true
                )
              }
            }

            $scope.getFilename = function () {
              return $scope.filename || 'download.csv'
            }

            function getBuildCsvOptions() {
              var options = {
                txtDelim: $scope.txtDelim ? $scope.txtDelim : '"',
                decimalSep: $scope.decimalSep ? $scope.decimalSep : '.',
                quoteStrings: $scope.quoteStrings,
                addByteOrderMarker: $scope.addByteOrderMarker,
              }
              if (angular.isDefined($attrs.csvHeader)) options.header = $scope.$eval($scope.header)
              if (angular.isDefined($attrs.csvColumnOrder))
                options.columnOrder = $scope.$eval($scope.columnOrder)
              if (angular.isDefined($attrs.csvLabel)) options.label = $scope.$eval($scope.label)

              options.fieldSep = $scope.fieldSep ? $scope.fieldSep : ','

              // Replaces any badly formatted special character string with correct special character
              options.fieldSep = CSV.isSpecialChar(options.fieldSep)
                ? CSV.getSpecialChar(options.fieldSep)
                : options.fieldSep

              return options
            }

            /**
             * Creates the CSV and updates the scope
             * @returns {*}
             */
            $scope.buildCSV = function () {
              var deferred = $q.defer()

              $element.addClass($attrs.ngCsvLoadingClass || 'ng-csv-loading')

              CSV.stringify($scope.data(), getBuildCsvOptions()).then(function (csv) {
                $scope.csv = csv
                $element.removeClass($attrs.ngCsvLoadingClass || 'ng-csv-loading')
                deferred.resolve(csv)
              })
              $scope.$apply() // Old angular support

              return deferred.promise
            }
          },
        ],
        link: function (scope, element, attrs) {
          function doClick() {
            var charset = scope.charset || 'utf-8'
            var blob = new Blob([scope.csv], {
              type: 'text/csv;charset=' + charset + ';',
            })

            if (window.navigator.msSaveOrOpenBlob) {
              navigator.msSaveBlob(blob, scope.getFilename())
            } else {
              var downloadContainer = angular.element('<div data-tap-disabled="true"><a></a></div>')
              var downloadLink = angular.element(downloadContainer.children()[0])
              downloadLink.attr('href', window.URL.createObjectURL(blob))
              downloadLink.attr('download', scope.getFilename())
              downloadLink.attr('target', '_blank')

              $document.find('body').append(downloadContainer)
              $timeout(function () {
                downloadLink[0].click()
                downloadLink.remove()
              }, null)
            }
          }

          element.bind('click', function (e) {
            scope.buildCSV().then(function (csv) {
              doClick()
            })
            scope.$apply()
          })
        },
      }
    },
  ])
})(window, document)
/**
 * @description
 * var app = angular.module('App', ['flow.provider'], function(flowFactoryProvider){
 *    flowFactoryProvider.defaults = {target: '/'};
 * });
 * @name flowFactoryProvider
 */
angular.module('flow.provider', []).provider('flowFactory', function () {
  'use strict'
  /**
   * Define the default properties for flow.js
   * @name flowFactoryProvider.defaults
   * @type {Object}
   */
  this.defaults = {}

  /**
   * Flow, MaybeFlow or NotFlow
   * @name flowFactoryProvider.factory
   * @type {function}
   * @return {Flow}
   */
  this.factory = function (options) {
    return new Flow(options)
  }

  /**
   * Define the default events
   * @name flowFactoryProvider.events
   * @type {Array}
   * @private
   */
  this.events = []

  /**
   * Add default events
   * @name flowFactoryProvider.on
   * @function
   * @param {string} event
   * @param {Function} callback
   */
  this.on = function (event, callback) {
    this.events.push([event, callback])
  }

  this.$get = function () {
    var fn = this.factory
    var defaults = this.defaults
    var events = this.events
    return {
      create: function (opts) {
        // combine default options with global options and options
        var flow = fn(angular.extend({}, defaults, opts))
        angular.forEach(events, function (event) {
          flow.on(event[0], event[1])
        })
        return flow
      },
    }
  }
})
angular
  .module('flow.init', ['flow.provider'])
  .controller('flowCtrl', [
    '$scope',
    '$attrs',
    '$parse',
    'flowFactory',
    function ($scope, $attrs, $parse, flowFactory) {
      var options = angular.extend({}, $scope.$eval($attrs.flowInit))

      // use existing flow object or create a new one
      var flow = $scope.$eval($attrs.flowObject) || flowFactory.create(options)

      var catchAllHandler = function (eventName) {
        var args = Array.prototype.slice.call(arguments)
        args.shift()
        var event = $scope.$broadcast.apply($scope, ['flow::' + eventName, flow].concat(args))
        if (
          {
            progress: 1,
            filesSubmitted: 1,
            fileSuccess: 1,
            fileError: 1,
            complete: 1,
          }[eventName]
        ) {
          $scope.$applyAsync()
        }
        if (event.defaultPrevented) {
          return false
        }
      }

      flow.on('catchAll', catchAllHandler)
      $scope.$on('$destroy', function () {
        flow.off('catchAll', catchAllHandler)
      })

      $scope.$flow = flow

      if ($attrs.hasOwnProperty('flowName')) {
        $parse($attrs.flowName).assign($scope, flow)
        $scope.$on('$destroy', function () {
          $parse($attrs.flowName).assign($scope)
        })
      }
    },
  ])
  .directive('flowInit', [
    function () {
      return {
        scope: true,
        controller: 'flowCtrl',
      }
    },
  ])
angular.module('flow.btn', ['flow.init']).directive('flowBtn', [
  function () {
    return {
      restrict: 'EA',
      scope: false,
      require: '^flowInit',
      link: function (scope, element, attrs) {
        var isDirectory = attrs.hasOwnProperty('flowDirectory')
        var isSingleFile = attrs.hasOwnProperty('flowSingleFile')
        var inputAttrs = attrs.hasOwnProperty('flowAttrs') && scope.$eval(attrs.flowAttrs)
        scope.$flow.assignBrowse(element, isDirectory, isSingleFile, inputAttrs)
      },
    }
  },
])
angular
  .module('flow.dragEvents', ['flow.init'])
  /**
   * @name flowPreventDrop
   * Prevent loading files then dropped on element
   */
  .directive('flowPreventDrop', function () {
    return {
      scope: false,
      link: function (scope, element, attrs) {
        element.bind('drop dragover', function (event) {
          event.preventDefault()
        })
      },
    }
  })
  /**
   * @name flowDragEnter
   * executes `flowDragEnter` and `flowDragLeave` events
   */
  .directive('flowDragEnter', [
    '$timeout',
    function ($timeout) {
      return {
        scope: false,
        link: function (scope, element, attrs) {
          var promise
          var enter = false
          element.bind('dragover', function (event) {
            if (!isFileDrag(event)) {
              return
            }
            if (!enter) {
              scope.$apply(attrs.flowDragEnter)
              enter = true
            }
            $timeout.cancel(promise)
            event.preventDefault()
          })
          element.bind('dragleave drop', function (event) {
            $timeout.cancel(promise)
            promise = $timeout(function () {
              scope.$eval(attrs.flowDragLeave)
              promise = null
              enter = false
            }, 100)
          })
          function isFileDrag(dragEvent) {
            var fileDrag = false
            var dataTransfer = dragEvent.dataTransfer || dragEvent.originalEvent.dataTransfer
            angular.forEach(dataTransfer && dataTransfer.types, function (val) {
              if (val === 'Files') {
                fileDrag = true
              }
            })
            return fileDrag
          }
        },
      }
    },
  ])

angular.module('flow.drop', ['flow.init']).directive('flowDrop', function () {
  return {
    scope: false,
    require: '^flowInit',
    link: function (scope, element, attrs) {
      if (attrs.flowDropEnabled) {
        scope.$watch(attrs.flowDropEnabled, function (value) {
          if (value) {
            assignDrop()
          } else {
            unAssignDrop()
          }
        })
      } else {
        assignDrop()
      }
      function assignDrop() {
        scope.$flow.assignDrop(element)
      }
      function unAssignDrop() {
        scope.$flow.unAssignDrop(element)
      }
    },
  }
})

!(function (angular) {
  'use strict'
  var module = angular.module('flow.events', ['flow.init'])
  var events = {
    fileSuccess: ['$file', '$message'],
    fileProgress: ['$file'],
    fileAdded: ['$file', '$event'],
    filesAdded: ['$files', '$event'],
    filesSubmitted: ['$files', '$event'],
    fileRetry: ['$file'],
    fileRemoved: ['$file'],
    fileError: ['$file', '$message'],
    uploadStart: [],
    complete: [],
    progress: [],
    error: ['$message', '$file'],
  }

  angular.forEach(events, function (eventArgs, eventName) {
    var name = 'flow' + capitaliseFirstLetter(eventName)
    if (name == 'flowUploadStart') {
      name = 'flowUploadStarted' // event alias
    }
    module.directive(name, [
      function () {
        return {
          require: '^flowInit',
          controller: [
            '$scope',
            '$attrs',
            function ($scope, $attrs) {
              $scope.$on('flow::' + eventName, function () {
                var funcArgs = Array.prototype.slice.call(arguments)
                var event = funcArgs.shift() // remove angular event
                // remove flow object and ignore event if it is from parent directive
                if ($scope.$flow !== funcArgs.shift()) {
                  return
                }
                var args = {}
                angular.forEach(eventArgs, function (value, key) {
                  args[value] = funcArgs[key]
                })
                if ($scope.$eval($attrs[name], args) === false) {
                  event.preventDefault()
                }
              })
            },
          ],
        }
      },
    ])
  })

  function capitaliseFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1)
  }
})(angular)

angular.module('flow.img', ['flow.init']).directive('flowImg', [
  function () {
    return {
      scope: false,
      require: '^flowInit',
      link: function (scope, element, attrs) {
        var file = attrs.flowImg
        scope.$watch(file, function (file) {
          if (!file) {
            return
          }
          var fileReader = new FileReader()
          fileReader.readAsDataURL(file.file)
          fileReader.onload = function (event) {
            scope.$apply(function () {
              attrs.$set('src', event.target.result)
            })
          }
        })
      },
    }
  },
])
angular.module('flow.transfers', ['flow.init']).directive('flowTransfers', [
  function () {
    return {
      scope: true,
      require: '^flowInit',
      link: function (scope) {
        scope.transfers = scope.$flow.files
      },
    }
  },
])
angular.module('flow', [
  'flow.provider',
  'flow.init',
  'flow.events',
  'flow.btn',
  'flow.drop',
  'flow.transfers',
  'flow.img',
  'flow.dragEvents',
]) /*! ng-showdown 19-10-2015 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['angular', 'showdown'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory(require('angular'), require('showdown'))
  } else {
    // Browser globals (root is window)
    root.ngShowdown = factory(root.angular, root.showdown)
  }
})(this, function (angular, showdown) {
  //Check if AngularJs and Showdown is defined and only load ng-Showdown if both are present
  if (typeof angular === 'undefined' || typeof showdown === 'undefined') {
    throw new Error(
      'ng-showdown was not loaded because one of its dependencies (AngularJS or Showdown) was not met'
    )
  }

  angular
    .module('ng-showdown', ['ngSanitize'])
    .provider('$showdown', ngShowdown)
    .directive('sdModelToHtml', ['$showdown', '$sanitize', '$sce', sdModelToHtmlDirective]) //<-- DEPRECATED: will be removed in the next major version release
    .directive('markdownToHtml', ['$showdown', '$sanitize', '$sce', markdownToHtmlDirective])
    .filter('sdStripHtml', ['$showdown', stripHtmlFilter]) //<-- DEPRECATED: will be removed in the next major version release
    .filter('stripHtml', ['$showdown', stripHtmlFilter])

  /**
   * Angular Provider
   * Enables configuration of showdown via angular.config and Dependency Injection into controllers, views
   * directives, etc... This assures the directives and filters provided by the library itself stay consistent
   * with the user configurations.
   * If the user wants to use a different configuration in a determined context, he can use the "classic" Showdown
   * object instead.
   */
  function ngShowdown() {
    // Configuration parameters for Showdown
    var config = {
      extensions: [],
      sanitize: false,
    }

    /**
     * Sets a configuration option
     *
     * @param {string} key Config parameter key
     * @param {string} value Config parameter value
     */
    /* jshint validthis: true */
    this.setOption = function (key, value) {
      config[key] = value
      return this
    }

    /**
     * Gets the value of the configuration parameter specified by key
     *
     * @param {string} key The config parameter key
     * @returns {string|null} Returns the value of the config parameter. (or null if the config parameter is not set)
     */
    this.getOption = function (key) {
      if (config.hasOwnProperty(key)) {
        return config[key]
      } else {
        return undefined
      }
    }

    /**
     * Loads a Showdown Extension
     *
     * @param {string} extensionName The name of the extension to load
     */
    this.loadExtension = function (extensionName) {
      config.extensions.push(extensionName)

      return this
    }

    function SDObject() {
      var converter = new showdown.Converter(config)

      /**
       * Converts a markdown text into HTML
       *
       * @param {string} markdown The markdown string to be converted to HTML
       * @returns {string} The converted HTML
       */
      this.makeHtml = function (markdown) {
        return converter.makeHtml(markdown)
      }

      /**
       * Strips a text of it's HTML tags. See http://stackoverflow.com/questions/17289448/angularjs-to-output-plain-text-instead-of-html
       *
       * @param {string} text
       * @returns {string}
       */
      this.stripHtml = function (text) {
        return String(text).replace(/<[^>]+>/gm, '')
      }

      /**
       * Gets the value of the configuration parameter of CONVERTER specified by key
       * @param {string} key The config parameter key
       * @returns {*}
       */
      this.getOption = function (key) {
        return converter.getOption(key)
      }

      /**
       * Gets the converter configuration params
       * @returns {*}
       */
      this.getOptions = function () {
        return converter.getOptions()
      }

      /**
       * Sets a configuration option
       *
       * @param {string} key Config parameter key
       * @param {string} value Config parameter value
       * @returns {SDObject}
       */
      this.setOption = function (key, value) {
        converter.setOption(key, value)
        return this
      }
    }

    // The object returned by service provider
    this.$get = function () {
      return new SDObject()
    }
  }

  /**
   * @deprecated
   * Legacy AngularJS Directive to Md to HTML transformation
   *
   * Usage example:
   * <div sd-model-to-html="markdownText" ></div>
   *
   * @param {showdown.Converter} $showdown
   * @param {$sanitize} $sanitize
   * @param {$sce} $sce
   * @returns {*}
   */
  function sdModelToHtmlDirective($showdown, $sanitize, $sce) {
    return {
      restrict: 'A',
      link: getLinkFn($showdown, $sanitize, $sce),
      scope: {
        model: '=sdModelToHtml',
      },
      template: '<div ng-bind-html="trustedHtml"></div>',
    }
  }

  /**
   * AngularJS Directive to Md to HTML transformation
   *
   * Usage example:
   * <div markdown-to-html="markdownText" ></div>
   *
   * @param {showdown.Converter} $showdown
   * @param {$sanitize} $sanitize
   * @param {$sce} $sce
   * @returns {*}
   */
  function markdownToHtmlDirective($showdown, $sanitize, $sce) {
    return {
      restrict: 'A',
      link: getLinkFn($showdown, $sanitize, $sce),
      scope: {
        model: '=markdownToHtml',
      },
      template: '<div ng-bind-html="trustedHtml"></div>',
    }
  }

  function getLinkFn($showdown, $sanitize, $sce) {
    return function (scope, element, attrs) {
      scope.$watch('model', function (newValue) {
        var showdownHTML
        if (typeof newValue === 'string') {
          showdownHTML = $showdown.makeHtml(newValue)
          scope.trustedHtml = $showdown.getOption('sanitize')
            ? $sanitize(showdownHTML)
            : $sce.trustAsHtml(showdownHTML)
        } else {
          scope.trustedHtml = typeof newValue
        }
      })
    }
  }

  /**
   * AngularJS Filter to Strip HTML tags from text
   *
   * @returns {Function}
   */
  function stripHtmlFilter($showdown) {
    return function (text) {
      return $showdown.stripHtml(text)
    }
  }

  return angular.module('ng-showdown')
})

//# sourceMappingURL=ng-showdown.js.map
/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.19.8 - 2017-04-18T05:43:43.673Z
 * License: MIT
 */

;(function () {
  'use strict'
  var KEY = {
    TAB: 9,
    ENTER: 13,
    ESC: 27,
    SPACE: 32,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HOME: 36,
    END: 35,
    BACKSPACE: 8,
    DELETE: 46,
    COMMAND: 91,

    MAP: {
      91: 'COMMAND',
      8: 'BACKSPACE',
      9: 'TAB',
      13: 'ENTER',
      16: 'SHIFT',
      17: 'CTRL',
      18: 'ALT',
      19: 'PAUSEBREAK',
      20: 'CAPSLOCK',
      27: 'ESC',
      32: 'SPACE',
      33: 'PAGE_UP',
      34: 'PAGE_DOWN',
      35: 'END',
      36: 'HOME',
      37: 'LEFT',
      38: 'UP',
      39: 'RIGHT',
      40: 'DOWN',
      43: '+',
      44: 'PRINTSCREEN',
      45: 'INSERT',
      46: 'DELETE',
      48: '0',
      49: '1',
      50: '2',
      51: '3',
      52: '4',
      53: '5',
      54: '6',
      55: '7',
      56: '8',
      57: '9',
      59: ';',
      61: '=',
      65: 'A',
      66: 'B',
      67: 'C',
      68: 'D',
      69: 'E',
      70: 'F',
      71: 'G',
      72: 'H',
      73: 'I',
      74: 'J',
      75: 'K',
      76: 'L',
      77: 'M',
      78: 'N',
      79: 'O',
      80: 'P',
      81: 'Q',
      82: 'R',
      83: 'S',
      84: 'T',
      85: 'U',
      86: 'V',
      87: 'W',
      88: 'X',
      89: 'Y',
      90: 'Z',
      96: '0',
      97: '1',
      98: '2',
      99: '3',
      100: '4',
      101: '5',
      102: '6',
      103: '7',
      104: '8',
      105: '9',
      106: '*',
      107: '+',
      109: '-',
      110: '.',
      111: '/',
      112: 'F1',
      113: 'F2',
      114: 'F3',
      115: 'F4',
      116: 'F5',
      117: 'F6',
      118: 'F7',
      119: 'F8',
      120: 'F9',
      121: 'F10',
      122: 'F11',
      123: 'F12',
      144: 'NUMLOCK',
      145: 'SCROLLLOCK',
      186: ';',
      187: '=',
      188: ',',
      189: '-',
      190: '.',
      191: '/',
      192: '`',
      219: '[',
      220: '\\',
      221: ']',
      222: "'",
    },

    isControl: function (e) {
      var k = e.which
      switch (k) {
        case KEY.COMMAND:
        case KEY.SHIFT:
        case KEY.CTRL:
        case KEY.ALT:
          return true
      }

      if (e.metaKey || e.ctrlKey || e.altKey) return true

      return false
    },
    isFunctionKey: function (k) {
      k = k.which ? k.which : k
      return k >= 112 && k <= 123
    },
    isVerticalMovement: function (k) {
      return ~[KEY.UP, KEY.DOWN].indexOf(k)
    },
    isHorizontalMovement: function (k) {
      return ~[KEY.LEFT, KEY.RIGHT, KEY.BACKSPACE, KEY.DELETE].indexOf(k)
    },
    toSeparator: function (k) {
      var sep = { ENTER: '\n', TAB: '\t', SPACE: ' ' }[k]
      if (sep) return sep
      // return undefined for special keys other than enter, tab or space.
      // no way to use them to cut strings.
      return KEY[k] ? undefined : k
    },
  }

  function isNil(value) {
    return angular.isUndefined(value) || value === null
  }

  /**
   * Add querySelectorAll() to jqLite.
   *
   * jqLite find() is limited to lookups by tag name.
   * TODO This will change with future versions of AngularJS, to be removed when this happens
   *
   * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
   * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
   */
  if (angular.element.prototype.querySelectorAll === undefined) {
    angular.element.prototype.querySelectorAll = function (selector) {
      return angular.element(this[0].querySelectorAll(selector))
    }
  }

  /**
   * Add closest() to jqLite.
   */
  if (angular.element.prototype.closest === undefined) {
    angular.element.prototype.closest = function (selector) {
      var elem = this[0]
      var matchesSelector =
        elem.matches ||
        elem.webkitMatchesSelector ||
        elem.mozMatchesSelector ||
        elem.msMatchesSelector

      while (elem) {
        if (matchesSelector.bind(elem)(selector)) {
          return elem
        } else {
          elem = elem.parentElement
        }
      }
      return false
    }
  }

  var latestId = 0

  var uis = angular
    .module('ui.select', [])

    .constant('uiSelectConfig', {
      theme: 'bootstrap',
      searchEnabled: true,
      sortable: false,
      placeholder: '', // Empty by default, like HTML tag <select>
      refreshDelay: 1000, // In milliseconds
      closeOnSelect: true,
      skipFocusser: false,
      dropdownPosition: 'auto',
      removeSelected: true,
      resetSearchInput: true,
      generateId: function () {
        return latestId++
      },
      appendToBody: false,
      spinnerEnabled: false,
      spinnerClass: 'glyphicon glyphicon-refresh ui-select-spin',
      backspaceReset: true,
    })

    // See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
    .service('uiSelectMinErr', function () {
      var minErr = angular.$$minErr('ui.select')
      return function () {
        var error = minErr.apply(this, arguments)
        var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '')
        return new Error(message)
      }
    })

    // Recreates old behavior of ng-transclude. Used internally.
    .directive('uisTranscludeAppend', function () {
      return {
        link: function (scope, element, attrs, ctrl, transclude) {
          transclude(scope, function (clone) {
            element.append(clone)
          })
        },
      }
    })

    /**
     * Highlights text that matches $select.search.
     *
     * Taken from AngularUI Bootstrap Typeahead
     * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
     */
    .filter('highlight', function () {
      function escapeRegexp(queryToEscape) {
        return ('' + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1')
      }

      return function (matchItem, query) {
        return query && matchItem
          ? ('' + matchItem).replace(
              new RegExp(escapeRegexp(query), 'gi'),
              '<span class="ui-select-highlight">$&</span>'
            )
          : matchItem
      }
    })

    /**
     * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
     *
     * Taken from AngularUI Bootstrap Position:
     * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
     */
    .factory('uisOffset', [
      '$document',
      '$window',
      function ($document, $window) {
        return function (element) {
          var boundingClientRect = element[0].getBoundingClientRect()
          return {
            width: boundingClientRect.width || element.prop('offsetWidth'),
            height: boundingClientRect.height || element.prop('offsetHeight'),
            top:
              boundingClientRect.top +
              ($window.pageYOffset || $document[0].documentElement.scrollTop),
            left:
              boundingClientRect.left +
              ($window.pageXOffset || $document[0].documentElement.scrollLeft),
          }
        }
      },
    ])

  uis.directive('uiSelectChoices', [
    'uiSelectConfig',
    'uisRepeatParser',
    'uiSelectMinErr',
    '$compile',
    '$window',
    function (uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window) {
      return {
        restrict: 'EA',
        require: '^uiSelect',
        replace: true,
        transclude: true,
        templateUrl: function (tElement) {
          // Needed so the uiSelect can detect the transcluded content
          tElement.addClass('ui-select-choices')

          // Gets theme attribute from parent (ui-select)
          var theme = tElement.parent().attr('theme') || uiSelectConfig.theme
          return theme + '/choices.tpl.html'
        },

        compile: function (tElement, tAttrs) {
          if (!tAttrs.repeat) throw uiSelectMinErr('repeat', "Expected 'repeat' expression.")

          // var repeat = RepeatParser.parse(attrs.repeat);
          var groupByExp = tAttrs.groupBy
          var groupFilterExp = tAttrs.groupFilter

          if (groupByExp) {
            var groups = tElement.querySelectorAll('.ui-select-choices-group')
            if (groups.length !== 1)
              throw uiSelectMinErr(
                'rows',
                "Expected 1 .ui-select-choices-group but got '{0}'.",
                groups.length
              )
            groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression())
          }

          var parserResult = RepeatParser.parse(tAttrs.repeat)

          var choices = tElement.querySelectorAll('.ui-select-choices-row')
          if (choices.length !== 1) {
            throw uiSelectMinErr(
              'rows',
              "Expected 1 .ui-select-choices-row but got '{0}'.",
              choices.length
            )
          }

          choices
            .attr('ng-repeat', parserResult.repeatExpression(groupByExp))
            .attr('ng-if', '$select.open') //Prevent unnecessary watches when dropdown is closed

          var rowsInner = tElement.querySelectorAll('.ui-select-choices-row-inner')
          if (rowsInner.length !== 1) {
            throw uiSelectMinErr(
              'rows',
              "Expected 1 .ui-select-choices-row-inner but got '{0}'.",
              rowsInner.length
            )
          }
          rowsInner.attr('uis-transclude-append', '') //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat

          // If IE8 then need to target rowsInner to apply the ng-click attr as choices will not capture the event.
          var clickTarget = $window.document.addEventListener ? choices : rowsInner
          clickTarget.attr(
            'ng-click',
            '$select.select(' + parserResult.itemName + ',$select.skipFocusser,$event)'
          )

          return function link(scope, element, attrs, $select) {
            $select.parseRepeatAttr(attrs.repeat, groupByExp, groupFilterExp) //Result ready at $select.parserResult
            $select.disableChoiceExpression = attrs.uiDisableChoice
            $select.onHighlightCallback = attrs.onHighlight
            $select.minimumInputLength = parseInt(attrs.minimumInputLength) || 0
            $select.dropdownPosition = attrs.position
              ? attrs.position.toLowerCase()
              : uiSelectConfig.dropdownPosition

            scope.$watch('$select.search', function (newValue) {
              if (newValue && !$select.open && $select.multiple) $select.activate(false, true)
              $select.activeIndex = $select.tagging.isActivated ? -1 : 0
              if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
                $select.refresh(attrs.refresh)
              } else {
                $select.items = []
              }
            })

            attrs.$observe('refreshDelay', function () {
              // $eval() is needed otherwise we get a string instead of a number
              var refreshDelay = scope.$eval(attrs.refreshDelay)
              $select.refreshDelay =
                refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay
            })

            scope.$watch('$select.open', function (open) {
              if (open) {
                tElement.attr('role', 'listbox')
                $select.refresh(attrs.refresh)
              } else {
                element.removeAttr('role')
              }
            })
          }
        },
      }
    },
  ])

  /**
   * Contains ui-select "intelligence".
   *
   * The goal is to limit dependency on the DOM whenever possible and
   * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
   */
  uis.controller('uiSelectCtrl', [
    '$scope',
    '$element',
    '$timeout',
    '$filter',
    '$$uisDebounce',
    'uisRepeatParser',
    'uiSelectMinErr',
    'uiSelectConfig',
    '$parse',
    '$injector',
    '$window',
    function (
      $scope,
      $element,
      $timeout,
      $filter,
      $$uisDebounce,
      RepeatParser,
      uiSelectMinErr,
      uiSelectConfig,
      $parse,
      $injector,
      $window
    ) {
      var ctrl = this

      var EMPTY_SEARCH = ''

      ctrl.placeholder = uiSelectConfig.placeholder
      ctrl.searchEnabled = uiSelectConfig.searchEnabled
      ctrl.sortable = uiSelectConfig.sortable
      ctrl.refreshDelay = uiSelectConfig.refreshDelay
      ctrl.paste = uiSelectConfig.paste
      ctrl.resetSearchInput = uiSelectConfig.resetSearchInput
      ctrl.refreshing = false
      ctrl.spinnerEnabled = uiSelectConfig.spinnerEnabled
      ctrl.spinnerClass = uiSelectConfig.spinnerClass
      ctrl.removeSelected = uiSelectConfig.removeSelected //If selected item(s) should be removed from dropdown list
      ctrl.closeOnSelect = true //Initialized inside uiSelect directive link function
      ctrl.skipFocusser = false //Set to true to avoid returning focus to ctrl when item is selected
      ctrl.search = EMPTY_SEARCH

      ctrl.activeIndex = 0 //Dropdown of choices
      ctrl.items = [] //All available choices

      ctrl.open = false
      ctrl.focus = false
      ctrl.disabled = false
      ctrl.selected = undefined

      ctrl.dropdownPosition = 'auto'

      ctrl.focusser = undefined //Reference to input element used to handle focus events
      ctrl.multiple = undefined // Initialized inside uiSelect directive link function
      ctrl.disableChoiceExpression = undefined // Initialized inside uiSelectChoices directive link function
      ctrl.tagging = { isActivated: false, fct: undefined }
      ctrl.taggingTokens = { isActivated: false, tokens: undefined }
      ctrl.lockChoiceExpression = undefined // Initialized inside uiSelectMatch directive link function
      ctrl.clickTriggeredSelect = false
      ctrl.$filter = $filter
      ctrl.$element = $element

      // Use $injector to check for $animate and store a reference to it
      ctrl.$animate = (function () {
        try {
          return $injector.get('$animate')
        } catch (err) {
          // $animate does not exist
          return null
        }
      })()

      ctrl.searchInput = $element.querySelectorAll('input.ui-select-search')
      if (ctrl.searchInput.length !== 1) {
        throw uiSelectMinErr(
          'searchInput',
          "Expected 1 input.ui-select-search but got '{0}'.",
          ctrl.searchInput.length
        )
      }

      ctrl.isEmpty = function () {
        return (
          isNil(ctrl.selected) ||
          ctrl.selected === '' ||
          (ctrl.multiple && ctrl.selected.length === 0)
        )
      }

      function _findIndex(collection, predicate, thisArg) {
        if (collection.findIndex) {
          return collection.findIndex(predicate, thisArg)
        } else {
          var list = Object(collection)
          var length = list.length >>> 0
          var value

          for (var i = 0; i < length; i++) {
            value = list[i]
            if (predicate.call(thisArg, value, i, list)) {
              return i
            }
          }
          return -1
        }
      }

      // Most of the time the user does not want to empty the search input when in typeahead mode
      function _resetSearchInput() {
        if (ctrl.resetSearchInput) {
          ctrl.search = EMPTY_SEARCH
          //reset activeIndex
          if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
            ctrl.activeIndex = _findIndex(
              ctrl.items,
              function (item) {
                return angular.equals(this, item)
              },
              ctrl.selected
            )
          }
        }
      }

      function _groupsFilter(groups, groupNames) {
        var i,
          j,
          result = []
        for (i = 0; i < groupNames.length; i++) {
          for (j = 0; j < groups.length; j++) {
            if (groups[j].name == [groupNames[i]]) {
              result.push(groups[j])
            }
          }
        }
        return result
      }

      // When the user clicks on ui-select, displays the dropdown list
      ctrl.activate = function (initSearchValue, avoidReset) {
        if (!ctrl.disabled && !ctrl.open) {
          if (!avoidReset) _resetSearchInput()

          $scope.$broadcast('uis:activate')
          ctrl.open = true
          ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex
          // ensure that the index is set to zero for tagging variants
          // that where first option is auto-selected
          if (ctrl.activeIndex === -1 && ctrl.taggingLabel !== false) {
            ctrl.activeIndex = 0
          }

          var container = $element.querySelectorAll('.ui-select-choices-content')
          var searchInput = $element.querySelectorAll('.ui-select-search')
          if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
            var animateHandler = function (elem, phase) {
              if (phase === 'start' && ctrl.items.length === 0) {
                // Only focus input after the animation has finished
                ctrl.$animate.off('removeClass', searchInput[0], animateHandler)
                $timeout(function () {
                  ctrl.focusSearchInput(initSearchValue)
                })
              } else if (phase === 'close') {
                // Only focus input after the animation has finished
                ctrl.$animate.off('enter', container[0], animateHandler)
                $timeout(function () {
                  ctrl.focusSearchInput(initSearchValue)
                })
              }
            }

            if (ctrl.items.length > 0) {
              ctrl.$animate.on('enter', container[0], animateHandler)
            } else {
              ctrl.$animate.on('removeClass', searchInput[0], animateHandler)
            }
          } else {
            $timeout(function () {
              ctrl.focusSearchInput(initSearchValue)
              if (!ctrl.tagging.isActivated && ctrl.items.length > 1) {
                _ensureHighlightVisible()
              }
            })
          }
        } else if (ctrl.open && !ctrl.searchEnabled) {
          // Close the selection if we don't have search enabled, and we click on the select again
          ctrl.close()
        }
      }

      ctrl.focusSearchInput = function (initSearchValue) {
        ctrl.search = initSearchValue || ctrl.search
        ctrl.searchInput[0].focus()
      }

      ctrl.findGroupByName = function (name) {
        return (
          ctrl.groups &&
          ctrl.groups.filter(function (group) {
            return group.name === name
          })[0]
        )
      }

      ctrl.parseRepeatAttr = function (repeatAttr, groupByExp, groupFilterExp) {
        function updateGroups(items) {
          var groupFn = $scope.$eval(groupByExp)
          ctrl.groups = []
          angular.forEach(items, function (item) {
            var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn]
            var group = ctrl.findGroupByName(groupName)
            if (group) {
              group.items.push(item)
            } else {
              ctrl.groups.push({ name: groupName, items: [item] })
            }
          })
          if (groupFilterExp) {
            var groupFilterFn = $scope.$eval(groupFilterExp)
            if (angular.isFunction(groupFilterFn)) {
              ctrl.groups = groupFilterFn(ctrl.groups)
            } else if (angular.isArray(groupFilterFn)) {
              ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn)
            }
          }
          ctrl.items = []
          ctrl.groups.forEach(function (group) {
            ctrl.items = ctrl.items.concat(group.items)
          })
        }

        function setPlainItems(items) {
          ctrl.items = items || []
        }

        ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems

        ctrl.parserResult = RepeatParser.parse(repeatAttr)

        ctrl.isGrouped = !!groupByExp
        ctrl.itemProperty = ctrl.parserResult.itemName

        //If collection is an Object, convert it to Array

        var originalSource = ctrl.parserResult.source

        //When an object is used as source, we better create an array and use it as 'source'
        var createArrayFromObject = function () {
          var origSrc = originalSource($scope)
          $scope.$uisSource = Object.keys(origSrc).map(function (v) {
            var result = {}
            result[ctrl.parserResult.keyName] = v
            result.value = origSrc[v]
            return result
          })
        }

        if (ctrl.parserResult.keyName) {
          // Check for (key,value) syntax
          createArrayFromObject()
          ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters)
          $scope.$watch(
            originalSource,
            function (newVal, oldVal) {
              if (newVal !== oldVal) createArrayFromObject()
            },
            true
          )
        }

        ctrl.refreshItems = function (data) {
          data = data || ctrl.parserResult.source($scope)
          var selectedItems = ctrl.selected
          //TODO should implement for single mode removeSelected
          if (
            ctrl.isEmpty() ||
            (angular.isArray(selectedItems) && !selectedItems.length) ||
            !ctrl.multiple ||
            !ctrl.removeSelected
          ) {
            ctrl.setItemsFn(data)
          } else {
            if (data !== undefined && data !== null) {
              var filteredItems = data.filter(function (i) {
                return angular.isArray(selectedItems)
                  ? selectedItems.every(function (selectedItem) {
                      return !angular.equals(i, selectedItem)
                    })
                  : !angular.equals(i, selectedItems)
              })
              ctrl.setItemsFn(filteredItems)
            }
          }
          if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up') {
            $scope.calculateDropdownPos()
          }
          $scope.$broadcast('uis:refresh')
        }

        // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
        $scope.$watchCollection(ctrl.parserResult.source, function (items) {
          if (items === undefined || items === null) {
            // If the user specifies undefined or null => reset the collection
            // Special case: items can be undefined if the user did not initialized the collection on the scope
            // i.e $scope.addresses = [] is missing
            ctrl.items = []
          } else {
            if (!angular.isArray(items)) {
              throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items)
            } else {
              //Remove already selected items (ex: while searching)
              //TODO Should add a test
              ctrl.refreshItems(items)

              //update the view value with fresh data from items, if there is a valid model value
              if (angular.isDefined(ctrl.ngModel.$modelValue)) {
                ctrl.ngModel.$modelValue = null //Force scope model value and ngModel value to be out of sync to re-run formatters
              }
            }
          }
        })
      }

      var _refreshDelayPromise

      /**
       * Typeahead mode: lets the user refresh the collection using his own function.
       *
       * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
       */
      ctrl.refresh = function (refreshAttr) {
        if (refreshAttr !== undefined) {
          // Debounce
          // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
          // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
          if (_refreshDelayPromise) {
            $timeout.cancel(_refreshDelayPromise)
          }
          _refreshDelayPromise = $timeout(function () {
            if ($scope.$select.search.length >= $scope.$select.minimumInputLength) {
              var refreshPromise = $scope.$eval(refreshAttr)
              if (refreshPromise && angular.isFunction(refreshPromise.then) && !ctrl.refreshing) {
                ctrl.refreshing = true
                refreshPromise.finally(function () {
                  ctrl.refreshing = false
                })
              }
            }
          }, ctrl.refreshDelay)
        }
      }

      ctrl.isActive = function (itemScope) {
        if (!ctrl.open) {
          return false
        }
        var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty])
        var isActive = itemIndex == ctrl.activeIndex

        if (!isActive || itemIndex < 0) {
          return false
        }

        if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
          itemScope.$eval(ctrl.onHighlightCallback)
        }

        return isActive
      }

      var _isItemSelected = function (item) {
        return (
          ctrl.selected &&
          angular.isArray(ctrl.selected) &&
          ctrl.selected.filter(function (selection) {
            return angular.equals(selection, item)
          }).length > 0
        )
      }

      var disabledItems = []

      function _updateItemDisabled(item, isDisabled) {
        var disabledItemIndex = disabledItems.indexOf(item)
        if (isDisabled && disabledItemIndex === -1) {
          disabledItems.push(item)
        }

        if (!isDisabled && disabledItemIndex > -1) {
          disabledItems.splice(disabledItemIndex, 1)
        }
      }

      function _isItemDisabled(item) {
        return disabledItems.indexOf(item) > -1
      }

      ctrl.isDisabled = function (itemScope) {
        if (!ctrl.open) return

        var item = itemScope[ctrl.itemProperty]
        var itemIndex = ctrl.items.indexOf(item)
        var isDisabled = false

        if (itemIndex >= 0 && (angular.isDefined(ctrl.disableChoiceExpression) || ctrl.multiple)) {
          if (item.isTag) return false

          if (ctrl.multiple) {
            isDisabled = _isItemSelected(item)
          }

          if (!isDisabled && angular.isDefined(ctrl.disableChoiceExpression)) {
            isDisabled = !!itemScope.$eval(ctrl.disableChoiceExpression)
          }

          _updateItemDisabled(item, isDisabled)
        }

        return isDisabled
      }

      // When the user selects an item with ENTER or clicks the dropdown
      ctrl.select = function (item, skipFocusser, $event) {
        if (isNil(item) || !_isItemDisabled(item)) {
          if (!ctrl.items && !ctrl.search && !ctrl.tagging.isActivated) return

          if (!item || !_isItemDisabled(item)) {
            // if click is made on existing item, prevent from tagging, ctrl.search does not matter
            ctrl.clickTriggeredSelect = false
            if ($event && ($event.type === 'click' || $event.type === 'touchend') && item)
              ctrl.clickTriggeredSelect = true

            if (ctrl.tagging.isActivated && ctrl.clickTriggeredSelect === false) {
              // if taggingLabel is disabled and item is undefined we pull from ctrl.search
              if (ctrl.taggingLabel === false) {
                if (ctrl.activeIndex < 0) {
                  if (item === undefined) {
                    item =
                      ctrl.tagging.fct !== undefined ? ctrl.tagging.fct(ctrl.search) : ctrl.search
                  }
                  if (!item || angular.equals(ctrl.items[0], item)) {
                    return
                  }
                } else {
                  // keyboard nav happened first, user selected from dropdown
                  item = ctrl.items[ctrl.activeIndex]
                }
              } else {
                // tagging always operates at index zero, taggingLabel === false pushes
                // the ctrl.search value without having it injected
                if (ctrl.activeIndex === 0) {
                  // ctrl.tagging pushes items to ctrl.items, so we only have empty val
                  // for `item` if it is a detected duplicate
                  if (item === undefined) return

                  // create new item on the fly if we don't already have one;
                  // use tagging function if we have one
                  if (ctrl.tagging.fct !== undefined && typeof item === 'string') {
                    item = ctrl.tagging.fct(item)
                    if (!item) return
                    // if item type is 'string', apply the tagging label
                  } else if (typeof item === 'string') {
                    // trim the trailing space
                    item = item.replace(ctrl.taggingLabel, '').trim()
                  }
                }
              }
              // search ctrl.selected for dupes potentially caused by tagging and return early if found
              if (_isItemSelected(item)) {
                ctrl.close(skipFocusser)
                return
              }
            }
            _resetSearchInput()
            $scope.$broadcast('uis:select', item)

            if (ctrl.closeOnSelect) {
              ctrl.close(skipFocusser)
            }
          }
        }
      }

      // Closes the dropdown
      ctrl.close = function (skipFocusser) {
        if (!ctrl.open) return
        if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched()
        ctrl.open = false
        _resetSearchInput()
        $scope.$broadcast('uis:close', skipFocusser)
      }

      ctrl.setFocus = function () {
        if (!ctrl.focus) ctrl.focusInput[0].focus()
      }

      ctrl.clear = function ($event) {
        ctrl.select(null)
        $event.stopPropagation()
        $timeout(
          function () {
            ctrl.focusser[0].focus()
          },
          0,
          false
        )
      }

      // Toggle dropdown
      ctrl.toggle = function (e) {
        if (ctrl.open) {
          ctrl.close()
          e.preventDefault()
          e.stopPropagation()
        } else {
          ctrl.activate()
        }
      }

      // Set default function for locked choices - avoids unnecessary
      // logic if functionality is not being used
      ctrl.isLocked = function () {
        return false
      }

      $scope.$watch(function () {
        return angular.isDefined(ctrl.lockChoiceExpression) && ctrl.lockChoiceExpression !== ''
      }, _initaliseLockedChoices)

      function _initaliseLockedChoices(doInitalise) {
        if (!doInitalise) return

        var lockedItems = []

        function _updateItemLocked(item, isLocked) {
          var lockedItemIndex = lockedItems.indexOf(item)
          if (isLocked && lockedItemIndex === -1) {
            lockedItems.push(item)
          }

          if (!isLocked && lockedItemIndex > -1) {
            lockedItems.splice(lockedItemIndex, 1)
          }
        }

        function _isItemlocked(item) {
          return lockedItems.indexOf(item) > -1
        }

        ctrl.isLocked = function (itemScope, itemIndex) {
          var isLocked = false,
            item = ctrl.selected[itemIndex]

          if (item) {
            if (itemScope) {
              isLocked = !!itemScope.$eval(ctrl.lockChoiceExpression)
              _updateItemLocked(item, isLocked)
            } else {
              isLocked = _isItemlocked(item)
            }
          }

          return isLocked
        }
      }

      var sizeWatch = null
      var updaterScheduled = false
      ctrl.sizeSearchInput = function () {
        var input = ctrl.searchInput[0],
          container = ctrl.$element[0],
          calculateContainerWidth = function () {
            // Return the container width only if the search input is visible
            return container.clientWidth * !!input.offsetParent
          },
          updateIfVisible = function (containerWidth) {
            if (containerWidth === 0) {
              return false
            }
            var inputWidth = containerWidth - input.offsetLeft
            if (inputWidth < 50) inputWidth = containerWidth
            ctrl.searchInput.css('width', inputWidth + 'px')
            return true
          }

        ctrl.searchInput.css('width', '10px')
        $timeout(function () {
          //Give tags time to render correctly
          if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
            sizeWatch = $scope.$watch(function () {
              if (!updaterScheduled) {
                updaterScheduled = true
                $scope.$$postDigest(function () {
                  updaterScheduled = false
                  if (updateIfVisible(calculateContainerWidth())) {
                    sizeWatch()
                    sizeWatch = null
                  }
                })
              }
            }, angular.noop)
          }
        })
      }

      function _handleDropDownSelection(key) {
        var processed = true
        switch (key) {
          case KEY.DOWN:
            if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true)
            //In case its the search input in 'multiple' mode
            else if (ctrl.activeIndex < ctrl.items.length - 1) {
              var idx = ++ctrl.activeIndex
              while (_isItemDisabled(ctrl.items[idx]) && idx < ctrl.items.length) {
                ctrl.activeIndex = ++idx
              }
            }
            break
          case KEY.UP:
            var minActiveIndex = ctrl.search.length === 0 && ctrl.tagging.isActivated ? -1 : 0
            if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true)
            //In case its the search input in 'multiple' mode
            else if (ctrl.activeIndex > minActiveIndex) {
              var idxmin = --ctrl.activeIndex
              while (_isItemDisabled(ctrl.items[idxmin]) && idxmin > minActiveIndex) {
                ctrl.activeIndex = --idxmin
              }
            }
            break
          case KEY.TAB:
            if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true)
            break
          case KEY.ENTER:
            if (ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)) {
              ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser) // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
            } else {
              ctrl.activate(false, true) //In case its the search input in 'multiple' mode
            }
            break
          case KEY.ESC:
            ctrl.close()
            break
          default:
            processed = false
        }
        return processed
      }

      // Bind to keyboard shortcuts
      ctrl.searchInput.on('keydown', function (e) {
        var key = e.which

        if (~[KEY.ENTER, KEY.ESC].indexOf(key)) {
          e.preventDefault()
          e.stopPropagation()
        }

        $scope.$apply(function () {
          var tagged = false

          if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
            if (!_handleDropDownSelection(key) && !ctrl.searchEnabled) {
              e.preventDefault()
              e.stopPropagation()
            }
            if (ctrl.taggingTokens.isActivated) {
              for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
                if (ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode]) {
                  // make sure there is a new value to push via tagging
                  if (ctrl.search.length > 0) {
                    tagged = true
                  }
                }
              }
              if (tagged) {
                $timeout(function () {
                  ctrl.searchInput.triggerHandler('tagged')
                  var newItem = ctrl.search.replace(KEY.MAP[e.keyCode], '').trim()
                  if (ctrl.tagging.fct) {
                    newItem = ctrl.tagging.fct(newItem)
                  }
                  if (newItem) ctrl.select(newItem, true)
                })
              }
            }
          }
        })

        if (KEY.isVerticalMovement(key) && ctrl.items.length > 0) {
          _ensureHighlightVisible()
        }

        if (key === KEY.ENTER || key === KEY.ESC) {
          e.preventDefault()
          e.stopPropagation()
        }
      })

      ctrl.searchInput.on('paste', function (e) {
        var data

        if (window.clipboardData && window.clipboardData.getData) {
          // IE
          data = window.clipboardData.getData('Text')
        } else {
          data = (e.originalEvent || e).clipboardData.getData('text/plain')
        }

        // Prepend the current input field text to the paste buffer.
        data = ctrl.search + data

        if (data && data.length > 0) {
          // If tagging try to split by tokens and add items
          if (ctrl.taggingTokens.isActivated) {
            var items = []
            for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
              // split by first token that is contained in data
              var separator =
                KEY.toSeparator(ctrl.taggingTokens.tokens[i]) || ctrl.taggingTokens.tokens[i]
              if (data.indexOf(separator) > -1) {
                items = data.split(separator)
                break // only split by one token
              }
            }
            if (items.length === 0) {
              items = [data]
            }
            var oldsearch = ctrl.search
            angular.forEach(items, function (item) {
              var newItem = ctrl.tagging.fct ? ctrl.tagging.fct(item) : item
              if (newItem) {
                ctrl.select(newItem, true)
              }
            })
            ctrl.search = oldsearch || EMPTY_SEARCH
            e.preventDefault()
            e.stopPropagation()
          } else if (ctrl.paste) {
            ctrl.paste(data)
            ctrl.search = EMPTY_SEARCH
            e.preventDefault()
            e.stopPropagation()
          }
        }
      })

      ctrl.searchInput.on('tagged', function () {
        $timeout(function () {
          _resetSearchInput()
        })
      })

      // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
      function _ensureHighlightVisible() {
        var container = $element.querySelectorAll('.ui-select-choices-content')
        var choices = container.querySelectorAll('.ui-select-choices-row')
        if (choices.length < 1) {
          throw uiSelectMinErr(
            'choices',
            "Expected multiple .ui-select-choices-row but got '{0}'.",
            choices.length
          )
        }

        if (ctrl.activeIndex < 0) {
          return
        }

        var highlighted = choices[ctrl.activeIndex]
        var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop
        var height = container[0].offsetHeight

        if (posY > height) {
          container[0].scrollTop += posY - height
        } else if (posY < highlighted.clientHeight) {
          if (ctrl.isGrouped && ctrl.activeIndex === 0) container[0].scrollTop = 0
          //To make group header visible when going all the way up
          else container[0].scrollTop -= highlighted.clientHeight - posY
        }
      }

      var onResize = $$uisDebounce(function () {
        ctrl.sizeSearchInput()
      }, 50)

      angular.element($window).bind('resize', onResize)

      $scope.$on('$destroy', function () {
        ctrl.searchInput.off('keyup keydown tagged blur paste')
        angular.element($window).off('resize', onResize)
      })

      $scope.$watch('$select.activeIndex', function (activeIndex) {
        if (activeIndex)
          $element
            .find('input')
            .attr(
              'aria-activedescendant',
              'ui-select-choices-row-' + ctrl.generatedId + '-' + activeIndex
            )
      })

      $scope.$watch('$select.open', function (open) {
        if (!open) $element.find('input').removeAttr('aria-activedescendant')
      })
    },
  ])

  uis.directive('uiSelect', [
    '$document',
    'uiSelectConfig',
    'uiSelectMinErr',
    'uisOffset',
    '$compile',
    '$parse',
    '$timeout',
    function ($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {
      return {
        restrict: 'EA',
        templateUrl: function (tElement, tAttrs) {
          var theme = tAttrs.theme || uiSelectConfig.theme
          return (
            theme +
            (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html')
          )
        },
        replace: true,
        transclude: true,
        require: ['uiSelect', '^ngModel'],
        scope: true,

        controller: 'uiSelectCtrl',
        controllerAs: '$select',
        compile: function (tElement, tAttrs) {
          // Allow setting ngClass on uiSelect
          var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass)
          if (match) {
            var combined = '{' + match[1] + ', ' + match[2] + '}'
            tAttrs.ngClass = combined
            tElement.attr('ng-class', combined)
          }

          //Multiple or Single depending if multiple attribute presence
          if (angular.isDefined(tAttrs.multiple))
            tElement.append('<ui-select-multiple/>').removeAttr('multiple')
          else tElement.append('<ui-select-single/>')

          if (tAttrs.inputId)
            tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId

          return function (scope, element, attrs, ctrls, transcludeFn) {
            var $select = ctrls[0]
            var ngModel = ctrls[1]

            $select.generatedId = uiSelectConfig.generateId()
            $select.baseTitle = attrs.title || 'Select box'
            $select.focusserTitle = $select.baseTitle + ' focus'
            $select.focusserId = 'focusser-' + $select.generatedId

            $select.closeOnSelect = (function () {
              if (angular.isDefined(attrs.closeOnSelect)) {
                return $parse(attrs.closeOnSelect)()
              } else {
                return uiSelectConfig.closeOnSelect
              }
            })()

            scope.$watch('skipFocusser', function () {
              var skipFocusser = scope.$eval(attrs.skipFocusser)
              $select.skipFocusser =
                skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser
            })

            $select.onSelectCallback = $parse(attrs.onSelect)
            $select.onRemoveCallback = $parse(attrs.onRemove)

            //Set reference to ngModel from uiSelectCtrl
            $select.ngModel = ngModel

            $select.choiceGrouped = function (group) {
              return $select.isGrouped && group && group.name
            }

            if (attrs.tabindex) {
              attrs.$observe('tabindex', function (value) {
                $select.focusInput.attr('tabindex', value)
                element.removeAttr('tabindex')
              })
            }

            scope.$watch(
              function () {
                return scope.$eval(attrs.searchEnabled)
              },
              function (newVal) {
                $select.searchEnabled = newVal !== undefined ? newVal : uiSelectConfig.searchEnabled
              }
            )

            scope.$watch('sortable', function () {
              var sortable = scope.$eval(attrs.sortable)
              $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable
            })

            attrs.$observe('backspaceReset', function () {
              // $eval() is needed otherwise we get a string instead of a boolean
              var backspaceReset = scope.$eval(attrs.backspaceReset)
              $select.backspaceReset = backspaceReset !== undefined ? backspaceReset : true
            })

            attrs.$observe('limit', function () {
              //Limit the number of selections allowed
              $select.limit = angular.isDefined(attrs.limit) ? parseInt(attrs.limit, 10) : undefined
            })

            scope.$watch('removeSelected', function () {
              var removeSelected = scope.$eval(attrs.removeSelected)
              $select.removeSelected =
                removeSelected !== undefined ? removeSelected : uiSelectConfig.removeSelected
            })

            attrs.$observe('disabled', function () {
              // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
              $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false
            })

            attrs.$observe('resetSearchInput', function () {
              // $eval() is needed otherwise we get a string instead of a boolean
              var resetSearchInput = scope.$eval(attrs.resetSearchInput)
              $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true
            })

            attrs.$observe('paste', function () {
              $select.paste = scope.$eval(attrs.paste)
            })

            attrs.$observe('tagging', function () {
              if (attrs.tagging !== undefined) {
                // $eval() is needed otherwise we get a string instead of a boolean
                var taggingEval = scope.$eval(attrs.tagging)
                $select.tagging = {
                  isActivated: true,
                  fct: taggingEval !== true ? taggingEval : undefined,
                }
              } else {
                $select.tagging = { isActivated: false, fct: undefined }
              }
            })

            attrs.$observe('taggingLabel', function () {
              if (attrs.tagging !== undefined) {
                // check eval for FALSE, in this case, we disable the labels
                // associated with tagging
                if (attrs.taggingLabel === 'false') {
                  $select.taggingLabel = false
                } else {
                  $select.taggingLabel =
                    attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)'
                }
              }
            })

            attrs.$observe('taggingTokens', function () {
              if (attrs.tagging !== undefined) {
                var tokens =
                  attrs.taggingTokens !== undefined
                    ? attrs.taggingTokens.split('|')
                    : [',', 'ENTER']
                $select.taggingTokens = { isActivated: true, tokens: tokens }
              }
            })

            attrs.$observe('spinnerEnabled', function () {
              // $eval() is needed otherwise we get a string instead of a boolean
              var spinnerEnabled = scope.$eval(attrs.spinnerEnabled)
              $select.spinnerEnabled =
                spinnerEnabled !== undefined ? spinnerEnabled : uiSelectConfig.spinnerEnabled
            })

            attrs.$observe('spinnerClass', function () {
              var spinnerClass = attrs.spinnerClass
              $select.spinnerClass =
                spinnerClass !== undefined ? attrs.spinnerClass : uiSelectConfig.spinnerClass
            })

            //Automatically gets focus when loaded
            if (angular.isDefined(attrs.autofocus)) {
              $timeout(function () {
                $select.setFocus()
              })
            }

            //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
            if (angular.isDefined(attrs.focusOn)) {
              scope.$on(attrs.focusOn, function () {
                $timeout(function () {
                  $select.setFocus()
                })
              })
            }

            function onDocumentClick(e) {
              if (!$select.open) return //Skip it if dropdown is close

              var contains = false

              if (window.jQuery) {
                // Firefox 3.6 does not support element.contains()
                // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
                contains = window.jQuery.contains(element[0], e.target)
              } else {
                contains = element[0].contains(e.target)
              }

              if (!contains && !$select.clickTriggeredSelect) {
                var skipFocusser
                if (!$select.skipFocusser) {
                  //Will lose focus only with certain targets
                  var focusableControls = ['input', 'button', 'textarea', 'select']
                  var targetController = angular.element(e.target).controller('uiSelect') //To check if target is other ui-select
                  skipFocusser = targetController && targetController !== $select //To check if target is other ui-select
                  if (!skipFocusser)
                    skipFocusser = ~focusableControls.indexOf(e.target.tagName.toLowerCase()) //Check if target is input, button or textarea
                } else {
                  skipFocusser = true
                }
                $select.close(skipFocusser)
                scope.$digest()
              }
              $select.clickTriggeredSelect = false
            }

            // See Click everywhere but here event http://stackoverflow.com/questions/12931369
            $document.on('click', onDocumentClick)

            scope.$on('$destroy', function () {
              $document.off('click', onDocumentClick)
            })

            // Move transcluded elements to their correct position in main template
            transcludeFn(scope, function (clone) {
              // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

              // One day jqLite will be replaced by jQuery and we will be able to write:
              // var transcludedElement = clone.filter('.my-class')
              // instead of creating a hackish DOM element:
              var transcluded = angular.element('<div>').append(clone)

              var transcludedMatch = transcluded.querySelectorAll('.ui-select-match')
              transcludedMatch.removeAttr('ui-select-match') //To avoid loop in case directive as attr
              transcludedMatch.removeAttr('data-ui-select-match') // Properly handle HTML5 data-attributes
              if (transcludedMatch.length !== 1) {
                throw uiSelectMinErr(
                  'transcluded',
                  "Expected 1 .ui-select-match but got '{0}'.",
                  transcludedMatch.length
                )
              }
              element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch)

              var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices')
              transcludedChoices.removeAttr('ui-select-choices') //To avoid loop in case directive as attr
              transcludedChoices.removeAttr('data-ui-select-choices') // Properly handle HTML5 data-attributes
              if (transcludedChoices.length !== 1) {
                throw uiSelectMinErr(
                  'transcluded',
                  "Expected 1 .ui-select-choices but got '{0}'.",
                  transcludedChoices.length
                )
              }
              element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices)

              var transcludedNoChoice = transcluded.querySelectorAll('.ui-select-no-choice')
              transcludedNoChoice.removeAttr('ui-select-no-choice') //To avoid loop in case directive as attr
              transcludedNoChoice.removeAttr('data-ui-select-no-choice') // Properly handle HTML5 data-attributes
              if (transcludedNoChoice.length == 1) {
                element.querySelectorAll('.ui-select-no-choice').replaceWith(transcludedNoChoice)
              }
            })

            // Support for appending the select field to the body when its open
            var appendToBody = scope.$eval(attrs.appendToBody)
            if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
              scope.$watch('$select.open', function (isOpen) {
                if (isOpen) {
                  positionDropdown()
                } else {
                  resetDropdown()
                }
              })

              // Move the dropdown back to its original location when the scope is destroyed. Otherwise
              // it might stick around when the user routes away or the select field is otherwise removed
              scope.$on('$destroy', function () {
                resetDropdown()
              })
            }

            // Hold on to a reference to the .ui-select-container element for appendToBody support
            var placeholder = null,
              originalWidth = ''

            function positionDropdown() {
              // Remember the absolute position of the element
              var offset = uisOffset(element)

              // Clone the element into a placeholder element to take its original place in the DOM
              placeholder = angular.element('<div class="ui-select-placeholder"></div>')
              placeholder[0].style.width = offset.width + 'px'
              placeholder[0].style.height = offset.height + 'px'
              element.after(placeholder)

              // Remember the original value of the element width inline style, so it can be restored
              // when the dropdown is closed
              originalWidth = element[0].style.width

              // Now move the actual dropdown element to the end of the body
              $document.find('body').append(element)

              element[0].style.position = 'absolute'
              element[0].style.left = offset.left + 'px'
              element[0].style.top = offset.top + 'px'
              element[0].style.width = offset.width + 'px'
            }

            function resetDropdown() {
              if (placeholder === null) {
                // The dropdown has not actually been display yet, so there's nothing to reset
                return
              }

              // Move the dropdown element back to its original location in the DOM
              placeholder.replaceWith(element)
              placeholder = null

              element[0].style.position = ''
              element[0].style.left = ''
              element[0].style.top = ''
              element[0].style.width = originalWidth

              // Set focus back on to the moved element
              $select.setFocus()
            }

            // Hold on to a reference to the .ui-select-dropdown element for direction support.
            var dropdown = null,
              directionUpClassName = 'direction-up'

            // Support changing the direction of the dropdown if there isn't enough space to render it.
            scope.$watch('$select.open', function () {
              if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up') {
                scope.calculateDropdownPos()
              }
            })

            var setDropdownPosUp = function (offset, offsetDropdown) {
              offset = offset || uisOffset(element)
              offsetDropdown = offsetDropdown || uisOffset(dropdown)

              dropdown[0].style.position = 'absolute'
              dropdown[0].style.top = offsetDropdown.height * -1 + 'px'
              element.addClass(directionUpClassName)
            }

            var setDropdownPosDown = function (offset, offsetDropdown) {
              element.removeClass(directionUpClassName)

              offset = offset || uisOffset(element)
              offsetDropdown = offsetDropdown || uisOffset(dropdown)

              dropdown[0].style.position = ''
              dropdown[0].style.top = ''
            }

            var calculateDropdownPosAfterAnimation = function () {
              // Delay positioning the dropdown until all choices have been added so its height is correct.
              $timeout(function () {
                if ($select.dropdownPosition === 'up') {
                  //Go UP
                  setDropdownPosUp()
                } else {
                  //AUTO
                  element.removeClass(directionUpClassName)

                  var offset = uisOffset(element)
                  var offsetDropdown = uisOffset(dropdown)

                  //https://code.google.com/p/chromium/issues/detail?id=342307#c4
                  var scrollTop =
                    $document[0].documentElement.scrollTop || $document[0].body.scrollTop //To make it cross browser (blink, webkit, IE, Firefox).

                  // Determine if the direction of the dropdown needs to be changed.
                  if (
                    offset.top + offset.height + offsetDropdown.height >
                    scrollTop + $document[0].documentElement.clientHeight
                  ) {
                    //Go UP
                    setDropdownPosUp(offset, offsetDropdown)
                  } else {
                    //Go DOWN
                    setDropdownPosDown(offset, offsetDropdown)
                  }
                }

                // Display the dropdown once it has been positioned.
                dropdown[0].style.opacity = 1
              })
            }

            var opened = false

            scope.calculateDropdownPos = function () {
              if ($select.open) {
                dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown')

                if (dropdown.length === 0) {
                  return
                }

                // Hide the dropdown so there is no flicker until $timeout is done executing.
                if ($select.search === '' && !opened) {
                  dropdown[0].style.opacity = 0
                  opened = true
                }

                if (
                  !uisOffset(dropdown).height &&
                  $select.$animate &&
                  $select.$animate.on &&
                  $select.$animate.enabled(dropdown)
                ) {
                  var needsCalculated = true

                  $select.$animate.on('enter', dropdown, function (elem, phase) {
                    if (phase === 'close' && needsCalculated) {
                      calculateDropdownPosAfterAnimation()
                      needsCalculated = false
                    }
                  })
                } else {
                  calculateDropdownPosAfterAnimation()
                }
              } else {
                if (dropdown === null || dropdown.length === 0) {
                  return
                }

                // Reset the position of the dropdown.
                dropdown[0].style.opacity = 0
                dropdown[0].style.position = ''
                dropdown[0].style.top = ''
                element.removeClass(directionUpClassName)
              }
            }
          }
        },
      }
    },
  ])

  uis.directive('uiSelectMatch', [
    'uiSelectConfig',
    function (uiSelectConfig) {
      return {
        restrict: 'EA',
        require: '^uiSelect',
        replace: true,
        transclude: true,
        templateUrl: function (tElement) {
          // Needed so the uiSelect can detect the transcluded content
          tElement.addClass('ui-select-match')

          var parent = tElement.parent()
          // Gets theme attribute from parent (ui-select)
          var theme = getAttribute(parent, 'theme') || uiSelectConfig.theme
          var multi = angular.isDefined(getAttribute(parent, 'multiple'))

          return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html')
        },
        link: function (scope, element, attrs, $select) {
          $select.lockChoiceExpression = attrs.uiLockChoice
          attrs.$observe('placeholder', function (placeholder) {
            $select.placeholder =
              placeholder !== undefined ? placeholder : uiSelectConfig.placeholder
          })

          function setAllowClear(allow) {
            $select.allowClear = angular.isDefined(allow)
              ? allow === ''
                ? true
                : allow.toLowerCase() === 'true'
              : false
          }

          attrs.$observe('allowClear', setAllowClear)
          setAllowClear(attrs.allowClear)

          if ($select.multiple) {
            $select.sizeSearchInput()
          }
        },
      }

      function getAttribute(elem, attribute) {
        if (elem[0].hasAttribute(attribute)) return elem.attr(attribute)

        if (elem[0].hasAttribute('data-' + attribute)) return elem.attr('data-' + attribute)

        if (elem[0].hasAttribute('x-' + attribute)) return elem.attr('x-' + attribute)
      }
    },
  ])

  uis.directive('uiSelectMultiple', [
    'uiSelectMinErr',
    '$timeout',
    function (uiSelectMinErr, $timeout) {
      return {
        restrict: 'EA',
        require: ['^uiSelect', '^ngModel'],

        controller: [
          '$scope',
          '$timeout',
          function ($scope, $timeout) {
            var ctrl = this,
              $select = $scope.$select,
              ngModel

            if (angular.isUndefined($select.selected)) $select.selected = []

            //Wait for link fn to inject it
            $scope.$evalAsync(function () {
              ngModel = $scope.ngModel
            })

            ctrl.activeMatchIndex = -1

            ctrl.updateModel = function () {
              ngModel.$setViewValue(Date.now()) //Set timestamp as a unique string to force changes
              ctrl.refreshComponent()
            }

            ctrl.refreshComponent = function () {
              //Remove already selected items
              //e.g. When user clicks on a selection, the selected array changes and
              //the dropdown should remove that item
              if ($select.refreshItems) {
                $select.refreshItems()
              }
              if ($select.sizeSearchInput) {
                $select.sizeSearchInput()
              }
            }

            // Remove item from multiple select
            ctrl.removeChoice = function (index) {
              // if the choice is locked, don't remove it
              if ($select.isLocked(null, index)) return false

              var removedChoice = $select.selected[index]

              var locals = {}
              locals[$select.parserResult.itemName] = removedChoice

              $select.selected.splice(index, 1)
              ctrl.activeMatchIndex = -1
              $select.sizeSearchInput()

              // Give some time for scope propagation.
              $timeout(function () {
                $select.onRemoveCallback($scope, {
                  $item: removedChoice,
                  $model: $select.parserResult.modelMapper($scope, locals),
                })
              })

              ctrl.updateModel()

              return true
            }

            ctrl.getPlaceholder = function () {
              //Refactor single?
              if ($select.selected && $select.selected.length) return
              return $select.placeholder
            }
          },
        ],
        controllerAs: '$selectMultiple',

        link: function (scope, element, attrs, ctrls) {
          var $select = ctrls[0]
          var ngModel = (scope.ngModel = ctrls[1])
          var $selectMultiple = scope.$selectMultiple

          //$select.selected = raw selected objects (ignoring any property binding)

          $select.multiple = true

          //Input that will handle focus
          $select.focusInput = $select.searchInput

          //Properly check for empty if set to multiple
          ngModel.$isEmpty = function (value) {
            return !value || value.length === 0
          }

          //From view --> model
          ngModel.$parsers.unshift(function () {
            var locals = {},
              result,
              resultMultiple = []
            for (var j = $select.selected.length - 1; j >= 0; j--) {
              locals = {}
              locals[$select.parserResult.itemName] = $select.selected[j]
              result = $select.parserResult.modelMapper(scope, locals)
              resultMultiple.unshift(result)
            }
            return resultMultiple
          })

          // From model --> view
          ngModel.$formatters.unshift(function (inputValue) {
            var data =
                $select.parserResult &&
                $select.parserResult.source(scope, { $select: { search: '' } }), //Overwrite $search
              locals = {},
              result
            if (!data) return inputValue
            var resultMultiple = []
            var checkFnMultiple = function (list, value) {
              if (!list || !list.length) return
              for (var p = list.length - 1; p >= 0; p--) {
                locals[$select.parserResult.itemName] = list[p]
                result = $select.parserResult.modelMapper(scope, locals)
                if ($select.parserResult.trackByExp) {
                  var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp)
                  var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp)
                  if (
                    propsItemNameMatches &&
                    propsItemNameMatches.length > 0 &&
                    propsItemNameMatches[1] == $select.parserResult.itemName
                  ) {
                    if (matches && matches.length > 0 && result[matches[1]] == value[matches[1]]) {
                      resultMultiple.unshift(list[p])
                      return true
                    }
                  }
                }
                if (angular.equals(result, value)) {
                  resultMultiple.unshift(list[p])
                  return true
                }
              }
              return false
            }
            if (!inputValue) return resultMultiple //If ngModel was undefined
            for (var k = inputValue.length - 1; k >= 0; k--) {
              //Check model array of currently selected items
              if (!checkFnMultiple($select.selected, inputValue[k])) {
                //Check model array of all items available
                if (!checkFnMultiple(data, inputValue[k])) {
                  //If not found on previous lists, just add it directly to resultMultiple
                  resultMultiple.unshift(inputValue[k])
                }
              }
            }
            return resultMultiple
          })

          //Watch for external model changes
          scope.$watchCollection(
            function () {
              return ngModel.$modelValue
            },
            function (newValue, oldValue) {
              if (oldValue != newValue) {
                //update the view value with fresh data from items, if there is a valid model value
                if (angular.isDefined(ngModel.$modelValue)) {
                  ngModel.$modelValue = null //Force scope model value and ngModel value to be out of sync to re-run formatters
                }
                $selectMultiple.refreshComponent()
              }
            }
          )

          ngModel.$render = function () {
            // Make sure that model value is array
            if (!angular.isArray(ngModel.$viewValue)) {
              // Have tolerance for null or undefined values
              if (isNil(ngModel.$viewValue)) {
                ngModel.$viewValue = []
              } else {
                throw uiSelectMinErr(
                  'multiarr',
                  "Expected model value to be array but got '{0}'",
                  ngModel.$viewValue
                )
              }
            }
            $select.selected = ngModel.$viewValue
            $selectMultiple.refreshComponent()
            scope.$evalAsync() //To force $digest
          }

          scope.$on('uis:select', function (event, item) {
            if ($select.selected.length >= $select.limit) {
              return
            }
            $select.selected.push(item)
            var locals = {}
            locals[$select.parserResult.itemName] = item

            $timeout(function () {
              $select.onSelectCallback(scope, {
                $item: item,
                $model: $select.parserResult.modelMapper(scope, locals),
              })
            })
            $selectMultiple.updateModel()
          })

          scope.$on('uis:activate', function () {
            $selectMultiple.activeMatchIndex = -1
          })

          scope.$watch('$select.disabled', function (newValue, oldValue) {
            // As the search input field may now become visible, it may be necessary to recompute its size
            if (oldValue && !newValue) $select.sizeSearchInput()
          })

          $select.searchInput.on('keydown', function (e) {
            var key = e.which
            scope.$apply(function () {
              var processed = false
              // var tagged = false; //Checkme
              if (KEY.isHorizontalMovement(key)) {
                processed = _handleMatchSelection(key)
              }
              if (processed && key != KEY.TAB) {
                //TODO Check si el tab selecciona aun correctamente
                //Crear test
                e.preventDefault()
                e.stopPropagation()
              }
            })
          })
          function _getCaretPosition(el) {
            if (angular.isNumber(el.selectionStart)) return el.selectionStart
            // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
            else return el.value.length
          }
          // Handles selected options in "multiple" mode
          function _handleMatchSelection(key) {
            var caretPosition = _getCaretPosition($select.searchInput[0]),
              length = $select.selected.length,
              // none  = -1,
              first = 0,
              last = length - 1,
              curr = $selectMultiple.activeMatchIndex,
              next = $selectMultiple.activeMatchIndex + 1,
              prev = $selectMultiple.activeMatchIndex - 1,
              newIndex = curr

            if (caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false

            $select.close()

            function getNewActiveMatchIndex() {
              switch (key) {
                case KEY.LEFT:
                  // Select previous/first item
                  if (~$selectMultiple.activeMatchIndex) return prev
                  // Select last item
                  else return last
                  break
                case KEY.RIGHT:
                  // Open drop-down
                  if (!~$selectMultiple.activeMatchIndex || curr === last) {
                    $select.activate()
                    return false
                  }
                  // Select next/last item
                  else return next
                  break
                case KEY.BACKSPACE:
                  // Remove selected item and select previous/first
                  if (~$selectMultiple.activeMatchIndex) {
                    if ($selectMultiple.removeChoice(curr)) {
                      return prev
                    } else {
                      return curr
                    }
                  } else {
                    // If nothing yet selected, select last item
                    return last
                  }
                  break
                case KEY.DELETE:
                  // Remove selected item and select next item
                  if (~$selectMultiple.activeMatchIndex) {
                    $selectMultiple.removeChoice($selectMultiple.activeMatchIndex)
                    return curr
                  } else return false
              }
            }

            newIndex = getNewActiveMatchIndex()

            if (!$select.selected.length || newIndex === false)
              $selectMultiple.activeMatchIndex = -1
            else $selectMultiple.activeMatchIndex = Math.min(last, Math.max(first, newIndex))

            return true
          }

          $select.searchInput.on('keyup', function (e) {
            if (!KEY.isVerticalMovement(e.which)) {
              scope.$evalAsync(function () {
                $select.activeIndex = $select.taggingLabel === false ? -1 : 0
              })
            }
            // Push a "create new" item into array if there is a search string
            if ($select.tagging.isActivated && $select.search.length > 0) {
              // return early with these keys
              if (
                e.which === KEY.TAB ||
                KEY.isControl(e) ||
                KEY.isFunctionKey(e) ||
                e.which === KEY.ESC ||
                KEY.isVerticalMovement(e.which)
              ) {
                return
              }
              // always reset the activeIndex to the first item when tagging
              $select.activeIndex = $select.taggingLabel === false ? -1 : 0
              // taggingLabel === false bypasses all of this
              if ($select.taggingLabel === false) return

              var items = angular.copy($select.items)
              var stashArr = angular.copy($select.items)
              var newItem
              var item
              var hasTag = false
              var dupeIndex = -1
              var tagItems
              var tagItem

              // case for object tagging via transform `$select.tagging.fct` function
              if ($select.tagging.fct !== undefined) {
                tagItems = $select.$filter('filter')(items, { isTag: true })
                if (tagItems.length > 0) {
                  tagItem = tagItems[0]
                }
                // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
                if (items.length > 0 && tagItem) {
                  hasTag = true
                  items = items.slice(1, items.length)
                  stashArr = stashArr.slice(1, stashArr.length)
                }
                newItem = $select.tagging.fct($select.search)
                // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
                if (
                  stashArr.some(function (origItem) {
                    return angular.equals(origItem, newItem)
                  }) ||
                  $select.selected.some(function (origItem) {
                    return angular.equals(origItem, newItem)
                  })
                ) {
                  scope.$evalAsync(function () {
                    $select.activeIndex = 0
                    $select.items = items
                  })
                  return
                }
                if (newItem) newItem.isTag = true
                // handle newItem string and stripping dupes in tagging string context
              } else {
                // find any tagging items already in the $select.items array and store them
                tagItems = $select.$filter('filter')(items, function (item) {
                  return item.match($select.taggingLabel)
                })
                if (tagItems.length > 0) {
                  tagItem = tagItems[0]
                }
                item = items[0]
                // remove existing tag item if found (should only ever be one tag item)
                if (item !== undefined && items.length > 0 && tagItem) {
                  hasTag = true
                  items = items.slice(1, items.length)
                  stashArr = stashArr.slice(1, stashArr.length)
                }
                newItem = $select.search + ' ' + $select.taggingLabel
                if (_findApproxDupe($select.selected, $select.search) > -1) {
                  return
                }
                // verify the the tag doesn't match the value of an existing item from
                // the searched data set or the items already selected
                if (_findCaseInsensitiveDupe(stashArr.concat($select.selected))) {
                  // if there is a tag from prev iteration, strip it / queue the change
                  // and return early
                  if (hasTag) {
                    items = stashArr
                    scope.$evalAsync(function () {
                      $select.activeIndex = 0
                      $select.items = items
                    })
                  }
                  return
                }
                if (_findCaseInsensitiveDupe(stashArr)) {
                  // if there is a tag from prev iteration, strip it
                  if (hasTag) {
                    $select.items = stashArr.slice(1, stashArr.length)
                  }
                  return
                }
              }
              if (hasTag) dupeIndex = _findApproxDupe($select.selected, newItem)
              // dupe found, shave the first item
              if (dupeIndex > -1) {
                items = items.slice(dupeIndex + 1, items.length - 1)
              } else {
                items = []
                if (newItem) items.push(newItem)
                items = items.concat(stashArr)
              }
              scope.$evalAsync(function () {
                $select.activeIndex = 0
                $select.items = items

                if ($select.isGrouped) {
                  // update item references in groups, so that indexOf will work after angular.copy
                  var itemsWithoutTag = newItem ? items.slice(1) : items
                  $select.setItemsFn(itemsWithoutTag)
                  if (newItem) {
                    // add tag item as a new group
                    $select.items.unshift(newItem)
                    $select.groups.unshift({ name: '', items: [newItem], tagging: true })
                  }
                }
              })
            }
          })
          function _findCaseInsensitiveDupe(arr) {
            if (arr === undefined || $select.search === undefined) {
              return false
            }
            var hasDupe =
              arr.filter(function (origItem) {
                if ($select.search.toUpperCase() === undefined || origItem === undefined) {
                  return false
                }
                return origItem.toUpperCase() === $select.search.toUpperCase()
              }).length > 0

            return hasDupe
          }
          function _findApproxDupe(haystack, needle) {
            var dupeIndex = -1
            if (angular.isArray(haystack)) {
              var tempArr = angular.copy(haystack)
              for (var i = 0; i < tempArr.length; i++) {
                // handle the simple string version of tagging
                if ($select.tagging.fct === undefined) {
                  // search the array for the match
                  if (tempArr[i] + ' ' + $select.taggingLabel === needle) {
                    dupeIndex = i
                  }
                  // handle the object tagging implementation
                } else {
                  var mockObj = tempArr[i]
                  if (angular.isObject(mockObj)) {
                    mockObj.isTag = true
                  }
                  if (angular.equals(mockObj, needle)) {
                    dupeIndex = i
                  }
                }
              }
            }
            return dupeIndex
          }

          $select.searchInput.on('blur', function () {
            $timeout(function () {
              $selectMultiple.activeMatchIndex = -1
            })
          })
        },
      }
    },
  ])

  uis.directive('uiSelectNoChoice', [
    'uiSelectConfig',
    function (uiSelectConfig) {
      return {
        restrict: 'EA',
        require: '^uiSelect',
        replace: true,
        transclude: true,
        templateUrl: function (tElement) {
          // Needed so the uiSelect can detect the transcluded content
          tElement.addClass('ui-select-no-choice')

          // Gets theme attribute from parent (ui-select)
          var theme = tElement.parent().attr('theme') || uiSelectConfig.theme
          return theme + '/no-choice.tpl.html'
        },
      }
    },
  ])

  uis.directive('uiSelectSingle', [
    '$timeout',
    '$compile',
    function ($timeout, $compile) {
      return {
        restrict: 'EA',
        require: ['^uiSelect', '^ngModel'],
        link: function (scope, element, attrs, ctrls) {
          var $select = ctrls[0]
          var ngModel = ctrls[1]

          //From view --> model
          ngModel.$parsers.unshift(function (inputValue) {
            // Keep original value for undefined and null
            if (isNil(inputValue)) {
              return inputValue
            }

            var locals = {},
              result
            locals[$select.parserResult.itemName] = inputValue
            result = $select.parserResult.modelMapper(scope, locals)
            return result
          })

          //From model --> view
          ngModel.$formatters.unshift(function (inputValue) {
            // Keep original value for undefined and null
            if (isNil(inputValue)) {
              return inputValue
            }

            var data =
                $select.parserResult &&
                $select.parserResult.source(scope, { $select: { search: '' } }), //Overwrite $search
              locals = {},
              result
            if (data) {
              var checkFnSingle = function (d) {
                locals[$select.parserResult.itemName] = d
                result = $select.parserResult.modelMapper(scope, locals)
                return result === inputValue
              }
              //If possible pass same object stored in $select.selected
              if ($select.selected && checkFnSingle($select.selected)) {
                return $select.selected
              }
              for (var i = data.length - 1; i >= 0; i--) {
                if (checkFnSingle(data[i])) return data[i]
              }
            }
            return inputValue
          })

          //Update viewValue if model change
          scope.$watch('$select.selected', function (newValue) {
            if (ngModel.$viewValue !== newValue) {
              ngModel.$setViewValue(newValue)
            }
          })

          ngModel.$render = function () {
            $select.selected = ngModel.$viewValue
          }

          scope.$on('uis:select', function (event, item) {
            $select.selected = item
            var locals = {}
            locals[$select.parserResult.itemName] = item

            $timeout(function () {
              $select.onSelectCallback(scope, {
                $item: item,
                $model: isNil(item) ? item : $select.parserResult.modelMapper(scope, locals),
              })
            })
          })

          scope.$on('uis:close', function (event, skipFocusser) {
            $timeout(
              function () {
                $select.focusser.prop('disabled', false)
                if (!skipFocusser) $select.focusser[0].focus()
              },
              0,
              false
            )
          })

          scope.$on('uis:activate', function () {
            focusser.prop('disabled', true) //Will reactivate it on .close()
          })

          //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
          var focusser = angular.element(
            "<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-label='{{ $select.focusserTitle }}' aria-haspopup='true' role='button' />"
          )
          $compile(focusser)(scope)
          $select.focusser = focusser

          //Input that will handle focus
          $select.focusInput = focusser

          element.parent().append(focusser)
          focusser.bind('focus', function () {
            scope.$evalAsync(function () {
              $select.focus = true
            })
          })
          focusser.bind('blur', function () {
            scope.$evalAsync(function () {
              $select.focus = false
            })
          })
          focusser.bind('keydown', function (e) {
            if (e.which === KEY.BACKSPACE && $select.backspaceReset !== false) {
              e.preventDefault()
              e.stopPropagation()
              $select.select(undefined)
              scope.$apply()
              return
            }

            if (
              e.which === KEY.TAB ||
              KEY.isControl(e) ||
              KEY.isFunctionKey(e) ||
              e.which === KEY.ESC
            ) {
              return
            }

            if (
              e.which == KEY.DOWN ||
              e.which == KEY.UP ||
              e.which == KEY.ENTER ||
              e.which == KEY.SPACE
            ) {
              e.preventDefault()
              e.stopPropagation()
              $select.activate()
            }

            scope.$digest()
          })

          focusser.bind('keyup input', function (e) {
            if (
              e.which === KEY.TAB ||
              KEY.isControl(e) ||
              KEY.isFunctionKey(e) ||
              e.which === KEY.ESC ||
              e.which == KEY.ENTER ||
              e.which === KEY.BACKSPACE
            ) {
              return
            }

            $select.activate(focusser.val()) //User pressed some regular key, so we pass it to the search input
            focusser.val('')
            scope.$digest()
          })
        },
      }
    },
  ])

  // Make multiple matches sortable
  uis.directive('uiSelectSort', [
    '$timeout',
    'uiSelectConfig',
    'uiSelectMinErr',
    function ($timeout, uiSelectConfig, uiSelectMinErr) {
      return {
        require: ['^^uiSelect', '^ngModel'],
        link: function (scope, element, attrs, ctrls) {
          if (scope[attrs.uiSelectSort] === null) {
            throw uiSelectMinErr('sort', 'Expected a list to sort')
          }

          var $select = ctrls[0]
          var $ngModel = ctrls[1]

          var options = angular.extend(
            {
              axis: 'horizontal',
            },
            scope.$eval(attrs.uiSelectSortOptions)
          )

          var axis = options.axis
          var draggingClassName = 'dragging'
          var droppingClassName = 'dropping'
          var droppingBeforeClassName = 'dropping-before'
          var droppingAfterClassName = 'dropping-after'

          scope.$watch(
            function () {
              return $select.sortable
            },
            function (newValue) {
              if (newValue) {
                element.attr('draggable', true)
              } else {
                element.removeAttr('draggable')
              }
            }
          )

          element.on('dragstart', function (event) {
            element.addClass(draggingClassName)

            ;(event.dataTransfer || event.originalEvent.dataTransfer).setData(
              'text',
              scope.$index.toString()
            )
          })

          element.on('dragend', function () {
            removeClass(draggingClassName)
          })

          var move = function (from, to) {
            /*jshint validthis: true */
            this.splice(to, 0, this.splice(from, 1)[0])
          }

          var removeClass = function (className) {
            angular.forEach($select.$element.querySelectorAll('.' + className), function (el) {
              angular.element(el).removeClass(className)
            })
          }

          var dragOverHandler = function (event) {
            event.preventDefault()

            var offset =
              axis === 'vertical'
                ? event.offsetY ||
                  event.layerY ||
                  (event.originalEvent ? event.originalEvent.offsetY : 0)
                : event.offsetX ||
                  event.layerX ||
                  (event.originalEvent ? event.originalEvent.offsetX : 0)

            if (offset < this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2) {
              removeClass(droppingAfterClassName)
              element.addClass(droppingBeforeClassName)
            } else {
              removeClass(droppingBeforeClassName)
              element.addClass(droppingAfterClassName)
            }
          }

          var dropTimeout

          var dropHandler = function (event) {
            event.preventDefault()

            var droppedItemIndex = parseInt(
              (event.dataTransfer || event.originalEvent.dataTransfer).getData('text'),
              10
            )

            // prevent event firing multiple times in firefox
            $timeout.cancel(dropTimeout)
            dropTimeout = $timeout(function () {
              _dropHandler(droppedItemIndex)
            }, 20)
          }

          var _dropHandler = function (droppedItemIndex) {
            var theList = scope.$eval(attrs.uiSelectSort)
            var itemToMove = theList[droppedItemIndex]
            var newIndex = null

            if (element.hasClass(droppingBeforeClassName)) {
              if (droppedItemIndex < scope.$index) {
                newIndex = scope.$index - 1
              } else {
                newIndex = scope.$index
              }
            } else {
              if (droppedItemIndex < scope.$index) {
                newIndex = scope.$index
              } else {
                newIndex = scope.$index + 1
              }
            }

            move.apply(theList, [droppedItemIndex, newIndex])

            $ngModel.$setViewValue(Date.now())

            scope.$apply(function () {
              scope.$emit('uiSelectSort:change', {
                array: theList,
                item: itemToMove,
                from: droppedItemIndex,
                to: newIndex,
              })
            })

            removeClass(droppingClassName)
            removeClass(droppingBeforeClassName)
            removeClass(droppingAfterClassName)

            element.off('drop', dropHandler)
          }

          element.on('dragenter', function () {
            if (element.hasClass(draggingClassName)) {
              return
            }

            element.addClass(droppingClassName)

            element.on('dragover', dragOverHandler)
            element.on('drop', dropHandler)
          })

          element.on('dragleave', function (event) {
            if (event.target != element) {
              return
            }

            removeClass(droppingClassName)
            removeClass(droppingBeforeClassName)
            removeClass(droppingAfterClassName)

            element.off('dragover', dragOverHandler)
            element.off('drop', dropHandler)
          })
        },
      }
    },
  ])

  /**
   * Debounces functions
   *
   * Taken from UI Bootstrap $$debounce source code
   * See https://github.com/angular-ui/bootstrap/blob/master/src/debounce/debounce.js
   *
   */
  uis.factory('$$uisDebounce', [
    '$timeout',
    function ($timeout) {
      return function (callback, debounceTime) {
        var timeoutPromise

        return function () {
          var self = this
          var args = Array.prototype.slice.call(arguments)
          if (timeoutPromise) {
            $timeout.cancel(timeoutPromise)
          }

          timeoutPromise = $timeout(function () {
            callback.apply(self, args)
          }, debounceTime)
        }
      }
    },
  ])

  uis.directive('uisOpenClose', [
    '$parse',
    '$timeout',
    function ($parse, $timeout) {
      return {
        restrict: 'A',
        require: 'uiSelect',
        link: function (scope, element, attrs, $select) {
          $select.onOpenCloseCallback = $parse(attrs.uisOpenClose)

          scope.$watch('$select.open', function (isOpen, previousState) {
            if (isOpen !== previousState) {
              $timeout(function () {
                $select.onOpenCloseCallback(scope, {
                  isOpen: isOpen,
                })
              })
            }
          })
        },
      }
    },
  ])

  /**
   * Parses "repeat" attribute.
   *
   * Taken from AngularJS ngRepeat source code
   * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
   *
   * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
   * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
   */

  uis.service('uisRepeatParser', [
    'uiSelectMinErr',
    '$parse',
    function (uiSelectMinErr, $parse) {
      var self = this

      /**
       * Example:
       * expression = "address in addresses | filter: {street: $select.search} track by $index"
       * itemName = "address",
       * source = "addresses | filter: {street: $select.search}",
       * trackByExp = "$index",
       */
      self.parse = function (expression) {
        var match
        //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
        // If an array is used as collection

        // if (isObjectCollection){
        // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
        match = expression.match(
          /^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/
        )

        // 1 Alias
        // 2 Item
        // 3 Key on (key,value)
        // 4 Value on (key,value)
        // 5 Source expression (including filters)
        // 6 Track by

        if (!match) {
          throw uiSelectMinErr(
            'iexp',
            "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression
          )
        }

        var source = match[5],
          filters = ''

        // When using (key,value) ui-select requires filters to be extracted, since the object
        // is converted to an array for $select.items
        // (in which case the filters need to be reapplied)
        if (match[3]) {
          // Remove any enclosing parenthesis
          source = match[5].replace(/(^\()|(\)$)/g, '')
          // match all after | but not after ||
          var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/)
          if (filterMatch && filterMatch[1].trim()) {
            filters = filterMatch[1]
            source = source.replace(filters, '')
          }
        }

        return {
          itemName: match[4] || match[2], // (lhs) Left-hand side,
          keyName: match[3], //for (key, value) syntax
          source: $parse(source),
          filters: filters,
          trackByExp: match[6],
          modelMapper: $parse(match[1] || match[4] || match[2]),
          repeatExpression: function (grouped) {
            var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items')
            if (this.trackByExp) {
              expression += ' track by ' + this.trackByExp
            }
            return expression
          },
        }
      }

      self.getGroupNgRepeatExpression = function () {
        return '$group in $select.groups track by $group.name'
      }
    },
  ])
})()
angular.module('ui.select').run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'bootstrap/choices.tpl.html',
      '<ul class="ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu" ng-show="$select.open && $select.items.length > 0"><li class="ui-select-choices-group" id="ui-select-choices-{{ $select.generatedId }}"><div class="divider" ng-show="$select.isGrouped && $index > 0"></div><div ng-show="$select.isGrouped" class="ui-select-choices-group-label dropdown-header" ng-bind="$group.name"></div><div ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}" role="option"><span class="ui-select-choices-row-inner"></span></div></li></ul>'
    )
    $templateCache.put(
      'bootstrap/match-multiple.tpl.html',
      '<span class="ui-select-match"><span ng-repeat="$item in $select.selected track by $index"><span class="ui-select-match-item btn btn-default btn-xs" tabindex="-1" type="button" ng-disabled="$select.disabled" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span class="close ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&nbsp;&times;</span> <span uis-transclude-append=""></span></span></span></span>'
    )
    $templateCache.put(
      'bootstrap/match.tpl.html',
      '<div class="ui-select-match" ng-hide="$select.open && $select.searchEnabled" ng-disabled="$select.disabled" ng-class="{\'btn-default-focus\':$select.focus}"><span tabindex="-1" class="btn btn-default form-control ui-select-toggle" aria-label="{{ $select.baseTitle }} activate" ng-disabled="$select.disabled" ng-click="$select.activate()" style="outline: 0;"><span ng-show="$select.isEmpty()" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="ui-select-match-text pull-left" ng-class="{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}" ng-transclude=""></span> <i class="caret pull-right" ng-click="$select.toggle($event)"></i> <a ng-show="$select.allowClear && !$select.isEmpty() && ($select.disabled !== true)" aria-label="{{ $select.baseTitle }} clear" style="margin-right: 10px" ng-click="$select.clear($event)" class="btn btn-xs btn-link pull-right"><i class="glyphicon glyphicon-remove" aria-hidden="true"></i></a></span></div>'
    )
    $templateCache.put(
      'bootstrap/no-choice.tpl.html',
      '<ul class="ui-select-no-choice dropdown-menu" ng-show="$select.items.length == 0"><li ng-transclude=""></li></ul>'
    )
    $templateCache.put(
      'bootstrap/select-multiple.tpl.html',
      '<div class="ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control" ng-class="{open: $select.open}"><div><div class="ui-select-match"></div><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" class="ui-select-search input-xs" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-click="$select.activate()" ng-model="$select.search" role="combobox" aria-expanded="{{$select.open}}" aria-label="{{$select.baseTitle}}" ng-class="{\'spinner\': $select.refreshing}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'
    )
    $templateCache.put(
      'bootstrap/select.tpl.html',
      '<div class="ui-select-container ui-select-bootstrap dropdown" ng-class="{open: $select.open}"><div class="ui-select-match"></div><span ng-show="$select.open && $select.refreshing && $select.spinnerEnabled" class="ui-select-refreshing {{$select.spinnerClass}}"></span> <input type="search" autocomplete="off" tabindex="-1" aria-expanded="true" aria-label="{{ $select.baseTitle }}" aria-owns="ui-select-choices-{{ $select.generatedId }}" class="form-control ui-select-search" ng-class="{ \'ui-select-search-hidden\' : !$select.searchEnabled }" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-show="$select.open"><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'
    )
    $templateCache.put(
      'select2/choices.tpl.html',
      '<ul tabindex="-1" class="ui-select-choices ui-select-choices-content select2-results"><li class="ui-select-choices-group" ng-class="{\'select2-result-with-children\': $select.choiceGrouped($group) }"><div ng-show="$select.choiceGrouped($group)" class="ui-select-choices-group-label select2-result-label" ng-bind="$group.name"></div><ul id="ui-select-choices-{{ $select.generatedId }}" ng-class="{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }"><li role="option" ng-attr-id="ui-select-choices-row-{{ $select.generatedId }}-{{$index}}" class="ui-select-choices-row" ng-class="{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}"><div class="select2-result-label ui-select-choices-row-inner"></div></li></ul></li></ul>'
    )
    $templateCache.put(
      'select2/match-multiple.tpl.html',
      '<span class="ui-select-match"><li class="ui-select-match-item select2-search-choice" ng-repeat="$item in $select.selected track by $index" ng-class="{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}" ui-select-sort="$select.selected"><span uis-transclude-append=""></span> <a href="javascript:;" class="ui-select-match-close select2-search-choice-close" ng-click="$selectMultiple.removeChoice($index)" tabindex="-1"></a></li></span>'
    )
    $templateCache.put(
      'select2/match.tpl.html',
      '<a class="select2-choice ui-select-match" ng-class="{\'select2-default\': $select.isEmpty()}" ng-click="$select.toggle($event)" aria-label="{{ $select.baseTitle }} select"><span ng-show="$select.isEmpty()" class="select2-chosen">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty()" class="select2-chosen" ng-transclude=""></span> <abbr ng-if="$select.allowClear && !$select.isEmpty()" class="select2-search-choice-close" ng-click="$select.clear($event)"></abbr> <span class="select2-arrow ui-select-toggle"><b></b></span></a>'
    )
    $templateCache.put(
      'select2/no-choice.tpl.html',
      '<div class="ui-select-no-choice dropdown" ng-show="$select.items.length == 0"><div class="dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'
    )
    $templateCache.put(
      'select2/select-multiple.tpl.html',
      '<div class="ui-select-container ui-select-multiple select2 select2-container select2-container-multi" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}"><ul class="select2-choices"><span class="ui-select-match"></span><li class="select2-search-field"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" aria-activedescendant="ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}" class="select2-input ui-select-search" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-disabled="$select.disabled" ng-hide="$select.disabled" ng-model="$select.search" ng-click="$select.activate()" style="width: 34px;" ondrop="return false;"></li></ul><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open || $select.items.length === 0}"><div class="ui-select-choices"></div></div></div>'
    )
    $templateCache.put(
      'select2/select.tpl.html',
      '<div class="ui-select-container select2 select2-container" ng-class="{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}"><div class="ui-select-match"></div><div class="ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active" ng-class="{\'select2-display-none\': !$select.open}"><div class="search-container" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled, \'select2-search\':$select.searchEnabled}"><input type="search" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" ng-class="{\'select2-active\': $select.refreshing}" role="combobox" aria-expanded="true" aria-owns="ui-select-choices-{{ $select.generatedId }}" aria-label="{{ $select.baseTitle }}" class="ui-select-search select2-input" ng-model="$select.search"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div></div>'
    )
    $templateCache.put(
      'selectize/choices.tpl.html',
      '<div ng-show="$select.open" class="ui-select-choices ui-select-dropdown selectize-dropdown" ng-class="{\'single\': !$select.multiple, \'multi\': $select.multiple}"><div class="ui-select-choices-content selectize-dropdown-content"><div class="ui-select-choices-group optgroup"><div ng-show="$select.isGrouped" class="ui-select-choices-group-label optgroup-header" ng-bind="$group.name"></div><div role="option" class="ui-select-choices-row" ng-class="{active: $select.isActive(this), disabled: $select.isDisabled(this)}"><div class="option ui-select-choices-row-inner" data-selectable=""></div></div></div></div></div>'
    )
    $templateCache.put(
      'selectize/match-multiple.tpl.html',
      '<div class="ui-select-match" data-value="" ng-repeat="$item in $select.selected track by $index" ng-click="$selectMultiple.activeMatchIndex = $index;" ng-class="{\'active\':$selectMultiple.activeMatchIndex === $index}" ui-select-sort="$select.selected"><span class="ui-select-match-item" ng-class="{\'select-locked\':$select.isLocked(this, $index)}"><span uis-transclude-append=""></span> <span class="remove ui-select-match-close" ng-hide="$select.disabled" ng-click="$selectMultiple.removeChoice($index)">&times;</span></span></div>'
    )
    $templateCache.put(
      'selectize/match.tpl.html',
      '<div ng-hide="$select.searchEnabled && ($select.open || $select.isEmpty())" class="ui-select-match"><span ng-show="!$select.searchEnabled && ($select.isEmpty() || $select.open)" class="ui-select-placeholder text-muted">{{$select.placeholder}}</span> <span ng-hide="$select.isEmpty() || $select.open" ng-transclude=""></span></div>'
    )
    $templateCache.put(
      'selectize/no-choice.tpl.html',
      '<div class="ui-select-no-choice selectize-dropdown" ng-show="$select.items.length == 0"><div class="selectize-dropdown-content"><div data-selectable="" ng-transclude=""></div></div></div>'
    )
    $templateCache.put(
      'selectize/select-multiple.tpl.html',
      '<div class="ui-select-container selectize-control multi plugin-remove_button" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" placeholder="{{$selectMultiple.getPlaceholder()}}" ng-model="$select.search" ng-disabled="$select.disabled" aria-expanded="{{$select.open}}" aria-label="{{ $select.baseTitle }}" ondrop="return false;"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'
    )
    $templateCache.put(
      'selectize/select.tpl.html',
      '<div class="ui-select-container selectize-control single" ng-class="{\'open\': $select.open}"><div class="selectize-input" ng-class="{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}" ng-click="$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()"><div class="ui-select-match"></div><input type="search" autocomplete="off" tabindex="-1" class="ui-select-search ui-select-toggle" ng-class="{\'ui-select-search-hidden\':!$select.searchEnabled}" ng-click="$select.toggle($event)" placeholder="{{$select.placeholder}}" ng-model="$select.search" ng-hide="!$select.isEmpty() && !$select.open" ng-disabled="$select.disabled" aria-label="{{ $select.baseTitle }}"></div><div class="ui-select-choices"></div><div class="ui-select-no-choice"></div></div>'
    )
  },
])
;(function (root, factory) {
  // Hack to make all exports of this module sha256 function object properties.
  var exports = {}
  factory(exports)
  var sha256 = exports['default']
  for (var k in exports) {
    sha256[k] = exports[k]
  }

  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = sha256
  } else if (typeof define === 'function' && define.amd) {
    define(function () {
      return sha256
    })
  } else {
    root.sha256 = sha256
  }
})(this, function (exports) {
  'use strict'
  exports.__esModule = true
  // SHA-256 (+ HMAC and PBKDF2) for JavaScript.
  //
  // Written in 2014-2016 by Dmitry Chestnykh.
  // Public domain, no warranty.
  //
  // Functions (accept and return Uint8Arrays):
  //
  //   sha256(message) -> hash
  //   sha256.hmac(key, message) -> mac
  //   sha256.pbkdf2(password, salt, rounds, dkLen) -> dk
  //
  //  Classes:
  //
  //   new sha256.Hash()
  //   new sha256.HMAC(key)
  //
  exports.digestLength = 32
  exports.blockSize = 64
  // SHA-256 constants
  var K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
  ])
  function hashBlocks(w, v, p, pos, len) {
    var a, b, c, d, e, f, g, h, u, i, j, t1, t2
    while (len >= 64) {
      a = v[0]
      b = v[1]
      c = v[2]
      d = v[3]
      e = v[4]
      f = v[5]
      g = v[6]
      h = v[7]
      for (i = 0; i < 16; i++) {
        j = pos + i * 4
        w[i] =
          ((p[j] & 0xff) << 24) |
          ((p[j + 1] & 0xff) << 16) |
          ((p[j + 2] & 0xff) << 8) |
          (p[j + 3] & 0xff)
      }
      for (i = 16; i < 64; i++) {
        u = w[i - 2]
        t1 = ((u >>> 17) | (u << (32 - 17))) ^ ((u >>> 19) | (u << (32 - 19))) ^ (u >>> 10)
        u = w[i - 15]
        t2 = ((u >>> 7) | (u << (32 - 7))) ^ ((u >>> 18) | (u << (32 - 18))) ^ (u >>> 3)
        w[i] = ((t1 + w[i - 7]) | 0) + ((t2 + w[i - 16]) | 0)
      }
      for (i = 0; i < 64; i++) {
        t1 =
          ((((((e >>> 6) | (e << (32 - 6))) ^
            ((e >>> 11) | (e << (32 - 11))) ^
            ((e >>> 25) | (e << (32 - 25)))) +
            ((e & f) ^ (~e & g))) |
            0) +
            ((h + ((K[i] + w[i]) | 0)) | 0)) |
          0
        t2 =
          ((((a >>> 2) | (a << (32 - 2))) ^
            ((a >>> 13) | (a << (32 - 13))) ^
            ((a >>> 22) | (a << (32 - 22)))) +
            ((a & b) ^ (a & c) ^ (b & c))) |
          0
        h = g
        g = f
        f = e
        e = (d + t1) | 0
        d = c
        c = b
        b = a
        a = (t1 + t2) | 0
      }
      v[0] += a
      v[1] += b
      v[2] += c
      v[3] += d
      v[4] += e
      v[5] += f
      v[6] += g
      v[7] += h
      pos += 64
      len -= 64
    }
    return pos
  }
  // Hash implements SHA256 hash algorithm.
  var Hash = /** @class */ (function () {
    function Hash() {
      this.digestLength = exports.digestLength
      this.blockSize = exports.blockSize
      // Note: Int32Array is used instead of Uint32Array for performance reasons.
      this.state = new Int32Array(8) // hash state
      this.temp = new Int32Array(64) // temporary state
      this.buffer = new Uint8Array(128) // buffer for data to hash
      this.bufferLength = 0 // number of bytes in buffer
      this.bytesHashed = 0 // number of total bytes hashed
      this.finished = false // indicates whether the hash was finalized
      this.reset()
    }
    // Resets hash state making it possible
    // to re-use this instance to hash other data.
    Hash.prototype.reset = function () {
      this.state[0] = 0x6a09e667
      this.state[1] = 0xbb67ae85
      this.state[2] = 0x3c6ef372
      this.state[3] = 0xa54ff53a
      this.state[4] = 0x510e527f
      this.state[5] = 0x9b05688c
      this.state[6] = 0x1f83d9ab
      this.state[7] = 0x5be0cd19
      this.bufferLength = 0
      this.bytesHashed = 0
      this.finished = false
      return this
    }
    // Cleans internal buffers and re-initializes hash state.
    Hash.prototype.clean = function () {
      for (var i = 0; i < this.buffer.length; i++) {
        this.buffer[i] = 0
      }
      for (var i = 0; i < this.temp.length; i++) {
        this.temp[i] = 0
      }
      this.reset()
    }
    // Updates hash state with the given data.
    //
    // Optionally, length of the data can be specified to hash
    // fewer bytes than data.length.
    //
    // Throws error when trying to update already finalized hash:
    // instance must be reset to use it again.
    Hash.prototype.update = function (data, dataLength) {
      if (dataLength === void 0) {
        dataLength = data.length
      }
      if (this.finished) {
        throw new Error("SHA256: can't update because hash was finished.")
      }
      var dataPos = 0
      this.bytesHashed += dataLength
      if (this.bufferLength > 0) {
        while (this.bufferLength < 64 && dataLength > 0) {
          this.buffer[this.bufferLength++] = data[dataPos++]
          dataLength--
        }
        if (this.bufferLength === 64) {
          hashBlocks(this.temp, this.state, this.buffer, 0, 64)
          this.bufferLength = 0
        }
      }
      if (dataLength >= 64) {
        dataPos = hashBlocks(this.temp, this.state, data, dataPos, dataLength)
        dataLength %= 64
      }
      while (dataLength > 0) {
        this.buffer[this.bufferLength++] = data[dataPos++]
        dataLength--
      }
      return this
    }
    // Finalizes hash state and puts hash into out.
    //
    // If hash was already finalized, puts the same value.
    Hash.prototype.finish = function (out) {
      if (!this.finished) {
        var bytesHashed = this.bytesHashed
        var left = this.bufferLength
        var bitLenHi = (bytesHashed / 0x20000000) | 0
        var bitLenLo = bytesHashed << 3
        var padLength = bytesHashed % 64 < 56 ? 64 : 128
        this.buffer[left] = 0x80
        for (var i = left + 1; i < padLength - 8; i++) {
          this.buffer[i] = 0
        }
        this.buffer[padLength - 8] = (bitLenHi >>> 24) & 0xff
        this.buffer[padLength - 7] = (bitLenHi >>> 16) & 0xff
        this.buffer[padLength - 6] = (bitLenHi >>> 8) & 0xff
        this.buffer[padLength - 5] = (bitLenHi >>> 0) & 0xff
        this.buffer[padLength - 4] = (bitLenLo >>> 24) & 0xff
        this.buffer[padLength - 3] = (bitLenLo >>> 16) & 0xff
        this.buffer[padLength - 2] = (bitLenLo >>> 8) & 0xff
        this.buffer[padLength - 1] = (bitLenLo >>> 0) & 0xff
        hashBlocks(this.temp, this.state, this.buffer, 0, padLength)
        this.finished = true
      }
      for (var i = 0; i < 8; i++) {
        out[i * 4 + 0] = (this.state[i] >>> 24) & 0xff
        out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff
        out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff
        out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff
      }
      return this
    }
    // Returns the final hash digest.
    Hash.prototype.digest = function () {
      var out = new Uint8Array(this.digestLength)
      this.finish(out)
      return out
    }
    // Internal function for use in HMAC for optimization.
    Hash.prototype._saveState = function (out) {
      for (var i = 0; i < this.state.length; i++) {
        out[i] = this.state[i]
      }
    }
    // Internal function for use in HMAC for optimization.
    Hash.prototype._restoreState = function (from, bytesHashed) {
      for (var i = 0; i < this.state.length; i++) {
        this.state[i] = from[i]
      }
      this.bytesHashed = bytesHashed
      this.finished = false
      this.bufferLength = 0
    }
    return Hash
  })()
  exports.Hash = Hash
  // HMAC implements HMAC-SHA256 message authentication algorithm.
  var HMAC = /** @class */ (function () {
    function HMAC(key) {
      this.inner = new Hash()
      this.outer = new Hash()
      this.blockSize = this.inner.blockSize
      this.digestLength = this.inner.digestLength
      var pad = new Uint8Array(this.blockSize)
      if (key.length > this.blockSize) {
        new Hash().update(key).finish(pad).clean()
      } else {
        for (var i = 0; i < key.length; i++) {
          pad[i] = key[i]
        }
      }
      for (var i = 0; i < pad.length; i++) {
        pad[i] ^= 0x36
      }
      this.inner.update(pad)
      for (var i = 0; i < pad.length; i++) {
        pad[i] ^= 0x36 ^ 0x5c
      }
      this.outer.update(pad)
      this.istate = new Uint32Array(8)
      this.ostate = new Uint32Array(8)
      this.inner._saveState(this.istate)
      this.outer._saveState(this.ostate)
      for (var i = 0; i < pad.length; i++) {
        pad[i] = 0
      }
    }
    // Returns HMAC state to the state initialized with key
    // to make it possible to run HMAC over the other data with the same
    // key without creating a new instance.
    HMAC.prototype.reset = function () {
      this.inner._restoreState(this.istate, this.inner.blockSize)
      this.outer._restoreState(this.ostate, this.outer.blockSize)
      return this
    }
    // Cleans HMAC state.
    HMAC.prototype.clean = function () {
      for (var i = 0; i < this.istate.length; i++) {
        this.ostate[i] = this.istate[i] = 0
      }
      this.inner.clean()
      this.outer.clean()
    }
    // Updates state with provided data.
    HMAC.prototype.update = function (data) {
      this.inner.update(data)
      return this
    }
    // Finalizes HMAC and puts the result in out.
    HMAC.prototype.finish = function (out) {
      if (this.outer.finished) {
        this.outer.finish(out)
      } else {
        this.inner.finish(out)
        this.outer.update(out, this.digestLength).finish(out)
      }
      return this
    }
    // Returns message authentication code.
    HMAC.prototype.digest = function () {
      var out = new Uint8Array(this.digestLength)
      this.finish(out)
      return out
    }
    return HMAC
  })()
  exports.HMAC = HMAC
  // Returns SHA256 hash of data.
  function hash(data) {
    var h = new Hash().update(data)
    var digest = h.digest()
    h.clean()
    return digest
  }
  exports.hash = hash
  // Function hash is both available as module.hash and as default export.
  exports['default'] = hash
  // Returns HMAC-SHA256 of data under the key.
  function hmac(key, data) {
    var h = new HMAC(key).update(data)
    var digest = h.digest()
    h.clean()
    return digest
  }
  exports.hmac = hmac
  // Fills hkdf buffer like this:
  // T(1) = HMAC-Hash(PRK, T(0) | info | 0x01)
  function fillBuffer(buffer, hmac, info, counter) {
    // Counter is a byte value: check if it overflowed.
    var num = counter[0]
    if (num === 0) {
      throw new Error('hkdf: cannot expand more')
    }
    // Prepare HMAC instance for new data with old key.
    hmac.reset()
    // Hash in previous output if it was generated
    // (i.e. counter is greater than 1).
    if (num > 1) {
      hmac.update(buffer)
    }
    // Hash in info if it exists.
    if (info) {
      hmac.update(info)
    }
    // Hash in the counter.
    hmac.update(counter)
    // Output result to buffer and clean HMAC instance.
    hmac.finish(buffer)
    // Increment counter inside typed array, this works properly.
    counter[0]++
  }
  var hkdfSalt = new Uint8Array(exports.digestLength) // Filled with zeroes.
  function hkdf(key, salt, info, length) {
    if (salt === void 0) {
      salt = hkdfSalt
    }
    if (length === void 0) {
      length = 32
    }
    var counter = new Uint8Array([1])
    // HKDF-Extract uses salt as HMAC key, and key as data.
    var okm = hmac(salt, key)
    // Initialize HMAC for expanding with extracted key.
    // Ensure no collisions with `hmac` function.
    var hmac_ = new HMAC(okm)
    // Allocate buffer.
    var buffer = new Uint8Array(hmac_.digestLength)
    var bufpos = buffer.length
    var out = new Uint8Array(length)
    for (var i = 0; i < length; i++) {
      if (bufpos === buffer.length) {
        fillBuffer(buffer, hmac_, info, counter)
        bufpos = 0
      }
      out[i] = buffer[bufpos++]
    }
    hmac_.clean()
    buffer.fill(0)
    counter.fill(0)
    return out
  }
  exports.hkdf = hkdf
  // Derives a key from password and salt using PBKDF2-HMAC-SHA256
  // with the given number of iterations.
  //
  // The number of bytes returned is equal to dkLen.
  //
  // (For better security, avoid dkLen greater than hash length - 32 bytes).
  function pbkdf2(password, salt, iterations, dkLen) {
    var prf = new HMAC(password)
    var len = prf.digestLength
    var ctr = new Uint8Array(4)
    var t = new Uint8Array(len)
    var u = new Uint8Array(len)
    var dk = new Uint8Array(dkLen)
    for (var i = 0; i * len < dkLen; i++) {
      var c = i + 1
      ctr[0] = (c >>> 24) & 0xff
      ctr[1] = (c >>> 16) & 0xff
      ctr[2] = (c >>> 8) & 0xff
      ctr[3] = (c >>> 0) & 0xff
      prf.reset()
      prf.update(salt)
      prf.update(ctr)
      prf.finish(u)
      for (var j = 0; j < len; j++) {
        t[j] = u[j]
      }
      for (var j = 2; j <= iterations; j++) {
        prf.reset()
        prf.update(u).finish(u)
        for (var k = 0; k < len; k++) {
          t[k] ^= u[k]
        }
      }
      for (var j = 0; j < len && i * len + j < dkLen; j++) {
        dk[i * len + j] = t[j]
      }
    }
    for (var i = 0; i < len; i++) {
      t[i] = u[i] = 0
    }
    for (var i = 0; i < 4; i++) {
      ctr[i] = 0
    }
    prf.clean()
    return dk
  }
  exports.pbkdf2 = pbkdf2
})

;(function (f) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f()
  } else if (typeof define === 'function' && define.amd) {
    define([], f)
  } else {
    var g
    if (typeof window !== 'undefined') {
      g = window
    } else if (typeof global !== 'undefined') {
      g = global
    } else if (typeof self !== 'undefined') {
      g = self
    } else {
      g = this
    }
    g.StackTrace = f()
  }
})(function () {
  var define, module, exports
  return (function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = 'function' == typeof require && require
            if (!f && c) return c(i, !0)
            if (u) return u(i, !0)
            var a = new Error("Cannot find module '" + i + "'")
            throw ((a.code = 'MODULE_NOT_FOUND'), a)
          }
          var p = (n[i] = { exports: {} })
          e[i][0].call(
            p.exports,
            function (r) {
              var n = e[i][1][r]
              return o(n || r)
            },
            p,
            p.exports,
            r,
            e,
            n,
            t
          )
        }
        return n[i].exports
      }
      for (var u = 'function' == typeof require && require, i = 0; i < t.length; i++) o(t[i])
      return o
    }
    return r
  })()(
    {
      1: [
        function (require, module, exports) {
          ;(function (root, factory) {
            'use strict'
            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
              define('error-stack-parser', ['stackframe'], factory)
            } else if (typeof exports === 'object') {
              module.exports = factory(require('stackframe'))
            } else {
              root.ErrorStackParser = factory(root.StackFrame)
            }
          })(this, function ErrorStackParser(StackFrame) {
            'use strict'

            var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+:\d+/
            var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+:\d+|\(native\))/m
            var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code])?$/

            return {
              /**
               * Given an Error object, extract the most information from it.
               *
               * @param {Error} error object
               * @return {Array} of StackFrames
               */
              parse: function ErrorStackParser$$parse(error) {
                if (
                  typeof error.stacktrace !== 'undefined' ||
                  typeof error['opera#sourceloc'] !== 'undefined'
                ) {
                  return this.parseOpera(error)
                } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                  return this.parseV8OrIE(error)
                } else if (error.stack) {
                  return this.parseFFOrSafari(error)
                } else {
                  throw new Error('Cannot parse given Error object')
                }
              },

              // Separate line and column numbers from a string of the form: (URI:Line:Column)
              extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                // Fail-fast but return locations like "(native)"
                if (urlLike.indexOf(':') === -1) {
                  return [urlLike]
                }

                var regExp = /(.+?)(?::(\d+))?(?::(\d+))?$/
                var parts = regExp.exec(urlLike.replace(/[()]/g, ''))
                return [parts[1], parts[2] || undefined, parts[3] || undefined]
              },

              parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                var filtered = error.stack.split('\n').filter(function (line) {
                  return !!line.match(CHROME_IE_STACK_REGEXP)
                }, this)

                return filtered.map(function (line) {
                  if (line.indexOf('(eval ') > -1) {
                    // Throw away eval information until we implement stacktrace.js/stackframe#8
                    line = line
                      .replace(/eval code/g, 'eval')
                      .replace(/(\(eval at [^()]*)|(\),.*$)/g, '')
                  }
                  var sanitizedLine = line.replace(/^\s+/, '').replace(/\(eval code/g, '(')

                  // capture and preseve the parenthesized location "(/foo/my bar.js:12:87)" in
                  // case it has spaces in it, as the string is split on \s+ later on
                  var location = sanitizedLine.match(/ (\((.+):(\d+):(\d+)\)$)/)

                  // remove the parenthesized location from the line, if it was matched
                  sanitizedLine = location ? sanitizedLine.replace(location[0], '') : sanitizedLine

                  var tokens = sanitizedLine.split(/\s+/).slice(1)
                  // if a location was matched, pass it to extractLocation() otherwise pop the last token
                  var locationParts = this.extractLocation(location ? location[1] : tokens.pop())
                  var functionName = tokens.join(' ') || undefined
                  var fileName =
                    ['eval', '<anonymous>'].indexOf(locationParts[0]) > -1
                      ? undefined
                      : locationParts[0]

                  return new StackFrame({
                    functionName: functionName,
                    fileName: fileName,
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line,
                  })
                }, this)
              },

              parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                var filtered = error.stack.split('\n').filter(function (line) {
                  return !line.match(SAFARI_NATIVE_CODE_REGEXP)
                }, this)

                return filtered.map(function (line) {
                  // Throw away eval information until we implement stacktrace.js/stackframe#8
                  if (line.indexOf(' > eval') > -1) {
                    line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ':$1')
                  }

                  if (line.indexOf('@') === -1 && line.indexOf(':') === -1) {
                    // Safari eval frames only have function names and nothing else
                    return new StackFrame({
                      functionName: line,
                    })
                  } else {
                    var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/
                    var matches = line.match(functionNameRegex)
                    var functionName = matches && matches[1] ? matches[1] : undefined
                    var locationParts = this.extractLocation(line.replace(functionNameRegex, ''))

                    return new StackFrame({
                      functionName: functionName,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line,
                    })
                  }
                }, this)
              },

              parseOpera: function ErrorStackParser$$parseOpera(e) {
                if (
                  !e.stacktrace ||
                  (e.message.indexOf('\n') > -1 &&
                    e.message.split('\n').length > e.stacktrace.split('\n').length)
                ) {
                  return this.parseOpera9(e)
                } else if (!e.stack) {
                  return this.parseOpera10(e)
                } else {
                  return this.parseOpera11(e)
                }
              },

              parseOpera9: function ErrorStackParser$$parseOpera9(e) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)/i
                var lines = e.message.split('\n')
                var result = []

                for (var i = 2, len = lines.length; i < len; i += 2) {
                  var match = lineRE.exec(lines[i])
                  if (match) {
                    result.push(
                      new StackFrame({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i],
                      })
                    )
                  }
                }

                return result
              },

              parseOpera10: function ErrorStackParser$$parseOpera10(e) {
                var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i
                var lines = e.stacktrace.split('\n')
                var result = []

                for (var i = 0, len = lines.length; i < len; i += 2) {
                  var match = lineRE.exec(lines[i])
                  if (match) {
                    result.push(
                      new StackFrame({
                        functionName: match[3] || undefined,
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i],
                      })
                    )
                  }
                }

                return result
              },

              // Opera 10.65+ Error.stack very similar to FF/Safari
              parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                var filtered = error.stack.split('\n').filter(function (line) {
                  return (
                    !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/)
                  )
                }, this)

                return filtered.map(function (line) {
                  var tokens = line.split('@')
                  var locationParts = this.extractLocation(tokens.pop())
                  var functionCall = tokens.shift() || ''
                  var functionName =
                    functionCall
                      .replace(/<anonymous function(: (\w+))?>/, '$2')
                      .replace(/\([^)]*\)/g, '') || undefined
                  var argsRaw
                  if (functionCall.match(/\(([^)]*)\)/)) {
                    argsRaw = functionCall.replace(/^[^(]+\(([^)]*)\)$/, '$1')
                  }
                  var args =
                    argsRaw === undefined || argsRaw === '[arguments not available]'
                      ? undefined
                      : argsRaw.split(',')

                  return new StackFrame({
                    functionName: functionName,
                    args: args,
                    fileName: locationParts[0],
                    lineNumber: locationParts[1],
                    columnNumber: locationParts[2],
                    source: line,
                  })
                }, this)
              },
            }
          })
        },
        { stackframe: 2 },
      ],
      2: [
        function (require, module, exports) {
          ;(function (root, factory) {
            'use strict'
            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
              define('stackframe', [], factory)
            } else if (typeof exports === 'object') {
              module.exports = factory()
            } else {
              root.StackFrame = factory()
            }
          })(this, function () {
            'use strict'
            function _isNumber(n) {
              return !isNaN(parseFloat(n)) && isFinite(n)
            }

            function _capitalize(str) {
              return str.charAt(0).toUpperCase() + str.substring(1)
            }

            function _getter(p) {
              return function () {
                return this[p]
              }
            }

            var booleanProps = ['isConstructor', 'isEval', 'isNative', 'isToplevel']
            var numericProps = ['columnNumber', 'lineNumber']
            var stringProps = ['fileName', 'functionName', 'source']
            var arrayProps = ['args']

            var props = booleanProps.concat(numericProps, stringProps, arrayProps)

            function StackFrame(obj) {
              if (!obj) return
              for (var i = 0; i < props.length; i++) {
                if (obj[props[i]] !== undefined) {
                  this['set' + _capitalize(props[i])](obj[props[i]])
                }
              }
            }

            StackFrame.prototype = {
              getArgs: function () {
                return this.args
              },
              setArgs: function (v) {
                if (Object.prototype.toString.call(v) !== '[object Array]') {
                  throw new TypeError('Args must be an Array')
                }
                this.args = v
              },

              getEvalOrigin: function () {
                return this.evalOrigin
              },
              setEvalOrigin: function (v) {
                if (v instanceof StackFrame) {
                  this.evalOrigin = v
                } else if (v instanceof Object) {
                  this.evalOrigin = new StackFrame(v)
                } else {
                  throw new TypeError('Eval Origin must be an Object or StackFrame')
                }
              },

              toString: function () {
                var fileName = this.getFileName() || ''
                var lineNumber = this.getLineNumber() || ''
                var columnNumber = this.getColumnNumber() || ''
                var functionName = this.getFunctionName() || ''
                if (this.getIsEval()) {
                  if (fileName) {
                    return '[eval] (' + fileName + ':' + lineNumber + ':' + columnNumber + ')'
                  }
                  return '[eval]:' + lineNumber + ':' + columnNumber
                }
                if (functionName) {
                  return (
                    functionName + ' (' + fileName + ':' + lineNumber + ':' + columnNumber + ')'
                  )
                }
                return fileName + ':' + lineNumber + ':' + columnNumber
              },
            }

            StackFrame.fromString = function StackFrame$$fromString(str) {
              var argsStartIndex = str.indexOf('(')
              var argsEndIndex = str.lastIndexOf(')')

              var functionName = str.substring(0, argsStartIndex)
              var args = str.substring(argsStartIndex + 1, argsEndIndex).split(',')
              var locationString = str.substring(argsEndIndex + 1)

              if (locationString.indexOf('@') === 0) {
                var parts = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(locationString, '')
                var fileName = parts[1]
                var lineNumber = parts[2]
                var columnNumber = parts[3]
              }

              return new StackFrame({
                functionName: functionName,
                args: args || undefined,
                fileName: fileName,
                lineNumber: lineNumber || undefined,
                columnNumber: columnNumber || undefined,
              })
            }

            for (var i = 0; i < booleanProps.length; i++) {
              StackFrame.prototype['get' + _capitalize(booleanProps[i])] = _getter(booleanProps[i])
              StackFrame.prototype['set' + _capitalize(booleanProps[i])] = (function (p) {
                return function (v) {
                  this[p] = Boolean(v)
                }
              })(booleanProps[i])
            }

            for (var j = 0; j < numericProps.length; j++) {
              StackFrame.prototype['get' + _capitalize(numericProps[j])] = _getter(numericProps[j])
              StackFrame.prototype['set' + _capitalize(numericProps[j])] = (function (p) {
                return function (v) {
                  if (!_isNumber(v)) {
                    throw new TypeError(p + ' must be a Number')
                  }
                  this[p] = Number(v)
                }
              })(numericProps[j])
            }

            for (var k = 0; k < stringProps.length; k++) {
              StackFrame.prototype['get' + _capitalize(stringProps[k])] = _getter(stringProps[k])
              StackFrame.prototype['set' + _capitalize(stringProps[k])] = (function (p) {
                return function (v) {
                  this[p] = String(v)
                }
              })(stringProps[k])
            }

            return StackFrame
          })
        },
        {},
      ],
      3: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          var util = require('./util')
          var has = Object.prototype.hasOwnProperty

          /**
           * A data structure which is a combination of an array and a set. Adding a new
           * member is O(1), testing for membership is O(1), and finding the index of an
           * element is O(1). Removing elements from the set is not supported. Only
           * strings are supported for membership.
           */
          function ArraySet() {
            this._array = []
            this._set = Object.create(null)
          }

          /**
           * Static method for creating ArraySet instances from an existing array.
           */
          ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
            var set = new ArraySet()
            for (var i = 0, len = aArray.length; i < len; i++) {
              set.add(aArray[i], aAllowDuplicates)
            }
            return set
          }

          /**
           * Return how many unique items are in this ArraySet. If duplicates have been
           * added, than those do not count towards the size.
           *
           * @returns Number
           */
          ArraySet.prototype.size = function ArraySet_size() {
            return Object.getOwnPropertyNames(this._set).length
          }

          /**
           * Add the given string to this set.
           *
           * @param String aStr
           */
          ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
            var sStr = util.toSetString(aStr)
            var isDuplicate = has.call(this._set, sStr)
            var idx = this._array.length
            if (!isDuplicate || aAllowDuplicates) {
              this._array.push(aStr)
            }
            if (!isDuplicate) {
              this._set[sStr] = idx
            }
          }

          /**
           * Is the given string a member of this set?
           *
           * @param String aStr
           */
          ArraySet.prototype.has = function ArraySet_has(aStr) {
            var sStr = util.toSetString(aStr)
            return has.call(this._set, sStr)
          }

          /**
           * What is the index of the given string in the array?
           *
           * @param String aStr
           */
          ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
            var sStr = util.toSetString(aStr)
            if (has.call(this._set, sStr)) {
              return this._set[sStr]
            }
            throw new Error('"' + aStr + '" is not in the set.')
          }

          /**
           * What is the element at the given index?
           *
           * @param Number aIdx
           */
          ArraySet.prototype.at = function ArraySet_at(aIdx) {
            if (aIdx >= 0 && aIdx < this._array.length) {
              return this._array[aIdx]
            }
            throw new Error('No element indexed by ' + aIdx)
          }

          /**
           * Returns the array representation of this set (which has the proper indices
           * indicated by indexOf). Note that this is a copy of the internal array used
           * for storing the members so that no one can mess with internal state.
           */
          ArraySet.prototype.toArray = function ArraySet_toArray() {
            return this._array.slice()
          }

          exports.ArraySet = ArraySet
        },
        { './util': 9 },
      ],
      4: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           *
           * Based on the Base 64 VLQ implementation in Closure Compiler:
           * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
           *
           * Copyright 2011 The Closure Compiler Authors. All rights reserved.
           * Redistribution and use in source and binary forms, with or without
           * modification, are permitted provided that the following conditions are
           * met:
           *
           *  * Redistributions of source code must retain the above copyright
           *    notice, this list of conditions and the following disclaimer.
           *  * Redistributions in binary form must reproduce the above
           *    copyright notice, this list of conditions and the following
           *    disclaimer in the documentation and/or other materials provided
           *    with the distribution.
           *  * Neither the name of Google Inc. nor the names of its
           *    contributors may be used to endorse or promote products derived
           *    from this software without specific prior written permission.
           *
           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
           * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
           * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
           * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
           * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
           * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
           * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
           * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
           * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
           * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
           */

          var base64 = require('./base64')

          // A single base 64 digit can contain 6 bits of data. For the base 64 variable
          // length quantities we use in the source map spec, the first bit is the sign,
          // the next four bits are the actual value, and the 6th bit is the
          // continuation bit. The continuation bit tells us whether there are more
          // digits in this value following this digit.
          //
          //   Continuation
          //   |    Sign
          //   |    |
          //   V    V
          //   101011

          var VLQ_BASE_SHIFT = 5

          // binary: 100000
          var VLQ_BASE = 1 << VLQ_BASE_SHIFT

          // binary: 011111
          var VLQ_BASE_MASK = VLQ_BASE - 1

          // binary: 100000
          var VLQ_CONTINUATION_BIT = VLQ_BASE

          /**
           * Converts from a two-complement value to a value where the sign bit is
           * placed in the least significant bit.  For example, as decimals:
           *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
           *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
           */
          function toVLQSigned(aValue) {
            return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0
          }

          /**
           * Converts to a two-complement value from a value where the sign bit is
           * placed in the least significant bit.  For example, as decimals:
           *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
           *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
           */
          function fromVLQSigned(aValue) {
            var isNegative = (aValue & 1) === 1
            var shifted = aValue >> 1
            return isNegative ? -shifted : shifted
          }

          /**
           * Returns the base 64 VLQ encoded value.
           */
          exports.encode = function base64VLQ_encode(aValue) {
            var encoded = ''
            var digit

            var vlq = toVLQSigned(aValue)

            do {
              digit = vlq & VLQ_BASE_MASK
              vlq >>>= VLQ_BASE_SHIFT
              if (vlq > 0) {
                // There are still more digits in this value, so we must make sure the
                // continuation bit is marked.
                digit |= VLQ_CONTINUATION_BIT
              }
              encoded += base64.encode(digit)
            } while (vlq > 0)

            return encoded
          }

          /**
           * Decodes the next base 64 VLQ value from the given string and returns the
           * value and the rest of the string via the out parameter.
           */
          exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
            var strLen = aStr.length
            var result = 0
            var shift = 0
            var continuation, digit

            do {
              if (aIndex >= strLen) {
                throw new Error('Expected more digits in base 64 VLQ value.')
              }

              digit = base64.decode(aStr.charCodeAt(aIndex++))
              if (digit === -1) {
                throw new Error('Invalid base64 digit: ' + aStr.charAt(aIndex - 1))
              }

              continuation = !!(digit & VLQ_CONTINUATION_BIT)
              digit &= VLQ_BASE_MASK
              result = result + (digit << shift)
              shift += VLQ_BASE_SHIFT
            } while (continuation)

            aOutParam.value = fromVLQSigned(result)
            aOutParam.rest = aIndex
          }
        },
        { './base64': 5 },
      ],
      5: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          var intToCharMap =
            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('')

          /**
           * Encode an integer in the range of 0 to 63 to a single base 64 digit.
           */
          exports.encode = function (number) {
            if (0 <= number && number < intToCharMap.length) {
              return intToCharMap[number]
            }
            throw new TypeError('Must be between 0 and 63: ' + number)
          }

          /**
           * Decode a single base 64 character code digit to an integer. Returns -1 on
           * failure.
           */
          exports.decode = function (charCode) {
            var bigA = 65 // 'A'
            var bigZ = 90 // 'Z'

            var littleA = 97 // 'a'
            var littleZ = 122 // 'z'

            var zero = 48 // '0'
            var nine = 57 // '9'

            var plus = 43 // '+'
            var slash = 47 // '/'

            var littleOffset = 26
            var numberOffset = 52

            // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
            if (bigA <= charCode && charCode <= bigZ) {
              return charCode - bigA
            }

            // 26 - 51: abcdefghijklmnopqrstuvwxyz
            if (littleA <= charCode && charCode <= littleZ) {
              return charCode - littleA + littleOffset
            }

            // 52 - 61: 0123456789
            if (zero <= charCode && charCode <= nine) {
              return charCode - zero + numberOffset
            }

            // 62: +
            if (charCode == plus) {
              return 62
            }

            // 63: /
            if (charCode == slash) {
              return 63
            }

            // Invalid base64 digit.
            return -1
          }
        },
        {},
      ],
      6: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          exports.GREATEST_LOWER_BOUND = 1
          exports.LEAST_UPPER_BOUND = 2

          /**
           * Recursive implementation of binary search.
           *
           * @param aLow Indices here and lower do not contain the needle.
           * @param aHigh Indices here and higher do not contain the needle.
           * @param aNeedle The element being searched for.
           * @param aHaystack The non-empty array being searched.
           * @param aCompare Function which takes two elements and returns -1, 0, or 1.
           * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
           *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
           *     closest element that is smaller than or greater than the one we are
           *     searching for, respectively, if the exact element cannot be found.
           */
          function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
            // This function terminates when one of the following is true:
            //
            //   1. We find the exact element we are looking for.
            //
            //   2. We did not find the exact element, but we can return the index of
            //      the next-closest element.
            //
            //   3. We did not find the exact element, and there is no next-closest
            //      element than the one we are searching for, so we return -1.
            var mid = Math.floor((aHigh - aLow) / 2) + aLow
            var cmp = aCompare(aNeedle, aHaystack[mid], true)
            if (cmp === 0) {
              // Found the element we are looking for.
              return mid
            } else if (cmp > 0) {
              // Our needle is greater than aHaystack[mid].
              if (aHigh - mid > 1) {
                // The element is in the upper half.
                return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias)
              }

              // The exact needle element was not found in this haystack. Determine if
              // we are in termination case (3) or (2) and return the appropriate thing.
              if (aBias == exports.LEAST_UPPER_BOUND) {
                return aHigh < aHaystack.length ? aHigh : -1
              } else {
                return mid
              }
            } else {
              // Our needle is less than aHaystack[mid].
              if (mid - aLow > 1) {
                // The element is in the lower half.
                return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias)
              }

              // we are in termination case (3) or (2) and return the appropriate thing.
              if (aBias == exports.LEAST_UPPER_BOUND) {
                return mid
              } else {
                return aLow < 0 ? -1 : aLow
              }
            }
          }

          /**
           * This is an implementation of binary search which will always try and return
           * the index of the closest element if there is no exact hit. This is because
           * mappings between original and generated line/col pairs are single points,
           * and there is an implicit region between each of them, so a miss just means
           * that you aren't on the very start of a region.
           *
           * @param aNeedle The element you are looking for.
           * @param aHaystack The array that is being searched.
           * @param aCompare A function which takes the needle and an element in the
           *     array and returns -1, 0, or 1 depending on whether the needle is less
           *     than, equal to, or greater than the element, respectively.
           * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
           *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
           *     closest element that is smaller than or greater than the one we are
           *     searching for, respectively, if the exact element cannot be found.
           *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
           */
          exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
            if (aHaystack.length === 0) {
              return -1
            }

            var index = recursiveSearch(
              -1,
              aHaystack.length,
              aNeedle,
              aHaystack,
              aCompare,
              aBias || exports.GREATEST_LOWER_BOUND
            )
            if (index < 0) {
              return -1
            }

            // We have found either the exact element, or the next-closest element than
            // the one we are searching for. However, there may be more than one such
            // element. Make sure we always return the smallest of these.
            while (index - 1 >= 0) {
              if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
                break
              }
              --index
            }

            return index
          }
        },
        {},
      ],
      7: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          // It turns out that some (most?) JavaScript engines don't self-host
          // `Array.prototype.sort`. This makes sense because C++ will likely remain
          // faster than JS when doing raw CPU-intensive sorting. However, when using a
          // custom comparator function, calling back and forth between the VM's C++ and
          // JIT'd JS is rather slow *and* loses JIT type information, resulting in
          // worse generated code for the comparator function than would be optimal. In
          // fact, when sorting with a comparator, these costs outweigh the benefits of
          // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
          // a ~3500ms mean speed-up in `bench/bench.html`.

          /**
           * Swap the elements indexed by `x` and `y` in the array `ary`.
           *
           * @param {Array} ary
           *        The array.
           * @param {Number} x
           *        The index of the first item.
           * @param {Number} y
           *        The index of the second item.
           */
          function swap(ary, x, y) {
            var temp = ary[x]
            ary[x] = ary[y]
            ary[y] = temp
          }

          /**
           * Returns a random integer within the range `low .. high` inclusive.
           *
           * @param {Number} low
           *        The lower bound on the range.
           * @param {Number} high
           *        The upper bound on the range.
           */
          function randomIntInRange(low, high) {
            return Math.round(low + Math.random() * (high - low))
          }

          /**
           * The Quick Sort algorithm.
           *
           * @param {Array} ary
           *        An array to sort.
           * @param {function} comparator
           *        Function to use to compare two items.
           * @param {Number} p
           *        Start index of the array
           * @param {Number} r
           *        End index of the array
           */
          function doQuickSort(ary, comparator, p, r) {
            // If our lower bound is less than our upper bound, we (1) partition the
            // array into two pieces and (2) recurse on each half. If it is not, this is
            // the empty array and our base case.

            if (p < r) {
              // (1) Partitioning.
              //
              // The partitioning chooses a pivot between `p` and `r` and moves all
              // elements that are less than or equal to the pivot to the before it, and
              // all the elements that are greater than it after it. The effect is that
              // once partition is done, the pivot is in the exact place it will be when
              // the array is put in sorted order, and it will not need to be moved
              // again. This runs in O(n) time.

              // Always choose a random pivot so that an input array which is reverse
              // sorted does not cause O(n^2) running time.
              var pivotIndex = randomIntInRange(p, r)
              var i = p - 1

              swap(ary, pivotIndex, r)
              var pivot = ary[r]

              // Immediately after `j` is incremented in this loop, the following hold
              // true:
              //
              //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
              //
              //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
              for (var j = p; j < r; j++) {
                if (comparator(ary[j], pivot) <= 0) {
                  i += 1
                  swap(ary, i, j)
                }
              }

              swap(ary, i + 1, j)
              var q = i + 1

              // (2) Recurse on each half.

              doQuickSort(ary, comparator, p, q - 1)
              doQuickSort(ary, comparator, q + 1, r)
            }
          }

          /**
           * Sort the given array in-place with the given comparator function.
           *
           * @param {Array} ary
           *        An array to sort.
           * @param {function} comparator
           *        Function to use to compare two items.
           */
          exports.quickSort = function (ary, comparator) {
            doQuickSort(ary, comparator, 0, ary.length - 1)
          }
        },
        {},
      ],
      8: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          var util = require('./util')
          var binarySearch = require('./binary-search')
          var ArraySet = require('./array-set').ArraySet
          var base64VLQ = require('./base64-vlq')
          var quickSort = require('./quick-sort').quickSort

          function SourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap
            if (typeof aSourceMap === 'string') {
              sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
            }

            return sourceMap.sections != null
              ? new IndexedSourceMapConsumer(sourceMap)
              : new BasicSourceMapConsumer(sourceMap)
          }

          SourceMapConsumer.fromSourceMap = function (aSourceMap) {
            return BasicSourceMapConsumer.fromSourceMap(aSourceMap)
          }

          /**
           * The version of the source mapping spec that we are consuming.
           */
          SourceMapConsumer.prototype._version = 3

          // `__generatedMappings` and `__originalMappings` are arrays that hold the
          // parsed mapping coordinates from the source map's "mappings" attribute. They
          // are lazily instantiated, accessed via the `_generatedMappings` and
          // `_originalMappings` getters respectively, and we only parse the mappings
          // and create these arrays once queried for a source location. We jump through
          // these hoops because there can be many thousands of mappings, and parsing
          // them is expensive, so we only want to do it if we must.
          //
          // Each object in the arrays is of the form:
          //
          //     {
          //       generatedLine: The line number in the generated code,
          //       generatedColumn: The column number in the generated code,
          //       source: The path to the original source file that generated this
          //               chunk of code,
          //       originalLine: The line number in the original source that
          //                     corresponds to this chunk of generated code,
          //       originalColumn: The column number in the original source that
          //                       corresponds to this chunk of generated code,
          //       name: The name of the original symbol which generated this chunk of
          //             code.
          //     }
          //
          // All properties except for `generatedLine` and `generatedColumn` can be
          // `null`.
          //
          // `_generatedMappings` is ordered by the generated positions.
          //
          // `_originalMappings` is ordered by the original positions.

          SourceMapConsumer.prototype.__generatedMappings = null
          Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
            get: function () {
              if (!this.__generatedMappings) {
                this._parseMappings(this._mappings, this.sourceRoot)
              }

              return this.__generatedMappings
            },
          })

          SourceMapConsumer.prototype.__originalMappings = null
          Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
            get: function () {
              if (!this.__originalMappings) {
                this._parseMappings(this._mappings, this.sourceRoot)
              }

              return this.__originalMappings
            },
          })

          SourceMapConsumer.prototype._charIsMappingSeparator =
            function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
              var c = aStr.charAt(index)
              return c === ';' || c === ','
            }

          /**
           * Parse the mappings in a string in to a data structure which we can easily
           * query (the ordered arrays in the `this.__generatedMappings` and
           * `this.__originalMappings` properties).
           */
          SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(
            aStr,
            aSourceRoot
          ) {
            throw new Error('Subclasses must implement _parseMappings')
          }

          SourceMapConsumer.GENERATED_ORDER = 1
          SourceMapConsumer.ORIGINAL_ORDER = 2

          SourceMapConsumer.GREATEST_LOWER_BOUND = 1
          SourceMapConsumer.LEAST_UPPER_BOUND = 2

          /**
           * Iterate over each mapping between an original source/line/column and a
           * generated line/column in this source map.
           *
           * @param Function aCallback
           *        The function that is called with each mapping.
           * @param Object aContext
           *        Optional. If specified, this object will be the value of `this` every
           *        time that `aCallback` is called.
           * @param aOrder
           *        Either `SourceMapConsumer.GENERATED_ORDER` or
           *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
           *        iterate over the mappings sorted by the generated file's line/column
           *        order or the original's source/line/column order, respectively. Defaults to
           *        `SourceMapConsumer.GENERATED_ORDER`.
           */
          SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(
            aCallback,
            aContext,
            aOrder
          ) {
            var context = aContext || null
            var order = aOrder || SourceMapConsumer.GENERATED_ORDER

            var mappings
            switch (order) {
              case SourceMapConsumer.GENERATED_ORDER:
                mappings = this._generatedMappings
                break
              case SourceMapConsumer.ORIGINAL_ORDER:
                mappings = this._originalMappings
                break
              default:
                throw new Error('Unknown order of iteration.')
            }

            var sourceRoot = this.sourceRoot
            mappings
              .map(function (mapping) {
                var source = mapping.source === null ? null : this._sources.at(mapping.source)
                if (source != null && sourceRoot != null) {
                  source = util.join(sourceRoot, source)
                }
                return {
                  source: source,
                  generatedLine: mapping.generatedLine,
                  generatedColumn: mapping.generatedColumn,
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name: mapping.name === null ? null : this._names.at(mapping.name),
                }
              }, this)
              .forEach(aCallback, context)
          }

          /**
           * Returns all generated line and column information for the original source,
           * line, and column provided. If no column is provided, returns all mappings
           * corresponding to a either the line we are searching for or the next
           * closest line that has any mappings. Otherwise, returns all mappings
           * corresponding to the given line and either the column we are searching for
           * or the next closest column that has any offsets.
           *
           * The only argument is an object with the following properties:
           *
           *   - source: The filename of the original source.
           *   - line: The line number in the original source.
           *   - column: Optional. the column number in the original source.
           *
           * and an array of objects is returned, each with the following properties:
           *
           *   - line: The line number in the generated source, or null.
           *   - column: The column number in the generated source, or null.
           */
          SourceMapConsumer.prototype.allGeneratedPositionsFor =
            function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
              var line = util.getArg(aArgs, 'line')

              // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
              // returns the index of the closest mapping less than the needle. By
              // setting needle.originalColumn to 0, we thus find the last mapping for
              // the given line, provided such a mapping exists.
              var needle = {
                source: util.getArg(aArgs, 'source'),
                originalLine: line,
                originalColumn: util.getArg(aArgs, 'column', 0),
              }

              if (this.sourceRoot != null) {
                needle.source = util.relative(this.sourceRoot, needle.source)
              }
              if (!this._sources.has(needle.source)) {
                return []
              }
              needle.source = this._sources.indexOf(needle.source)

              var mappings = []

              var index = this._findMapping(
                needle,
                this._originalMappings,
                'originalLine',
                'originalColumn',
                util.compareByOriginalPositions,
                binarySearch.LEAST_UPPER_BOUND
              )
              if (index >= 0) {
                var mapping = this._originalMappings[index]

                if (aArgs.column === undefined) {
                  var originalLine = mapping.originalLine

                  // Iterate until either we run out of mappings, or we run into
                  // a mapping for a different line than the one we found. Since
                  // mappings are sorted, this is guaranteed to find all mappings for
                  // the line we found.
                  while (mapping && mapping.originalLine === originalLine) {
                    mappings.push({
                      line: util.getArg(mapping, 'generatedLine', null),
                      column: util.getArg(mapping, 'generatedColumn', null),
                      lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null),
                    })

                    mapping = this._originalMappings[++index]
                  }
                } else {
                  var originalColumn = mapping.originalColumn

                  // Iterate until either we run out of mappings, or we run into
                  // a mapping for a different line than the one we were searching for.
                  // Since mappings are sorted, this is guaranteed to find all mappings for
                  // the line we are searching for.
                  while (
                    mapping &&
                    mapping.originalLine === line &&
                    mapping.originalColumn == originalColumn
                  ) {
                    mappings.push({
                      line: util.getArg(mapping, 'generatedLine', null),
                      column: util.getArg(mapping, 'generatedColumn', null),
                      lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null),
                    })

                    mapping = this._originalMappings[++index]
                  }
                }
              }

              return mappings
            }

          exports.SourceMapConsumer = SourceMapConsumer

          /**
           * A BasicSourceMapConsumer instance represents a parsed source map which we can
           * query for information about the original file positions by giving it a file
           * position in the generated source.
           *
           * The only parameter is the raw source map (either as a JSON string, or
           * already parsed to an object). According to the spec, source maps have the
           * following attributes:
           *
           *   - version: Which version of the source map spec this map is following.
           *   - sources: An array of URLs to the original source files.
           *   - names: An array of identifiers which can be referrenced by individual mappings.
           *   - sourceRoot: Optional. The URL root from which all sources are relative.
           *   - sourcesContent: Optional. An array of contents of the original source files.
           *   - mappings: A string of base64 VLQs which contain the actual mappings.
           *   - file: Optional. The generated file this source map is associated with.
           *
           * Here is an example source map, taken from the source map spec[0]:
           *
           *     {
           *       version : 3,
           *       file: "out.js",
           *       sourceRoot : "",
           *       sources: ["foo.js", "bar.js"],
           *       names: ["src", "maps", "are", "fun"],
           *       mappings: "AA,AB;;ABCDE;"
           *     }
           *
           * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
           */
          function BasicSourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap
            if (typeof aSourceMap === 'string') {
              sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
            }

            var version = util.getArg(sourceMap, 'version')
            var sources = util.getArg(sourceMap, 'sources')
            // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
            // requires the array) to play nice here.
            var names = util.getArg(sourceMap, 'names', [])
            var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null)
            var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null)
            var mappings = util.getArg(sourceMap, 'mappings')
            var file = util.getArg(sourceMap, 'file', null)

            // Once again, Sass deviates from the spec and supplies the version as a
            // string rather than a number, so we use loose equality checking here.
            if (version != this._version) {
              throw new Error('Unsupported version: ' + version)
            }

            sources = sources
              .map(String)
              // Some source maps produce relative source paths like "./foo.js" instead of
              // "foo.js".  Normalize these first so that future comparisons will succeed.
              // See bugzil.la/1090768.
              .map(util.normalize)
              // Always ensure that absolute sources are internally stored relative to
              // the source root, if the source root is absolute. Not doing this would
              // be particularly problematic when the source root is a prefix of the
              // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
              .map(function (source) {
                return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
                  ? util.relative(sourceRoot, source)
                  : source
              })

            // Pass `true` below to allow duplicate names and sources. While source maps
            // are intended to be compressed and deduplicated, the TypeScript compiler
            // sometimes generates source maps with duplicates in them. See Github issue
            // #72 and bugzil.la/889492.
            this._names = ArraySet.fromArray(names.map(String), true)
            this._sources = ArraySet.fromArray(sources, true)

            this.sourceRoot = sourceRoot
            this.sourcesContent = sourcesContent
            this._mappings = mappings
            this.file = file
          }

          BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype)
          BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer

          /**
           * Create a BasicSourceMapConsumer from a SourceMapGenerator.
           *
           * @param SourceMapGenerator aSourceMap
           *        The source map that will be consumed.
           * @returns BasicSourceMapConsumer
           */
          BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(
            aSourceMap
          ) {
            var smc = Object.create(BasicSourceMapConsumer.prototype)

            var names = (smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true))
            var sources = (smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true))
            smc.sourceRoot = aSourceMap._sourceRoot
            smc.sourcesContent = aSourceMap._generateSourcesContent(
              smc._sources.toArray(),
              smc.sourceRoot
            )
            smc.file = aSourceMap._file

            // Because we are modifying the entries (by converting string sources and
            // names to indices into the sources and names ArraySets), we have to make
            // a copy of the entry or else bad things happen. Shared mutable state
            // strikes again! See github issue #191.

            var generatedMappings = aSourceMap._mappings.toArray().slice()
            var destGeneratedMappings = (smc.__generatedMappings = [])
            var destOriginalMappings = (smc.__originalMappings = [])

            for (var i = 0, length = generatedMappings.length; i < length; i++) {
              var srcMapping = generatedMappings[i]
              var destMapping = new Mapping()
              destMapping.generatedLine = srcMapping.generatedLine
              destMapping.generatedColumn = srcMapping.generatedColumn

              if (srcMapping.source) {
                destMapping.source = sources.indexOf(srcMapping.source)
                destMapping.originalLine = srcMapping.originalLine
                destMapping.originalColumn = srcMapping.originalColumn

                if (srcMapping.name) {
                  destMapping.name = names.indexOf(srcMapping.name)
                }

                destOriginalMappings.push(destMapping)
              }

              destGeneratedMappings.push(destMapping)
            }

            quickSort(smc.__originalMappings, util.compareByOriginalPositions)

            return smc
          }

          /**
           * The version of the source mapping spec that we are consuming.
           */
          BasicSourceMapConsumer.prototype._version = 3

          /**
           * The list of original sources.
           */
          Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
            get: function () {
              return this._sources.toArray().map(function (s) {
                return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s
              }, this)
            },
          })

          /**
           * Provide the JIT with a nice shape / hidden class.
           */
          function Mapping() {
            this.generatedLine = 0
            this.generatedColumn = 0
            this.source = null
            this.originalLine = null
            this.originalColumn = null
            this.name = null
          }

          /**
           * Parse the mappings in a string in to a data structure which we can easily
           * query (the ordered arrays in the `this.__generatedMappings` and
           * `this.__originalMappings` properties).
           */
          BasicSourceMapConsumer.prototype._parseMappings =
            function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
              var generatedLine = 1
              var previousGeneratedColumn = 0
              var previousOriginalLine = 0
              var previousOriginalColumn = 0
              var previousSource = 0
              var previousName = 0
              var length = aStr.length
              var index = 0
              var cachedSegments = {}
              var temp = {}
              var originalMappings = []
              var generatedMappings = []
              var mapping, str, segment, end, value

              while (index < length) {
                if (aStr.charAt(index) === ';') {
                  generatedLine++
                  index++
                  previousGeneratedColumn = 0
                } else if (aStr.charAt(index) === ',') {
                  index++
                } else {
                  mapping = new Mapping()
                  mapping.generatedLine = generatedLine

                  // Because each offset is encoded relative to the previous one,
                  // many segments often have the same encoding. We can exploit this
                  // fact by caching the parsed variable length fields of each segment,
                  // allowing us to avoid a second parse if we encounter the same
                  // segment again.
                  for (end = index; end < length; end++) {
                    if (this._charIsMappingSeparator(aStr, end)) {
                      break
                    }
                  }
                  str = aStr.slice(index, end)

                  segment = cachedSegments[str]
                  if (segment) {
                    index += str.length
                  } else {
                    segment = []
                    while (index < end) {
                      base64VLQ.decode(aStr, index, temp)
                      value = temp.value
                      index = temp.rest
                      segment.push(value)
                    }

                    if (segment.length === 2) {
                      throw new Error('Found a source, but no line and column')
                    }

                    if (segment.length === 3) {
                      throw new Error('Found a source and line, but no column')
                    }

                    cachedSegments[str] = segment
                  }

                  // Generated column.
                  mapping.generatedColumn = previousGeneratedColumn + segment[0]
                  previousGeneratedColumn = mapping.generatedColumn

                  if (segment.length > 1) {
                    // Original source.
                    mapping.source = previousSource + segment[1]
                    previousSource += segment[1]

                    // Original line.
                    mapping.originalLine = previousOriginalLine + segment[2]
                    previousOriginalLine = mapping.originalLine
                    // Lines are stored 0-based
                    mapping.originalLine += 1

                    // Original column.
                    mapping.originalColumn = previousOriginalColumn + segment[3]
                    previousOriginalColumn = mapping.originalColumn

                    if (segment.length > 4) {
                      // Original name.
                      mapping.name = previousName + segment[4]
                      previousName += segment[4]
                    }
                  }

                  generatedMappings.push(mapping)
                  if (typeof mapping.originalLine === 'number') {
                    originalMappings.push(mapping)
                  }
                }
              }

              quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated)
              this.__generatedMappings = generatedMappings

              quickSort(originalMappings, util.compareByOriginalPositions)
              this.__originalMappings = originalMappings
            }

          /**
           * Find the mapping that best matches the hypothetical "needle" mapping that
           * we are searching for in the given "haystack" of mappings.
           */
          BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(
            aNeedle,
            aMappings,
            aLineName,
            aColumnName,
            aComparator,
            aBias
          ) {
            // To return the position we are searching for, we must first find the
            // mapping for the given position and then return the opposite position it
            // points to. Because the mappings are sorted, we can use binary search to
            // find the best mapping.

            if (aNeedle[aLineName] <= 0) {
              throw new TypeError(
                'Line must be greater than or equal to 1, got ' + aNeedle[aLineName]
              )
            }
            if (aNeedle[aColumnName] < 0) {
              throw new TypeError(
                'Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]
              )
            }

            return binarySearch.search(aNeedle, aMappings, aComparator, aBias)
          }

          /**
           * Compute the last column for each generated mapping. The last column is
           * inclusive.
           */
          BasicSourceMapConsumer.prototype.computeColumnSpans =
            function SourceMapConsumer_computeColumnSpans() {
              for (var index = 0; index < this._generatedMappings.length; ++index) {
                var mapping = this._generatedMappings[index]

                // Mappings do not contain a field for the last generated columnt. We
                // can come up with an optimistic estimate, however, by assuming that
                // mappings are contiguous (i.e. given two consecutive mappings, the
                // first mapping ends where the second one starts).
                if (index + 1 < this._generatedMappings.length) {
                  var nextMapping = this._generatedMappings[index + 1]

                  if (mapping.generatedLine === nextMapping.generatedLine) {
                    mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1
                    continue
                  }
                }

                // The last mapping for each line spans the entire line.
                mapping.lastGeneratedColumn = Infinity
              }
            }

          /**
           * Returns the original source, line, and column information for the generated
           * source's line and column positions provided. The only argument is an object
           * with the following properties:
           *
           *   - line: The line number in the generated source.
           *   - column: The column number in the generated source.
           *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
           *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
           *     closest element that is smaller than or greater than the one we are
           *     searching for, respectively, if the exact element cannot be found.
           *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
           *
           * and an object is returned with the following properties:
           *
           *   - source: The original source file, or null.
           *   - line: The line number in the original source, or null.
           *   - column: The column number in the original source, or null.
           *   - name: The original identifier, or null.
           */
          BasicSourceMapConsumer.prototype.originalPositionFor =
            function SourceMapConsumer_originalPositionFor(aArgs) {
              var needle = {
                generatedLine: util.getArg(aArgs, 'line'),
                generatedColumn: util.getArg(aArgs, 'column'),
              }

              var index = this._findMapping(
                needle,
                this._generatedMappings,
                'generatedLine',
                'generatedColumn',
                util.compareByGeneratedPositionsDeflated,
                util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
              )

              if (index >= 0) {
                var mapping = this._generatedMappings[index]

                if (mapping.generatedLine === needle.generatedLine) {
                  var source = util.getArg(mapping, 'source', null)
                  if (source !== null) {
                    source = this._sources.at(source)
                    if (this.sourceRoot != null) {
                      source = util.join(this.sourceRoot, source)
                    }
                  }
                  var name = util.getArg(mapping, 'name', null)
                  if (name !== null) {
                    name = this._names.at(name)
                  }
                  return {
                    source: source,
                    line: util.getArg(mapping, 'originalLine', null),
                    column: util.getArg(mapping, 'originalColumn', null),
                    name: name,
                  }
                }
              }

              return {
                source: null,
                line: null,
                column: null,
                name: null,
              }
            }

          /**
           * Return true if we have the source content for every source in the source
           * map, false otherwise.
           */
          BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
            function BasicSourceMapConsumer_hasContentsOfAllSources() {
              if (!this.sourcesContent) {
                return false
              }
              return (
                this.sourcesContent.length >= this._sources.size() &&
                !this.sourcesContent.some(function (sc) {
                  return sc == null
                })
              )
            }

          /**
           * Returns the original source content. The only argument is the url of the
           * original source file. Returns null if no original source content is
           * available.
           */
          BasicSourceMapConsumer.prototype.sourceContentFor =
            function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
              if (!this.sourcesContent) {
                return null
              }

              if (this.sourceRoot != null) {
                aSource = util.relative(this.sourceRoot, aSource)
              }

              if (this._sources.has(aSource)) {
                return this.sourcesContent[this._sources.indexOf(aSource)]
              }

              var url
              if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
                // XXX: file:// URIs and absolute paths lead to unexpected behavior for
                // many users. We can help them out when they expect file:// URIs to
                // behave like it would if they were running a local HTTP server. See
                // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
                var fileUriAbsPath = aSource.replace(/^file:\/\//, '')
                if (url.scheme == 'file' && this._sources.has(fileUriAbsPath)) {
                  return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
                }

                if ((!url.path || url.path == '/') && this._sources.has('/' + aSource)) {
                  return this.sourcesContent[this._sources.indexOf('/' + aSource)]
                }
              }

              // This function is used recursively from
              // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
              // don't want to throw if we can't find the source - we just want to
              // return null, so we provide a flag to exit gracefully.
              if (nullOnMissing) {
                return null
              } else {
                throw new Error('"' + aSource + '" is not in the SourceMap.')
              }
            }

          /**
           * Returns the generated line and column information for the original source,
           * line, and column positions provided. The only argument is an object with
           * the following properties:
           *
           *   - source: The filename of the original source.
           *   - line: The line number in the original source.
           *   - column: The column number in the original source.
           *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
           *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
           *     closest element that is smaller than or greater than the one we are
           *     searching for, respectively, if the exact element cannot be found.
           *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
           *
           * and an object is returned with the following properties:
           *
           *   - line: The line number in the generated source, or null.
           *   - column: The column number in the generated source, or null.
           */
          BasicSourceMapConsumer.prototype.generatedPositionFor =
            function SourceMapConsumer_generatedPositionFor(aArgs) {
              var source = util.getArg(aArgs, 'source')
              if (this.sourceRoot != null) {
                source = util.relative(this.sourceRoot, source)
              }
              if (!this._sources.has(source)) {
                return {
                  line: null,
                  column: null,
                  lastColumn: null,
                }
              }
              source = this._sources.indexOf(source)

              var needle = {
                source: source,
                originalLine: util.getArg(aArgs, 'line'),
                originalColumn: util.getArg(aArgs, 'column'),
              }

              var index = this._findMapping(
                needle,
                this._originalMappings,
                'originalLine',
                'originalColumn',
                util.compareByOriginalPositions,
                util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
              )

              if (index >= 0) {
                var mapping = this._originalMappings[index]

                if (mapping.source === needle.source) {
                  return {
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null),
                  }
                }
              }

              return {
                line: null,
                column: null,
                lastColumn: null,
              }
            }

          exports.BasicSourceMapConsumer = BasicSourceMapConsumer

          /**
           * An IndexedSourceMapConsumer instance represents a parsed source map which
           * we can query for information. It differs from BasicSourceMapConsumer in
           * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
           * input.
           *
           * The only parameter is a raw source map (either as a JSON string, or already
           * parsed to an object). According to the spec for indexed source maps, they
           * have the following attributes:
           *
           *   - version: Which version of the source map spec this map is following.
           *   - file: Optional. The generated file this source map is associated with.
           *   - sections: A list of section definitions.
           *
           * Each value under the "sections" field has two fields:
           *   - offset: The offset into the original specified at which this section
           *       begins to apply, defined as an object with a "line" and "column"
           *       field.
           *   - map: A source map definition. This source map could also be indexed,
           *       but doesn't have to be.
           *
           * Instead of the "map" field, it's also possible to have a "url" field
           * specifying a URL to retrieve a source map from, but that's currently
           * unsupported.
           *
           * Here's an example source map, taken from the source map spec[0], but
           * modified to omit a section which uses the "url" field.
           *
           *  {
           *    version : 3,
           *    file: "app.js",
           *    sections: [{
           *      offset: {line:100, column:10},
           *      map: {
           *        version : 3,
           *        file: "section.js",
           *        sources: ["foo.js", "bar.js"],
           *        names: ["src", "maps", "are", "fun"],
           *        mappings: "AAAA,E;;ABCDE;"
           *      }
           *    }],
           *  }
           *
           * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
           */
          function IndexedSourceMapConsumer(aSourceMap) {
            var sourceMap = aSourceMap
            if (typeof aSourceMap === 'string') {
              sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''))
            }

            var version = util.getArg(sourceMap, 'version')
            var sections = util.getArg(sourceMap, 'sections')

            if (version != this._version) {
              throw new Error('Unsupported version: ' + version)
            }

            this._sources = new ArraySet()
            this._names = new ArraySet()

            var lastOffset = {
              line: -1,
              column: 0,
            }
            this._sections = sections.map(function (s) {
              if (s.url) {
                // The url field will require support for asynchronicity.
                // See https://github.com/mozilla/source-map/issues/16
                throw new Error('Support for url field in sections not implemented.')
              }
              var offset = util.getArg(s, 'offset')
              var offsetLine = util.getArg(offset, 'line')
              var offsetColumn = util.getArg(offset, 'column')

              if (
                offsetLine < lastOffset.line ||
                (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)
              ) {
                throw new Error('Section offsets must be ordered and non-overlapping.')
              }
              lastOffset = offset

              return {
                generatedOffset: {
                  // The offset fields are 0-based, but we use 1-based indices when
                  // encoding/decoding from VLQ.
                  generatedLine: offsetLine + 1,
                  generatedColumn: offsetColumn + 1,
                },
                consumer: new SourceMapConsumer(util.getArg(s, 'map')),
              }
            })
          }

          IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype)
          IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer

          /**
           * The version of the source mapping spec that we are consuming.
           */
          IndexedSourceMapConsumer.prototype._version = 3

          /**
           * The list of original sources.
           */
          Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
            get: function () {
              var sources = []
              for (var i = 0; i < this._sections.length; i++) {
                for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
                  sources.push(this._sections[i].consumer.sources[j])
                }
              }
              return sources
            },
          })

          /**
           * Returns the original source, line, and column information for the generated
           * source's line and column positions provided. The only argument is an object
           * with the following properties:
           *
           *   - line: The line number in the generated source.
           *   - column: The column number in the generated source.
           *
           * and an object is returned with the following properties:
           *
           *   - source: The original source file, or null.
           *   - line: The line number in the original source, or null.
           *   - column: The column number in the original source, or null.
           *   - name: The original identifier, or null.
           */
          IndexedSourceMapConsumer.prototype.originalPositionFor =
            function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
              var needle = {
                generatedLine: util.getArg(aArgs, 'line'),
                generatedColumn: util.getArg(aArgs, 'column'),
              }

              // Find the section containing the generated position we're trying to map
              // to an original position.
              var sectionIndex = binarySearch.search(
                needle,
                this._sections,
                function (needle, section) {
                  var cmp = needle.generatedLine - section.generatedOffset.generatedLine
                  if (cmp) {
                    return cmp
                  }

                  return needle.generatedColumn - section.generatedOffset.generatedColumn
                }
              )
              var section = this._sections[sectionIndex]

              if (!section) {
                return {
                  source: null,
                  line: null,
                  column: null,
                  name: null,
                }
              }

              return section.consumer.originalPositionFor({
                line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
                column:
                  needle.generatedColumn -
                  (section.generatedOffset.generatedLine === needle.generatedLine
                    ? section.generatedOffset.generatedColumn - 1
                    : 0),
                bias: aArgs.bias,
              })
            }

          /**
           * Return true if we have the source content for every source in the source
           * map, false otherwise.
           */
          IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
            function IndexedSourceMapConsumer_hasContentsOfAllSources() {
              return this._sections.every(function (s) {
                return s.consumer.hasContentsOfAllSources()
              })
            }

          /**
           * Returns the original source content. The only argument is the url of the
           * original source file. Returns null if no original source content is
           * available.
           */
          IndexedSourceMapConsumer.prototype.sourceContentFor =
            function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i]

                var content = section.consumer.sourceContentFor(aSource, true)
                if (content) {
                  return content
                }
              }
              if (nullOnMissing) {
                return null
              } else {
                throw new Error('"' + aSource + '" is not in the SourceMap.')
              }
            }

          /**
           * Returns the generated line and column information for the original source,
           * line, and column positions provided. The only argument is an object with
           * the following properties:
           *
           *   - source: The filename of the original source.
           *   - line: The line number in the original source.
           *   - column: The column number in the original source.
           *
           * and an object is returned with the following properties:
           *
           *   - line: The line number in the generated source, or null.
           *   - column: The column number in the generated source, or null.
           */
          IndexedSourceMapConsumer.prototype.generatedPositionFor =
            function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i]

                // Only consider this section if the requested source is in the list of
                // sources of the consumer.
                if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
                  continue
                }
                var generatedPosition = section.consumer.generatedPositionFor(aArgs)
                if (generatedPosition) {
                  var ret = {
                    line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                    column:
                      generatedPosition.column +
                      (section.generatedOffset.generatedLine === generatedPosition.line
                        ? section.generatedOffset.generatedColumn - 1
                        : 0),
                  }
                  return ret
                }
              }

              return {
                line: null,
                column: null,
              }
            }

          /**
           * Parse the mappings in a string in to a data structure which we can easily
           * query (the ordered arrays in the `this.__generatedMappings` and
           * `this.__originalMappings` properties).
           */
          IndexedSourceMapConsumer.prototype._parseMappings =
            function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
              this.__generatedMappings = []
              this.__originalMappings = []
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i]
                var sectionMappings = section.consumer._generatedMappings
                for (var j = 0; j < sectionMappings.length; j++) {
                  var mapping = sectionMappings[j]

                  var source = section.consumer._sources.at(mapping.source)
                  if (section.consumer.sourceRoot !== null) {
                    source = util.join(section.consumer.sourceRoot, source)
                  }
                  this._sources.add(source)
                  source = this._sources.indexOf(source)

                  var name = section.consumer._names.at(mapping.name)
                  this._names.add(name)
                  name = this._names.indexOf(name)

                  // The mappings coming from the consumer for the section have
                  // generated positions relative to the start of the section, so we
                  // need to offset them to be relative to the start of the concatenated
                  // generated file.
                  var adjustedMapping = {
                    source: source,
                    generatedLine:
                      mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                    generatedColumn:
                      mapping.generatedColumn +
                      (section.generatedOffset.generatedLine === mapping.generatedLine
                        ? section.generatedOffset.generatedColumn - 1
                        : 0),
                    originalLine: mapping.originalLine,
                    originalColumn: mapping.originalColumn,
                    name: name,
                  }

                  this.__generatedMappings.push(adjustedMapping)
                  if (typeof adjustedMapping.originalLine === 'number') {
                    this.__originalMappings.push(adjustedMapping)
                  }
                }
              }

              quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated)
              quickSort(this.__originalMappings, util.compareByOriginalPositions)
            }

          exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer
        },
        {
          './array-set': 3,
          './base64-vlq': 4,
          './binary-search': 6,
          './quick-sort': 7,
          './util': 9,
        },
      ],
      9: [
        function (require, module, exports) {
          /* -*- Mode: js; js-indent-level: 2; -*- */
          /*
           * Copyright 2011 Mozilla Foundation and contributors
           * Licensed under the New BSD license. See LICENSE or:
           * http://opensource.org/licenses/BSD-3-Clause
           */

          /**
           * This is a helper function for getting values from parameter/options
           * objects.
           *
           * @param args The object we are extracting values from
           * @param name The name of the property we are getting.
           * @param defaultValue An optional value to return if the property is missing
           * from the object. If this is not specified and the property is missing, an
           * error will be thrown.
           */
          function getArg(aArgs, aName, aDefaultValue) {
            if (aName in aArgs) {
              return aArgs[aName]
            } else if (arguments.length === 3) {
              return aDefaultValue
            } else {
              throw new Error('"' + aName + '" is a required argument.')
            }
          }
          exports.getArg = getArg

          var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/
          var dataUrlRegexp = /^data:.+\,.+$/

          function urlParse(aUrl) {
            var match = aUrl.match(urlRegexp)
            if (!match) {
              return null
            }
            return {
              scheme: match[1],
              auth: match[2],
              host: match[3],
              port: match[4],
              path: match[5],
            }
          }
          exports.urlParse = urlParse

          function urlGenerate(aParsedUrl) {
            var url = ''
            if (aParsedUrl.scheme) {
              url += aParsedUrl.scheme + ':'
            }
            url += '//'
            if (aParsedUrl.auth) {
              url += aParsedUrl.auth + '@'
            }
            if (aParsedUrl.host) {
              url += aParsedUrl.host
            }
            if (aParsedUrl.port) {
              url += ':' + aParsedUrl.port
            }
            if (aParsedUrl.path) {
              url += aParsedUrl.path
            }
            return url
          }
          exports.urlGenerate = urlGenerate

          /**
           * Normalizes a path, or the path portion of a URL:
           *
           * - Replaces consecutive slashes with one slash.
           * - Removes unnecessary '.' parts.
           * - Removes unnecessary '<dir>/..' parts.
           *
           * Based on code in the Node.js 'path' core module.
           *
           * @param aPath The path or url to normalize.
           */
          function normalize(aPath) {
            var path = aPath
            var url = urlParse(aPath)
            if (url) {
              if (!url.path) {
                return aPath
              }
              path = url.path
            }
            var isAbsolute = exports.isAbsolute(path)

            var parts = path.split(/\/+/)
            for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
              part = parts[i]
              if (part === '.') {
                parts.splice(i, 1)
              } else if (part === '..') {
                up++
              } else if (up > 0) {
                if (part === '') {
                  // The first part is blank if the path is absolute. Trying to go
                  // above the root is a no-op. Therefore we can remove all '..' parts
                  // directly after the root.
                  parts.splice(i + 1, up)
                  up = 0
                } else {
                  parts.splice(i, 2)
                  up--
                }
              }
            }
            path = parts.join('/')

            if (path === '') {
              path = isAbsolute ? '/' : '.'
            }

            if (url) {
              url.path = path
              return urlGenerate(url)
            }
            return path
          }
          exports.normalize = normalize

          /**
           * Joins two paths/URLs.
           *
           * @param aRoot The root path or URL.
           * @param aPath The path or URL to be joined with the root.
           *
           * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
           *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
           *   first.
           * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
           *   is updated with the result and aRoot is returned. Otherwise the result
           *   is returned.
           *   - If aPath is absolute, the result is aPath.
           *   - Otherwise the two paths are joined with a slash.
           * - Joining for example 'http://' and 'www.example.com' is also supported.
           */
          function join(aRoot, aPath) {
            if (aRoot === '') {
              aRoot = '.'
            }
            if (aPath === '') {
              aPath = '.'
            }
            var aPathUrl = urlParse(aPath)
            var aRootUrl = urlParse(aRoot)
            if (aRootUrl) {
              aRoot = aRootUrl.path || '/'
            }

            // `join(foo, '//www.example.org')`
            if (aPathUrl && !aPathUrl.scheme) {
              if (aRootUrl) {
                aPathUrl.scheme = aRootUrl.scheme
              }
              return urlGenerate(aPathUrl)
            }

            if (aPathUrl || aPath.match(dataUrlRegexp)) {
              return aPath
            }

            // `join('http://', 'www.example.com')`
            if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
              aRootUrl.host = aPath
              return urlGenerate(aRootUrl)
            }

            var joined =
              aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath)

            if (aRootUrl) {
              aRootUrl.path = joined
              return urlGenerate(aRootUrl)
            }
            return joined
          }
          exports.join = join

          exports.isAbsolute = function (aPath) {
            return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp)
          }

          /**
           * Make a path relative to a URL or another path.
           *
           * @param aRoot The root path or URL.
           * @param aPath The path or URL to be made relative to aRoot.
           */
          function relative(aRoot, aPath) {
            if (aRoot === '') {
              aRoot = '.'
            }

            aRoot = aRoot.replace(/\/$/, '')

            // It is possible for the path to be above the root. In this case, simply
            // checking whether the root is a prefix of the path won't work. Instead, we
            // need to remove components from the root one by one, until either we find
            // a prefix that fits, or we run out of components to remove.
            var level = 0
            while (aPath.indexOf(aRoot + '/') !== 0) {
              var index = aRoot.lastIndexOf('/')
              if (index < 0) {
                return aPath
              }

              // If the only part of the root that is left is the scheme (i.e. http://,
              // file:///, etc.), one or more slashes (/), or simply nothing at all, we
              // have exhausted all components, so the path is not relative to the root.
              aRoot = aRoot.slice(0, index)
              if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                return aPath
              }

              ++level
            }

            // Make sure we add a "../" for each component we removed from the root.
            return Array(level + 1).join('../') + aPath.substr(aRoot.length + 1)
          }
          exports.relative = relative

          var supportsNullProto = (function () {
            var obj = Object.create(null)
            return !('__proto__' in obj)
          })()

          function identity(s) {
            return s
          }

          /**
           * Because behavior goes wacky when you set `__proto__` on objects, we
           * have to prefix all the strings in our set with an arbitrary character.
           *
           * See https://github.com/mozilla/source-map/pull/31 and
           * https://github.com/mozilla/source-map/issues/30
           *
           * @param String aStr
           */
          function toSetString(aStr) {
            if (isProtoString(aStr)) {
              return '$' + aStr
            }

            return aStr
          }
          exports.toSetString = supportsNullProto ? identity : toSetString

          function fromSetString(aStr) {
            if (isProtoString(aStr)) {
              return aStr.slice(1)
            }

            return aStr
          }
          exports.fromSetString = supportsNullProto ? identity : fromSetString

          function isProtoString(s) {
            if (!s) {
              return false
            }

            var length = s.length

            if (length < 9 /* "__proto__".length */) {
              return false
            }

            if (
              s.charCodeAt(length - 1) !== 95 /* '_' */ ||
              s.charCodeAt(length - 2) !== 95 /* '_' */ ||
              s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
              s.charCodeAt(length - 4) !== 116 /* 't' */ ||
              s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
              s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
              s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
              s.charCodeAt(length - 8) !== 95 /* '_' */ ||
              s.charCodeAt(length - 9) !== 95 /* '_' */
            ) {
              return false
            }

            for (var i = length - 10; i >= 0; i--) {
              if (s.charCodeAt(i) !== 36 /* '$' */) {
                return false
              }
            }

            return true
          }

          /**
           * Comparator between two mappings where the original positions are compared.
           *
           * Optionally pass in `true` as `onlyCompareGenerated` to consider two
           * mappings with the same original source/line/column, but different generated
           * line and column the same. Useful when searching for a mapping with a
           * stubbed out mapping.
           */
          function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
            var cmp = mappingA.source - mappingB.source
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalLine - mappingB.originalLine
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn
            if (cmp !== 0 || onlyCompareOriginal) {
              return cmp
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.generatedLine - mappingB.generatedLine
            if (cmp !== 0) {
              return cmp
            }

            return mappingA.name - mappingB.name
          }
          exports.compareByOriginalPositions = compareByOriginalPositions

          /**
           * Comparator between two mappings with deflated source and name indices where
           * the generated positions are compared.
           *
           * Optionally pass in `true` as `onlyCompareGenerated` to consider two
           * mappings with the same generated line and column, but different
           * source/name/original line and column the same. Useful when searching for a
           * mapping with a stubbed out mapping.
           */
          function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn
            if (cmp !== 0 || onlyCompareGenerated) {
              return cmp
            }

            cmp = mappingA.source - mappingB.source
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalLine - mappingB.originalLine
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn
            if (cmp !== 0) {
              return cmp
            }

            return mappingA.name - mappingB.name
          }
          exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated

          function strcmp(aStr1, aStr2) {
            if (aStr1 === aStr2) {
              return 0
            }

            if (aStr1 > aStr2) {
              return 1
            }

            return -1
          }

          /**
           * Comparator between two mappings with inflated source and name strings where
           * the generated positions are compared.
           */
          function compareByGeneratedPositionsInflated(mappingA, mappingB) {
            var cmp = mappingA.generatedLine - mappingB.generatedLine
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.generatedColumn - mappingB.generatedColumn
            if (cmp !== 0) {
              return cmp
            }

            cmp = strcmp(mappingA.source, mappingB.source)
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalLine - mappingB.originalLine
            if (cmp !== 0) {
              return cmp
            }

            cmp = mappingA.originalColumn - mappingB.originalColumn
            if (cmp !== 0) {
              return cmp
            }

            return strcmp(mappingA.name, mappingB.name)
          }
          exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated
        },
        {},
      ],
      10: [
        function (require, module, exports) {
          arguments[4][2][0].apply(exports, arguments)
        },
        { dup: 2 },
      ],
      11: [
        function (require, module, exports) {
          ;(function (root, factory) {
            'use strict'
            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
              define('stack-generator', ['stackframe'], factory)
            } else if (typeof exports === 'object') {
              module.exports = factory(require('stackframe'))
            } else {
              root.StackGenerator = factory(root.StackFrame)
            }
          })(this, function (StackFrame) {
            return {
              backtrace: function StackGenerator$$backtrace(opts) {
                var stack = []
                var maxStackSize = 10

                if (typeof opts === 'object' && typeof opts.maxStackSize === 'number') {
                  maxStackSize = opts.maxStackSize
                }

                var curr = arguments.callee
                while (curr && stack.length < maxStackSize && curr['arguments']) {
                  // Allow V8 optimizations
                  var args = new Array(curr['arguments'].length)
                  for (var i = 0; i < args.length; ++i) {
                    args[i] = curr['arguments'][i]
                  }
                  if (/function(?:\s+([\w$]+))+\s*\(/.test(curr.toString())) {
                    stack.push(new StackFrame({ functionName: RegExp.$1 || undefined, args: args }))
                  } else {
                    stack.push(new StackFrame({ args: args }))
                  }

                  try {
                    curr = curr.caller
                  } catch (e) {
                    break
                  }
                }
                return stack
              },
            }
          })
        },
        { stackframe: 10 },
      ],
      12: [
        function (require, module, exports) {
          arguments[4][2][0].apply(exports, arguments)
        },
        { dup: 2 },
      ],
      13: [
        function (require, module, exports) {
          ;(function (root, factory) {
            'use strict'
            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
              define('stacktrace-gps', ['source-map', 'stackframe'], factory)
            } else if (typeof exports === 'object') {
              module.exports = factory(
                require('source-map/lib/source-map-consumer'),
                require('stackframe')
              )
            } else {
              root.StackTraceGPS = factory(root.SourceMap || root.sourceMap, root.StackFrame)
            }
          })(this, function (SourceMap, StackFrame) {
            'use strict'

            /**
             * Make a X-Domain request to url and callback.
             *
             * @param {String} url
             * @returns {Promise} with response text if fulfilled
             */
            function _xdr(url) {
              return new Promise(function (resolve, reject) {
                var req = new XMLHttpRequest()
                req.open('get', url)
                req.onerror = reject
                req.onreadystatechange = function onreadystatechange() {
                  if (req.readyState === 4) {
                    if (
                      (req.status >= 200 && req.status < 300) ||
                      (url.substr(0, 7) === 'file://' && req.responseText)
                    ) {
                      resolve(req.responseText)
                    } else {
                      reject(new Error('HTTP status: ' + req.status + ' retrieving ' + url))
                    }
                  }
                }
                req.send()
              })
            }

            /**
             * Convert a Base64-encoded string into its original representation.
             * Used for inline sourcemaps.
             *
             * @param {String} b64str Base-64 encoded string
             * @returns {String} original representation of the base64-encoded string.
             */
            function _atob(b64str) {
              if (typeof window !== 'undefined' && window.atob) {
                return window.atob(b64str)
              } else {
                throw new Error('You must supply a polyfill for window.atob in this environment')
              }
            }

            function _parseJson(string) {
              if (typeof JSON !== 'undefined' && JSON.parse) {
                return JSON.parse(string)
              } else {
                throw new Error('You must supply a polyfill for JSON.parse in this environment')
              }
            }

            function _findFunctionName(source, lineNumber /*, columnNumber*/) {
              var syntaxes = [
                // {name} = function ({args}) TODO args capture
                /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*function\b/,
                // function {name}({args}) m[1]=name m[2]=args
                /function\s+([^('"`]*?)\s*\(([^)]*)\)/,
                // {name} = eval()
                /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*(?:eval|new Function)\b/,
                // fn_name() {
                /\b(?!(?:if|for|switch|while|with|catch)\b)(?:(?:static)\s+)?(\S+)\s*\(.*?\)\s*\{/,
                // {name} = () => {
                /['"]?([$_A-Za-z][$_A-Za-z0-9]*)['"]?\s*[:=]\s*\(.*?\)\s*=>/,
              ]
              var lines = source.split('\n')

              // Walk backwards in the source lines until we find the line which matches one of the patterns above
              var code = ''
              var maxLines = Math.min(lineNumber, 20)
              for (var i = 0; i < maxLines; ++i) {
                // lineNo is 1-based, source[] is 0-based
                var line = lines[lineNumber - i - 1]
                var commentPos = line.indexOf('//')
                if (commentPos >= 0) {
                  line = line.substr(0, commentPos)
                }

                if (line) {
                  code = line + code
                  var len = syntaxes.length
                  for (var index = 0; index < len; index++) {
                    var m = syntaxes[index].exec(code)
                    if (m && m[1]) {
                      return m[1]
                    }
                  }
                }
              }
              return undefined
            }

            function _ensureSupportedEnvironment() {
              if (
                typeof Object.defineProperty !== 'function' ||
                typeof Object.create !== 'function'
              ) {
                throw new Error('Unable to consume source maps in older browsers')
              }
            }

            function _ensureStackFrameIsLegit(stackframe) {
              if (typeof stackframe !== 'object') {
                throw new TypeError('Given StackFrame is not an object')
              } else if (typeof stackframe.fileName !== 'string') {
                throw new TypeError('Given file name is not a String')
              } else if (
                typeof stackframe.lineNumber !== 'number' ||
                stackframe.lineNumber % 1 !== 0 ||
                stackframe.lineNumber < 1
              ) {
                throw new TypeError('Given line number must be a positive integer')
              } else if (
                typeof stackframe.columnNumber !== 'number' ||
                stackframe.columnNumber % 1 !== 0 ||
                stackframe.columnNumber < 0
              ) {
                throw new TypeError('Given column number must be a non-negative integer')
              }
              return true
            }

            function _findSourceMappingURL(source) {
              var sourceMappingUrlRegExp = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm
              var lastSourceMappingUrl
              var matchSourceMappingUrl
              // eslint-disable-next-line no-cond-assign
              while ((matchSourceMappingUrl = sourceMappingUrlRegExp.exec(source))) {
                lastSourceMappingUrl = matchSourceMappingUrl[1]
              }
              if (lastSourceMappingUrl) {
                return lastSourceMappingUrl
              } else {
                throw new Error('sourceMappingURL not found')
              }
            }

            function _extractLocationInfoFromSourceMapSource(
              stackframe,
              sourceMapConsumer,
              sourceCache
            ) {
              return new Promise(function (resolve, reject) {
                var loc = sourceMapConsumer.originalPositionFor({
                  line: stackframe.lineNumber,
                  column: stackframe.columnNumber,
                })

                if (loc.source) {
                  // cache mapped sources
                  var mappedSource = sourceMapConsumer.sourceContentFor(loc.source)
                  if (mappedSource) {
                    sourceCache[loc.source] = mappedSource
                  }

                  resolve(
                    // given stackframe and source location, update stackframe
                    new StackFrame({
                      functionName: loc.name || stackframe.functionName,
                      args: stackframe.args,
                      fileName: loc.source,
                      lineNumber: loc.line,
                      columnNumber: loc.column,
                    })
                  )
                } else {
                  reject(
                    new Error('Could not get original source for given stackframe and source map')
                  )
                }
              })
            }

            /**
             * @constructor
             * @param {Object} opts
             *      opts.sourceCache = {url: "Source String"} => preload source cache
             *      opts.sourceMapConsumerCache = {/path/file.js.map: SourceMapConsumer}
             *      opts.offline = True to prevent network requests.
             *              Best effort without sources or source maps.
             *      opts.ajax = Promise returning function to make X-Domain requests
             */
            return function StackTraceGPS(opts) {
              if (!(this instanceof StackTraceGPS)) {
                return new StackTraceGPS(opts)
              }
              opts = opts || {}

              this.sourceCache = opts.sourceCache || {}
              this.sourceMapConsumerCache = opts.sourceMapConsumerCache || {}

              this.ajax = opts.ajax || _xdr

              this._atob = opts.atob || _atob

              this._get = function _get(location) {
                return new Promise(
                  function (resolve, reject) {
                    var isDataUrl = location.substr(0, 5) === 'data:'
                    if (this.sourceCache[location]) {
                      resolve(this.sourceCache[location])
                    } else if (opts.offline && !isDataUrl) {
                      reject(new Error('Cannot make network requests in offline mode'))
                    } else {
                      if (isDataUrl) {
                        // data URLs can have parameters.
                        // see http://tools.ietf.org/html/rfc2397
                        var supportedEncodingRegexp = /^data:application\/json;([\w=:"-]+;)*base64,/
                        var match = location.match(supportedEncodingRegexp)
                        if (match) {
                          var sourceMapStart = match[0].length
                          var encodedSource = location.substr(sourceMapStart)
                          var source = this._atob(encodedSource)
                          this.sourceCache[location] = source
                          resolve(source)
                        } else {
                          reject(new Error('The encoding of the inline sourcemap is not supported'))
                        }
                      } else {
                        var xhrPromise = this.ajax(location, { method: 'get' })
                        // Cache the Promise to prevent duplicate in-flight requests
                        this.sourceCache[location] = xhrPromise
                        xhrPromise.then(resolve, reject)
                      }
                    }
                  }.bind(this)
                )
              }

              /**
               * Creating SourceMapConsumers is expensive, so this wraps the creation of a
               * SourceMapConsumer in a per-instance cache.
               *
               * @param {String} sourceMappingURL = URL to fetch source map from
               * @param {String} defaultSourceRoot = Default source root for source map if undefined
               * @returns {Promise} that resolves a SourceMapConsumer
               */
              this._getSourceMapConsumer = function _getSourceMapConsumer(
                sourceMappingURL,
                defaultSourceRoot
              ) {
                return new Promise(
                  function (resolve) {
                    if (this.sourceMapConsumerCache[sourceMappingURL]) {
                      resolve(this.sourceMapConsumerCache[sourceMappingURL])
                    } else {
                      var sourceMapConsumerPromise = new Promise(
                        function (resolve, reject) {
                          return this._get(sourceMappingURL).then(function (sourceMapSource) {
                            if (typeof sourceMapSource === 'string') {
                              sourceMapSource = _parseJson(sourceMapSource.replace(/^\)\]\}'/, ''))
                            }
                            if (typeof sourceMapSource.sourceRoot === 'undefined') {
                              sourceMapSource.sourceRoot = defaultSourceRoot
                            }

                            resolve(new SourceMap.SourceMapConsumer(sourceMapSource))
                          }, reject)
                        }.bind(this)
                      )
                      this.sourceMapConsumerCache[sourceMappingURL] = sourceMapConsumerPromise
                      resolve(sourceMapConsumerPromise)
                    }
                  }.bind(this)
                )
              }

              /**
               * Given a StackFrame, enhance function name and use source maps for a
               * better StackFrame.
               *
               * @param {StackFrame} stackframe object
               * @returns {Promise} that resolves with with source-mapped StackFrame
               */
              this.pinpoint = function StackTraceGPS$$pinpoint(stackframe) {
                return new Promise(
                  function (resolve, reject) {
                    this.getMappedLocation(stackframe).then(
                      function (mappedStackFrame) {
                        function resolveMappedStackFrame() {
                          resolve(mappedStackFrame)
                        }

                        this.findFunctionName(mappedStackFrame)
                          .then(resolve, resolveMappedStackFrame)
                          [
                            // eslint-disable-next-line no-unexpected-multiline
                            'catch'
                          ](resolveMappedStackFrame)
                      }.bind(this),
                      reject
                    )
                  }.bind(this)
                )
              }

              /**
               * Given a StackFrame, guess function name from location information.
               *
               * @param {StackFrame} stackframe
               * @returns {Promise} that resolves with enhanced StackFrame.
               */
              this.findFunctionName = function StackTraceGPS$$findFunctionName(stackframe) {
                return new Promise(
                  function (resolve, reject) {
                    _ensureStackFrameIsLegit(stackframe)
                    this._get(stackframe.fileName)
                      .then(function getSourceCallback(source) {
                        var lineNumber = stackframe.lineNumber
                        var columnNumber = stackframe.columnNumber
                        var guessedFunctionName = _findFunctionName(
                          source,
                          lineNumber,
                          columnNumber
                        )
                        // Only replace functionName if we found something
                        if (guessedFunctionName) {
                          resolve(
                            new StackFrame({
                              functionName: guessedFunctionName,
                              args: stackframe.args,
                              fileName: stackframe.fileName,
                              lineNumber: lineNumber,
                              columnNumber: columnNumber,
                            })
                          )
                        } else {
                          resolve(stackframe)
                        }
                      }, reject)
                      ['catch'](reject)
                  }.bind(this)
                )
              }

              /**
               * Given a StackFrame, seek source-mapped location and return new enhanced StackFrame.
               *
               * @param {StackFrame} stackframe
               * @returns {Promise} that resolves with enhanced StackFrame.
               */
              this.getMappedLocation = function StackTraceGPS$$getMappedLocation(stackframe) {
                return new Promise(
                  function (resolve, reject) {
                    _ensureSupportedEnvironment()
                    _ensureStackFrameIsLegit(stackframe)

                    var sourceCache = this.sourceCache
                    var fileName = stackframe.fileName
                    this._get(fileName)
                      .then(
                        function (source) {
                          var sourceMappingURL = _findSourceMappingURL(source)
                          var isDataUrl = sourceMappingURL.substr(0, 5) === 'data:'
                          var defaultSourceRoot = fileName.substring(
                            0,
                            fileName.lastIndexOf('/') + 1
                          )

                          if (
                            sourceMappingURL[0] !== '/' &&
                            !isDataUrl &&
                            !/^https?:\/\/|^\/\//i.test(sourceMappingURL)
                          ) {
                            sourceMappingURL = defaultSourceRoot + sourceMappingURL
                          }

                          return this._getSourceMapConsumer(
                            sourceMappingURL,
                            defaultSourceRoot
                          ).then(function (sourceMapConsumer) {
                            return _extractLocationInfoFromSourceMapSource(
                              stackframe,
                              sourceMapConsumer,
                              sourceCache
                            )
                              .then(resolve)
                              ['catch'](function () {
                                resolve(stackframe)
                              })
                          })
                        }.bind(this),
                        reject
                      )
                      ['catch'](reject)
                  }.bind(this)
                )
              }
            }
          })
        },
        { 'source-map/lib/source-map-consumer': 8, stackframe: 12 },
      ],
      14: [
        function (require, module, exports) {
          ;(function (root, factory) {
            'use strict'
            // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js, Rhino, and browsers.

            /* istanbul ignore next */
            if (typeof define === 'function' && define.amd) {
              define('stacktrace', [
                'error-stack-parser',
                'stack-generator',
                'stacktrace-gps',
              ], factory)
            } else if (typeof exports === 'object') {
              module.exports = factory(
                require('error-stack-parser'),
                require('stack-generator'),
                require('stacktrace-gps')
              )
            } else {
              root.StackTrace = factory(
                root.ErrorStackParser,
                root.StackGenerator,
                root.StackTraceGPS
              )
            }
          })(this, function StackTrace(ErrorStackParser, StackGenerator, StackTraceGPS) {
            var _options = {
              filter: function (stackframe) {
                // Filter out stackframes for this library by default
                return (
                  (stackframe.functionName || '').indexOf('StackTrace$$') === -1 &&
                  (stackframe.functionName || '').indexOf('ErrorStackParser$$') === -1 &&
                  (stackframe.functionName || '').indexOf('StackTraceGPS$$') === -1 &&
                  (stackframe.functionName || '').indexOf('StackGenerator$$') === -1
                )
              },
              sourceCache: {},
            }

            var _generateError = function StackTrace$$GenerateError() {
              try {
                // Error must be thrown to get stack in IE
                throw new Error()
              } catch (err) {
                return err
              }
            }

            /**
             * Merge 2 given Objects. If a conflict occurs the second object wins.
             * Does not do deep merges.
             *
             * @param {Object} first base object
             * @param {Object} second overrides
             * @returns {Object} merged first and second
             * @private
             */
            function _merge(first, second) {
              var target = {}

              ;[first, second].forEach(function (obj) {
                for (var prop in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                    target[prop] = obj[prop]
                  }
                }
                return target
              })

              return target
            }

            function _isShapedLikeParsableError(err) {
              return err.stack || err['opera#sourceloc']
            }

            function _filtered(stackframes, filter) {
              if (typeof filter === 'function') {
                return stackframes.filter(filter)
              }
              return stackframes
            }

            return {
              /**
               * Get a backtrace from invocation point.
               *
               * @param {Object} opts
               * @returns {Array} of StackFrame
               */
              get: function StackTrace$$get(opts) {
                var err = _generateError()
                return _isShapedLikeParsableError(err)
                  ? this.fromError(err, opts)
                  : this.generateArtificially(opts)
              },

              /**
               * Get a backtrace from invocation point.
               * IMPORTANT: Does not handle source maps or guess function names!
               *
               * @param {Object} opts
               * @returns {Array} of StackFrame
               */
              getSync: function StackTrace$$getSync(opts) {
                opts = _merge(_options, opts)
                var err = _generateError()
                var stack = _isShapedLikeParsableError(err)
                  ? ErrorStackParser.parse(err)
                  : StackGenerator.backtrace(opts)
                return _filtered(stack, opts.filter)
              },

              /**
               * Given an error object, parse it.
               *
               * @param {Error} error object
               * @param {Object} opts
               * @returns {Promise} for Array[StackFrame}
               */
              fromError: function StackTrace$$fromError(error, opts) {
                opts = _merge(_options, opts)
                var gps = new StackTraceGPS(opts)
                return new Promise(
                  function (resolve) {
                    var stackframes = _filtered(ErrorStackParser.parse(error), opts.filter)
                    resolve(
                      Promise.all(
                        stackframes.map(function (sf) {
                          return new Promise(function (resolve) {
                            function resolveOriginal() {
                              resolve(sf)
                            }

                            gps
                              .pinpoint(sf)
                              .then(resolve, resolveOriginal)
                              ['catch'](resolveOriginal)
                          })
                        })
                      )
                    )
                  }.bind(this)
                )
              },

              /**
               * Use StackGenerator to generate a backtrace.
               *
               * @param {Object} opts
               * @returns {Promise} of Array[StackFrame]
               */
              generateArtificially: function StackTrace$$generateArtificially(opts) {
                opts = _merge(_options, opts)
                var stackFrames = StackGenerator.backtrace(opts)
                if (typeof opts.filter === 'function') {
                  stackFrames = stackFrames.filter(opts.filter)
                }
                return Promise.resolve(stackFrames)
              },

              /**
               * Given a function, wrap it such that invocations trigger a callback that
               * is called with a stack trace.
               *
               * @param {Function} fn to be instrumented
               * @param {Function} callback function to call with a stack trace on invocation
               * @param {Function} errback optional function to call with error if unable to get stack trace.
               * @param {Object} thisArg optional context object (e.g. window)
               */
              instrument: function StackTrace$$instrument(fn, callback, errback, thisArg) {
                if (typeof fn !== 'function') {
                  throw new Error('Cannot instrument non-function object')
                } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                  // Already instrumented, return given Function
                  return fn
                }

                var instrumented = function StackTrace$$instrumented() {
                  try {
                    this.get().then(callback, errback)['catch'](errback)
                    return fn.apply(thisArg || this, arguments)
                  } catch (e) {
                    if (_isShapedLikeParsableError(e)) {
                      this.fromError(e).then(callback, errback)['catch'](errback)
                    }
                    throw e
                  }
                }.bind(this)
                instrumented.__stacktraceOriginalFn = fn

                return instrumented
              },

              /**
               * Given a function that has been instrumented,
               * revert the function to it's original (non-instrumented) state.
               *
               * @param {Function} fn to de-instrument
               */
              deinstrument: function StackTrace$$deinstrument(fn) {
                if (typeof fn !== 'function') {
                  throw new Error('Cannot de-instrument non-function object')
                } else if (typeof fn.__stacktraceOriginalFn === 'function') {
                  return fn.__stacktraceOriginalFn
                } else {
                  // Function not instrumented, return original
                  return fn
                }
              },

              /**
               * Given an error message and Array of StackFrames, serialize and POST to given URL.
               *
               * @param {Array} stackframes
               * @param {String} url
               * @param {String} errorMsg
               * @param {Object} requestOptions
               */
              report: function StackTrace$$report(stackframes, url, errorMsg, requestOptions) {
                return new Promise(function (resolve, reject) {
                  var req = new XMLHttpRequest()
                  req.onerror = reject
                  req.onreadystatechange = function onreadystatechange() {
                    if (req.readyState === 4) {
                      if (req.status >= 200 && req.status < 400) {
                        resolve(req.responseText)
                      } else {
                        reject(new Error('POST to ' + url + ' failed with status: ' + req.status))
                      }
                    }
                  }
                  req.open('post', url)

                  // Set request headers
                  req.setRequestHeader('Content-Type', 'application/json')
                  if (requestOptions && typeof requestOptions.headers === 'object') {
                    var headers = requestOptions.headers
                    for (var header in headers) {
                      if (Object.prototype.hasOwnProperty.call(headers, header)) {
                        req.setRequestHeader(header, headers[header])
                      }
                    }
                  }

                  var reportPayload = { stack: stackframes }
                  if (errorMsg !== undefined && errorMsg !== null) {
                    reportPayload.message = errorMsg
                  }

                  req.send(JSON.stringify(reportPayload))
                })
              },
            }
          })
        },
        { 'error-stack-parser': 1, 'stack-generator': 11, 'stacktrace-gps': 13 },
      ],
    },
    {},
    [14]
  )(14)
})

//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/**
 * Angular Dynamic Locale - 0.1.37
 * https://github.com/lgalfaso/angular-dynamic-locale
 * License: MIT
 */
;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return factory()
    })
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory()
  } else {
    factory()
  }
})(this, function () {
  'use strict'
  angular
    .module('tmh.dynamicLocale', [])
    .config([
      '$provide',
      function ($provide) {
        function makeStateful($delegate) {
          $delegate.$stateful = true
          return $delegate
        }

        $provide.decorator('dateFilter', ['$delegate', makeStateful])
        $provide.decorator('numberFilter', ['$delegate', makeStateful])
        $provide.decorator('currencyFilter', ['$delegate', makeStateful])
      },
    ])
    .constant('tmhDynamicLocale.STORAGE_KEY', 'tmhDynamicLocale.locale')
    .provider('tmhDynamicLocale', [
      'tmhDynamicLocale.STORAGE_KEY',
      function (STORAGE_KEY) {
        var defaultLocale,
          localeLocationPattern = 'angular/i18n/angular-locale_{{locale}}.js',
          nodeToAppend,
          storageFactory = 'tmhDynamicLocaleStorageCache',
          storage,
          storageKey = STORAGE_KEY,
          storageGet = 'get',
          storagePut = 'put',
          promiseCache = {},
          activeLocale,
          extraProperties = {}

        /**
   * Loads a script asynchronously
   *
   * @param {string} url The url for the script
   @ @param {function} callback A function to be called once the script is loaded
   */
        function loadScript(url, callback, errorCallback, $timeout) {
          var script = document.createElement('script'),
            element = nodeToAppend ? nodeToAppend : document.getElementsByTagName('body')[0],
            removed = false

          script.type = 'text/javascript'
          if (script.readyState) {
            // IE
            script.onreadystatechange = function () {
              if (script.readyState === 'complete' || script.readyState === 'loaded') {
                script.onreadystatechange = null
                $timeout(
                  function () {
                    if (removed) return
                    removed = true
                    if (script.parentNode === element) {
                      element.removeChild(script)
                    }
                    callback()
                  },
                  30,
                  false
                )
              }
            }
          } else {
            // Others
            script.onload = function () {
              if (removed) return
              removed = true
              if (script.parentNode === element) {
                element.removeChild(script)
              }
              callback()
            }
            script.onerror = function () {
              if (removed) return
              removed = true
              if (script.parentNode === element) {
                element.removeChild(script)
              }
              errorCallback()
            }
          }
          script.src = url
          script.async = true
          element.appendChild(script)
        }

        /**
         * Loads a locale and replaces the properties from the current locale with the new locale information
         *
         * @param {string} localeUrl The path to the new locale
         * @param {Object} $locale The locale at the curent scope
         * @param {string} localeId The locale id to load
         * @param {Object} $rootScope The application $rootScope
         * @param {Object} $q The application $q
         * @param {Object} localeCache The current locale cache
         * @param {Object} $timeout The application $timeout
         */
        function loadLocale(localeUrl, $locale, localeId, $rootScope, $q, localeCache, $timeout) {
          function overrideValues(oldObject, newObject) {
            if (activeLocale !== localeId) {
              return
            }
            angular.forEach(oldObject, function (value, key) {
              if (!newObject[key]) {
                delete oldObject[key]
              } else if (angular.isArray(newObject[key])) {
                oldObject[key].length = newObject[key].length
              }
            })
            angular.forEach(newObject, function (value, key) {
              if (angular.isArray(newObject[key]) || angular.isObject(newObject[key])) {
                if (!oldObject[key]) {
                  oldObject[key] = angular.isArray(newObject[key]) ? [] : {}
                }
                overrideValues(oldObject[key], newObject[key])
              } else {
                oldObject[key] = newObject[key]
              }
            })
          }

          if (promiseCache[localeId]) {
            activeLocale = localeId
            return promiseCache[localeId]
          }

          var cachedLocale,
            deferred = $q.defer()
          if (localeId === activeLocale) {
            deferred.resolve($locale)
          } else if ((cachedLocale = localeCache.get(localeId))) {
            activeLocale = localeId
            $rootScope.$evalAsync(function () {
              overrideValues($locale, cachedLocale)
              storage[storagePut](storageKey, localeId)
              $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale)
              deferred.resolve($locale)
            })
          } else {
            activeLocale = localeId
            promiseCache[localeId] = deferred.promise
            loadScript(
              localeUrl,
              function () {
                // Create a new injector with the new locale
                var localInjector = angular.injector(['ngLocale']),
                  externalLocale = localInjector.get('$locale')

                overrideValues($locale, externalLocale)
                localeCache.put(localeId, externalLocale)
                delete promiseCache[localeId]

                $rootScope.$applyAsync(function () {
                  storage[storagePut](storageKey, localeId)
                  $rootScope.$broadcast('$localeChangeSuccess', localeId, $locale)
                  deferred.resolve($locale)
                })
              },
              function () {
                delete promiseCache[localeId]

                $rootScope.$applyAsync(function () {
                  if (activeLocale === localeId) {
                    activeLocale = $locale.id
                  }
                  $rootScope.$broadcast('$localeChangeError', localeId)
                  deferred.reject(localeId)
                })
              },
              $timeout
            )
          }
          return deferred.promise
        }

        this.localeLocationPattern = function (value) {
          if (value) {
            localeLocationPattern = value
            return this
          } else {
            return localeLocationPattern
          }
        }

        this.appendScriptTo = function (nodeElement) {
          nodeToAppend = nodeElement
        }

        this.useStorage = function (storageName) {
          storageFactory = storageName
          storageGet = 'get'
          storagePut = 'put'
        }

        this.useCookieStorage = function () {
          if (angular.version.minor < 7) {
            this.useStorage('$cookieStore')
          } else {
            this.useStorage('$cookies')
            storageGet = 'getObject'
            storagePut = 'putObject'
          }
        }

        this.defaultLocale = function (value) {
          defaultLocale = value
        }

        this.storageKey = function (value) {
          if (value) {
            storageKey = value
            return this
          } else {
            return storageKey
          }
        }

        this.addLocalePatternValue = function (key, value) {
          extraProperties[key] = value
        }

        this.$get = [
          '$rootScope',
          '$injector',
          '$interpolate',
          '$locale',
          '$q',
          'tmhDynamicLocaleCache',
          '$timeout',
          function (
            $rootScope,
            $injector,
            interpolate,
            locale,
            $q,
            tmhDynamicLocaleCache,
            $timeout
          ) {
            var localeLocation = interpolate(localeLocationPattern)

            storage = $injector.get(storageFactory)
            $rootScope.$evalAsync(function () {
              var initialLocale
              if ((initialLocale = storage[storageGet](storageKey) || defaultLocale)) {
                loadLocaleFn(initialLocale)
              }
            })
            return {
              /**
               * @ngdoc method
               * @description
               * @param {string} value Sets the locale to the new locale. Changing the locale will trigger
               *    a background task that will retrieve the new locale and configure the current $locale
               *    instance with the information from the new locale
               */
              set: loadLocaleFn,
              /**
               * @ngdoc method
               * @description Returns the configured locale
               */
              get: function () {
                return activeLocale
              },
            }

            function loadLocaleFn(localeId) {
              var baseProperties = { locale: localeId, angularVersion: angular.version.full }
              return loadLocale(
                localeLocation(angular.extend({}, extraProperties, baseProperties)),
                locale,
                localeId,
                $rootScope,
                $q,
                tmhDynamicLocaleCache,
                $timeout
              )
            }
          },
        ]
      },
    ])
    .provider('tmhDynamicLocaleCache', function () {
      this.$get = [
        '$cacheFactory',
        function ($cacheFactory) {
          return $cacheFactory('tmh.dynamicLocales')
        },
      ]
    })
    .provider('tmhDynamicLocaleStorageCache', function () {
      this.$get = [
        '$cacheFactory',
        function ($cacheFactory) {
          return $cacheFactory('tmh.dynamicLocales.store')
        },
      ]
    })
    .run(['tmhDynamicLocale', angular.noop])

  return 'tmh.dynamicLocale'
})

/*
 * ui-bootstrap4
 * http://morgul.github.io/ui-bootstrap4/

 * Version: 3.0.6 - 2018-11-17
 * License: MIT
 */ angular.module('ui.bootstrap', [
  'ui.bootstrap.tpls',
  'ui.bootstrap.collapse',
  'ui.bootstrap.tabindex',
  'ui.bootstrap.accordion',
  'ui.bootstrap.alert',
  'ui.bootstrap.buttons',
  'ui.bootstrap.carousel',
  'ui.bootstrap.common',
  'ui.bootstrap.dateparser',
  'ui.bootstrap.isClass',
  'ui.bootstrap.datepicker',
  'ui.bootstrap.position',
  'ui.bootstrap.datepickerPopup',
  'ui.bootstrap.debounce',
  'ui.bootstrap.multiMap',
  'ui.bootstrap.dropdown',
  'ui.bootstrap.stackedMap',
  'ui.bootstrap.modal',
  'ui.bootstrap.paging',
  'ui.bootstrap.pager',
  'ui.bootstrap.pagination',
  'ui.bootstrap.tooltip',
  'ui.bootstrap.popover',
  'ui.bootstrap.progressbar',
  'ui.bootstrap.rating',
  'ui.bootstrap.tabs',
  'ui.bootstrap.timepicker',
  'ui.bootstrap.typeahead',
])
angular.module('ui.bootstrap.tpls', [
  'uib/template/accordion/accordion-group.html',
  'uib/template/accordion/accordion.html',
  'uib/template/alert/alert.html',
  'uib/template/carousel/carousel.html',
  'uib/template/carousel/slide.html',
  'uib/template/datepicker/datepicker.html',
  'uib/template/datepicker/day.html',
  'uib/template/datepicker/month.html',
  'uib/template/datepicker/year.html',
  'uib/template/datepickerPopup/popup.html',
  'uib/template/modal/window.html',
  'uib/template/pager/pager.html',
  'uib/template/pagination/pagination.html',
  'uib/template/tooltip/tooltip-html-popup.html',
  'uib/template/tooltip/tooltip-popup.html',
  'uib/template/tooltip/tooltip-template-popup.html',
  'uib/template/popover/popover-html.html',
  'uib/template/popover/popover-template.html',
  'uib/template/popover/popover.html',
  'uib/template/progressbar/bar.html',
  'uib/template/progressbar/progress.html',
  'uib/template/progressbar/progressbar.html',
  'uib/template/rating/rating.html',
  'uib/template/tabs/tab.html',
  'uib/template/tabs/tabset.html',
  'uib/template/timepicker/timepicker.html',
  'uib/template/typeahead/typeahead-match.html',
  'uib/template/typeahead/typeahead-popup.html',
])
angular
  .module('ui.bootstrap.collapse', [])

  .directive('uibCollapse', [
    '$animate',
    '$q',
    '$parse',
    '$injector',
    function ($animate, $q, $parse, $injector) {
      var $animateCss = $injector.has('$animateCss') ? $injector.get('$animateCss') : null
      return {
        link: function (scope, element, attrs) {
          var expandingExpr = $parse(attrs.expanding),
            expandedExpr = $parse(attrs.expanded),
            collapsingExpr = $parse(attrs.collapsing),
            collapsedExpr = $parse(attrs.collapsed),
            horizontal = false,
            css = {},
            cssTo = {}

          init()

          function init() {
            horizontal = !!('horizontal' in attrs)
            if (horizontal) {
              css = {
                width: '',
              }
              cssTo = { width: '0' }
            } else {
              css = {
                height: '',
              }
              cssTo = { height: '0' }
            }
            if (!scope.$eval(attrs.uibCollapse)) {
              element
                .addClass('show')
                .addClass('collapse')
                .attr('aria-expanded', true)
                .attr('aria-hidden', false)
                .css(css)
            }
          }

          function getScrollFromElement(element) {
            if (horizontal) {
              return { width: element.scrollWidth + 'px' }
            }
            return { height: element.scrollHeight + 'px' }
          }

          function expand() {
            if (element.hasClass('collapse') && element.hasClass('show')) {
              return
            }

            $q.resolve(expandingExpr(scope)).then(function () {
              element
                .removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', true)
                .attr('aria-hidden', false)

              if ($animateCss) {
                $animateCss(element, {
                  addClass: 'show',
                  easing: 'ease',
                  css: {
                    overflow: 'hidden',
                  },
                  to: getScrollFromElement(element[0]),
                })
                  .start()
                  ['finally'](expandDone)
              } else {
                $animate
                  .addClass(element, 'show', {
                    css: {
                      overflow: 'hidden',
                    },
                    to: getScrollFromElement(element[0]),
                  })
                  .then(expandDone)
              }
            }, angular.noop)
          }

          function expandDone() {
            element.removeClass('collapsing').addClass('collapse').css(css)
            expandedExpr(scope)
          }

          function collapse() {
            if (!element.hasClass('collapse') && !element.hasClass('show')) {
              return collapseDone()
            }

            $q.resolve(collapsingExpr(scope)).then(function () {
              element
                // IMPORTANT: The width must be set before adding "collapsing" class.
                // Otherwise, the browser attempts to animate from width 0 (in
                // collapsing class) to the given width here.
                .css(getScrollFromElement(element[0]))
                // initially all card collapse have the collapse class, this removal
                // prevents the animation from jumping to collapsed state
                .removeClass('collapse')
                .addClass('collapsing')
                .attr('aria-expanded', false)
                .attr('aria-hidden', true)

              if ($animateCss) {
                $animateCss(element, {
                  removeClass: 'show',
                  to: cssTo,
                })
                  .start()
                  ['finally'](collapseDone)
              } else {
                $animate
                  .removeClass(element, 'show', {
                    to: cssTo,
                  })
                  .then(collapseDone)
              }
            }, angular.noop)
          }

          function collapseDone() {
            element.css(cssTo) // Required so that collapse works when animation is disabled
            element.removeClass('collapsing').addClass('collapse')
            collapsedExpr(scope)
          }

          scope.$watch(attrs.uibCollapse, function (shouldCollapse) {
            if (shouldCollapse) {
              collapse()
            } else {
              expand()
            }
          })
        },
      }
    },
  ])

angular
  .module('ui.bootstrap.tabindex', [])

  .directive('uibTabindexToggle', function () {
    return {
      restrict: 'A',
      link: function (scope, elem, attrs) {
        attrs.$observe('disabled', function (disabled) {
          attrs.$set('tabindex', disabled ? -1 : null)
        })
      },
    }
  })

angular
  .module('ui.bootstrap.accordion', ['ui.bootstrap.collapse', 'ui.bootstrap.tabindex'])

  .constant('uibAccordionConfig', {
    closeOthers: true,
  })

  .controller('UibAccordionController', [
    '$scope',
    '$attrs',
    'uibAccordionConfig',
    function ($scope, $attrs, accordionConfig) {
      // This array keeps track of the accordion groups
      this.groups = []

      // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
      this.closeOthers = function (openGroup) {
        var closeOthers = angular.isDefined($attrs.closeOthers)
          ? $scope.$eval($attrs.closeOthers)
          : accordionConfig.closeOthers
        if (closeOthers) {
          angular.forEach(this.groups, function (group) {
            if (group !== openGroup) {
              group.isOpen = false
            }
          })
        }
      }

      // This is called from the accordion-group directive to add itself to the accordion
      this.addGroup = function (groupScope) {
        var that = this
        this.groups.push(groupScope)

        groupScope.$on('$destroy', function (event) {
          that.removeGroup(groupScope)
        })
      }

      // This is called from the accordion-group directive when to remove itself
      this.removeGroup = function (group) {
        var index = this.groups.indexOf(group)
        if (index !== -1) {
          this.groups.splice(index, 1)
        }
      }
    },
  ])

  // The accordion directive simply sets up the directive controller
  // and adds an accordion CSS class to itself element.
  .directive('uibAccordion', function () {
    return {
      controller: 'UibAccordionController',
      controllerAs: 'accordion',
      transclude: true,
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/accordion/accordion.html'
      },
    }
  })

  // The accordion-group directive indicates a block of html that will expand and collapse in an accordion
  .directive('uibAccordionGroup', function () {
    return {
      require: '^uibAccordion', // We need this directive to be inside an accordion
      transclude: true, // It transcludes the contents of the directive into the template
      restrict: 'A',
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/accordion/accordion-group.html'
      },
      scope: {
        heading: '@', // Interpolate the heading attribute onto this scope
        cardClass: '@?', // Ditto with cardClass
        isOpen: '=?',
        isDisabled: '=?',
      },
      controller: function () {
        this.setHeading = function (element) {
          this.heading = element
        }
      },
      link: function (scope, element, attrs, accordionCtrl) {
        element.addClass('card')
        accordionCtrl.addGroup(scope)

        scope.openClass = attrs.openClass || 'card-open'
        scope.cardClass = attrs.cardClass || 'card-default'
        scope.$watch('isOpen', function (value) {
          element.toggleClass(scope.openClass, !!value)
          if (value) {
            accordionCtrl.closeOthers(scope)
          }
        })

        scope.toggleOpen = function ($event) {
          if (!scope.isDisabled) {
            if (!$event || $event.which === 32) {
              scope.isOpen = !scope.isOpen
            }
          }
        }

        var id = 'accordiongroup-' + scope.$id + '-' + Math.floor(Math.random() * 10000)
        scope.headingId = id + '-tab'
        scope.cardId = id + '-card'
      },
    }
  })

  // Use accordion-heading below an accordion-group to provide a heading containing HTML
  .directive('uibAccordionHeading', function () {
    return {
      transclude: true, // Grab the contents to be used as the heading
      template: '', // In effect remove this element!
      replace: true,
      require: '^uibAccordionGroup',
      link: function (scope, element, attrs, accordionGroupCtrl, transclude) {
        // Pass the heading to the accordion-group controller
        // so that it can be transcluded into the right place in the template
        // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
        accordionGroupCtrl.setHeading(transclude(scope, angular.noop))
      },
    }
  })

  // Use in the accordion-group template to indicate where you want the heading to be transcluded
  // You must provide the property on the accordion-group controller that will hold the transcluded element
  .directive('uibAccordionTransclude', function () {
    return {
      require: '^uibAccordionGroup',
      link: function (scope, element, attrs, controller) {
        scope.$watch(
          function () {
            return controller[attrs.uibAccordionTransclude]
          },
          function (heading) {
            if (heading) {
              var elem = angular.element(element[0].querySelector(getHeaderSelectors()))
              elem.html('')
              elem.append(heading)
            }
          }
        )
      },
    }

    function getHeaderSelectors() {
      return (
        'uib-accordion-header,' +
        'data-uib-accordion-header,' +
        'x-uib-accordion-header,' +
        'uib\\:accordion-header,' +
        '[uib-accordion-header],' +
        '[data-uib-accordion-header],' +
        '[x-uib-accordion-header]'
      )
    }
  })

angular
  .module('ui.bootstrap.alert', [])

  .controller('UibAlertController', [
    '$scope',
    '$element',
    '$attrs',
    '$interpolate',
    '$timeout',
    function ($scope, $element, $attrs, $interpolate, $timeout) {
      $scope.closeable = !!$attrs.close
      $element.addClass('alert')
      $attrs.$set('role', 'alert')
      if ($scope.closeable) {
        $element.addClass('alert-dismissible')
      }

      var dismissOnTimeout = angular.isDefined($attrs.dismissOnTimeout)
        ? $interpolate($attrs.dismissOnTimeout)($scope.$parent)
        : null

      if (dismissOnTimeout) {
        $timeout(function () {
          $scope.close()
        }, parseInt(dismissOnTimeout, 10))
      }
    },
  ])

  .directive('uibAlert', function () {
    return {
      controller: 'UibAlertController',
      controllerAs: 'alert',
      restrict: 'A',
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/alert/alert.html'
      },
      transclude: true,
      scope: {
        close: '&',
      },
    }
  })

angular
  .module('ui.bootstrap.buttons', [])

  .constant('uibButtonConfig', {
    activeClass: 'active',
    toggleEvent: 'click',
  })

  .controller('UibButtonsController', [
    'uibButtonConfig',
    function (buttonConfig) {
      this.activeClass = buttonConfig.activeClass || 'active'
      this.toggleEvent = buttonConfig.toggleEvent || 'click'
    },
  ])

  .directive('uibBtnRadio', [
    '$parse',
    function ($parse) {
      return {
        require: ['uibBtnRadio', 'ngModel'],
        controller: 'UibButtonsController',
        controllerAs: 'buttons',
        link: function (scope, element, attrs, ctrls) {
          var buttonsCtrl = ctrls[0],
            ngModelCtrl = ctrls[1]
          var uncheckableExpr = $parse(attrs.uibUncheckable)

          element.find('input').css({ display: 'none' })

          //model -> UI
          ngModelCtrl.$render = function () {
            element.toggleClass(
              buttonsCtrl.activeClass,
              angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.uibBtnRadio))
            )
          }

          //ui->model
          element.on(buttonsCtrl.toggleEvent, function () {
            if (attrs.disabled) {
              return
            }

            var isActive = element.hasClass(buttonsCtrl.activeClass)

            if (!isActive || angular.isDefined(attrs.uncheckable)) {
              scope.$apply(function () {
                ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.uibBtnRadio))
                ngModelCtrl.$render()
              })
            }
          })

          if (attrs.uibUncheckable) {
            scope.$watch(uncheckableExpr, function (uncheckable) {
              attrs.$set('uncheckable', uncheckable ? '' : undefined)
            })
          }
        },
      }
    },
  ])

  .directive('uibBtnCheckbox', function () {
    return {
      require: ['uibBtnCheckbox', 'ngModel'],
      controller: 'UibButtonsController',
      controllerAs: 'button',
      link: function (scope, element, attrs, ctrls) {
        var buttonsCtrl = ctrls[0],
          ngModelCtrl = ctrls[1]

        element.find('input').css({ display: 'none' })

        function getTrueValue() {
          return getCheckboxValue(attrs.btnCheckboxTrue, true)
        }

        function getFalseValue() {
          return getCheckboxValue(attrs.btnCheckboxFalse, false)
        }

        function getCheckboxValue(attribute, defaultValue) {
          return angular.isDefined(attribute) ? scope.$eval(attribute) : defaultValue
        }

        //model -> UI
        ngModelCtrl.$render = function () {
          element.toggleClass(
            buttonsCtrl.activeClass,
            angular.equals(ngModelCtrl.$modelValue, getTrueValue())
          )
        }

        //ui->model
        element.on(buttonsCtrl.toggleEvent, function () {
          if (attrs.disabled) {
            return
          }

          scope.$apply(function () {
            ngModelCtrl.$setViewValue(
              element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue()
            )
            ngModelCtrl.$render()
          })
        })
      },
    }
  })

angular
  .module('ui.bootstrap.carousel', [])

  .controller('UibCarouselController', [
    '$scope',
    '$element',
    '$interval',
    '$timeout',
    '$animate',
    function ($scope, $element, $interval, $timeout, $animate) {
      var self = this,
        slides = (self.slides = $scope.slides = []),
        SLIDE_DIRECTION = 'uib-slideDirection',
        currentIndex = $scope.active,
        currentInterval,
        isPlaying

      var destroyed = false
      $element.addClass('carousel')

      self.addSlide = function (slide, element) {
        slides.push({
          slide: slide,
          element: element,
        })
        slides.sort(function (a, b) {
          return +a.slide.index - +b.slide.index
        })
        //if this is the first slide or the slide is set to active, select it
        if (
          slide.index === $scope.active ||
          (slides.length === 1 && !angular.isNumber($scope.active))
        ) {
          if ($scope.$currentTransition) {
            $scope.$currentTransition = null
          }

          currentIndex = slide.index
          $scope.active = slide.index
          setActive(currentIndex)
          self.select(slides[findSlideIndex(slide)])
          if (slides.length === 1) {
            $scope.play()
          }
        }
      }

      self.getCurrentIndex = function () {
        for (var i = 0; i < slides.length; i++) {
          if (slides[i].slide.index === currentIndex) {
            return i
          }
        }
      }

      self.next = $scope.next = function () {
        var newIndex = (self.getCurrentIndex() + 1) % slides.length

        if (newIndex === 0 && $scope.noWrap()) {
          $scope.pause()
          return
        }

        return self.select(slides[newIndex], 'next')
      }

      self.prev = $scope.prev = function () {
        var newIndex =
          self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1

        if ($scope.noWrap() && newIndex === slides.length - 1) {
          $scope.pause()
          return
        }

        return self.select(slides[newIndex], 'prev')
      }

      self.removeSlide = function (slide) {
        var index = findSlideIndex(slide)

        //get the index of the slide inside the carousel
        slides.splice(index, 1)
        if (slides.length > 0 && currentIndex === index) {
          if (index >= slides.length) {
            currentIndex = slides.length - 1
            $scope.active = currentIndex
            setActive(currentIndex)
            self.select(slides[slides.length - 1])
          } else {
            currentIndex = index
            $scope.active = currentIndex
            setActive(currentIndex)
            self.select(slides[index])
          }
        } else if (currentIndex > index) {
          currentIndex--
          $scope.active = currentIndex
        }

        //clean the active value when no more slide
        if (slides.length === 0) {
          currentIndex = null
          $scope.active = null
        }
      }

      /* direction: "prev" or "next" */
      self.select = $scope.select = function (nextSlide, direction) {
        var nextIndex = findSlideIndex(nextSlide.slide)
        //Decide direction if it's not given
        if (direction === undefined) {
          direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev'
        }
        //Prevent this user-triggered transition from occurring if there is already one in progress
        if (nextSlide.slide.index !== currentIndex && !$scope.$currentTransition) {
          goNext(nextSlide.slide, nextIndex, direction)
        }
      }

      /* Allow outside people to call indexOf on slides array */
      $scope.indexOfSlide = function (slide) {
        return +slide.slide.index
      }

      $scope.isActive = function (slide) {
        return $scope.active === slide.slide.index
      }

      $scope.isPrevDisabled = function () {
        return $scope.active === 0 && $scope.noWrap()
      }

      $scope.isNextDisabled = function () {
        return $scope.active === slides.length - 1 && $scope.noWrap()
      }

      $scope.pause = function () {
        if (!$scope.noPause) {
          isPlaying = false
          resetTimer()
        }
      }

      $scope.play = function () {
        if (!isPlaying) {
          isPlaying = true
          restartTimer()
        }
      }

      $element.on('mouseenter', $scope.pause)
      $element.on('mouseleave', $scope.play)

      $scope.$on('$destroy', function () {
        destroyed = true
        resetTimer()
      })

      $scope.$watch('noTransition', function (noTransition) {
        $animate.enabled($element, !noTransition)
      })

      $scope.$watch('interval', restartTimer)

      $scope.$watchCollection('slides', resetTransition)

      $scope.$watch('active', function (index) {
        if (angular.isNumber(index) && currentIndex !== index) {
          for (var i = 0; i < slides.length; i++) {
            if (slides[i].slide.index === index) {
              index = i
              break
            }
          }

          var slide = slides[index]
          if (slide) {
            setActive(index)
            self.select(slides[index])
            currentIndex = index
          }
        }
      })

      function getSlideByIndex(index) {
        for (var i = 0, l = slides.length; i < l; ++i) {
          if (slides[i].index === index) {
            return slides[i]
          }
        }
      }

      function setActive(index) {
        for (var i = 0; i < slides.length; i++) {
          slides[i].slide.active = i === index
        }
      }

      function goNext(slide, index, direction) {
        if (destroyed) {
          return
        }

        angular.extend(slide, { direction: direction })
        angular.extend(slides[currentIndex].slide || {}, { direction: direction })
        if (
          $animate.enabled($element) &&
          !$scope.$currentTransition &&
          slides[index].element &&
          self.slides.length > 1
        ) {
          slides[index].element.data(SLIDE_DIRECTION, slide.direction)
          var currentIdx = self.getCurrentIndex()

          if (angular.isNumber(currentIdx) && slides[currentIdx].element) {
            slides[currentIdx].element.data(SLIDE_DIRECTION, slide.direction)
          }

          $scope.$currentTransition = true
          $animate.on('addClass', slides[index].element, function (element, phase) {
            if (phase === 'close') {
              $scope.$currentTransition = null
              $animate.off('addClass', element)
            }
          })
        }

        $scope.active = slide.index
        currentIndex = slide.index
        setActive(index)

        //every time you change slides, reset the timer
        restartTimer()
      }

      function findSlideIndex(slide) {
        for (var i = 0; i < slides.length; i++) {
          if (slides[i].slide === slide) {
            return i
          }
        }
      }

      function resetTimer() {
        if (currentInterval) {
          $interval.cancel(currentInterval)
          currentInterval = null
        }
      }

      function resetTransition(slides) {
        if (!slides.length) {
          $scope.$currentTransition = null
        }
      }

      function restartTimer() {
        resetTimer()
        var interval = +$scope.interval
        if (!isNaN(interval) && interval > 0) {
          currentInterval = $interval(timerFn, interval)
        }
      }

      function timerFn() {
        var interval = +$scope.interval
        if (isPlaying && !isNaN(interval) && interval > 0 && slides.length) {
          $scope.next()
        } else {
          $scope.pause()
        }
      }
    },
  ])

  .directive('uibCarousel', function () {
    return {
      transclude: true,
      controller: 'UibCarouselController',
      controllerAs: 'carousel',
      restrict: 'A',
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/carousel/carousel.html'
      },
      scope: {
        active: '=?',
        interval: '=',
        noTransition: '=',
        noPause: '=',
        noWrap: '&',
      },
    }
  })

  .directive('uibSlide', [
    '$animate',
    function ($animate) {
      return {
        require: '^uibCarousel',
        restrict: 'A',
        transclude: true,
        templateUrl: function (element, attrs) {
          return attrs.templateUrl || 'uib/template/carousel/slide.html'
        },
        scope: {
          actual: '=?',
          index: '=?',
        },
        link: function (scope, element, attrs, carouselCtrl) {
          element.addClass('carousel-item')
          carouselCtrl.addSlide(scope, element)
          //when the scope is destroyed then remove the slide from the current slides array
          scope.$on('$destroy', function () {
            carouselCtrl.removeSlide(scope)
          })

          scope.$watch('active', function (active) {
            $animate[active ? 'addClass' : 'removeClass'](element, 'active')
          })
        },
      }
    },
  ])

  .animation('.carousel-item', [
    '$animateCss',
    function ($animateCss) {
      var SLIDE_DIRECTION = 'uib-slideDirection'
      var classPrefix = 'carousel-item-'

      function removeClass(element, className, callback) {
        element.removeClass(className)
        if (callback) {
          callback()
        }
      }

      return {
        beforeAddClass: function (element, className, done) {
          if (className === 'active') {
            var stopped = false
            var direction = element.data(SLIDE_DIRECTION)
            var directionClass = direction === 'next' ? classPrefix + 'left' : classPrefix + 'right'
            var removeClassFn = removeClass.bind(
              this,
              element,
              [directionClass, classPrefix + direction].join(' '),
              done
            )
            element.addClass(classPrefix + direction)

            $animateCss(element, { addClass: directionClass }).start().done(removeClassFn)

            return function () {
              stopped = true
            }
          }
          done()
        },
        beforeRemoveClass: function (element, className, done) {
          if (className === 'active') {
            var stopped = false
            var direction = element.data(SLIDE_DIRECTION)
            var directionClass = direction === 'next' ? classPrefix + 'left' : classPrefix + 'right'
            var removeClassFn = removeClass.bind(this, element, directionClass, done)

            $animateCss(element, { addClass: directionClass }).start().done(removeClassFn)

            return function () {
              stopped = true
            }
          }
          done()
        },
      }
    },
  ])

angular.module('ui.bootstrap.common', [])

angular
  .module('ui.bootstrap.dateparser', [])

  .service('uibDateParser', [
    '$log',
    '$locale',
    'dateFilter',
    'orderByFilter',
    'filterFilter',
    function ($log, $locale, dateFilter, orderByFilter, filterFilter) {
      // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
      var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g

      var localeId
      var formatCodeToRegex

      this.init = function () {
        localeId = $locale.id

        this.parsers = {}
        this.formatters = {}

        formatCodeToRegex = [
          {
            key: 'yyyy',
            regex: '\\d{4}',
            apply: function (value) {
              this.year = +value
            },
            formatter: function (date) {
              var _date = new Date()
              _date.setFullYear(Math.abs(date.getFullYear()))
              return dateFilter(_date, 'yyyy')
            },
          },
          {
            key: 'yy',
            regex: '\\d{2}',
            apply: function (value) {
              value = +value
              this.year = value < 69 ? value + 2000 : value + 1900
            },
            formatter: function (date) {
              var _date = new Date()
              _date.setFullYear(Math.abs(date.getFullYear()))
              return dateFilter(_date, 'yy')
            },
          },
          {
            key: 'y',
            regex: '\\d{1,4}',
            apply: function (value) {
              this.year = +value
            },
            formatter: function (date) {
              var _date = new Date()
              _date.setFullYear(Math.abs(date.getFullYear()))
              return dateFilter(_date, 'y')
            },
          },
          {
            key: 'M!',
            regex: '0?[1-9]|1[0-2]',
            apply: function (value) {
              this.month = value - 1
            },
            formatter: function (date) {
              var value = date.getMonth()
              if (/^[0-9]$/.test(value)) {
                return dateFilter(date, 'MM')
              }

              return dateFilter(date, 'M')
            },
          },
          {
            key: 'MMMM',
            regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
            apply: function (value) {
              this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value)
            },
            formatter: function (date) {
              return dateFilter(date, 'MMMM')
            },
          },
          {
            key: 'MMM',
            regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
            apply: function (value) {
              this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value)
            },
            formatter: function (date) {
              return dateFilter(date, 'MMM')
            },
          },
          {
            key: 'MM',
            regex: '0[1-9]|1[0-2]',
            apply: function (value) {
              this.month = value - 1
            },
            formatter: function (date) {
              return dateFilter(date, 'MM')
            },
          },
          {
            key: 'M',
            regex: '[1-9]|1[0-2]',
            apply: function (value) {
              this.month = value - 1
            },
            formatter: function (date) {
              return dateFilter(date, 'M')
            },
          },
          {
            key: 'd!',
            regex: '[0-2]?[0-9]{1}|3[0-1]{1}',
            apply: function (value) {
              this.date = +value
            },
            formatter: function (date) {
              var value = date.getDate()
              if (/^[1-9]$/.test(value)) {
                return dateFilter(date, 'dd')
              }

              return dateFilter(date, 'd')
            },
          },
          {
            key: 'dd',
            regex: '[0-2][0-9]{1}|3[0-1]{1}',
            apply: function (value) {
              this.date = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'dd')
            },
          },
          {
            key: 'd',
            regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
            apply: function (value) {
              this.date = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'd')
            },
          },
          {
            key: 'EEEE',
            regex: $locale.DATETIME_FORMATS.DAY.join('|'),
            formatter: function (date) {
              return dateFilter(date, 'EEEE')
            },
          },
          {
            key: 'EEE',
            regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
            formatter: function (date) {
              return dateFilter(date, 'EEE')
            },
          },
          {
            key: 'HH',
            regex: '(?:0|1)[0-9]|2[0-3]',
            apply: function (value) {
              this.hours = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'HH')
            },
          },
          {
            key: 'hh',
            regex: '0[0-9]|1[0-2]',
            apply: function (value) {
              this.hours = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'hh')
            },
          },
          {
            key: 'H',
            regex: '1?[0-9]|2[0-3]',
            apply: function (value) {
              this.hours = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'H')
            },
          },
          {
            key: 'h',
            regex: '[0-9]|1[0-2]',
            apply: function (value) {
              this.hours = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'h')
            },
          },
          {
            key: 'mm',
            regex: '[0-5][0-9]',
            apply: function (value) {
              this.minutes = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'mm')
            },
          },
          {
            key: 'm',
            regex: '[0-9]|[1-5][0-9]',
            apply: function (value) {
              this.minutes = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'm')
            },
          },
          {
            key: 'sss',
            regex: '[0-9][0-9][0-9]',
            apply: function (value) {
              this.milliseconds = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'sss')
            },
          },
          {
            key: 'ss',
            regex: '[0-5][0-9]',
            apply: function (value) {
              this.seconds = +value
            },
            formatter: function (date) {
              return dateFilter(date, 'ss')
            },
          },
          {
            key: 's',
            regex: '[0-9]|[1-5][0-9]',
            apply: function (value) {
              this.seconds = +value
            },
            formatter: function (date) {
              return dateFilter(date, 's')
            },
          },
          {
            key: 'a',
            regex: $locale.DATETIME_FORMATS.AMPMS.join('|'),
            apply: function (value) {
              if (this.hours === 12) {
                this.hours = 0
              }

              if (value === 'PM') {
                this.hours += 12
              }
            },
            formatter: function (date) {
              return dateFilter(date, 'a')
            },
          },
          {
            key: 'Z',
            regex: '[+-]\\d{4}',
            apply: function (value) {
              var matches = value.match(/([+-])(\d{2})(\d{2})/),
                sign = matches[1],
                hours = matches[2],
                minutes = matches[3]
              this.hours += toInt(sign + hours)
              this.minutes += toInt(sign + minutes)
            },
            formatter: function (date) {
              return dateFilter(date, 'Z')
            },
          },
          {
            key: 'ww',
            regex: '[0-4][0-9]|5[0-3]',
            formatter: function (date) {
              return dateFilter(date, 'ww')
            },
          },
          {
            key: 'w',
            regex: '[0-9]|[1-4][0-9]|5[0-3]',
            formatter: function (date) {
              return dateFilter(date, 'w')
            },
          },
          {
            key: 'GGGG',
            regex: $locale.DATETIME_FORMATS.ERANAMES.join('|').replace(/\s/g, '\\s'),
            formatter: function (date) {
              return dateFilter(date, 'GGGG')
            },
          },
          {
            key: 'GGG',
            regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
            formatter: function (date) {
              return dateFilter(date, 'GGG')
            },
          },
          {
            key: 'GG',
            regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
            formatter: function (date) {
              return dateFilter(date, 'GG')
            },
          },
          {
            key: 'G',
            regex: $locale.DATETIME_FORMATS.ERAS.join('|'),
            formatter: function (date) {
              return dateFilter(date, 'G')
            },
          },
        ]

        if (angular.version.major >= 1 && angular.version.minor > 4) {
          formatCodeToRegex.push({
            key: 'LLLL',
            regex: $locale.DATETIME_FORMATS.STANDALONEMONTH.join('|'),
            apply: function (value) {
              this.month = $locale.DATETIME_FORMATS.STANDALONEMONTH.indexOf(value)
            },
            formatter: function (date) {
              return dateFilter(date, 'LLLL')
            },
          })
        }
      }

      this.init()

      function getFormatCodeToRegex(key) {
        return filterFilter(formatCodeToRegex, { key: key }, true)[0]
      }

      this.getParser = function (key) {
        var f = getFormatCodeToRegex(key)
        return (f && f.apply) || null
      }

      this.overrideParser = function (key, parser) {
        var f = getFormatCodeToRegex(key)
        if (f && angular.isFunction(parser)) {
          this.parsers = {}
          f.apply = parser
        }
      }.bind(this)

      function createParser(format) {
        var map = [],
          regex = format.split('')

        // check for literal values
        var quoteIndex = format.indexOf("'")
        if (quoteIndex > -1) {
          var inLiteral = false
          format = format.split('')
          for (var i = quoteIndex; i < format.length; i++) {
            if (inLiteral) {
              if (format[i] === "'") {
                if (i + 1 < format.length && format[i + 1] === "'") {
                  // escaped single quote
                  format[i + 1] = '$'
                  regex[i + 1] = ''
                } else {
                  // end of literal
                  regex[i] = ''
                  inLiteral = false
                }
              }
              format[i] = '$'
            } else {
              if (format[i] === "'") {
                // start of literal
                format[i] = '$'
                regex[i] = ''
                inLiteral = true
              }
            }
          }

          format = format.join('')
        }

        angular.forEach(formatCodeToRegex, function (data) {
          var index = format.indexOf(data.key)

          if (index > -1) {
            format = format.split('')

            regex[index] = '(' + data.regex + ')'
            format[index] = '$' // Custom symbol to define consumed part of format
            for (var i = index + 1, n = index + data.key.length; i < n; i++) {
              regex[i] = ''
              format[i] = '$'
            }
            format = format.join('')

            map.push({
              index: index,
              key: data.key,
              apply: data.apply,
              matcher: data.regex,
            })
          }
        })

        return {
          regex: new RegExp('^' + regex.join('') + '$'),
          map: orderByFilter(map, 'index'),
        }
      }

      function createFormatter(format) {
        var formatters = []
        var i = 0
        var formatter, literalIdx
        while (i < format.length) {
          if (angular.isNumber(literalIdx)) {
            if (format.charAt(i) === "'") {
              if (i + 1 >= format.length || format.charAt(i + 1) !== "'") {
                formatters.push(constructLiteralFormatter(format, literalIdx, i))
                literalIdx = null
              }
            } else if (i === format.length) {
              while (literalIdx < format.length) {
                formatter = constructFormatterFromIdx(format, literalIdx)
                formatters.push(formatter)
                literalIdx = formatter.endIdx
              }
            }

            i++
            continue
          }

          if (format.charAt(i) === "'") {
            literalIdx = i
            i++
            continue
          }

          formatter = constructFormatterFromIdx(format, i)

          formatters.push(formatter.parser)
          i = formatter.endIdx
        }

        return formatters
      }

      function constructLiteralFormatter(format, literalIdx, endIdx) {
        return function () {
          return format.substr(literalIdx + 1, endIdx - literalIdx - 1)
        }
      }

      function constructFormatterFromIdx(format, i) {
        var currentPosStr = format.substr(i)
        for (var j = 0; j < formatCodeToRegex.length; j++) {
          if (new RegExp('^' + formatCodeToRegex[j].key).test(currentPosStr)) {
            var data = formatCodeToRegex[j]
            return {
              endIdx: i + data.key.length,
              parser: data.formatter,
            }
          }
        }

        return {
          endIdx: i + 1,
          parser: function () {
            return currentPosStr.charAt(0)
          },
        }
      }

      this.filter = function (date, format) {
        if (!angular.isDate(date) || isNaN(date) || !format) {
          return ''
        }

        format = $locale.DATETIME_FORMATS[format] || format

        if ($locale.id !== localeId) {
          this.init()
        }

        if (!this.formatters[format]) {
          this.formatters[format] = createFormatter(format)
        }

        var formatters = this.formatters[format]

        return formatters.reduce(function (str, formatter) {
          return str + formatter(date)
        }, '')
      }

      this.parse = function (input, format, baseDate) {
        if (!angular.isString(input) || !format) {
          return input
        }

        format = $locale.DATETIME_FORMATS[format] || format
        format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&')

        if ($locale.id !== localeId) {
          this.init()
        }

        if (!this.parsers[format]) {
          this.parsers[format] = createParser(format, 'apply')
        }

        var parser = this.parsers[format],
          regex = parser.regex,
          map = parser.map,
          results = input.match(regex),
          tzOffset = false
        if (results && results.length) {
          var fields, dt
          if (angular.isDate(baseDate) && !isNaN(baseDate.getTime())) {
            fields = {
              year: baseDate.getFullYear(),
              month: baseDate.getMonth(),
              date: baseDate.getDate(),
              hours: baseDate.getHours(),
              minutes: baseDate.getMinutes(),
              seconds: baseDate.getSeconds(),
              milliseconds: baseDate.getMilliseconds(),
            }
          } else {
            if (baseDate) {
              $log.warn('dateparser:', 'baseDate is not a valid date')
            }
            fields = {
              year: 1900,
              month: 0,
              date: 1,
              hours: 0,
              minutes: 0,
              seconds: 0,
              milliseconds: 0,
            }
          }

          for (var i = 1, n = results.length; i < n; i++) {
            var mapper = map[i - 1]
            if (mapper.matcher === 'Z') {
              tzOffset = true
            }

            if (mapper.apply) {
              mapper.apply.call(fields, results[i])
            }
          }

          var datesetter = tzOffset ? Date.prototype.setUTCFullYear : Date.prototype.setFullYear
          var timesetter = tzOffset ? Date.prototype.setUTCHours : Date.prototype.setHours

          if (isValid(fields.year, fields.month, fields.date)) {
            if (angular.isDate(baseDate) && !isNaN(baseDate.getTime()) && !tzOffset) {
              dt = new Date(baseDate)
              datesetter.call(dt, fields.year, fields.month, fields.date)
              timesetter.call(dt, fields.hours, fields.minutes, fields.seconds, fields.milliseconds)
            } else {
              dt = new Date(0)
              datesetter.call(dt, fields.year, fields.month, fields.date)
              timesetter.call(
                dt,
                fields.hours || 0,
                fields.minutes || 0,
                fields.seconds || 0,
                fields.milliseconds || 0
              )
            }
          }

          return dt
        }
      }

      // Check if date is valid for specific month (and year for February).
      // Month: 0 = Jan, 1 = Feb, etc
      function isValid(year, month, date) {
        if (date < 1) {
          return false
        }

        if (month === 1 && date > 28) {
          return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0)
        }

        if (month === 3 || month === 5 || month === 8 || month === 10) {
          return date < 31
        }

        return true
      }

      function toInt(str) {
        return parseInt(str, 10)
      }

      this.toTimezone = toTimezone
      this.fromTimezone = fromTimezone
      this.timezoneToOffset = timezoneToOffset
      this.addDateMinutes = addDateMinutes
      this.convertTimezoneToLocal = convertTimezoneToLocal

      function toTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone) : date
      }

      function fromTimezone(date, timezone) {
        return date && timezone ? convertTimezoneToLocal(date, timezone, true) : date
      }

      //https://github.com/angular/angular.js/blob/622c42169699ec07fc6daaa19fe6d224e5d2f70e/src/Angular.js#L1207
      function timezoneToOffset(timezone, fallback) {
        timezone = timezone.replace(/:/g, '')
        var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000
        return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset
      }

      function addDateMinutes(date, minutes) {
        date = new Date(date.getTime())
        date.setMinutes(date.getMinutes() + minutes)
        return date
      }

      function convertTimezoneToLocal(date, timezone, reverse) {
        reverse = reverse ? -1 : 1
        var dateTimezoneOffset = date.getTimezoneOffset()
        var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset)
        return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset))
      }
    },
  ])

// Avoiding use of ng-class as it creates a lot of watchers when a class is to be applied to
// at most one element.
angular.module('ui.bootstrap.isClass', []).directive('uibIsClass', [
  '$animate',
  function ($animate) {
    //                    11111111          22222222
    var ON_REGEXP = /^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/
    //                    11111111           22222222
    var IS_REGEXP = /^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/

    var dataPerTracked = {}

    return {
      restrict: 'A',
      compile: function (tElement, tAttrs) {
        var linkedScopes = []
        var instances = []
        var expToData = {}
        var lastActivated = null
        var onExpMatches = tAttrs.uibIsClass.match(ON_REGEXP)
        var onExp = onExpMatches[2]
        var expsStr = onExpMatches[1]
        var exps = expsStr.split(',')

        return linkFn

        function linkFn(scope, element, attrs) {
          linkedScopes.push(scope)
          instances.push({
            scope: scope,
            element: element,
          })

          exps.forEach(function (exp, k) {
            addForExp(exp, scope)
          })

          scope.$on('$destroy', removeScope)
        }

        function addForExp(exp, scope) {
          var matches = exp.match(IS_REGEXP)
          var clazz = scope.$eval(matches[1])
          var compareWithExp = matches[2]
          var data = expToData[exp]
          if (!data) {
            var watchFn = function (compareWithVal) {
              var newActivated = null
              instances.some(function (instance) {
                var thisVal = instance.scope.$eval(onExp)
                if (thisVal === compareWithVal) {
                  newActivated = instance
                  return true
                }
              })
              if (data.lastActivated !== newActivated) {
                if (data.lastActivated) {
                  $animate.removeClass(data.lastActivated.element, clazz)
                }
                if (newActivated) {
                  $animate.addClass(newActivated.element, clazz)
                }
                data.lastActivated = newActivated
              }
            }
            expToData[exp] = data = {
              lastActivated: null,
              scope: scope,
              watchFn: watchFn,
              compareWithExp: compareWithExp,
              watcher: scope.$watch(compareWithExp, watchFn),
            }
          }
          data.watchFn(scope.$eval(compareWithExp))
        }

        function removeScope(e) {
          var removedScope = e.targetScope
          var index = linkedScopes.indexOf(removedScope)
          linkedScopes.splice(index, 1)
          instances.splice(index, 1)
          if (linkedScopes.length) {
            var newWatchScope = linkedScopes[0]
            angular.forEach(expToData, function (data) {
              if (data.scope === removedScope) {
                data.watcher = newWatchScope.$watch(data.compareWithExp, data.watchFn)
                data.scope = newWatchScope
              }
            })
          } else {
            expToData = {}
          }
        }
      },
    }
  },
])
angular
  .module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.isClass'])

  .value('$datepickerSuppressError', false)

  .value('$datepickerLiteralWarning', true)

  .constant('uibDatepickerConfig', {
    datepickerMode: 'day',
    formatDay: 'dd',
    formatMonth: 'MMMM',
    formatYear: 'yyyy',
    formatDayHeader: 'EEE',
    formatDayTitle: 'MMMM yyyy',
    formatMonthTitle: 'yyyy',
    maxDate: null,
    maxMode: 'year',
    minDate: null,
    minMode: 'day',
    monthColumns: 3,
    ngModelOptions: {},
    shortcutPropagation: false,
    showWeeks: true,
    yearColumns: 5,
    yearRows: 4,
  })

  .controller('UibDatepickerController', [
    '$scope',
    '$element',
    '$attrs',
    '$parse',
    '$interpolate',
    '$locale',
    '$log',
    'dateFilter',
    'uibDatepickerConfig',
    '$datepickerLiteralWarning',
    '$datepickerSuppressError',
    'uibDateParser',
    function (
      $scope,
      $element,
      $attrs,
      $parse,
      $interpolate,
      $locale,
      $log,
      dateFilter,
      datepickerConfig,
      $datepickerLiteralWarning,
      $datepickerSuppressError,
      dateParser
    ) {
      var self = this,
        ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl;
        ngModelOptions = {},
        watchListeners = []

      $element.addClass('uib-datepicker')
      $attrs.$set('role', 'application')

      if (!$scope.datepickerOptions) {
        $scope.datepickerOptions = {}
      }

      // Modes chain
      this.modes = ['day', 'month', 'year']

      ;[
        'customClass',
        'dateDisabled',
        'datepickerMode',
        'formatDay',
        'formatDayHeader',
        'formatDayTitle',
        'formatMonth',
        'formatMonthTitle',
        'formatYear',
        'maxDate',
        'maxMode',
        'minDate',
        'minMode',
        'monthColumns',
        'showWeeks',
        'shortcutPropagation',
        'startingDay',
        'yearColumns',
        'yearRows',
      ].forEach(function (key) {
        switch (key) {
          case 'customClass':
          case 'dateDisabled':
            $scope[key] = $scope.datepickerOptions[key] || angular.noop
            break
          case 'datepickerMode':
            $scope.datepickerMode = angular.isDefined($scope.datepickerOptions.datepickerMode)
              ? $scope.datepickerOptions.datepickerMode
              : datepickerConfig.datepickerMode
            break
          case 'formatDay':
          case 'formatDayHeader':
          case 'formatDayTitle':
          case 'formatMonth':
          case 'formatMonthTitle':
          case 'formatYear':
            self[key] = angular.isDefined($scope.datepickerOptions[key])
              ? $interpolate($scope.datepickerOptions[key])($scope.$parent)
              : datepickerConfig[key]
            break
          case 'monthColumns':
          case 'showWeeks':
          case 'shortcutPropagation':
          case 'yearColumns':
          case 'yearRows':
            self[key] = angular.isDefined($scope.datepickerOptions[key])
              ? $scope.datepickerOptions[key]
              : datepickerConfig[key]
            break
          case 'startingDay':
            if (angular.isDefined($scope.datepickerOptions.startingDay)) {
              self.startingDay = $scope.datepickerOptions.startingDay
            } else if (angular.isNumber(datepickerConfig.startingDay)) {
              self.startingDay = datepickerConfig.startingDay
            } else {
              self.startingDay = ($locale.DATETIME_FORMATS.FIRSTDAYOFWEEK + 8) % 7
            }

            break
          case 'maxDate':
          case 'minDate':
            $scope.$watch('datepickerOptions.' + key, function (value) {
              if (value) {
                if (angular.isDate(value)) {
                  self[key] = dateParser.fromTimezone(
                    new Date(value),
                    ngModelOptions.getOption('timezone')
                  )
                } else {
                  if ($datepickerLiteralWarning) {
                    $log.warn(
                      'Literal date support has been deprecated, please switch to date object usage'
                    )
                  }

                  self[key] = new Date(dateFilter(value, 'medium'))
                }
              } else {
                self[key] = datepickerConfig[key]
                  ? dateParser.fromTimezone(
                      new Date(datepickerConfig[key]),
                      ngModelOptions.getOption('timezone')
                    )
                  : null
              }

              self.refreshView()
            })

            break
          case 'maxMode':
          case 'minMode':
            if ($scope.datepickerOptions[key]) {
              $scope.$watch(
                function () {
                  return $scope.datepickerOptions[key]
                },
                function (value) {
                  self[key] = $scope[key] = angular.isDefined(value)
                    ? value
                    : $scope.datepickerOptions[key]
                  if (
                    (key === 'minMode' &&
                      self.modes.indexOf($scope.datepickerOptions.datepickerMode) <
                        self.modes.indexOf(self[key])) ||
                    (key === 'maxMode' &&
                      self.modes.indexOf($scope.datepickerOptions.datepickerMode) >
                        self.modes.indexOf(self[key]))
                  ) {
                    $scope.datepickerMode = self[key]
                    $scope.datepickerOptions.datepickerMode = self[key]
                  }
                }
              )
            } else {
              self[key] = $scope[key] = datepickerConfig[key] || null
            }

            break
        }
      })

      $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000)

      $scope.disabled = angular.isDefined($attrs.disabled) || false
      if (angular.isDefined($attrs.ngDisabled)) {
        watchListeners.push(
          $scope.$parent.$watch($attrs.ngDisabled, function (disabled) {
            $scope.disabled = disabled
            self.refreshView()
          })
        )
      }

      $scope.isActive = function (dateObject) {
        if (self.compare(dateObject.date, self.activeDate) === 0) {
          $scope.activeDateId = dateObject.uid
          return true
        }
        return false
      }

      this.init = function (ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_
        ngModelOptions = extractOptions(ngModelCtrl)

        if ($scope.datepickerOptions.initDate) {
          self.activeDate =
            dateParser.fromTimezone(
              $scope.datepickerOptions.initDate,
              ngModelOptions.getOption('timezone')
            ) || new Date()
          $scope.$watch('datepickerOptions.initDate', function (initDate) {
            if (
              initDate &&
              (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)
            ) {
              self.activeDate = dateParser.fromTimezone(
                initDate,
                ngModelOptions.getOption('timezone')
              )
              self.refreshView()
            }
          })
        } else {
          self.activeDate = new Date()
        }

        var date = ngModelCtrl.$modelValue ? new Date(ngModelCtrl.$modelValue) : new Date()
        this.activeDate = !isNaN(date)
          ? dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'))
          : dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'))

        ngModelCtrl.$render = function () {
          self.render()
        }
      }

      this.render = function () {
        if (ngModelCtrl.$viewValue) {
          var date = new Date(ngModelCtrl.$viewValue),
            isValid = !isNaN(date)

          if (isValid) {
            this.activeDate = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'))
          } else if (!$datepickerSuppressError) {
            $log.error('Datepicker directive: "ng-model" value must be a Date object')
          }
        }
        this.refreshView()
      }

      this.refreshView = function () {
        if (this.element) {
          $scope.selectedDt = null
          this._refreshView()
          if ($scope.activeDt) {
            $scope.activeDateId = $scope.activeDt.uid
          }

          var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null
          date = dateParser.fromTimezone(date, ngModelOptions.getOption('timezone'))
          ngModelCtrl.$setValidity(
            'dateDisabled',
            !date || (this.element && !this.isDisabled(date))
          )
        }
      }

      this.createDateObject = function (date, format) {
        var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null
        model = dateParser.fromTimezone(model, ngModelOptions.getOption('timezone'))
        var today = new Date()
        today = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'))
        var time = this.compare(date, today)
        var dt = {
          date: date,
          label: dateParser.filter(date, format),
          selected: model && this.compare(date, model) === 0,
          disabled: this.isDisabled(date),
          past: time < 0,
          current: time === 0,
          future: time > 0,
          customClass: this.customClass(date) || null,
        }

        if (model && this.compare(date, model) === 0) {
          $scope.selectedDt = dt
        }

        if (self.activeDate && this.compare(dt.date, self.activeDate) === 0) {
          $scope.activeDt = dt
        }

        return dt
      }

      this.isDisabled = function (date) {
        return (
          $scope.disabled ||
          (this.minDate && this.compare(date, this.minDate) < 0) ||
          (this.maxDate && this.compare(date, this.maxDate) > 0) ||
          ($scope.dateDisabled && $scope.dateDisabled({ date: date, mode: $scope.datepickerMode }))
        )
      }

      this.customClass = function (date) {
        return $scope.customClass({ date: date, mode: $scope.datepickerMode })
      }

      // Split array into smaller arrays
      this.split = function (arr, size) {
        var arrays = []
        while (arr.length > 0) {
          arrays.push(arr.splice(0, size))
        }
        return arrays
      }

      $scope.select = function (date) {
        if ($scope.datepickerMode === self.minMode) {
          var dt = ngModelCtrl.$viewValue
            ? dateParser.fromTimezone(
                new Date(ngModelCtrl.$viewValue),
                ngModelOptions.getOption('timezone')
              )
            : new Date(0, 0, 0, 0, 0, 0, 0)
          dt.setFullYear(date.getFullYear(), date.getMonth(), date.getDate())
          dt = dateParser.toTimezone(dt, ngModelOptions.getOption('timezone'))
          ngModelCtrl.$setViewValue(dt)
          ngModelCtrl.$render()
        } else {
          self.activeDate = date
          setMode(self.modes[self.modes.indexOf($scope.datepickerMode) - 1])

          $scope.$emit('uib:datepicker.mode')
        }

        $scope.$broadcast('uib:datepicker.focus')
      }

      $scope.move = function (direction) {
        var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
          month = self.activeDate.getMonth() + direction * (self.step.months || 0)
        self.activeDate.setFullYear(year, month, 1)
        self.refreshView()
      }

      $scope.toggleMode = function (direction) {
        direction = direction || 1

        if (
          ($scope.datepickerMode === self.maxMode && direction === 1) ||
          ($scope.datepickerMode === self.minMode && direction === -1)
        ) {
          return
        }

        setMode(self.modes[self.modes.indexOf($scope.datepickerMode) + direction])

        $scope.$emit('uib:datepicker.mode')
      }

      // Key event mapper
      $scope.keys = {
        13: 'enter',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
      }

      var focusElement = function () {
        self.element[0].focus()
      }

      // Listen for focus requests from popup directive
      $scope.$on('uib:datepicker.focus', focusElement)

      $scope.keydown = function (evt) {
        var key = $scope.keys[evt.which]

        if (!key || evt.shiftKey || evt.altKey || $scope.disabled) {
          return
        }

        evt.preventDefault()
        if (!self.shortcutPropagation) {
          evt.stopPropagation()
        }

        if (key === 'enter' || key === 'space') {
          if (self.isDisabled(self.activeDate)) {
            return // do nothing
          }
          $scope.select(self.activeDate)
        } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
          $scope.toggleMode(key === 'up' ? 1 : -1)
        } else {
          self.handleKeyDown(key, evt)
          self.refreshView()
        }
      }

      $element.on('keydown', function (evt) {
        $scope.$apply(function () {
          $scope.keydown(evt)
        })
      })

      $scope.$on('$destroy', function () {
        //Clear all watch listeners on destroy
        while (watchListeners.length) {
          watchListeners.shift()()
        }
      })

      function setMode(mode) {
        $scope.datepickerMode = mode
        $scope.datepickerOptions.datepickerMode = mode
      }

      function extractOptions(ngModelCtrl) {
        var ngModelOptions

        if (angular.version.minor < 6) {
          // in angular < 1.6 $options could be missing
          // guarantee a value
          ngModelOptions =
            ngModelCtrl.$options ||
            $scope.datepickerOptions.ngModelOptions ||
            datepickerConfig.ngModelOptions ||
            {}

          // mimic 1.6+ api
          ngModelOptions.getOption = function (key) {
            return ngModelOptions[key]
          }
        } else {
          // in angular >=1.6 $options is always present
          // ng-model-options defaults timezone to null; don't let its precedence squash a non-null value
          var timezone =
            ngModelCtrl.$options.getOption('timezone') ||
            ($scope.datepickerOptions.ngModelOptions
              ? $scope.datepickerOptions.ngModelOptions.timezone
              : null) ||
            (datepickerConfig.ngModelOptions ? datepickerConfig.ngModelOptions.timezone : null)

          // values passed to createChild override existing values
          ngModelOptions = ngModelCtrl.$options // start with a ModelOptions instance
            .createChild(datepickerConfig.ngModelOptions) // lowest precedence
            .createChild($scope.datepickerOptions.ngModelOptions)
            .createChild(ngModelCtrl.$options) // highest precedence
            .createChild({ timezone: timezone }) // to keep from squashing a non-null value
        }

        return ngModelOptions
      }
    },
  ])

  .controller('UibDaypickerController', [
    '$scope',
    '$element',
    'dateFilter',
    function (scope, $element, dateFilter) {
      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

      this.step = { months: 1 }
      this.element = $element
      function getDaysInMonth(year, month) {
        return month === 1 && year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)
          ? 29
          : DAYS_IN_MONTH[month]
      }

      this.init = function (ctrl) {
        angular.extend(ctrl, this)
        scope.showWeeks = ctrl.showWeeks
        ctrl.refreshView()
      }

      this.getDates = function (startDate, n) {
        var dates = new Array(n),
          current = new Date(startDate),
          i = 0,
          date
        while (i < n) {
          date = new Date(current)
          dates[i++] = date
          current.setDate(current.getDate() + 1)
        }
        return dates
      }

      this._refreshView = function () {
        var year = this.activeDate.getFullYear(),
          month = this.activeDate.getMonth(),
          firstDayOfMonth = new Date(this.activeDate)

        firstDayOfMonth.setFullYear(year, month, 1)

        var difference = this.startingDay - firstDayOfMonth.getDay(),
          numDisplayedFromPreviousMonth = difference > 0 ? 7 - difference : -difference,
          firstDate = new Date(firstDayOfMonth)

        if (numDisplayedFromPreviousMonth > 0) {
          firstDate.setDate(-numDisplayedFromPreviousMonth + 1)
        }

        // 42 is the number of days on a six-week calendar
        var days = this.getDates(firstDate, 42)
        for (var i = 0; i < 42; i++) {
          days[i] = angular.extend(this.createDateObject(days[i], this.formatDay), {
            secondary: days[i].getMonth() !== month,
            uid: scope.uniqueId + '-' + i,
          })
        }

        scope.labels = new Array(7)
        for (var j = 0; j < 7; j++) {
          scope.labels[j] = {
            abbr: dateFilter(days[j].date, this.formatDayHeader),
            full: dateFilter(days[j].date, 'EEEE'),
          }
        }

        scope.title = dateFilter(this.activeDate, this.formatDayTitle)
        scope.rows = this.split(days, 7)

        if (scope.showWeeks) {
          scope.weekNumbers = []
          var thursdayIndex = (4 + 7 - this.startingDay) % 7,
            numWeeks = scope.rows.length
          for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
            scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date))
          }
        }
      }

      this.compare = function (date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate())
        var _date2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate())
        _date1.setFullYear(date1.getFullYear())
        _date2.setFullYear(date2.getFullYear())
        return _date1 - _date2
      }

      function getISO8601WeekNumber(date) {
        var checkDate = new Date(date)
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)) // Thursday
        var time = checkDate.getTime()
        checkDate.setMonth(0) // Compare with Jan 1
        checkDate.setDate(1)
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1
      }

      this.handleKeyDown = function (key, evt) {
        var date = this.activeDate.getDate()

        if (key === 'left') {
          date = date - 1
        } else if (key === 'up') {
          date = date - 7
        } else if (key === 'right') {
          date = date + 1
        } else if (key === 'down') {
          date = date + 7
        } else if (key === 'pageup' || key === 'pagedown') {
          var month = this.activeDate.getMonth() + (key === 'pageup' ? -1 : 1)
          this.activeDate.setMonth(month, 1)
          date = Math.min(
            getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth()),
            date
          )
        } else if (key === 'home') {
          date = 1
        } else if (key === 'end') {
          date = getDaysInMonth(this.activeDate.getFullYear(), this.activeDate.getMonth())
        }
        this.activeDate.setDate(date)
      }
    },
  ])

  .controller('UibMonthpickerController', [
    '$scope',
    '$element',
    'dateFilter',
    function (scope, $element, dateFilter) {
      this.step = { years: 1 }
      this.element = $element

      this.init = function (ctrl) {
        angular.extend(ctrl, this)
        ctrl.refreshView()
      }

      this._refreshView = function () {
        var months = new Array(12),
          year = this.activeDate.getFullYear(),
          date

        for (var i = 0; i < 12; i++) {
          date = new Date(this.activeDate)
          date.setFullYear(year, i, 1)
          months[i] = angular.extend(this.createDateObject(date, this.formatMonth), {
            uid: scope.uniqueId + '-' + i,
          })
        }

        scope.title = dateFilter(this.activeDate, this.formatMonthTitle)
        scope.rows = this.split(months, this.monthColumns)
        scope.yearHeaderColspan = this.monthColumns > 3 ? this.monthColumns - 2 : 1
      }

      this.compare = function (date1, date2) {
        var _date1 = new Date(date1.getFullYear(), date1.getMonth())
        var _date2 = new Date(date2.getFullYear(), date2.getMonth())
        _date1.setFullYear(date1.getFullYear())
        _date2.setFullYear(date2.getFullYear())
        return _date1 - _date2
      }

      this.handleKeyDown = function (key, evt) {
        var date = this.activeDate.getMonth()

        if (key === 'left') {
          date = date - 1
        } else if (key === 'up') {
          date = date - this.monthColumns
        } else if (key === 'right') {
          date = date + 1
        } else if (key === 'down') {
          date = date + this.monthColumns
        } else if (key === 'pageup' || key === 'pagedown') {
          var year = this.activeDate.getFullYear() + (key === 'pageup' ? -1 : 1)
          this.activeDate.setFullYear(year)
        } else if (key === 'home') {
          date = 0
        } else if (key === 'end') {
          date = 11
        }
        this.activeDate.setMonth(date)
      }
    },
  ])

  .controller('UibYearpickerController', [
    '$scope',
    '$element',
    'dateFilter',
    function (scope, $element, dateFilter) {
      var columns, range
      this.element = $element

      function getStartingYear(year) {
        return parseInt((year - 1) / range, 10) * range + 1
      }

      this.yearpickerInit = function () {
        columns = this.yearColumns
        range = this.yearRows * columns
        this.step = { years: range }
      }

      this._refreshView = function () {
        var years = new Array(range),
          date

        for (var i = 0, start = getStartingYear(this.activeDate.getFullYear()); i < range; i++) {
          date = new Date(this.activeDate)
          date.setFullYear(start + i, 0, 1)
          years[i] = angular.extend(this.createDateObject(date, this.formatYear), {
            uid: scope.uniqueId + '-' + i,
          })
        }

        scope.title = [years[0].label, years[range - 1].label].join(' - ')
        scope.rows = this.split(years, columns)
        scope.columns = columns
      }

      this.compare = function (date1, date2) {
        return date1.getFullYear() - date2.getFullYear()
      }

      this.handleKeyDown = function (key, evt) {
        var date = this.activeDate.getFullYear()

        if (key === 'left') {
          date = date - 1
        } else if (key === 'up') {
          date = date - columns
        } else if (key === 'right') {
          date = date + 1
        } else if (key === 'down') {
          date = date + columns
        } else if (key === 'pageup' || key === 'pagedown') {
          date += (key === 'pageup' ? -1 : 1) * range
        } else if (key === 'home') {
          date = getStartingYear(this.activeDate.getFullYear())
        } else if (key === 'end') {
          date = getStartingYear(this.activeDate.getFullYear()) + range - 1
        }
        this.activeDate.setFullYear(date)
      }
    },
  ])

  .directive('uibDatepicker', function () {
    return {
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/datepicker/datepicker.html'
      },
      scope: {
        datepickerOptions: '=?',
      },
      require: ['uibDatepicker', '^ngModel'],
      restrict: 'A',
      controller: 'UibDatepickerController',
      controllerAs: 'datepicker',
      link: function (scope, element, attrs, ctrls) {
        var datepickerCtrl = ctrls[0],
          ngModelCtrl = ctrls[1]

        datepickerCtrl.init(ngModelCtrl)
      },
    }
  })

  .directive('uibDaypicker', function () {
    return {
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/datepicker/day.html'
      },
      require: ['^uibDatepicker', 'uibDaypicker'],
      restrict: 'A',
      controller: 'UibDaypickerController',
      link: function (scope, element, attrs, ctrls) {
        var datepickerCtrl = ctrls[0],
          daypickerCtrl = ctrls[1]

        daypickerCtrl.init(datepickerCtrl)
      },
    }
  })

  .directive('uibMonthpicker', function () {
    return {
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/datepicker/month.html'
      },
      require: ['^uibDatepicker', 'uibMonthpicker'],
      restrict: 'A',
      controller: 'UibMonthpickerController',
      link: function (scope, element, attrs, ctrls) {
        var datepickerCtrl = ctrls[0],
          monthpickerCtrl = ctrls[1]

        monthpickerCtrl.init(datepickerCtrl)
      },
    }
  })

  .directive('uibYearpicker', function () {
    return {
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/datepicker/year.html'
      },
      require: ['^uibDatepicker', 'uibYearpicker'],
      restrict: 'A',
      controller: 'UibYearpickerController',
      link: function (scope, element, attrs, ctrls) {
        var ctrl = ctrls[0]
        angular.extend(ctrl, ctrls[1])
        ctrl.yearpickerInit()

        ctrl.refreshView()
      },
    }
  })

angular
  .module('ui.bootstrap.position', [])

  /**
   * A set of utility methods for working with the DOM.
   * It is meant to be used where we need to absolute-position elements in
   * relation to another element (this is the case for tooltips, popovers,
   * typeahead suggestions etc.).
   */
  .factory('$uibPosition', [
    '$document',
    '$window',
    function ($document, $window) {
      /**
       * Used by scrollbarWidth() function to cache scrollbar's width.
       * Do not access this variable directly, use scrollbarWidth() instead.
       */
      var SCROLLBAR_WIDTH
      /**
       * scrollbar on body and html element in IE and Edge overlay
       * content and should be considered 0 width.
       */
      var BODY_SCROLLBAR_WIDTH
      var OVERFLOW_REGEX = {
        normal: /(auto|scroll)/,
        hidden: /(auto|scroll|hidden)/,
      }
      var PLACEMENT_REGEX = {
        auto: /\s?auto?\s?/i,
        primary: /^(top|bottom|left|right)$/,
        secondary: /^(top|bottom|left|right|center)$/,
        vertical: /^(top|bottom)$/,
      }
      var BODY_REGEX = /(HTML|BODY)/

      return {
        /**
         * Provides a raw DOM element from a jQuery/jQLite element.
         *
         * @param {element} elem - The element to convert.
         *
         * @returns {element} A HTML element.
         */
        getRawNode: function (elem) {
          return elem.nodeName ? elem : elem[0] || elem
        },

        /**
         * Provides a parsed number for a style property.  Strips
         * units and casts invalid numbers to 0.
         *
         * @param {string} value - The style value to parse.
         *
         * @returns {number} A valid number.
         */
        parseStyle: function (value) {
          value = parseFloat(value)
          return isFinite(value) ? value : 0
        },

        /**
         * Provides the closest positioned ancestor.
         *
         * @param {element} element - The element to get the offest parent for.
         *
         * @returns {element} The closest positioned ancestor.
         */
        offsetParent: function (elem) {
          elem = this.getRawNode(elem)

          var offsetParent = elem.offsetParent || $document[0].documentElement

          function isStaticPositioned(el) {
            return ($window.getComputedStyle(el).position || 'static') === 'static'
          }

          while (
            offsetParent &&
            offsetParent !== $document[0].documentElement &&
            isStaticPositioned(offsetParent)
          ) {
            offsetParent = offsetParent.offsetParent
          }

          return offsetParent || $document[0].documentElement
        },

        /**
         * Provides the scrollbar width, concept from TWBS measureScrollbar()
         * function in https://github.com/twbs/bootstrap/blob/master/js/modal.js
         * In IE and Edge, scollbar on body and html element overlay and should
         * return a width of 0.
         *
         * @returns {number} The width of the browser scollbar.
         */
        scrollbarWidth: function (isBody) {
          if (isBody) {
            if (angular.isUndefined(BODY_SCROLLBAR_WIDTH)) {
              var bodyElem = $document.find('body')
              bodyElem.addClass('uib-position-body-scrollbar-measure')
              BODY_SCROLLBAR_WIDTH = $window.innerWidth - bodyElem[0].clientWidth
              BODY_SCROLLBAR_WIDTH = isFinite(BODY_SCROLLBAR_WIDTH) ? BODY_SCROLLBAR_WIDTH : 0
              bodyElem.removeClass('uib-position-body-scrollbar-measure')
            }
            return BODY_SCROLLBAR_WIDTH
          }

          if (angular.isUndefined(SCROLLBAR_WIDTH)) {
            var scrollElem = angular.element('<div class="uib-position-scrollbar-measure"></div>')
            $document.find('body').append(scrollElem)
            SCROLLBAR_WIDTH = scrollElem[0].offsetWidth - scrollElem[0].clientWidth
            SCROLLBAR_WIDTH = isFinite(SCROLLBAR_WIDTH) ? SCROLLBAR_WIDTH : 0
            scrollElem.remove()
          }

          return SCROLLBAR_WIDTH
        },

        /**
         * Provides the padding required on an element to replace the scrollbar.
         *
         * @returns {object} An object with the following properties:
         *   <ul>
         *     <li>**scrollbarWidth**: the width of the scrollbar</li>
         *     <li>**widthOverflow**: whether the the width is overflowing</li>
         *     <li>**right**: the amount of right padding on the element needed to replace the scrollbar</li>
         *     <li>**rightOriginal**: the amount of right padding currently on the element</li>
         *     <li>**heightOverflow**: whether the the height is overflowing</li>
         *     <li>**bottom**: the amount of bottom padding on the element needed to replace the scrollbar</li>
         *     <li>**bottomOriginal**: the amount of bottom padding currently on the element</li>
         *   </ul>
         */
        scrollbarPadding: function (elem) {
          elem = this.getRawNode(elem)

          var elemStyle = $window.getComputedStyle(elem)
          var paddingRight = this.parseStyle(elemStyle.paddingRight)
          var paddingBottom = this.parseStyle(elemStyle.paddingBottom)
          var scrollParent = this.scrollParent(elem, false, true)
          var scrollbarWidth = this.scrollbarWidth(BODY_REGEX.test(scrollParent.tagName))

          return {
            scrollbarWidth: scrollbarWidth,
            widthOverflow: scrollParent.scrollWidth > scrollParent.clientWidth,
            right: paddingRight + scrollbarWidth,
            originalRight: paddingRight,
            heightOverflow: scrollParent.scrollHeight > scrollParent.clientHeight,
            bottom: paddingBottom + scrollbarWidth,
            originalBottom: paddingBottom,
          }
        },

        /**
         * Checks to see if the element is scrollable.
         *
         * @param {element} elem - The element to check.
         * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
         *   default is false.
         *
         * @returns {boolean} Whether the element is scrollable.
         */
        isScrollable: function (elem, includeHidden) {
          elem = this.getRawNode(elem)

          var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal
          var elemStyle = $window.getComputedStyle(elem)
          return overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)
        },

        /**
         * Provides the closest scrollable ancestor.
         * A port of the jQuery UI scrollParent method:
         * https://github.com/jquery/jquery-ui/blob/master/ui/scroll-parent.js
         *
         * @param {element} elem - The element to find the scroll parent of.
         * @param {boolean=} [includeHidden=false] - Should scroll style of 'hidden' be considered,
         *   default is false.
         * @param {boolean=} [includeSelf=false] - Should the element being passed be
         * included in the scrollable llokup.
         *
         * @returns {element} A HTML element.
         */
        scrollParent: function (elem, includeHidden, includeSelf) {
          elem = this.getRawNode(elem)

          var overflowRegex = includeHidden ? OVERFLOW_REGEX.hidden : OVERFLOW_REGEX.normal
          var documentEl = $document[0].documentElement
          var elemStyle = $window.getComputedStyle(elem)
          if (
            includeSelf &&
            overflowRegex.test(elemStyle.overflow + elemStyle.overflowY + elemStyle.overflowX)
          ) {
            return elem
          }
          var excludeStatic = elemStyle.position === 'absolute'
          var scrollParent = elem.parentElement || documentEl

          if (scrollParent === documentEl || elemStyle.position === 'fixed') {
            return documentEl
          }

          while (scrollParent.parentElement && scrollParent !== documentEl) {
            var spStyle = $window.getComputedStyle(scrollParent)
            if (excludeStatic && spStyle.position !== 'static') {
              excludeStatic = false
            }

            if (
              !excludeStatic &&
              overflowRegex.test(spStyle.overflow + spStyle.overflowY + spStyle.overflowX)
            ) {
              break
            }
            scrollParent = scrollParent.parentElement
          }

          return scrollParent
        },

        /**
         * Provides read-only equivalent of jQuery's position function:
         * http://api.jquery.com/position/ - distance to closest positioned
         * ancestor.  Does not account for margins by default like jQuery position.
         *
         * @param {element} elem - The element to caclulate the position on.
         * @param {boolean=} [includeMargins=false] - Should margins be accounted
         * for, default is false.
         *
         * @returns {object} An object with the following properties:
         *   <ul>
         *     <li>**width**: the width of the element</li>
         *     <li>**height**: the height of the element</li>
         *     <li>**top**: distance to top edge of offset parent</li>
         *     <li>**left**: distance to left edge of offset parent</li>
         *   </ul>
         */
        position: function (elem, includeMagins) {
          elem = this.getRawNode(elem)

          var elemOffset = this.offset(elem)
          if (includeMagins) {
            var elemStyle = $window.getComputedStyle(elem)
            elemOffset.top -= this.parseStyle(elemStyle.marginTop)
            elemOffset.left -= this.parseStyle(elemStyle.marginLeft)
          }
          var parent = this.offsetParent(elem)
          var parentOffset = { top: 0, left: 0 }

          if (parent !== $document[0].documentElement) {
            parentOffset = this.offset(parent)
            parentOffset.top += parent.clientTop - parent.scrollTop
            parentOffset.left += parent.clientLeft - parent.scrollLeft
          }

          return {
            width: Math.round(
              angular.isNumber(elemOffset.width) ? elemOffset.width : elem.offsetWidth
            ),
            height: Math.round(
              angular.isNumber(elemOffset.height) ? elemOffset.height : elem.offsetHeight
            ),
            top: Math.round(elemOffset.top - parentOffset.top),
            left: Math.round(elemOffset.left - parentOffset.left),
          }
        },

        /**
         * Provides read-only equivalent of jQuery's offset function:
         * http://api.jquery.com/offset/ - distance to viewport.  Does
         * not account for borders, margins, or padding on the body
         * element.
         *
         * @param {element} elem - The element to calculate the offset on.
         *
         * @returns {object} An object with the following properties:
         *   <ul>
         *     <li>**width**: the width of the element</li>
         *     <li>**height**: the height of the element</li>
         *     <li>**top**: distance to top edge of viewport</li>
         *     <li>**right**: distance to bottom edge of viewport</li>
         *   </ul>
         */
        offset: function (elem, includeMargins) {
          elem = this.getRawNode(elem)

          var elemBCR = elem.getBoundingClientRect()
          var offset = {
            width: Math.round(angular.isNumber(elemBCR.width) ? elemBCR.width : elem.offsetWidth),
            height: Math.round(
              angular.isNumber(elemBCR.height) ? elemBCR.height : elem.offsetHeight
            ),
            top: Math.round(
              elemBCR.top + ($window.pageYOffset || $document[0].documentElement.scrollTop)
            ),
            left: Math.round(
              elemBCR.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
            ),
          }

          if (includeMargins) {
            var styles = window.getComputedStyle(elem)
            var verticalMargin =
              this.parseStyle(styles.marginTop) + this.parseStyle(styles.marginBottom)
            var horisontalMargin =
              this.parseStyle(styles.marginLeft) + this.parseStyle(styles.marginRight)

            offset.height += verticalMargin
            offset.width += horisontalMargin
          }

          return offset
        },

        /**
         * Provides offset distance to the closest scrollable ancestor
         * or viewport.  Accounts for border and scrollbar width.
         *
         * Right and bottom dimensions represent the distance to the
         * respective edge of the viewport element.  If the element
         * edge extends beyond the viewport, a negative value will be
         * reported.
         *
         * @param {element} elem - The element to get the viewport offset for.
         * @param {boolean=} [useDocument=false] - Should the viewport be the document element instead
         * of the first scrollable element, default is false.
         * @param {boolean=} [includePadding=true] - Should the padding on the offset parent element
         * be accounted for, default is true.
         *
         * @returns {object} An object with the following properties:
         *   <ul>
         *     <li>**top**: distance to the top content edge of viewport element</li>
         *     <li>**bottom**: distance to the bottom content edge of viewport element</li>
         *     <li>**left**: distance to the left content edge of viewport element</li>
         *     <li>**right**: distance to the right content edge of viewport element</li>
         *   </ul>
         */
        viewportOffset: function (elem, useDocument, includePadding) {
          elem = this.getRawNode(elem)
          includePadding = includePadding !== false ? true : false

          var elemBCR = elem.getBoundingClientRect()
          var offsetBCR = { top: 0, left: 0, bottom: 0, right: 0 }

          var offsetParent = useDocument ? $document[0].documentElement : this.scrollParent(elem)
          var offsetParentBCR = offsetParent.getBoundingClientRect()

          offsetBCR.top = offsetParentBCR.top + offsetParent.clientTop
          offsetBCR.left = offsetParentBCR.left + offsetParent.clientLeft
          if (offsetParent === $document[0].documentElement) {
            offsetBCR.top += $window.pageYOffset
            offsetBCR.left += $window.pageXOffset
          }
          offsetBCR.bottom = offsetBCR.top + offsetParent.clientHeight
          offsetBCR.right = offsetBCR.left + offsetParent.clientWidth

          if (includePadding) {
            var offsetParentStyle = $window.getComputedStyle(offsetParent)
            offsetBCR.top += this.parseStyle(offsetParentStyle.paddingTop)
            offsetBCR.bottom -= this.parseStyle(offsetParentStyle.paddingBottom)
            offsetBCR.left += this.parseStyle(offsetParentStyle.paddingLeft)
            offsetBCR.right -= this.parseStyle(offsetParentStyle.paddingRight)
          }

          return {
            top: Math.round(elemBCR.top - offsetBCR.top),
            bottom: Math.round(offsetBCR.bottom - elemBCR.bottom),
            left: Math.round(elemBCR.left - offsetBCR.left),
            right: Math.round(offsetBCR.right - elemBCR.right),
          }
        },

        /**
         * Provides an array of placement values parsed from a placement string.
         * Along with the 'auto' indicator, supported placement strings are:
         *   <ul>
         *     <li>top: element on top, horizontally centered on host element.</li>
         *     <li>top-left: element on top, left edge aligned with host element left edge.</li>
         *     <li>top-right: element on top, lerightft edge aligned with host element right edge.</li>
         *     <li>bottom: element on bottom, horizontally centered on host element.</li>
         *     <li>bottom-left: element on bottom, left edge aligned with host element left edge.</li>
         *     <li>bottom-right: element on bottom, right edge aligned with host element right edge.</li>
         *     <li>left: element on left, vertically centered on host element.</li>
         *     <li>left-top: element on left, top edge aligned with host element top edge.</li>
         *     <li>left-bottom: element on left, bottom edge aligned with host element bottom edge.</li>
         *     <li>right: element on right, vertically centered on host element.</li>
         *     <li>right-top: element on right, top edge aligned with host element top edge.</li>
         *     <li>right-bottom: element on right, bottom edge aligned with host element bottom edge.</li>
         *   </ul>
         * A placement string with an 'auto' indicator is expected to be
         * space separated from the placement, i.e: 'auto bottom-left'  If
         * the primary and secondary placement values do not match 'top,
         * bottom, left, right' then 'top' will be the primary placement and
         * 'center' will be the secondary placement.  If 'auto' is passed, true
         * will be returned as the 3rd value of the array.
         *
         * @param {string} placement - The placement string to parse.
         *
         * @returns {array} An array with the following values
         * <ul>
         *   <li>**[0]**: The primary placement.</li>
         *   <li>**[1]**: The secondary placement.</li>
         *   <li>**[2]**: If auto is passed: true, else undefined.</li>
         * </ul>
         */
        parsePlacement: function (placement) {
          var autoPlace = PLACEMENT_REGEX.auto.test(placement)
          if (autoPlace) {
            placement = placement.replace(PLACEMENT_REGEX.auto, '')
          }

          placement = placement.split('-')

          placement[0] = placement[0] || 'top'
          if (!PLACEMENT_REGEX.primary.test(placement[0])) {
            placement[0] = 'top'
          }

          placement[1] = placement[1] || 'center'
          if (!PLACEMENT_REGEX.secondary.test(placement[1])) {
            placement[1] = 'center'
          }

          if (autoPlace) {
            placement[2] = true
          } else {
            placement[2] = false
          }

          return placement
        },

        /**
         * Provides coordinates for an element to be positioned relative to
         * another element.  Passing 'auto' as part of the placement parameter
         * will enable smart placement - where the element fits. i.e:
         * 'auto left-top' will check to see if there is enough space to the left
         * of the hostElem to fit the targetElem, if not place right (same for secondary
         * top placement).  Available space is calculated using the viewportOffset
         * function.
         *
         * @param {element} hostElem - The element to position against.
         * @param {element} targetElem - The element to position.
         * @param {string=} [placement=top] - The placement for the targetElem,
         *   default is 'top'. 'center' is assumed as secondary placement for
         *   'top', 'left', 'right', and 'bottom' placements.  Available placements are:
         *   <ul>
         *     <li>top</li>
         *     <li>top-right</li>
         *     <li>top-left</li>
         *     <li>bottom</li>
         *     <li>bottom-left</li>
         *     <li>bottom-right</li>
         *     <li>left</li>
         *     <li>left-top</li>
         *     <li>left-bottom</li>
         *     <li>right</li>
         *     <li>right-top</li>
         *     <li>right-bottom</li>
         *   </ul>
         * @param {boolean=} [appendToBody=false] - Should the top and left values returned
         *   be calculated from the body element, default is false.
         * @param {boolean=} [includeMargins=false] - Should margins count into targetElem width
         *    in position claculation
         *
         * @returns {object} An object with the following properties:
         *   <ul>
         *     <li>**top**: Value for targetElem top.</li>
         *     <li>**left**: Value for targetElem left.</li>
         *     <li>**placement**: The resolved placement.</li>
         *   </ul>
         */
        positionElements: function (hostElem, targetElem, placement, appendToBody, includeMargins) {
          hostElem = this.getRawNode(hostElem)
          targetElem = this.getRawNode(targetElem)

          // need to read from prop to support tests.
          var targetWidth = angular.isDefined(targetElem.offsetWidth)
            ? targetElem.offsetWidth
            : targetElem.prop('offsetWidth')
          var targetHeight = angular.isDefined(targetElem.offsetHeight)
            ? targetElem.offsetHeight
            : targetElem.prop('offsetHeight')

          if (includeMargins) {
            var styles = window.getComputedStyle(targetElem)
            var verticalMargin =
              this.parseStyle(styles.marginTop) + this.parseStyle(styles.marginBottom)
            var horisontalMargin =
              this.parseStyle(styles.marginLeft) + this.parseStyle(styles.marginRight)

            targetHeight += verticalMargin
            targetWidth += horisontalMargin
          }

          placement = this.parsePlacement(placement)

          var hostElemPos = appendToBody ? this.offset(hostElem) : this.position(hostElem)
          var targetElemPos = { top: 0, left: 0, placement: '' }

          if (placement[2]) {
            var viewportOffset = this.viewportOffset(hostElem, appendToBody)

            var targetElemStyle = $window.getComputedStyle(targetElem)
            var adjustedSize = {
              width:
                targetWidth +
                Math.round(
                  Math.abs(
                    this.parseStyle(targetElemStyle.marginLeft) +
                      this.parseStyle(targetElemStyle.marginRight)
                  )
                ),
              height:
                targetHeight +
                Math.round(
                  Math.abs(
                    this.parseStyle(targetElemStyle.marginTop) +
                      this.parseStyle(targetElemStyle.marginBottom)
                  )
                ),
            }

            placement[0] =
              placement[0] === 'top' &&
              adjustedSize.height > viewportOffset.top &&
              adjustedSize.height <= viewportOffset.bottom
                ? 'bottom'
                : placement[0] === 'bottom' &&
                  adjustedSize.height > viewportOffset.bottom &&
                  adjustedSize.height <= viewportOffset.top
                ? 'top'
                : placement[0] === 'left' &&
                  adjustedSize.width > viewportOffset.left &&
                  adjustedSize.width <= viewportOffset.right
                ? 'right'
                : placement[0] === 'right' &&
                  adjustedSize.width > viewportOffset.right &&
                  adjustedSize.width <= viewportOffset.left
                ? 'left'
                : placement[0]

            placement[1] =
              placement[1] === 'top' &&
              adjustedSize.height - hostElemPos.height > viewportOffset.bottom &&
              adjustedSize.height - hostElemPos.height <= viewportOffset.top
                ? 'bottom'
                : placement[1] === 'bottom' &&
                  adjustedSize.height - hostElemPos.height > viewportOffset.top &&
                  adjustedSize.height - hostElemPos.height <= viewportOffset.bottom
                ? 'top'
                : placement[1] === 'left' &&
                  adjustedSize.width - hostElemPos.width > viewportOffset.right &&
                  adjustedSize.width - hostElemPos.width <= viewportOffset.left
                ? 'right'
                : placement[1] === 'right' &&
                  adjustedSize.width - hostElemPos.width > viewportOffset.left &&
                  adjustedSize.width - hostElemPos.width <= viewportOffset.right
                ? 'left'
                : placement[1]

            if (placement[1] === 'center') {
              if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                var xOverflow = hostElemPos.width / 2 - targetWidth / 2
                if (
                  viewportOffset.left + xOverflow < 0 &&
                  adjustedSize.width - hostElemPos.width <= viewportOffset.right
                ) {
                  placement[1] = 'left'
                } else if (
                  viewportOffset.right + xOverflow < 0 &&
                  adjustedSize.width - hostElemPos.width <= viewportOffset.left
                ) {
                  placement[1] = 'right'
                }
              } else {
                var yOverflow = hostElemPos.height / 2 - adjustedSize.height / 2
                if (
                  viewportOffset.top + yOverflow < 0 &&
                  adjustedSize.height - hostElemPos.height <= viewportOffset.bottom
                ) {
                  placement[1] = 'top'
                } else if (
                  viewportOffset.bottom + yOverflow < 0 &&
                  adjustedSize.height - hostElemPos.height <= viewportOffset.top
                ) {
                  placement[1] = 'bottom'
                }
              }
            }
          }

          switch (placement[0]) {
            case 'top':
              targetElemPos.top = hostElemPos.top - targetHeight
              break
            case 'bottom':
              targetElemPos.top = hostElemPos.top + hostElemPos.height
              break
            case 'left':
              targetElemPos.left = hostElemPos.left - targetWidth
              break
            case 'right':
              targetElemPos.left = hostElemPos.left + hostElemPos.width
              break
          }

          switch (placement[1]) {
            case 'top':
              targetElemPos.top = hostElemPos.top
              break
            case 'bottom':
              targetElemPos.top = hostElemPos.top + hostElemPos.height - targetHeight
              break
            case 'left':
              targetElemPos.left = hostElemPos.left
              break
            case 'right':
              targetElemPos.left = hostElemPos.left + hostElemPos.width - targetWidth
              break
            case 'center':
              if (PLACEMENT_REGEX.vertical.test(placement[0])) {
                targetElemPos.left = hostElemPos.left + hostElemPos.width / 2 - targetWidth / 2
              } else {
                targetElemPos.top = hostElemPos.top + hostElemPos.height / 2 - targetHeight / 2
              }
              break
          }

          targetElemPos.top = Math.round(targetElemPos.top)
          targetElemPos.left = Math.round(targetElemPos.left)
          targetElemPos.placement =
            placement[1] === 'center' ? placement[0] : placement[0] + '-' + placement[1]

          return targetElemPos
        },

        /**
         * Provides a way to adjust the top positioning after first
         * render to correctly align element to top after content
         * rendering causes resized element height
         *
         * @param {array} placementClasses - The array of strings of classes
         * element should have.
         * @param {object} containerPosition - The object with container
         * position information
         * @param {number} initialHeight - The initial height for the elem.
         * @param {number} currentHeight - The current height for the elem.
         */
        adjustTop: function (placementClasses, containerPosition, initialHeight, currentHeight) {
          if (placementClasses.indexOf('top') !== -1 && initialHeight !== currentHeight) {
            return {
              top: containerPosition.top - currentHeight + 'px',
            }
          }
        },

        /**
         * Provides a way for positioning tooltip & dropdown
         * arrows when using placement options beyond the standard
         * left, right, top, or bottom.
         *
         * @param {element} elem - The tooltip/dropdown element.
         * @param {string} placement - The placement for the elem.
         */
        positionArrow: function (elem, placement) {
          elem = this.getRawNode(elem)
          var isTooltip = true

          var innerElem = elem.querySelector('.tooltip-inner')
          if (!innerElem) {
            if (angular.element(elem).hasClass('popover')) {
              isTooltip = false
            } else {
              return
            }
          }

          var arrowElem = elem.querySelector('.arrow')
          if (!arrowElem) {
            return
          }

          var arrowCss = {
            top: '',
            bottom: '',
            left: '',
            right: '',
          }

          placement = this.parsePlacement(placement)
          if (placement[1] === 'center') {
            var arrowElemOffset = this.offset(arrowElem, true)
            if (PLACEMENT_REGEX.vertical.test(placement[0])) {
              var aHW = arrowElemOffset.width / 2
              var eHW = this.offset(elem).width / 2
              var left = eHW - aHW
              arrowCss.left = '' + left + 'px'
            } else {
              var aHH = arrowElemOffset.height / 2
              var eHH = this.offset(elem).height / 2
              var top = eHH - aHH
              arrowCss.top = '' + top + 'px'
            }
          }

          var borderProp = 'border-' + placement[0] + '-width'
          var borderWidth = $window.getComputedStyle(arrowElem)[borderProp]

          var borderRadiusProp = 'border-'
          if (PLACEMENT_REGEX.vertical.test(placement[0])) {
            borderRadiusProp += placement[0] + '-' + placement[1]
          } else {
            borderRadiusProp += placement[1] + '-' + placement[0]
          }
          borderRadiusProp += '-radius'
          var borderRadius = $window.getComputedStyle(isTooltip ? innerElem : elem)[
            borderRadiusProp
          ]

          if (isTooltip) {
            switch (placement[0]) {
              case 'top':
                arrowCss.bottom = '0'
                break
              case 'bottom':
                arrowCss.top = '0'
                break
              case 'left':
                arrowCss.right = '0'
                break
              case 'right':
                arrowCss.left = '0'
                break
            }
          }

          arrowCss[placement[1]] = borderRadius

          angular.element(arrowElem).css(arrowCss)
        },
      }
    },
  ])

angular
  .module('ui.bootstrap.datepickerPopup', ['ui.bootstrap.datepicker', 'ui.bootstrap.position'])

  .value('$datepickerPopupLiteralWarning', true)

  .constant('uibDatepickerPopupConfig', {
    altInputFormats: [],
    appendToBody: false,
    clearText: 'Clear',
    closeOnDateSelection: true,
    closeText: 'Done',
    currentText: 'Today',
    datepickerPopup: 'yyyy-MM-dd',
    datepickerPopupTemplateUrl: 'uib/template/datepickerPopup/popup.html',
    datepickerTemplateUrl: 'uib/template/datepicker/datepicker.html',
    html5Types: {
      date: 'yyyy-MM-dd',
      'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
      month: 'yyyy-MM',
    },
    onOpenFocus: true,
    showButtonBar: true,
    placement: 'auto bottom-left',
  })

  .controller('UibDatepickerPopupController', [
    '$scope',
    '$element',
    '$attrs',
    '$compile',
    '$log',
    '$parse',
    '$window',
    '$document',
    '$rootScope',
    '$uibPosition',
    'dateFilter',
    'uibDateParser',
    'uibDatepickerPopupConfig',
    '$timeout',
    'uibDatepickerConfig',
    '$datepickerPopupLiteralWarning',
    function (
      $scope,
      $element,
      $attrs,
      $compile,
      $log,
      $parse,
      $window,
      $document,
      $rootScope,
      $position,
      dateFilter,
      dateParser,
      datepickerPopupConfig,
      $timeout,
      datepickerConfig,
      $datepickerPopupLiteralWarning
    ) {
      var cache = {},
        isHtml5DateInput = false
      var dateFormat,
        closeOnDateSelection,
        appendToBody,
        onOpenFocus,
        datepickerPopupTemplateUrl,
        datepickerTemplateUrl,
        popupEl,
        datepickerEl,
        scrollParentEl,
        ngModel,
        ngModelOptions,
        $popup,
        altInputFormats,
        watchListeners = []

      this.init = function (_ngModel_) {
        ngModel = _ngModel_
        ngModelOptions = extractOptions(ngModel)
        closeOnDateSelection = angular.isDefined($attrs.closeOnDateSelection)
          ? $scope.$parent.$eval($attrs.closeOnDateSelection)
          : datepickerPopupConfig.closeOnDateSelection
        appendToBody = angular.isDefined($attrs.datepickerAppendToBody)
          ? $scope.$parent.$eval($attrs.datepickerAppendToBody)
          : datepickerPopupConfig.appendToBody
        onOpenFocus = angular.isDefined($attrs.onOpenFocus)
          ? $scope.$parent.$eval($attrs.onOpenFocus)
          : datepickerPopupConfig.onOpenFocus
        datepickerPopupTemplateUrl = angular.isDefined($attrs.datepickerPopupTemplateUrl)
          ? $attrs.datepickerPopupTemplateUrl
          : datepickerPopupConfig.datepickerPopupTemplateUrl
        datepickerTemplateUrl = angular.isDefined($attrs.datepickerTemplateUrl)
          ? $attrs.datepickerTemplateUrl
          : datepickerPopupConfig.datepickerTemplateUrl
        altInputFormats = angular.isDefined($attrs.altInputFormats)
          ? $scope.$parent.$eval($attrs.altInputFormats)
          : datepickerPopupConfig.altInputFormats

        $scope.showButtonBar = angular.isDefined($attrs.showButtonBar)
          ? $scope.$parent.$eval($attrs.showButtonBar)
          : datepickerPopupConfig.showButtonBar

        if (datepickerPopupConfig.html5Types[$attrs.type]) {
          dateFormat = datepickerPopupConfig.html5Types[$attrs.type]
          isHtml5DateInput = true
        } else {
          dateFormat = $attrs.uibDatepickerPopup || datepickerPopupConfig.datepickerPopup
          $attrs.$observe('uibDatepickerPopup', function (value, oldValue) {
            var newDateFormat = value || datepickerPopupConfig.datepickerPopup
            // Invalidate the $modelValue to ensure that formatters re-run
            // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
            if (newDateFormat !== dateFormat) {
              dateFormat = newDateFormat
              ngModel.$modelValue = null

              if (!dateFormat) {
                throw new Error('uibDatepickerPopup must have a date format specified.')
              }
            }
          })
        }

        if (!dateFormat) {
          throw new Error('uibDatepickerPopup must have a date format specified.')
        }

        if (isHtml5DateInput && $attrs.uibDatepickerPopup) {
          throw new Error('HTML5 date input types do not support custom formats.')
        }

        // popup element used to display calendar
        popupEl = angular.element(
          '<div uib-datepicker-popup-wrap data-ng-class="{\'show\': isOpen}"><div uib-datepicker></div></div>'
        )

        popupEl.attr({
          'ng-model': 'date',
          'ng-change': 'dateSelection(date)',
          'template-url': datepickerPopupTemplateUrl,
        })

        // datepicker element
        datepickerEl = angular.element(popupEl.children()[0])
        datepickerEl.attr('template-url', datepickerTemplateUrl)

        if (!$scope.datepickerOptions) {
          $scope.datepickerOptions = {}
        }

        if (isHtml5DateInput) {
          if ($attrs.type === 'month') {
            $scope.datepickerOptions.datepickerMode = 'month'
            $scope.datepickerOptions.minMode = 'month'
          }
        }

        datepickerEl.attr('datepicker-options', 'datepickerOptions')

        if (!isHtml5DateInput) {
          // Internal API to maintain the correct ng-invalid-[key] class
          ngModel.$$parserName = 'date'
          ngModel.$validators.date = validator
          ngModel.$parsers.unshift(parseDate)
          ngModel.$formatters.push(function (value) {
            if (ngModel.$isEmpty(value)) {
              $scope.date = value
              return value
            }

            if (angular.isNumber(value)) {
              value = new Date(value)
            }

            $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'))

            return dateParser.filter($scope.date, dateFormat)
          })
        } else {
          ngModel.$formatters.push(function (value) {
            $scope.date = dateParser.fromTimezone(value, ngModelOptions.getOption('timezone'))
            return value
          })
        }

        // Detect changes in the view from the text box
        ngModel.$viewChangeListeners.push(function () {
          $scope.date = parseDateString(ngModel.$viewValue)
        })

        $element.on('keydown', inputKeydownBind)

        $popup = $compile(popupEl)($scope)
        // Prevent jQuery cache memory leak (template is now redundant after linking)
        popupEl.remove()

        if (appendToBody) {
          $document.find('body').append($popup)
        } else {
          $element.after($popup)
        }

        $scope.$on('$destroy', function () {
          if ($scope.isOpen === true) {
            if (!$rootScope.$$phase) {
              $scope.$apply(function () {
                $scope.isOpen = false
              })
            }
          }

          $popup.remove()
          $element.off('keydown', inputKeydownBind)
          $document.off('click', documentClickBind)
          if (scrollParentEl) {
            scrollParentEl.off('scroll', positionPopup)
          }
          angular.element($window).off('resize', positionPopup)

          //Clear all watch listeners on destroy
          while (watchListeners.length) {
            watchListeners.shift()()
          }
        })
      }

      $scope.getText = function (key) {
        return $scope[key + 'Text'] || datepickerPopupConfig[key + 'Text']
      }

      $scope.isDisabled = function (date) {
        if (date === 'today') {
          date = dateParser.fromTimezone(new Date(), ngModelOptions.getOption('timezone'))
        }

        var dates = {}
        angular.forEach(['minDate', 'maxDate'], function (key) {
          if (!$scope.datepickerOptions[key]) {
            dates[key] = null
          } else if (angular.isDate($scope.datepickerOptions[key])) {
            dates[key] = new Date($scope.datepickerOptions[key])
          } else {
            if ($datepickerPopupLiteralWarning) {
              $log.warn(
                'Literal date support has been deprecated, please switch to date object usage'
              )
            }

            dates[key] = new Date(dateFilter($scope.datepickerOptions[key], 'medium'))
          }
        })

        return (
          ($scope.datepickerOptions && dates.minDate && $scope.compare(date, dates.minDate) < 0) ||
          (dates.maxDate && $scope.compare(date, dates.maxDate) > 0)
        )
      }

      $scope.compare = function (date1, date2) {
        return (
          new Date(date1.getFullYear(), date1.getMonth(), date1.getDate()) -
          new Date(date2.getFullYear(), date2.getMonth(), date2.getDate())
        )
      }

      // Inner change
      $scope.dateSelection = function (dt) {
        $scope.date = dt
        var date = $scope.date ? dateParser.filter($scope.date, dateFormat) : null // Setting to NULL is necessary for form validators to function
        $element.val(date)
        ngModel.$setViewValue(date)

        if (closeOnDateSelection) {
          $scope.isOpen = false
          $element[0].focus()
        }
      }

      $scope.keydown = function (evt) {
        if (evt.which === 27) {
          evt.stopPropagation()
          $scope.isOpen = false
          $element[0].focus()
        }
      }

      $scope.select = function (date, evt) {
        evt.stopPropagation()

        if (date === 'today') {
          var today = new Date()
          if (angular.isDate($scope.date)) {
            date = new Date($scope.date)
            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())
          } else {
            date = dateParser.fromTimezone(today, ngModelOptions.getOption('timezone'))
            date.setHours(0, 0, 0, 0)
          }
        }
        $scope.dateSelection(date)
      }

      $scope.close = function (evt) {
        evt.stopPropagation()

        $scope.isOpen = false
        $element[0].focus()
      }

      $scope.disabled = angular.isDefined($attrs.disabled) || false
      if ($attrs.ngDisabled) {
        watchListeners.push(
          $scope.$parent.$watch($parse($attrs.ngDisabled), function (disabled) {
            $scope.disabled = disabled
          })
        )
      }

      $scope.$watch('isOpen', function (value) {
        if (value) {
          if (!$scope.disabled) {
            $timeout(
              function () {
                positionPopup()

                if (onOpenFocus) {
                  $scope.$broadcast('uib:datepicker.focus')
                }

                $document.on('click', documentClickBind)

                var placement = $attrs.popupPlacement
                  ? $attrs.popupPlacement
                  : datepickerPopupConfig.placement
                if (appendToBody || $position.parsePlacement(placement)[2]) {
                  scrollParentEl =
                    scrollParentEl || angular.element($position.scrollParent($element))
                  if (scrollParentEl) {
                    scrollParentEl.on('scroll', positionPopup)
                  }
                } else {
                  scrollParentEl = null
                }

                angular.element($window).on('resize', positionPopup)
              },
              0,
              false
            )
          } else {
            $scope.isOpen = false
          }
        } else {
          $document.off('click', documentClickBind)
          if (scrollParentEl) {
            scrollParentEl.off('scroll', positionPopup)
          }
          angular.element($window).off('resize', positionPopup)
        }
      })

      function cameltoDash(string) {
        return string.replace(/([A-Z])/g, function ($1) {
          return '-' + $1.toLowerCase()
        })
      }

      function parseDateString(viewValue) {
        var date = dateParser.parse(viewValue, dateFormat, $scope.date)
        if (isNaN(date)) {
          for (var i = 0; i < altInputFormats.length; i++) {
            date = dateParser.parse(viewValue, altInputFormats[i], $scope.date)
            if (!isNaN(date)) {
              return date
            }
          }
        }
        return date
      }

      function parseDate(viewValue) {
        if (angular.isNumber(viewValue)) {
          // presumably timestamp to date object
          viewValue = new Date(viewValue)
        }

        if (!viewValue) {
          return null
        }

        if (angular.isDate(viewValue) && !isNaN(viewValue)) {
          return viewValue
        }

        if (angular.isString(viewValue)) {
          var date = parseDateString(viewValue)
          if (!isNaN(date)) {
            return dateParser.toTimezone(date, ngModelOptions.getOption('timezone'))
          }
        }

        return ngModelOptions.getOption('allowInvalid') ? viewValue : undefined
      }

      function validator(modelValue, viewValue) {
        var value = modelValue || viewValue

        if (!$attrs.ngRequired && !value) {
          return true
        }

        if (angular.isNumber(value)) {
          value = new Date(value)
        }

        if (!value) {
          return true
        }

        if (angular.isDate(value) && !isNaN(value)) {
          return true
        }

        if (angular.isString(value)) {
          return !isNaN(parseDateString(value))
        }

        return false
      }

      function documentClickBind(event) {
        if (!$scope.isOpen && $scope.disabled) {
          return
        }

        var popup = $popup[0]
        var dpContainsTarget = $element[0].contains(event.target)
        // The popup node may not be an element node
        // In some browsers (IE) only element nodes have the 'contains' function
        var popupContainsTarget = popup.contains !== undefined && popup.contains(event.target)
        if ($scope.isOpen && !(dpContainsTarget || popupContainsTarget)) {
          $scope.$apply(function () {
            $scope.isOpen = false
          })
        }
      }

      function inputKeydownBind(evt) {
        if (evt.which === 27 && $scope.isOpen) {
          evt.preventDefault()
          evt.stopPropagation()
          $scope.$apply(function () {
            $scope.isOpen = false
          })
          $element[0].focus()
        } else if (evt.which === 40 && !$scope.isOpen) {
          evt.preventDefault()
          evt.stopPropagation()
          $scope.$apply(function () {
            $scope.isOpen = true
          })
        }
      }

      function positionPopup() {
        if ($scope.isOpen) {
          var dpElement = angular.element($popup[0].querySelector('.uib-datepicker-popup'))
          var placement = $attrs.popupPlacement
            ? $attrs.popupPlacement
            : datepickerPopupConfig.placement
          var position = $position.positionElements($element, dpElement, placement, appendToBody)
          dpElement.css({ top: position.top + 'px', left: position.left + 'px' })
          if (dpElement.hasClass('uib-position-measure')) {
            dpElement.removeClass('uib-position-measure')
          }
        }
      }

      function extractOptions(ngModelCtrl) {
        var ngModelOptions

        if (angular.version.minor < 6) {
          // in angular < 1.6 $options could be missing
          // guarantee a value
          ngModelOptions = angular.isObject(ngModelCtrl.$options)
            ? ngModelCtrl.$options
            : {
                timezone: null,
              }

          // mimic 1.6+ api
          ngModelOptions.getOption = function (key) {
            return ngModelOptions[key]
          }
        } else {
          // in angular >=1.6 $options is always present
          ngModelOptions = ngModelCtrl.$options
        }

        return ngModelOptions
      }

      $scope.$on('uib:datepicker.mode', function () {
        $timeout(positionPopup, 0, false)
      })
    },
  ])

  .directive('uibDatepickerPopup', function () {
    return {
      require: ['ngModel', 'uibDatepickerPopup'],
      controller: 'UibDatepickerPopupController',
      scope: {
        datepickerOptions: '=?',
        isOpen: '=?',
        currentText: '@',
        clearText: '@',
        closeText: '@',
      },
      link: function (scope, element, attrs, ctrls) {
        var ngModel = ctrls[0],
          ctrl = ctrls[1]

        ctrl.init(ngModel)
      },
    }
  })

  .directive('uibDatepickerPopupWrap', function () {
    return {
      restrict: 'A',
      transclude: true,
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/datepickerPopup/popup.html'
      },
    }
  })

angular
  .module('ui.bootstrap.debounce', [])
  /**
   * A helper, internal service that debounces a function
   */
  .factory('$$debounce', [
    '$timeout',
    function ($timeout) {
      return function (callback, debounceTime) {
        var timeoutPromise

        return function () {
          var self = this
          var args = Array.prototype.slice.call(arguments)
          if (timeoutPromise) {
            $timeout.cancel(timeoutPromise)
          }

          timeoutPromise = $timeout(function () {
            callback.apply(self, args)
          }, debounceTime)
        }
      }
    },
  ])

angular
  .module('ui.bootstrap.multiMap', [])
  /**
   * A helper, internal data structure that stores all references attached to key
   */
  .factory('$$multiMap', function () {
    return {
      createNew: function () {
        var map = {}

        return {
          entries: function () {
            return Object.keys(map).map(function (key) {
              return {
                key: key,
                value: map[key],
              }
            })
          },
          get: function (key) {
            return map[key]
          },
          hasKey: function (key) {
            return !!map[key]
          },
          keys: function () {
            return Object.keys(map)
          },
          put: function (key, value) {
            if (!map[key]) {
              map[key] = []
            }

            map[key].push(value)
          },
          remove: function (key, value) {
            var values = map[key]

            if (!values) {
              return
            }

            var idx = values.indexOf(value)

            if (idx !== -1) {
              values.splice(idx, 1)
            }

            if (!values.length) {
              delete map[key]
            }
          },
        }
      },
    }
  })

angular
  .module('ui.bootstrap.dropdown', ['ui.bootstrap.multiMap', 'ui.bootstrap.position'])

  .constant('uibDropdownConfig', {
    appendToOpenClass: 'uib-dropdown-open',
    openClass: 'show',
  })

  .service('uibDropdownService', [
    '$document',
    '$rootScope',
    '$$multiMap',
    function ($document, $rootScope, $$multiMap) {
      var openScope = null
      var openedContainers = $$multiMap.createNew()

      this.isOnlyOpen = function (dropdownScope, appendTo) {
        var openedDropdowns = openedContainers.get(appendTo)
        if (openedDropdowns) {
          var openDropdown = openedDropdowns.reduce(function (toClose, dropdown) {
            if (dropdown.scope === dropdownScope) {
              return dropdown
            }

            return toClose
          }, {})
          if (openDropdown) {
            return openedDropdowns.length === 1
          }
        }

        return false
      }

      this.open = function (dropdownScope, element, appendTo) {
        if (!openScope) {
          $document.on('click', closeDropdown)
        }

        if (openScope && openScope !== dropdownScope) {
          openScope.isOpen = false
        }

        openScope = dropdownScope

        if (!appendTo) {
          return
        }

        var openedDropdowns = openedContainers.get(appendTo)
        if (openedDropdowns) {
          var openedScopes = openedDropdowns.map(function (dropdown) {
            return dropdown.scope
          })
          if (openedScopes.indexOf(dropdownScope) === -1) {
            openedContainers.put(appendTo, {
              scope: dropdownScope,
            })
          }
        } else {
          openedContainers.put(appendTo, {
            scope: dropdownScope,
          })
        }
      }

      this.close = function (dropdownScope, element, appendTo) {
        if (openScope === dropdownScope) {
          $document.off('click', closeDropdown)
          $document.off('keydown', this.keybindFilter)
          openScope = null
        }

        if (!appendTo) {
          return
        }

        var openedDropdowns = openedContainers.get(appendTo)
        if (openedDropdowns) {
          var dropdownToClose = openedDropdowns.reduce(function (toClose, dropdown) {
            if (dropdown.scope === dropdownScope) {
              return dropdown
            }

            return toClose
          }, {})
          if (dropdownToClose) {
            openedContainers.remove(appendTo, dropdownToClose)
          }
        }
      }

      var closeDropdown = function (evt) {
        // This method may still be called during the same mouse event that
        // unbound this event handler. So check openScope before proceeding.
        if (!openScope || !openScope.isOpen) {
          return
        }

        if (evt && openScope.getAutoClose() === 'disabled') {
          return
        }

        if (evt && evt.which === 3) {
          return
        }

        var toggleElement = openScope.getToggleElement()
        if (evt && toggleElement && toggleElement[0].contains(evt.target)) {
          return
        }

        var dropdownElement = openScope.getDropdownElement()
        if (
          evt &&
          openScope.getAutoClose() === 'outsideClick' &&
          dropdownElement &&
          dropdownElement[0].contains(evt.target)
        ) {
          return
        }

        openScope.isOpen = false

        if (!$rootScope.$$phase) {
          openScope.$apply()
        }
      }

      this.keybindFilter = function (evt) {
        if (!openScope) {
          // see this.close as ESC could have been pressed which kills the scope so we can not proceed
          return
        }

        var dropdownElement = openScope.getDropdownElement()
        var toggleElement = openScope.getToggleElement()
        var dropdownElementTargeted = dropdownElement && dropdownElement[0].contains(evt.target)
        var toggleElementTargeted = toggleElement && toggleElement[0].contains(evt.target)
        if (evt.which === 27) {
          evt.stopPropagation()
          openScope.focusToggleElement()
          closeDropdown()
        } else if (
          openScope.isKeynavEnabled() &&
          [38, 40].indexOf(evt.which) !== -1 &&
          openScope.isOpen &&
          (dropdownElementTargeted || toggleElementTargeted)
        ) {
          evt.preventDefault()
          evt.stopPropagation()
          openScope.focusDropdownEntry(evt.which)
        }
      }
    },
  ])

  .controller('UibDropdownController', [
    '$scope',
    '$element',
    '$attrs',
    '$parse',
    'uibDropdownConfig',
    'uibDropdownService',
    '$animate',
    '$uibPosition',
    '$document',
    '$compile',
    '$templateRequest',
    function (
      $scope,
      $element,
      $attrs,
      $parse,
      dropdownConfig,
      uibDropdownService,
      $animate,
      $position,
      $document,
      $compile,
      $templateRequest
    ) {
      var self = this,
        scope = $scope.$new(), // create a child scope so we are not polluting original one
        templateScope,
        appendToOpenClass = dropdownConfig.appendToOpenClass,
        openClass = dropdownConfig.openClass,
        getIsOpen,
        setIsOpen = angular.noop,
        toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
        keynavEnabled = false,
        selectedOption = null,
        body = $document.find('body')

      $element.addClass('dropdown')

      this.init = function () {
        if ($attrs.isOpen) {
          getIsOpen = $parse($attrs.isOpen)
          setIsOpen = getIsOpen.assign

          $scope.$watch(getIsOpen, function (value) {
            scope.isOpen = !!value
          })
        }

        keynavEnabled = angular.isDefined($attrs.keyboardNav)
      }

      this.toggle = function (open) {
        scope.isOpen = arguments.length ? !!open : !scope.isOpen
        if (angular.isFunction(setIsOpen)) {
          setIsOpen(scope, scope.isOpen)
        }

        return scope.isOpen
      }

      // Allow other directives to watch status
      this.isOpen = function () {
        return scope.isOpen
      }

      scope.getToggleElement = function () {
        return self.toggleElement
      }

      scope.getAutoClose = function () {
        return $attrs.autoClose || 'always' //or 'outsideClick' or 'disabled'
      }

      scope.getElement = function () {
        return $element
      }

      scope.isKeynavEnabled = function () {
        return keynavEnabled
      }

      scope.focusDropdownEntry = function (keyCode) {
        var elems = self.dropdownMenu //If append to body is used.
          ? angular.element(self.dropdownMenu).find('.dropdown-item')
          : $element.find('div').eq(0).find('a.')

        switch (keyCode) {
          case 40: {
            if (!angular.isNumber(self.selectedOption)) {
              self.selectedOption = 0
            } else {
              self.selectedOption =
                self.selectedOption === elems.length - 1
                  ? self.selectedOption
                  : self.selectedOption + 1
            }
            break
          }
          case 38: {
            if (!angular.isNumber(self.selectedOption)) {
              self.selectedOption = elems.length - 1
            } else {
              self.selectedOption = self.selectedOption === 0 ? 0 : self.selectedOption - 1
            }
            break
          }
        }

        elems[self.selectedOption].focus()
      }

      scope.getDropdownElement = function () {
        return self.dropdownMenu
      }

      scope.focusToggleElement = function () {
        if (self.toggleElement) {
          self.toggleElement[0].focus()
        }
      }

      function removeDropdownMenu() {
        $element.append(self.dropdownMenu)
      }

      scope.$watch('isOpen', function (isOpen, wasOpen) {
        var appendTo = null,
          appendToBody = false

        if (angular.isDefined($attrs.dropdownAppendTo)) {
          var appendToEl = $parse($attrs.dropdownAppendTo)(scope)
          if (appendToEl) {
            appendTo = angular.element(appendToEl)
          }
        }

        if (angular.isDefined($attrs.dropdownAppendToBody)) {
          var appendToBodyValue = $parse($attrs.dropdownAppendToBody)(scope)
          if (appendToBodyValue !== false) {
            appendToBody = true
          }
        }

        if (appendToBody && !appendTo) {
          appendTo = body
        }

        if (appendTo && self.dropdownMenu) {
          if (isOpen) {
            appendTo.append(self.dropdownMenu)
            $element.on('$destroy', removeDropdownMenu)
          } else {
            $element.off('$destroy', removeDropdownMenu)
            removeDropdownMenu()
          }
        }

        if (appendTo && self.dropdownMenu) {
          var pos = $position.positionElements($element, self.dropdownMenu, 'bottom-left', true),
            css,
            rightalign,
            scrollbarPadding,
            scrollbarWidth = 0

          css = {
            top: pos.top + 'px',
            display: isOpen ? 'block' : 'none',
          }

          rightalign = self.dropdownMenu.hasClass('dropdown-menu-right')
          if (!rightalign) {
            css.left = pos.left + 'px'
            css.right = 'auto'
          } else {
            css.left = 'auto'
            scrollbarPadding = $position.scrollbarPadding(appendTo)

            if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
              scrollbarWidth = scrollbarPadding.scrollbarWidth
            }

            css.right =
              window.innerWidth - scrollbarWidth - (pos.left + $element.prop('offsetWidth')) + 'px'
          }

          // Need to adjust our positioning to be relative to the appendTo container
          // if it's not the body element
          if (!appendToBody) {
            var appendOffset = $position.offset(appendTo)

            css.top = pos.top - appendOffset.top + 'px'

            if (!rightalign) {
              css.left = pos.left - appendOffset.left + 'px'
            } else {
              css.right =
                window.innerWidth -
                (pos.left - appendOffset.left + $element.prop('offsetWidth')) +
                'px'
            }
          }

          self.dropdownMenu.css(css)
        }

        // find openContainer by uib-dropdown-menu directive
        var openContainer = appendTo
          ? appendTo
          : angular.element($element[0].querySelector('[uib-dropdown-menu]'))
        var dropdownOpenClass = appendTo ? appendToOpenClass : openClass
        var hasOpenClass = openContainer.hasClass(dropdownOpenClass)
        var isOnlyOpen = uibDropdownService.isOnlyOpen($scope, appendTo)

        if (hasOpenClass === !isOpen) {
          var toggleClass
          if (appendTo) {
            toggleClass = !isOnlyOpen ? 'addClass' : 'removeClass'
          } else {
            toggleClass = isOpen ? 'addClass' : 'removeClass'
          }

          // original Bootstrap 4 dropdown sets openClass on both dropdownMenu and element
          $animate[toggleClass]($element, dropdownOpenClass)

          $animate[toggleClass](openContainer, dropdownOpenClass).then(function () {
            if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
              toggleInvoker($scope, { open: !!isOpen })
            }
          })
        }

        if (isOpen) {
          if (self.dropdownMenuTemplateUrl) {
            $templateRequest(self.dropdownMenuTemplateUrl).then(function (tplContent) {
              templateScope = scope.$new()
              $compile(tplContent.trim())(templateScope, function (dropdownElement) {
                var newEl = dropdownElement
                self.dropdownMenu.replaceWith(newEl)
                self.dropdownMenu = newEl
                $animate.addClass(self.dropdownMenu, dropdownOpenClass)
                $document.on('keydown', uibDropdownService.keybindFilter)
              })
            })
          } else {
            $document.on('keydown', uibDropdownService.keybindFilter)
          }

          scope.focusToggleElement()
          uibDropdownService.open(scope, $element, appendTo)
        } else {
          uibDropdownService.close(scope, $element, appendTo)
          if (self.dropdownMenuTemplateUrl) {
            if (templateScope) {
              templateScope.$destroy()
            }
            var newEl = angular.element('<div class="dropdown-menu"></div>')
            self.dropdownMenu.replaceWith(newEl)
            self.dropdownMenu = newEl
          }

          self.selectedOption = null
        }

        if (angular.isFunction(setIsOpen)) {
          setIsOpen($scope, isOpen)
        }
      })
    },
  ])

  .directive('uibDropdown', function () {
    return {
      controller: 'UibDropdownController',
      link: function (scope, element, attrs, dropdownCtrl) {
        dropdownCtrl.init()
      },
    }
  })

  .directive('uibDropdownMenu', function () {
    return {
      restrict: 'A',
      require: '?^uibDropdown',
      link: function (scope, element, attrs, dropdownCtrl) {
        if (!dropdownCtrl || angular.isDefined(attrs.dropdownNested)) {
          return
        }

        element.addClass('dropdown-menu')

        var tplUrl = attrs.templateUrl
        if (tplUrl) {
          dropdownCtrl.dropdownMenuTemplateUrl = tplUrl
        }

        if (!dropdownCtrl.dropdownMenu) {
          dropdownCtrl.dropdownMenu = element
        }
      },
    }
  })

  .directive('uibDropdownToggle', function () {
    return {
      require: '?^uibDropdown',
      link: function (scope, element, attrs, dropdownCtrl) {
        if (!dropdownCtrl) {
          return
        }

        element.addClass('dropdown-toggle')

        dropdownCtrl.toggleElement = element

        var toggleDropdown = function (event) {
          event.preventDefault()

          if (!element.hasClass('disabled') && !attrs.disabled) {
            scope.$apply(function () {
              dropdownCtrl.toggle()
            })
          }
        }

        element.on('click', toggleDropdown)

        var openDropdown = function (event) {
          if (event.which === 40 && !dropdownCtrl.isOpen()) {
            event.preventDefault()
            event.stopPropagation()

            if (!element.hasClass('disabled') && !attrs.disabled) {
              scope.$apply(function () {
                dropdownCtrl.toggle()
              })
            }
          }
        }

        element.on('keydown', openDropdown)

        // WAI-ARIA
        element.attr({ 'aria-haspopup': true, 'aria-expanded': false })
        scope.$watch(dropdownCtrl.isOpen, function (isOpen) {
          element.attr('aria-expanded', !!isOpen)
        })

        scope.$on('$destroy', function () {
          element.off('click', toggleDropdown)
          element.off('keydown', openDropdown)
        })
      },
    }
  })

angular
  .module('ui.bootstrap.stackedMap', [])
  /**
   * A helper, internal data structure that acts as a map but also allows getting / removing
   * elements in the LIFO order
   */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = []

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value,
            })
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                return stack[i]
              }
            }
          },
          keys: function () {
            var keys = []
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key)
            }
            return keys
          },
          top: function () {
            return stack[stack.length - 1]
          },
          remove: function (key) {
            var idx = -1
            for (var i = 0; i < stack.length; i++) {
              if (key === stack[i].key) {
                idx = i
                break
              }
            }
            return stack.splice(idx, 1)[0]
          },
          removeTop: function () {
            return stack.pop()
          },
          length: function () {
            return stack.length
          },
        }
      },
    }
  })
angular
  .module('ui.bootstrap.modal', [
    'ui.bootstrap.multiMap',
    'ui.bootstrap.stackedMap',
    'ui.bootstrap.position',
  ])
  /**
   * Pluggable resolve mechanism for the modal resolve resolution
   * Supports UI Router's $resolve service
   */
  .provider('$uibResolve', function () {
    var resolve = this
    this.resolver = null

    this.setResolver = function (resolver) {
      this.resolver = resolver
    }

    this.$get = [
      '$injector',
      '$q',
      function ($injector, $q) {
        var resolver = resolve.resolver ? $injector.get(resolve.resolver) : null
        return {
          resolve: function (invocables, locals, parent, self) {
            if (resolver) {
              return resolver.resolve(invocables, locals, parent, self)
            }

            var promises = []

            angular.forEach(invocables, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promises.push($q.resolve($injector.invoke(value)))
              } else if (angular.isString(value)) {
                promises.push($q.resolve($injector.get(value)))
              } else {
                promises.push($q.resolve(value))
              }
            })

            return $q.all(promises).then(function (resolves) {
              var resolveObj = {}
              var resolveIter = 0
              angular.forEach(invocables, function (value, key) {
                resolveObj[key] = resolves[resolveIter++]
              })

              return resolveObj
            })
          },
        }
      },
    ]
  })

  /**
   * A helper directive for the $modal service. It creates a backdrop element.
   */
  .directive('uibModalBackdrop', [
    '$uibModalStack',
    '$q',
    '$animate',
    function ($modalStack, $q, $animate) {
      return {
        restrict: 'A',
        compile: function (tElement, tAttrs) {
          tElement.addClass(tAttrs.backdropClass)
          return linkFn
        },
      }

      function linkFn(scope, element, attrs) {
        // Deferred object that will be resolved when this modal is rendered.
        var modalRenderDeferObj = $q.defer()
        // Resolve render promise post-digest
        scope.$$postDigest(function () {
          modalRenderDeferObj.resolve()
        })

        modalRenderDeferObj.promise.then(function () {
          if (attrs.modalInClass) {
            $animate.addClass(element, attrs.modalInClass)
          }
        })

        if (attrs.modalInClass) {
          scope.$on($modalStack.NOW_CLOSING_EVENT, function (e, setIsAsync) {
            var done = setIsAsync()
            if (scope.modalOptions.animation) {
              $animate.removeClass(element, attrs.modalInClass).then(done)
            } else {
              done()
            }
          })
        }
      }
    },
  ])

  .directive('uibModalWindow', [
    '$uibModalStack',
    '$q',
    '$animateCss',
    '$document',
    function ($modalStack, $q, $animateCss, $document) {
      return {
        scope: {
          index: '@',
        },
        restrict: 'A',
        transclude: true,
        templateUrl: function (tElement, tAttrs) {
          return tAttrs.templateUrl || 'uib/template/modal/window.html'
        },
        link: function (scope, element, attrs) {
          element.addClass(attrs.windowTopClass || '')
          scope.size = attrs.size

          scope.close = function (evt) {
            var modal = $modalStack.getTop()
            if (
              modal &&
              modal.value.backdrop &&
              modal.value.backdrop !== 'static' &&
              evt.target === evt.currentTarget
            ) {
              evt.preventDefault()
              evt.stopPropagation()
              $modalStack.dismiss(modal.key, 'backdrop click')
            }
          }

          // moved from template to fix issue #2280
          element.on('click', scope.close)

          // This property is only added to the scope for the purpose of detecting when this directive is rendered.
          // We can detect that by using this property in the template associated with this directive and then use
          // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
          scope.$isRendered = true

          // Deferred object that will be resolved when this modal is rendered.
          var modalRenderDeferObj = $q.defer()
          // Resolve render promise post-digest
          scope.$$postDigest(function () {
            modalRenderDeferObj.resolve()
          })

          modalRenderDeferObj.promise.then(function () {
            var animationPromise = null

            if (attrs.modalInClass) {
              animationPromise = $animateCss(element, {
                addClass: attrs.modalInClass,
              }).start()

              scope.$on($modalStack.NOW_CLOSING_EVENT, function (e, setIsAsync) {
                var done = setIsAsync()
                $animateCss(element, {
                  removeClass: attrs.modalInClass,
                })
                  .start()
                  .then(done)
              })
            }

            $q.when(animationPromise).then(function () {
              // Notify {@link $modalStack} that modal is rendered.
              var modal = $modalStack.getTop()
              if (modal) {
                $modalStack.modalRendered(modal.key)
              }

              /**
               * If something within the freshly-opened modal already has focus (perhaps via a
               * directive that causes focus) then there's no need to try to focus anything.
               */
              if (
                !($document[0].activeElement && element[0].contains($document[0].activeElement))
              ) {
                var inputWithAutofocus = element[0].querySelector('[autofocus]')
                /**
                 * Auto-focusing of a freshly-opened modal element causes any child elements
                 * with the autofocus attribute to lose focus. This is an issue on touch
                 * based devices which will show and then hide the onscreen keyboard.
                 * Attempts to refocus the autofocus element via JavaScript will not reopen
                 * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
                 * the modal element if the modal does not contain an autofocus element.
                 */
                if (inputWithAutofocus) {
                  inputWithAutofocus.focus()
                } else {
                  element[0].focus()
                }
              }
            })
          })
        },
      }
    },
  ])

  .directive('uibModalAnimationClass', function () {
    return {
      compile: function (tElement, tAttrs) {
        if (tAttrs.modalAnimation) {
          tElement.addClass(tAttrs.uibModalAnimationClass)
        }
      },
    }
  })

  .directive('uibModalTransclude', [
    '$animate',
    function ($animate) {
      return {
        link: function (scope, element, attrs, controller, transclude) {
          transclude(scope.$parent, function (clone) {
            element.empty()
            $animate.enter(clone, element)
          })
        },
      }
    },
  ])

  .factory('$uibModalStack', [
    '$animate',
    '$animateCss',
    '$document',
    '$compile',
    '$rootScope',
    '$q',
    '$$multiMap',
    '$$stackedMap',
    '$uibPosition',
    function (
      $animate,
      $animateCss,
      $document,
      $compile,
      $rootScope,
      $q,
      $$multiMap,
      $$stackedMap,
      $uibPosition
    ) {
      var OPENED_MODAL_CLASS = 'modal-open'

      var backdropDomEl, backdropScope
      var openedWindows = $$stackedMap.createNew()
      var openedClasses = $$multiMap.createNew()
      var $modalStack = {
        NOW_CLOSING_EVENT: 'modal.stack.now-closing',
      }
      var topModalIndex = 0
      var previousTopOpenedModal = null
      var ARIA_HIDDEN_ATTRIBUTE_NAME = 'data-bootstrap-modal-aria-hidden-count'

      //Modal focus behavior
      var tabbableSelector =
        "a[href], area[href], input:not([disabled]):not([tabindex='-1']), " +
        "button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']), textarea:not([disabled]):not([tabindex='-1']), " +
        "iframe, object, embed, *[tabindex]:not([tabindex='-1']), *[contenteditable=true]"
      var scrollbarPadding
      var SNAKE_CASE_REGEXP = /[A-Z]/g

      // TODO: extract into common dependency with tooltip
      function snake_case(name) {
        var separator = '-'
        return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
          return (pos ? separator : '') + letter.toLowerCase()
        })
      }

      function isVisible(element) {
        return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)
      }

      function backdropIndex() {
        var topBackdropIndex = -1
        var opened = openedWindows.keys()
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i
          }
        }

        // If any backdrop exist, ensure that it's index is always
        // right below the top modal
        if (topBackdropIndex > -1 && topBackdropIndex < topModalIndex) {
          topBackdropIndex = topModalIndex
        }
        return topBackdropIndex
      }

      $rootScope.$watch(backdropIndex, function (newBackdropIndex) {
        if (backdropScope) {
          backdropScope.index = newBackdropIndex
        }
      })

      function removeModalWindow(modalInstance, elementToReceiveFocus) {
        var modalWindow = openedWindows.get(modalInstance).value
        var appendToElement = modalWindow.appendTo

        //clean up the stack
        openedWindows.remove(modalInstance)
        previousTopOpenedModal = openedWindows.top()
        if (previousTopOpenedModal) {
          topModalIndex = parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10)
        }

        removeAfterAnimate(
          modalWindow.modalDomEl,
          modalWindow.modalScope,
          function () {
            var modalBodyClass = modalWindow.openedClass || OPENED_MODAL_CLASS
            openedClasses.remove(modalBodyClass, modalInstance)
            var areAnyOpen = openedClasses.hasKey(modalBodyClass)
            appendToElement.toggleClass(modalBodyClass, areAnyOpen)
            if (
              !areAnyOpen &&
              scrollbarPadding &&
              scrollbarPadding.heightOverflow &&
              scrollbarPadding.scrollbarWidth
            ) {
              if (scrollbarPadding.originalRight) {
                appendToElement.css({ paddingRight: scrollbarPadding.originalRight + 'px' })
              } else {
                appendToElement.css({ paddingRight: '' })
              }
              scrollbarPadding = null
            }
            toggleTopWindowClass(true)
          },
          modalWindow.closedDeferred
        )
        checkRemoveBackdrop()

        //move focus to specified element if available, or else to body
        if (elementToReceiveFocus && elementToReceiveFocus.focus) {
          elementToReceiveFocus.focus()
        } else if (appendToElement.focus) {
          appendToElement.focus()
        }
      }

      // Add or remove "windowTopClass" from the top window in the stack
      function toggleTopWindowClass(toggleSwitch) {
        var modalWindow

        if (openedWindows.length() > 0) {
          modalWindow = openedWindows.top().value
          modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass || '', toggleSwitch)
        }
      }

      function checkRemoveBackdrop() {
        //remove backdrop if no longer needed
        if (backdropDomEl && backdropIndex() === -1) {
          var backdropScopeRef = backdropScope
          removeAfterAnimate(backdropDomEl, backdropScope, function () {
            backdropScopeRef = null
          })
          backdropDomEl = undefined
          backdropScope = undefined
        }
      }

      function removeAfterAnimate(domEl, scope, done, closedDeferred) {
        var asyncDeferred
        var asyncPromise = null
        var setIsAsync = function () {
          if (!asyncDeferred) {
            asyncDeferred = $q.defer()
            asyncPromise = asyncDeferred.promise
          }

          return function asyncDone() {
            asyncDeferred.resolve()
          }
        }
        scope.$broadcast($modalStack.NOW_CLOSING_EVENT, setIsAsync)

        // Note that it's intentional that asyncPromise might be null.
        // That's when setIsAsync has not been called during the
        // NOW_CLOSING_EVENT broadcast.
        return $q.when(asyncPromise).then(afterAnimating)

        function afterAnimating() {
          if (afterAnimating.done) {
            return
          }
          afterAnimating.done = true

          $animate.leave(domEl).then(function () {
            if (done) {
              done()
            }

            domEl.remove()
            if (closedDeferred) {
              closedDeferred.resolve()
            }
          })

          scope.$destroy()
        }
      }

      $document.on('keydown', keydownListener)

      $rootScope.$on('$destroy', function () {
        $document.off('keydown', keydownListener)
      })

      function keydownListener(evt) {
        if (evt.isDefaultPrevented()) {
          return evt
        }

        var modal = openedWindows.top()
        if (modal) {
          switch (evt.which) {
            case 27: {
              if (modal.value.keyboard) {
                evt.preventDefault()
                $rootScope.$apply(function () {
                  $modalStack.dismiss(modal.key, 'escape key press')
                })
              }
              break
            }
            case 9: {
              var list = $modalStack.loadFocusElementList(modal)
              var focusChanged = false
              if (evt.shiftKey) {
                if (
                  $modalStack.isFocusInFirstItem(evt, list) ||
                  $modalStack.isModalFocused(evt, modal)
                ) {
                  focusChanged = $modalStack.focusLastFocusableElement(list)
                }
              } else {
                if ($modalStack.isFocusInLastItem(evt, list)) {
                  focusChanged = $modalStack.focusFirstFocusableElement(list)
                }
              }

              if (focusChanged) {
                evt.preventDefault()
                evt.stopPropagation()
              }

              break
            }
          }
        }
      }

      $modalStack.open = function (modalInstance, modal) {
        var modalOpener = $document[0].activeElement,
          modalBodyClass = modal.openedClass || OPENED_MODAL_CLASS

        toggleTopWindowClass(false)

        // Store the current top first, to determine what index we ought to use
        // for the current top modal
        previousTopOpenedModal = openedWindows.top()

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          renderDeferred: modal.renderDeferred,
          closedDeferred: modal.closedDeferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard,
          openedClass: modal.openedClass,
          windowTopClass: modal.windowTopClass,
          animation: modal.animation,
          appendTo: modal.appendTo,
        })

        openedClasses.put(modalBodyClass, modalInstance)

        var appendToElement = modal.appendTo,
          currBackdropIndex = backdropIndex()

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true)
          backdropScope.modalOptions = modal
          backdropScope.index = currBackdropIndex
          backdropDomEl = angular.element('<div uib-modal-backdrop="modal-backdrop"></div>')
          backdropDomEl.attr({
            class: 'modal-backdrop',
            'ng-style': "{'z-index': 1040 + (index && 1 || 0) + index*10}",
            'uib-modal-animation-class': 'fade',
            'modal-in-class': 'show',
          })
          if (modal.backdropClass) {
            backdropDomEl.addClass(modal.backdropClass)
          }

          if (modal.animation) {
            backdropDomEl.attr('modal-animation', 'true')
          }

          $animate.enter($compile(backdropDomEl)(backdropScope), appendToElement)
          scrollbarPadding = $uibPosition.scrollbarPadding(appendToElement)
          if (scrollbarPadding.heightOverflow && scrollbarPadding.scrollbarWidth) {
            appendToElement.css({ paddingRight: scrollbarPadding.right + 'px' })
          }
        }

        var content
        if (modal.component) {
          content = document.createElement(snake_case(modal.component.name))
          content = angular.element(content)
          content.attr({
            resolve: '$resolve',
            'modal-instance': '$uibModalInstance',
            close: '$close($value)',
            dismiss: '$dismiss($value)',
          })
        } else {
          content = modal.content
        }

        // Set the top modal index based on the index of the previous top modal
        topModalIndex = previousTopOpenedModal
          ? parseInt(previousTopOpenedModal.value.modalDomEl.attr('index'), 10) + 1
          : 0
        var angularDomEl = angular.element('<div uib-modal-window="modal-window"></div>')
        angularDomEl
          .attr({
            class: 'modal',
            'template-url': modal.windowTemplateUrl,
            'window-top-class': modal.windowTopClass,
            role: 'dialog',
            'aria-labelledby': modal.ariaLabelledBy,
            'aria-describedby': modal.ariaDescribedBy,
            size: modal.size,
            index: topModalIndex,
            animate: 'animate',
            'ng-style': "{'z-index': 1050 + $$topModalIndex*10, display: 'block'}",
            tabindex: -1,
            'uib-modal-animation-class': 'fade',
            'modal-in-class': 'show',
          })
          .append(content)
        if (modal.windowClass) {
          angularDomEl.addClass(modal.windowClass)
        }

        if (modal.animation) {
          angularDomEl.attr('modal-animation', 'true')
        }

        appendToElement.addClass(modalBodyClass)
        if (modal.scope) {
          // we need to explicitly add the modal index to the modal scope
          // because it is needed by ngStyle to compute the zIndex property.
          modal.scope.$$topModalIndex = topModalIndex
        }
        $animate.enter($compile(angularDomEl)(modal.scope), appendToElement)

        openedWindows.top().value.modalDomEl = angularDomEl
        openedWindows.top().value.modalOpener = modalOpener

        applyAriaHidden(angularDomEl)

        function applyAriaHidden(el) {
          if (!el || el[0].tagName === 'BODY') {
            return
          }

          getSiblings(el).forEach(function (sibling) {
            var elemIsAlreadyHidden = sibling.getAttribute('aria-hidden') === 'true',
              ariaHiddenCount = parseInt(sibling.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10)

            if (!ariaHiddenCount) {
              ariaHiddenCount = elemIsAlreadyHidden ? 1 : 0
            }

            sibling.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, ariaHiddenCount + 1)
            sibling.setAttribute('aria-hidden', 'true')
          })

          return applyAriaHidden(el.parent())

          function getSiblings(el) {
            var children = el.parent() ? el.parent().children() : []

            return Array.prototype.filter.call(children, function (child) {
              return child !== el[0]
            })
          }
        }
      }

      function broadcastClosing(modalWindow, resultOrReason, closing) {
        return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing)
          .defaultPrevented
      }

      function unhideBackgroundElements() {
        Array.prototype.forEach.call(
          document.querySelectorAll('[' + ARIA_HIDDEN_ATTRIBUTE_NAME + ']'),
          function (hiddenEl) {
            var ariaHiddenCount = parseInt(hiddenEl.getAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME), 10),
              newHiddenCount = ariaHiddenCount - 1
            hiddenEl.setAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME, newHiddenCount)

            if (!newHiddenCount) {
              hiddenEl.removeAttribute(ARIA_HIDDEN_ATTRIBUTE_NAME)
              hiddenEl.removeAttribute('aria-hidden')
            }
          }
        )
      }

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance)
        unhideBackgroundElements()
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true
          modalWindow.value.deferred.resolve(result)
          removeModalWindow(modalInstance, modalWindow.value.modalOpener)
          return true
        }

        return !modalWindow
      }

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance)
        unhideBackgroundElements()
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
          modalWindow.value.modalScope.$$uibDestructionScheduled = true
          modalWindow.value.deferred.reject(reason)
          removeModalWindow(modalInstance, modalWindow.value.modalOpener)
          return true
        }
        return !modalWindow
      }

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop()
        while (topModal && this.dismiss(topModal.key, reason)) {
          topModal = this.getTop()
        }
      }

      $modalStack.getTop = function () {
        return openedWindows.top()
      }

      $modalStack.modalRendered = function (modalInstance) {
        var modalWindow = openedWindows.get(modalInstance)
        if (modalWindow) {
          modalWindow.value.renderDeferred.resolve()
        }
      }

      $modalStack.focusFirstFocusableElement = function (list) {
        if (list.length > 0) {
          list[0].focus()
          return true
        }
        return false
      }

      $modalStack.focusLastFocusableElement = function (list) {
        if (list.length > 0) {
          list[list.length - 1].focus()
          return true
        }
        return false
      }

      $modalStack.isModalFocused = function (evt, modalWindow) {
        if (evt && modalWindow) {
          var modalDomEl = modalWindow.value.modalDomEl
          if (modalDomEl && modalDomEl.length) {
            return (evt.target || evt.srcElement) === modalDomEl[0]
          }
        }
        return false
      }

      $modalStack.isFocusInFirstItem = function (evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[0]
        }
        return false
      }

      $modalStack.isFocusInLastItem = function (evt, list) {
        if (list.length > 0) {
          return (evt.target || evt.srcElement) === list[list.length - 1]
        }
        return false
      }

      $modalStack.loadFocusElementList = function (modalWindow) {
        if (modalWindow) {
          var modalDomE1 = modalWindow.value.modalDomEl
          if (modalDomE1 && modalDomE1.length) {
            var elements = modalDomE1[0].querySelectorAll(tabbableSelector)
            return elements
              ? Array.prototype.filter.call(elements, function (element) {
                  return isVisible(element)
                })
              : elements
          }
        }
      }

      return $modalStack
    },
  ])

  .provider('$uibModal', function () {
    var $modalProvider = {
      options: {
        animation: true,
        backdrop: true, //can also be false or 'static'
        keyboard: true,
      },
      $get: [
        '$rootScope',
        '$q',
        '$document',
        '$templateRequest',
        '$controller',
        '$uibResolve',
        '$uibModalStack',
        function (
          $rootScope,
          $q,
          $document,
          $templateRequest,
          $controller,
          $uibResolve,
          $modalStack
        ) {
          var $modal = {}

          function getTemplatePromise(options) {
            return options.template
              ? $q.when(options.template)
              : $templateRequest(
                  angular.isFunction(options.templateUrl)
                    ? options.templateUrl()
                    : options.templateUrl
                )
          }

          var promiseChain = null
          $modal.getPromiseChain = function () {
            return promiseChain
          }

          $modal.open = function (modalOptions) {
            var modalResultDeferred = $q.defer()
            var modalOpenedDeferred = $q.defer()
            var modalClosedDeferred = $q.defer()
            var modalRenderDeferred = $q.defer()

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              closed: modalClosedDeferred.promise,
              rendered: modalRenderDeferred.promise,
              close: function (result) {
                return $modalStack.close(modalInstance, result)
              },
              dismiss: function (reason) {
                return $modalStack.dismiss(modalInstance, reason)
              },
            }

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions)
            modalOptions.resolve = modalOptions.resolve || {}
            modalOptions.appendTo = modalOptions.appendTo || $document.find('body').eq(0)

            if (!modalOptions.appendTo.length) {
              throw new Error(
                'appendTo element not found. Make sure that the element passed is in DOM.'
              )
            }

            //verify options
            if (!modalOptions.component && !modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of component or template or templateUrl options is required.')
            }

            var templateAndResolvePromise
            if (modalOptions.component) {
              templateAndResolvePromise = $q.when(
                $uibResolve.resolve(modalOptions.resolve, {}, null, null)
              )
            } else {
              templateAndResolvePromise = $q.all([
                getTemplatePromise(modalOptions),
                $uibResolve.resolve(modalOptions.resolve, {}, null, null),
              ])
            }

            function resolveWithTemplate() {
              return templateAndResolvePromise
            }

            // Wait for the resolution of the existing promise chain.
            // Then switch to our own combined promise dependency (regardless of how the previous modal fared).
            // Then add to $modalStack and resolve opened.
            // Finally clean up the chain variable if no subsequent modal has overwritten it.
            var samePromise
            samePromise = promiseChain = $q
              .all([promiseChain])
              .then(resolveWithTemplate, resolveWithTemplate)
              .then(
                function resolveSuccess(tplAndVars) {
                  var providedScope = modalOptions.scope || $rootScope

                  var modalScope = providedScope.$new()
                  modalScope.$close = modalInstance.close
                  modalScope.$dismiss = modalInstance.dismiss

                  modalScope.$on('$destroy', function () {
                    if (!modalScope.$$uibDestructionScheduled) {
                      modalScope.$dismiss('$uibUnscheduledDestruction')
                    }
                  })

                  var modal = {
                    scope: modalScope,
                    deferred: modalResultDeferred,
                    renderDeferred: modalRenderDeferred,
                    closedDeferred: modalClosedDeferred,
                    animation: modalOptions.animation,
                    backdrop: modalOptions.backdrop,
                    keyboard: modalOptions.keyboard,
                    backdropClass: modalOptions.backdropClass,
                    windowTopClass: modalOptions.windowTopClass,
                    windowClass: modalOptions.windowClass,
                    windowTemplateUrl: modalOptions.windowTemplateUrl,
                    ariaLabelledBy: modalOptions.ariaLabelledBy,
                    ariaDescribedBy: modalOptions.ariaDescribedBy,
                    size: modalOptions.size,
                    openedClass: modalOptions.openedClass,
                    appendTo: modalOptions.appendTo,
                  }

                  var component = {}
                  var ctrlInstance,
                    ctrlInstantiate,
                    ctrlLocals = {}

                  if (modalOptions.component) {
                    constructLocals(component, false, true, false)
                    component.name = modalOptions.component
                    modal.component = component
                  } else if (modalOptions.controller) {
                    constructLocals(ctrlLocals, true, false, true)

                    // the third param will make the controller instantiate later,private api
                    // @see https://github.com/angular/angular.js/blob/master/src/ng/controller.js#L126
                    ctrlInstantiate = $controller(
                      modalOptions.controller,
                      ctrlLocals,
                      true,
                      modalOptions.controllerAs
                    )
                    if (modalOptions.controllerAs && modalOptions.bindToController) {
                      ctrlInstance = ctrlInstantiate.instance
                      ctrlInstance.$close = modalScope.$close
                      ctrlInstance.$dismiss = modalScope.$dismiss
                      angular.extend(
                        ctrlInstance,
                        {
                          $resolve: ctrlLocals.$scope.$resolve,
                        },
                        providedScope
                      )
                    }

                    ctrlInstance = ctrlInstantiate()

                    if (angular.isFunction(ctrlInstance.$onInit)) {
                      ctrlInstance.$onInit()
                    }
                  }

                  if (!modalOptions.component) {
                    modal.content = tplAndVars[0]
                  }

                  $modalStack.open(modalInstance, modal)
                  modalOpenedDeferred.resolve(true)

                  function constructLocals(obj, template, instanceOnScope, injectable) {
                    obj.$scope = modalScope
                    obj.$scope.$resolve = {}
                    if (instanceOnScope) {
                      obj.$scope.$uibModalInstance = modalInstance
                    } else {
                      obj.$uibModalInstance = modalInstance
                    }

                    var resolves = template ? tplAndVars[1] : tplAndVars
                    angular.forEach(resolves, function (value, key) {
                      if (injectable) {
                        obj[key] = value
                      }

                      obj.$scope.$resolve[key] = value
                    })
                  }
                },
                function resolveError(reason) {
                  modalOpenedDeferred.reject(reason)
                  modalResultDeferred.reject(reason)
                }
              )
              ['finally'](function () {
                if (promiseChain === samePromise) {
                  promiseChain = null
                }
              })

            return modalInstance
          }

          return $modal
        },
      ],
    }

    return $modalProvider
  })

angular
  .module('ui.bootstrap.paging', [])
  /**
   * Helper internal service for generating common controller code between the
   * pager and pagination components
   */
  .factory('uibPaging', [
    '$parse',
    function ($parse) {
      return {
        create: function (ctrl, $scope, $attrs) {
          ctrl.setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop
          ctrl.ngModelCtrl = { $setViewValue: angular.noop } // nullModelCtrl
          ctrl._watchers = []

          ctrl.init = function (ngModelCtrl, config) {
            ctrl.ngModelCtrl = ngModelCtrl
            ctrl.config = config

            ngModelCtrl.$render = function () {
              ctrl.render()
            }

            if ($attrs.itemsPerPage) {
              ctrl._watchers.push(
                $scope.$parent.$watch($attrs.itemsPerPage, function (value) {
                  ctrl.itemsPerPage = parseInt(value, 10)
                  $scope.totalPages = ctrl.calculateTotalPages()
                  ctrl.updatePage()
                })
              )
            } else {
              ctrl.itemsPerPage = config.itemsPerPage
            }

            $scope.$watch('totalItems', function (newTotal, oldTotal) {
              if (angular.isDefined(newTotal) || newTotal !== oldTotal) {
                $scope.totalPages = ctrl.calculateTotalPages()
                ctrl.updatePage()
              }
            })
          }

          ctrl.calculateTotalPages = function () {
            var totalPages =
              ctrl.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / ctrl.itemsPerPage)
            return Math.max(totalPages || 0, 1)
          }

          ctrl.render = function () {
            $scope.page = parseInt(ctrl.ngModelCtrl.$viewValue, 10) || 1
          }

          $scope.selectPage = function (page, evt) {
            if (evt) {
              evt.preventDefault()
            }

            var clickAllowed = !$scope.ngDisabled || !evt
            if (clickAllowed && $scope.page !== page && page > 0 && page <= $scope.totalPages) {
              if (evt && evt.target) {
                evt.target.blur()
              }
              ctrl.ngModelCtrl.$setViewValue(page)
              ctrl.ngModelCtrl.$render()
            }
          }

          $scope.getText = function (key) {
            return $scope[key + 'Text'] || ctrl.config[key + 'Text']
          }

          $scope.noPrevious = function () {
            return $scope.page === 1
          }

          $scope.noNext = function () {
            return $scope.page === $scope.totalPages
          }

          ctrl.updatePage = function () {
            ctrl.setNumPages($scope.$parent, $scope.totalPages) // Readonly variable

            if ($scope.page > $scope.totalPages) {
              $scope.selectPage($scope.totalPages)
            } else {
              ctrl.ngModelCtrl.$render()
            }
          }

          $scope.$on('$destroy', function () {
            while (ctrl._watchers.length) {
              ctrl._watchers.shift()()
            }
          })
        },
      }
    },
  ])

angular
  .module('ui.bootstrap.pager', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])

  .controller('UibPagerController', [
    '$scope',
    '$attrs',
    'uibPaging',
    'uibPagerConfig',
    function ($scope, $attrs, uibPaging, uibPagerConfig) {
      $scope.align = angular.isDefined($attrs.align)
        ? $scope.$parent.$eval($attrs.align)
        : uibPagerConfig.align

      uibPaging.create(this, $scope, $attrs)
    },
  ])

  .constant('uibPagerConfig', {
    itemsPerPage: 10,
    previousText: '« Previous',
    nextText: 'Next »',
    align: true,
  })

  .directive('uibPager', [
    'uibPagerConfig',
    function (uibPagerConfig) {
      return {
        scope: {
          totalItems: '=',
          previousText: '@',
          nextText: '@',
          ngDisabled: '=',
        },
        require: ['uibPager', '?ngModel'],
        restrict: 'A',
        controller: 'UibPagerController',
        controllerAs: 'pager',
        templateUrl: function (element, attrs) {
          return attrs.templateUrl || 'uib/template/pager/pager.html'
        },
        link: function (scope, element, attrs, ctrls) {
          element.addClass('pager')
          var paginationCtrl = ctrls[0],
            ngModelCtrl = ctrls[1]

          if (!ngModelCtrl) {
            return // do nothing if no ng-model
          }

          paginationCtrl.init(ngModelCtrl, uibPagerConfig)
        },
      }
    },
  ])

angular
  .module('ui.bootstrap.pagination', ['ui.bootstrap.paging', 'ui.bootstrap.tabindex'])
  .controller('UibPaginationController', [
    '$scope',
    '$attrs',
    '$parse',
    'uibPaging',
    'uibPaginationConfig',
    function ($scope, $attrs, $parse, uibPaging, uibPaginationConfig) {
      var ctrl = this
      // Setup configuration parameters
      var maxSize = angular.isDefined($attrs.maxSize)
          ? $scope.$parent.$eval($attrs.maxSize)
          : uibPaginationConfig.maxSize,
        rotate = angular.isDefined($attrs.rotate)
          ? $scope.$parent.$eval($attrs.rotate)
          : uibPaginationConfig.rotate,
        forceEllipses = angular.isDefined($attrs.forceEllipses)
          ? $scope.$parent.$eval($attrs.forceEllipses)
          : uibPaginationConfig.forceEllipses,
        boundaryLinkNumbers = angular.isDefined($attrs.boundaryLinkNumbers)
          ? $scope.$parent.$eval($attrs.boundaryLinkNumbers)
          : uibPaginationConfig.boundaryLinkNumbers,
        pageLabel = angular.isDefined($attrs.pageLabel)
          ? function (idx) {
              return $scope.$parent.$eval($attrs.pageLabel, { $page: idx })
            }
          : angular.identity
      $scope.boundaryLinks = angular.isDefined($attrs.boundaryLinks)
        ? $scope.$parent.$eval($attrs.boundaryLinks)
        : uibPaginationConfig.boundaryLinks
      $scope.directionLinks = angular.isDefined($attrs.directionLinks)
        ? $scope.$parent.$eval($attrs.directionLinks)
        : uibPaginationConfig.directionLinks
      $attrs.$set('role', 'menu')

      uibPaging.create(this, $scope, $attrs)

      if ($attrs.maxSize) {
        ctrl._watchers.push(
          $scope.$parent.$watch($parse($attrs.maxSize), function (value) {
            maxSize = parseInt(value, 10)
            ctrl.render()
          })
        )
      }

      // Create page object used in template
      function makePage(number, text, isActive) {
        return {
          number: number,
          text: text,
          active: isActive,
        }
      }

      function getPages(currentPage, totalPages) {
        var pages = []

        // Default page limits
        var startPage = 1,
          endPage = totalPages
        var isMaxSized = angular.isDefined(maxSize) && maxSize < totalPages

        // recompute if maxSize
        if (isMaxSized) {
          if (rotate) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(maxSize / 2), 1)
            endPage = startPage + maxSize - 1

            // Adjust if limit is exceeded
            if (endPage > totalPages) {
              endPage = totalPages
              startPage = endPage - maxSize + 1
            }
          } else {
            // Visible pages are paginated with maxSize
            startPage = (Math.ceil(currentPage / maxSize) - 1) * maxSize + 1

            // Adjust last page if limit is exceeded
            endPage = Math.min(startPage + maxSize - 1, totalPages)
          }
        }

        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
          var page = makePage(number, pageLabel(number), number === currentPage)
          pages.push(page)
        }

        // Add links to move between page sets
        if (isMaxSized && maxSize > 0 && (!rotate || forceEllipses || boundaryLinkNumbers)) {
          if (startPage > 1) {
            if (!boundaryLinkNumbers || startPage > 3) {
              //need ellipsis for all options unless range is too close to beginning
              var previousPageSet = makePage(startPage - 1, '...', false)
              pages.unshift(previousPageSet)
            }
            if (boundaryLinkNumbers) {
              if (startPage === 3) {
                //need to replace ellipsis when the buttons would be sequential
                var secondPageLink = makePage(2, '2', false)
                pages.unshift(secondPageLink)
              }
              //add the first page
              var firstPageLink = makePage(1, '1', false)
              pages.unshift(firstPageLink)
            }
          }

          if (endPage < totalPages) {
            if (!boundaryLinkNumbers || endPage < totalPages - 2) {
              //need ellipsis for all options unless range is too close to end
              var nextPageSet = makePage(endPage + 1, '...', false)
              pages.push(nextPageSet)
            }
            if (boundaryLinkNumbers) {
              if (endPage === totalPages - 2) {
                //need to replace ellipsis when the buttons would be sequential
                var secondToLastPageLink = makePage(totalPages - 1, totalPages - 1, false)
                pages.push(secondToLastPageLink)
              }
              //add the last page
              var lastPageLink = makePage(totalPages, totalPages, false)
              pages.push(lastPageLink)
            }
          }
        }
        return pages
      }

      var originalRender = this.render
      this.render = function () {
        originalRender()
        if ($scope.page > 0 && $scope.page <= $scope.totalPages) {
          $scope.pages = getPages($scope.page, $scope.totalPages)
        }
      }
    },
  ])

  .constant('uibPaginationConfig', {
    itemsPerPage: 10,
    boundaryLinks: false,
    boundaryLinkNumbers: false,
    directionLinks: true,
    firstText: 'First',
    previousText: 'Previous',
    nextText: 'Next',
    lastText: 'Last',
    rotate: true,
    forceEllipses: false,
  })

  .directive('uibPagination', [
    '$parse',
    'uibPaginationConfig',
    function ($parse, uibPaginationConfig) {
      return {
        scope: {
          totalItems: '=',
          firstText: '@',
          previousText: '@',
          nextText: '@',
          lastText: '@',
          ngDisabled: '=',
        },
        require: ['uibPagination', '?ngModel'],
        restrict: 'A',
        controller: 'UibPaginationController',
        controllerAs: 'pagination',
        templateUrl: function (element, attrs) {
          return attrs.templateUrl || 'uib/template/pagination/pagination.html'
        },
        link: function (scope, element, attrs, ctrls) {
          element.addClass('pagination')
          var paginationCtrl = ctrls[0],
            ngModelCtrl = ctrls[1]

          if (!ngModelCtrl) {
            return // do nothing if no ng-model
          }

          paginationCtrl.init(ngModelCtrl, uibPaginationConfig)
        },
      }
    },
  ])

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular
  .module('ui.bootstrap.tooltip', ['ui.bootstrap.position', 'ui.bootstrap.stackedMap'])

  /**
   * The $tooltip service creates tooltip- and popover-like directives as well as
   * houses global options for them.
   */
  .provider('$uibTooltip', function () {
    // The default options tooltip and popover.
    var defaultOptions = {
      placement: 'top',
      placementClassPrefix: 'bs-tooltip-',
      animation: true,
      popupDelay: 0,
      popupCloseDelay: 0,
      useContentExp: false,
    }

    // Default hide triggers for each show trigger
    var triggerMap = {
      mouseenter: 'mouseleave',
      click: 'click',
      outsideClick: 'outsideClick',
      focus: 'blur',
      none: '',
    }

    // The options specified to the provider globally.
    var globalOptions = {}

    /**
     * `options({})` allows global configuration of all tooltips in the
     * application.
     *
     *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
     *     // place tooltips left instead of top by default
     *     $tooltipProvider.options( { placement: 'left' } );
     *   });
     */
    this.options = function (value) {
      angular.extend(globalOptions, value)
    }

    /**
     * This allows you to extend the set of trigger mappings available. E.g.:
     *
     *   $tooltipProvider.setTriggers( { 'openTrigger': 'closeTrigger' } );
     */
    this.setTriggers = function setTriggers(triggers) {
      angular.extend(triggerMap, triggers)
    }

    /**
     * This is a helper function for translating camel-case to snake_case.
     */
    function snake_case(name) {
      var regexp = /[A-Z]/g
      var separator = '-'
      return name.replace(regexp, function (letter, pos) {
        return (pos ? separator : '') + letter.toLowerCase()
      })
    }

    /**
     * Returns the actual instance of the $tooltip service.
     * TODO support multiple triggers
     */
    this.$get = [
      '$window',
      '$compile',
      '$timeout',
      '$document',
      '$uibPosition',
      '$interpolate',
      '$rootScope',
      '$parse',
      '$$stackedMap',
      function (
        $window,
        $compile,
        $timeout,
        $document,
        $position,
        $interpolate,
        $rootScope,
        $parse,
        $$stackedMap
      ) {
        var openedTooltips = $$stackedMap.createNew()
        $document.on('keyup', keypressListener)

        $rootScope.$on('$destroy', function () {
          $document.off('keyup', keypressListener)
        })

        function keypressListener(e) {
          if (e.which === 27) {
            var last = openedTooltips.top()
            if (last) {
              last.value.close()
              last = null
            }
          }
        }

        return function $tooltip(ttType, prefix, defaultTriggerShow, options) {
          options = angular.extend({}, defaultOptions, globalOptions, options)

          /**
           * Returns an object of show and hide triggers.
           *
           * If a trigger is supplied,
           * it is used to show the tooltip; otherwise, it will use the `trigger`
           * option passed to the `$tooltipProvider.options` method; else it will
           * default to the trigger supplied to this directive factory.
           *
           * The hide trigger is based on the show trigger. If the `trigger` option
           * was passed to the `$tooltipProvider.options` method, it will use the
           * mapped trigger from `triggerMap` or the passed trigger if the map is
           * undefined; otherwise, it uses the `triggerMap` value of the show
           * trigger; else it will just use the show trigger.
           */
          function getTriggers(trigger) {
            var show = (trigger || options.trigger || defaultTriggerShow).split(' ')
            var hide = show.map(function (trigger) {
              return triggerMap[trigger] || trigger
            })
            return {
              show: show,
              hide: hide,
            }
          }

          var directiveName = snake_case(ttType)

          var startSym = $interpolate.startSymbol()
          var endSym = $interpolate.endSymbol()
          var template =
            '<div ' +
            directiveName +
            '-popup ' +
            'uib-title="' +
            startSym +
            'title' +
            endSym +
            '" ' +
            (options.useContentExp
              ? 'content-exp="contentExp()" '
              : 'content="' + startSym + 'content' + endSym + '" ') +
            'origin-scope="origScope" ' +
            'class="uib-position-measure ' +
            prefix +
            '" ' +
            'tooltip-animation-class="fade"' +
            'uib-tooltip-classes ' +
            'ng-class="{ show: isOpen }" ' +
            '>' +
            '</div>'

          return {
            compile: function (tElem, tAttrs) {
              var tooltipLinker = $compile(template)

              return function link(scope, element, attrs, tooltipCtrl) {
                var tooltip
                var tooltipLinkedScope
                var transitionTimeout
                var showTimeout
                var hideTimeout
                var positionTimeout
                var adjustmentTimeout
                var appendToBody = angular.isDefined(options.appendToBody)
                  ? options.appendToBody
                  : false
                var triggers = getTriggers(undefined)
                var hasEnableExp = angular.isDefined(attrs[prefix + 'Enable'])
                var ttScope = scope.$new(true)
                var repositionScheduled = false
                var isOpenParse = angular.isDefined(attrs[prefix + 'IsOpen'])
                  ? $parse(attrs[prefix + 'IsOpen'])
                  : false
                var contentParse = options.useContentExp ? $parse(attrs[ttType]) : false
                var observers = []
                var lastPlacement

                var positionTooltip = function () {
                  // check if tooltip exists and is not empty
                  if (!tooltip || !tooltip.html()) {
                    return
                  }

                  if (!positionTimeout) {
                    positionTimeout = $timeout(
                      function () {
                        var placementClasses = $position.parsePlacement(ttScope.placement)
                        var placement =
                          placementClasses[1] === 'center'
                            ? placementClasses[0]
                            : placementClasses[0] + '-' + placementClasses[1]

                        // need to add classes prior to placement to allow correct tooltip width calculations
                        if (!tooltip.hasClass(placementClasses[0])) {
                          tooltip.removeClass(lastPlacement.split('-')[0])
                          tooltip.addClass(placementClasses[0])
                        }

                        if (!tooltip.hasClass(options.placementClassPrefix + placement)) {
                          tooltip.removeClass(options.placementClassPrefix + lastPlacement)
                          tooltip.addClass(options.placementClassPrefix + placement)
                        }

                        // Take into account tooltup margins, since boostrap css draws tooltip arrow inside margins
                        var ttPosition = $position.positionElements(
                          element,
                          tooltip,
                          ttScope.placement,
                          appendToBody,
                          true
                        )
                        var initialHeight = angular.isDefined(tooltip.offsetHeight)
                          ? tooltip.offsetHeight
                          : tooltip.prop('offsetHeight')
                        var elementPos = appendToBody
                          ? $position.offset(element)
                          : $position.position(element)
                        tooltip.css({ top: ttPosition.top + 'px', left: ttPosition.left + 'px' })

                        adjustmentTimeout = $timeout(
                          function () {
                            var currentHeight = angular.isDefined(tooltip.offsetHeight)
                              ? tooltip.offsetHeight
                              : tooltip.prop('offsetHeight')
                            var adjustment = $position.adjustTop(
                              placementClasses,
                              elementPos,
                              initialHeight,
                              currentHeight
                            )
                            if (adjustment) {
                              tooltip.css(adjustment)
                            }
                            adjustmentTimeout = null
                          },
                          0,
                          false
                        )

                        // first time through tt element will have the
                        // uib-position-measure class or if the placement
                        // has changed we need to position the arrow.
                        if (tooltip.hasClass('uib-position-measure')) {
                          $position.positionArrow(tooltip, ttPosition.placement)
                          tooltip.removeClass('uib-position-measure')
                        } else if (lastPlacement !== ttPosition.placement) {
                          $position.positionArrow(tooltip, ttPosition.placement)
                        }
                        lastPlacement = ttPosition.placement

                        positionTimeout = null
                      },
                      0,
                      false
                    )
                  }
                }

                // Set up the correct scope to allow transclusion later
                ttScope.origScope = scope

                // By default, the tooltip is not open.
                // TODO add ability to start tooltip opened
                ttScope.isOpen = false

                function toggleTooltipBind() {
                  if (!ttScope.isOpen) {
                    showTooltipBind()
                  } else {
                    hideTooltipBind()
                  }
                }

                // Show the tooltip with delay if specified, otherwise show it immediately
                function showTooltipBind() {
                  if (hasEnableExp && !scope.$eval(attrs[prefix + 'Enable'])) {
                    return
                  }

                  cancelHide()
                  prepareTooltip()

                  if (ttScope.popupDelay) {
                    // Do nothing if the tooltip was already scheduled to pop-up.
                    // This happens if show is triggered multiple times before any hide is triggered.
                    if (!showTimeout) {
                      showTimeout = $timeout(show, ttScope.popupDelay, false)
                    }
                  } else {
                    show()
                  }
                }

                function hideTooltipBind() {
                  cancelShow()

                  if (ttScope.popupCloseDelay) {
                    if (!hideTimeout) {
                      hideTimeout = $timeout(hide, ttScope.popupCloseDelay, false)
                    }
                  } else {
                    hide()
                  }
                }

                // Show the tooltip popup element.
                function show() {
                  cancelShow()
                  cancelHide()

                  // Don't show empty tooltips.
                  if (!ttScope.content) {
                    return angular.noop
                  }

                  createTooltip()

                  // And show the tooltip.
                  ttScope.$evalAsync(function () {
                    ttScope.isOpen = true
                    assignIsOpen(true)
                    positionTooltip()
                  })
                }

                function cancelShow() {
                  if (showTimeout) {
                    $timeout.cancel(showTimeout)
                    showTimeout = null
                  }

                  if (positionTimeout) {
                    $timeout.cancel(positionTimeout)
                    positionTimeout = null
                  }
                }

                // Hide the tooltip popup element.
                function hide() {
                  if (!ttScope) {
                    return
                  }

                  // First things first: we don't show it anymore.
                  ttScope.$evalAsync(function () {
                    if (ttScope) {
                      ttScope.isOpen = false
                      assignIsOpen(false)
                      // And now we remove it from the DOM. However, if we have animation, we
                      // need to wait for it to expire beforehand.
                      // FIXME: this is a placeholder for a port of the transitions library.
                      // The fade transition in TWBS is 150ms.
                      if (ttScope.animation) {
                        if (!transitionTimeout) {
                          transitionTimeout = $timeout(removeTooltip, 150, false)
                        }
                      } else {
                        removeTooltip()
                      }
                    }
                  })
                }

                function cancelHide() {
                  if (hideTimeout) {
                    $timeout.cancel(hideTimeout)
                    hideTimeout = null
                  }

                  if (transitionTimeout) {
                    $timeout.cancel(transitionTimeout)
                    transitionTimeout = null
                  }
                }

                function createTooltip() {
                  // There can only be one tooltip element per directive shown at once.
                  if (tooltip) {
                    return
                  }

                  tooltipLinkedScope = ttScope.$new()
                  tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {
                    if (appendToBody) {
                      $document.find('body').append(tooltip)
                    } else {
                      element.after(tooltip)
                    }
                  })

                  openedTooltips.add(ttScope, {
                    close: hide,
                  })

                  prepObservers()
                }

                function removeTooltip() {
                  cancelShow()
                  cancelHide()
                  unregisterObservers()

                  if (tooltip) {
                    tooltip.remove()

                    tooltip = null
                    if (adjustmentTimeout) {
                      $timeout.cancel(adjustmentTimeout)
                    }
                  }

                  openedTooltips.remove(ttScope)

                  if (tooltipLinkedScope) {
                    tooltipLinkedScope.$destroy()
                    tooltipLinkedScope = null
                  }
                }

                /**
                 * Set the initial scope values. Once
                 * the tooltip is created, the observers
                 * will be added to keep things in sync.
                 */
                function prepareTooltip() {
                  ttScope.title = attrs[prefix + 'Title']
                  if (contentParse) {
                    ttScope.content = contentParse(scope)
                  } else {
                    ttScope.content = attrs[ttType]
                  }

                  ttScope.popupClass = attrs[prefix + 'Class']
                  ttScope.placement = angular.isDefined(attrs[prefix + 'Placement'])
                    ? attrs[prefix + 'Placement']
                    : options.placement
                  var placement = $position.parsePlacement(ttScope.placement)
                  lastPlacement = placement[1] ? placement[0] + '-' + placement[1] : placement[0]

                  var delay = parseInt(attrs[prefix + 'PopupDelay'], 10)
                  var closeDelay = parseInt(attrs[prefix + 'PopupCloseDelay'], 10)
                  ttScope.popupDelay = !isNaN(delay) ? delay : options.popupDelay
                  ttScope.popupCloseDelay = !isNaN(closeDelay)
                    ? closeDelay
                    : options.popupCloseDelay
                }

                function assignIsOpen(isOpen) {
                  if (isOpenParse && angular.isFunction(isOpenParse.assign)) {
                    isOpenParse.assign(scope, isOpen)
                  }
                }

                ttScope.contentExp = function () {
                  return ttScope.content
                }

                /**
                 * Observe the relevant attributes.
                 */
                attrs.$observe('disabled', function (val) {
                  if (val) {
                    cancelShow()
                  }

                  if (val && ttScope.isOpen) {
                    hide()
                  }
                })

                if (isOpenParse) {
                  scope.$watch(isOpenParse, function (val) {
                    if (ttScope && !val === ttScope.isOpen) {
                      toggleTooltipBind()
                    }
                  })
                }

                function prepObservers() {
                  observers.length = 0

                  if (contentParse) {
                    observers.push(
                      scope.$watch(contentParse, function (val) {
                        ttScope.content = val
                        if (!val && ttScope.isOpen) {
                          hide()
                        }
                      })
                    )

                    observers.push(
                      tooltipLinkedScope.$watch(function () {
                        if (!repositionScheduled) {
                          repositionScheduled = true
                          tooltipLinkedScope.$$postDigest(function () {
                            repositionScheduled = false
                            if (ttScope && ttScope.isOpen) {
                              positionTooltip()
                            }
                          })
                        }
                      })
                    )
                  } else {
                    observers.push(
                      attrs.$observe(ttType, function (val) {
                        ttScope.content = val
                        if (!val && ttScope.isOpen) {
                          hide()
                        } else {
                          positionTooltip()
                        }
                      })
                    )
                  }

                  observers.push(
                    attrs.$observe(prefix + 'Title', function (val) {
                      ttScope.title = val
                      if (ttScope.isOpen) {
                        positionTooltip()
                      }
                    })
                  )

                  observers.push(
                    attrs.$observe(prefix + 'Placement', function (val) {
                      ttScope.placement = val ? val : options.placement
                      if (ttScope.isOpen) {
                        positionTooltip()
                      }
                    })
                  )
                }

                function unregisterObservers() {
                  if (observers.length) {
                    angular.forEach(observers, function (observer) {
                      observer()
                    })
                    observers.length = 0
                  }
                }

                // hide tooltips/popovers for outsideClick trigger
                function bodyHideTooltipBind(e) {
                  if (!ttScope || !ttScope.isOpen || !tooltip) {
                    return
                  }
                  // make sure the tooltip/popover link or tool tooltip/popover itself were not clicked
                  if (!element[0].contains(e.target) && !tooltip[0].contains(e.target)) {
                    hideTooltipBind()
                  }
                }

                // KeyboardEvent handler to hide the tooltip on Escape key press
                function hideOnEscapeKey(e) {
                  if (e.which === 27) {
                    hideTooltipBind()
                  }
                }

                var unregisterTriggers = function () {
                  triggers.show.forEach(function (trigger) {
                    if (trigger === 'outsideClick') {
                      element.off('click', toggleTooltipBind)
                    } else {
                      element.off(trigger, showTooltipBind)
                      element.off(trigger, toggleTooltipBind)
                    }
                    element.off('keypress', hideOnEscapeKey)
                  })
                  triggers.hide.forEach(function (trigger) {
                    if (trigger === 'outsideClick') {
                      $document.off('click', bodyHideTooltipBind)
                    } else {
                      element.off(trigger, hideTooltipBind)
                    }
                  })
                }

                function prepTriggers() {
                  var showTriggers = [],
                    hideTriggers = []
                  var val = scope.$eval(attrs[prefix + 'Trigger'])
                  unregisterTriggers()

                  if (angular.isObject(val)) {
                    Object.keys(val).forEach(function (key) {
                      showTriggers.push(key)
                      hideTriggers.push(val[key])
                    })
                    triggers = {
                      show: showTriggers,
                      hide: hideTriggers,
                    }
                  } else {
                    triggers = getTriggers(val)
                  }

                  if (triggers.show !== 'none') {
                    triggers.show.forEach(function (trigger, idx) {
                      if (trigger === 'outsideClick') {
                        element.on('click', toggleTooltipBind)
                        $document.on('click', bodyHideTooltipBind)
                      } else if (trigger === triggers.hide[idx]) {
                        element.on(trigger, toggleTooltipBind)
                      } else if (trigger) {
                        element.on(trigger, showTooltipBind)
                        element.on(triggers.hide[idx], hideTooltipBind)
                      }
                      element.on('keypress', hideOnEscapeKey)
                    })
                  }
                }

                prepTriggers()

                var animation = scope.$eval(attrs[prefix + 'Animation'])
                ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation

                var appendToBodyVal
                var appendKey = prefix + 'AppendToBody'
                if (appendKey in attrs && attrs[appendKey] === undefined) {
                  appendToBodyVal = true
                } else {
                  appendToBodyVal = scope.$eval(attrs[appendKey])
                }

                appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody

                // Make sure tooltip is destroyed and removed.
                scope.$on('$destroy', function onDestroyTooltip() {
                  unregisterTriggers()
                  removeTooltip()
                  ttScope = null
                })
              }
            },
          }
        }
      },
    ]
  })

  // This is mostly ngInclude code but with a custom scope
  .directive('uibTooltipTemplateTransclude', [
    '$animate',
    '$sce',
    '$compile',
    '$templateRequest',
    function ($animate, $sce, $compile, $templateRequest) {
      return {
        link: function (scope, elem, attrs) {
          var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope)

          var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement

          var cleanupLastIncludeContent = function () {
            if (previousElement) {
              previousElement.remove()
              previousElement = null
            }

            if (currentScope) {
              currentScope.$destroy()
              currentScope = null
            }

            if (currentElement) {
              $animate.leave(currentElement).then(function () {
                previousElement = null
              })
              previousElement = currentElement
              currentElement = null
            }
          }

          scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude), function (src) {
            var thisChangeId = ++changeCounter

            if (src) {
              //set the 2nd param to true to ignore the template request error so that the inner
              //contents and scope can be cleaned up.
              $templateRequest(src, true).then(
                function (response) {
                  if (thisChangeId !== changeCounter) {
                    return
                  }
                  var newScope = origScope.$new()
                  var template = response

                  var clone = $compile(template)(newScope, function (clone) {
                    cleanupLastIncludeContent()
                    $animate.enter(clone, elem)
                  })

                  currentScope = newScope
                  currentElement = clone

                  currentScope.$emit('$includeContentLoaded', src)
                },
                function () {
                  if (thisChangeId === changeCounter) {
                    cleanupLastIncludeContent()
                    scope.$emit('$includeContentError', src)
                  }
                }
              )
              scope.$emit('$includeContentRequested', src)
            } else {
              cleanupLastIncludeContent()
            }
          })

          scope.$on('$destroy', cleanupLastIncludeContent)
        },
      }
    },
  ])

  /**
   * Note that it's intentional that these classes are *not* applied through $animate.
   * They must not be animated as they're expected to be present on the tooltip on
   * initialization.
   */
  .directive('uibTooltipClasses', [
    '$uibPosition',
    function ($uibPosition) {
      return {
        restrict: 'A',
        link: function (scope, element, attrs) {
          // need to set the primary position so the
          // arrow has space during position measure.
          // tooltip.positionTooltip()
          if (scope.placement) {
            // // There are no top-left etc... classes
            // // in TWBS, so we need the primary position.
            var position = $uibPosition.parsePlacement(scope.placement)
            element.addClass(position[0])
          }

          if (scope.popupClass) {
            element.addClass(scope.popupClass)
          }

          if (scope.animation) {
            element.addClass(attrs.tooltipAnimationClass)
          }
        },
      }
    },
  ])

  .directive('uibTooltipPopup', function () {
    return {
      restrict: 'A',
      scope: { content: '@' },
      templateUrl: 'uib/template/tooltip/tooltip-popup.html',
    }
  })

  .directive('uibTooltip', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibTooltip', 'tooltip', 'mouseenter')
    },
  ])

  .directive('uibTooltipTemplatePopup', function () {
    return {
      restrict: 'A',
      scope: { contentExp: '&', originScope: '&' },
      templateUrl: 'uib/template/tooltip/tooltip-template-popup.html',
    }
  })

  .directive('uibTooltipTemplate', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibTooltipTemplate', 'tooltip', 'mouseenter', {
        useContentExp: true,
      })
    },
  ])

  .directive('uibTooltipHtmlPopup', function () {
    return {
      restrict: 'A',
      scope: { contentExp: '&' },
      templateUrl: 'uib/template/tooltip/tooltip-html-popup.html',
    }
  })

  .directive('uibTooltipHtml', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibTooltipHtml', 'tooltip', 'mouseenter', {
        useContentExp: true,
      })
    },
  ])

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, and selector delegatation.
 */
angular
  .module('ui.bootstrap.popover', ['ui.bootstrap.tooltip'])

  .directive('uibPopoverTemplatePopup', function () {
    return {
      restrict: 'A',
      scope: { uibTitle: '@', contentExp: '&', originScope: '&' },
      templateUrl: 'uib/template/popover/popover-template.html',
    }
  })

  .directive('uibPopoverTemplate', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibPopoverTemplate', 'popover', 'click', {
        placementClassPrefix: 'bs-popover-',
        useContentExp: true,
      })
    },
  ])

  .directive('uibPopoverHtmlPopup', function () {
    return {
      restrict: 'A',
      scope: { contentExp: '&', uibTitle: '@' },
      templateUrl: 'uib/template/popover/popover-html.html',
    }
  })

  .directive('uibPopoverHtml', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibPopoverHtml', 'popover', 'click', {
        placementClassPrefix: 'bs-popover-',
        useContentExp: true,
      })
    },
  ])

  .directive('uibPopoverPopup', function () {
    return {
      restrict: 'A',
      scope: { uibTitle: '@', content: '@' },
      templateUrl: 'uib/template/popover/popover.html',
    }
  })

  .directive('uibPopover', [
    '$uibTooltip',
    function ($uibTooltip) {
      return $uibTooltip('uibPopover', 'popover', 'click', {
        placementClassPrefix: 'bs-popover-',
      })
    },
  ])

angular
  .module('ui.bootstrap.progressbar', [])

  .constant('uibProgressConfig', {
    animate: true,
    max: 100,
  })

  .controller('UibProgressController', [
    '$scope',
    '$attrs',
    'uibProgressConfig',
    function ($scope, $attrs, progressConfig) {
      var self = this,
        animate = angular.isDefined($attrs.animate)
          ? $scope.$parent.$eval($attrs.animate)
          : progressConfig.animate

      this.bars = []
      $scope.max = getMaxOrDefault()

      this.addBar = function (bar, element, attrs) {
        if (!animate) {
          element.css({ transition: 'none' })
        }

        this.bars.push(bar)

        bar.max = getMaxOrDefault()
        bar.title = attrs && angular.isDefined(attrs.title) ? attrs.title : 'progressbar'

        bar.$watch('value', function (value) {
          bar.recalculatePercentage()
        })

        bar.recalculatePercentage = function () {
          var totalPercentage = self.bars.reduce(function (total, bar) {
            bar.percent = +((100 * bar.value) / bar.max).toFixed(2)
            return total + bar.percent
          }, 0)

          if (totalPercentage > 100) {
            bar.percent -= totalPercentage - 100
          }
        }

        bar.$on('$destroy', function () {
          element = null
          self.removeBar(bar)
        })
      }

      this.removeBar = function (bar) {
        this.bars.splice(this.bars.indexOf(bar), 1)
        this.bars.forEach(function (bar) {
          bar.recalculatePercentage()
        })
      }

      //$attrs.$observe('maxParam', function(maxParam) {
      $scope.$watch('maxParam', function (maxParam) {
        self.bars.forEach(function (bar) {
          bar.max = getMaxOrDefault()
          bar.recalculatePercentage()
        })
      })

      function getMaxOrDefault() {
        return angular.isDefined($scope.maxParam) ? $scope.maxParam : progressConfig.max
      }
    },
  ])

  .directive('uibProgress', function () {
    return {
      replace: true,
      transclude: true,
      controller: 'UibProgressController',
      require: 'uibProgress',
      scope: {
        maxParam: '=?max',
      },
      templateUrl: 'uib/template/progressbar/progress.html',
    }
  })

  .directive('uibBar', function () {
    return {
      replace: true,
      transclude: true,
      require: '^uibProgress',
      scope: {
        value: '=',
        type: '@',
        striped: '=?',
      },
      templateUrl: 'uib/template/progressbar/bar.html',
      link: function (scope, element, attrs, progressCtrl) {
        progressCtrl.addBar(scope, element, attrs)
      },
    }
  })

  .directive('uibProgressbar', function () {
    return {
      replace: true,
      transclude: true,
      controller: 'UibProgressController',
      scope: {
        value: '=',
        maxParam: '=?max',
        type: '@',
        striped: '=?',
      },
      templateUrl: 'uib/template/progressbar/progressbar.html',
      link: function (scope, element, attrs, progressCtrl) {
        progressCtrl.addBar(scope, angular.element(element.children()[0]), { title: attrs.title })
      },
    }
  })

angular
  .module('ui.bootstrap.rating', [])

  .constant('uibRatingConfig', {
    max: 5,
    stateOn: null,
    stateOff: null,
    enableReset: true,
    titles: ['one', 'two', 'three', 'four', 'five'],
  })

  .controller('UibRatingController', [
    '$scope',
    '$attrs',
    'uibRatingConfig',
    function ($scope, $attrs, ratingConfig) {
      var ngModelCtrl = { $setViewValue: angular.noop },
        self = this

      this.init = function (ngModelCtrl_) {
        ngModelCtrl = ngModelCtrl_
        ngModelCtrl.$render = this.render

        ngModelCtrl.$formatters.push(function (value) {
          if (angular.isNumber(value) && value << 0 !== value) {
            value = Math.round(value)
          }

          return value
        })

        this.stateOn = angular.isDefined($attrs.stateOn)
          ? $scope.$parent.$eval($attrs.stateOn)
          : ratingConfig.stateOn
        this.stateOff = angular.isDefined($attrs.stateOff)
          ? $scope.$parent.$eval($attrs.stateOff)
          : ratingConfig.stateOff
        this.enableReset = angular.isDefined($attrs.enableReset)
          ? $scope.$parent.$eval($attrs.enableReset)
          : ratingConfig.enableReset
        var tmpTitles = angular.isDefined($attrs.titles)
          ? $scope.$parent.$eval($attrs.titles)
          : ratingConfig.titles
        this.titles =
          angular.isArray(tmpTitles) && tmpTitles.length > 0 ? tmpTitles : ratingConfig.titles

        var ratingStates = angular.isDefined($attrs.ratingStates)
          ? $scope.$parent.$eval($attrs.ratingStates)
          : new Array(
              angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max
            )
        $scope.range = this.buildTemplateObjects(ratingStates)
      }

      this.buildTemplateObjects = function (states) {
        for (var i = 0, n = states.length; i < n; i++) {
          states[i] = angular.extend(
            { index: i },
            { stateOn: this.stateOn, stateOff: this.stateOff, title: this.getTitle(i) },
            states[i]
          )
        }
        return states
      }

      this.getTitle = function (index) {
        if (index >= this.titles.length) {
          return index + 1
        }

        return this.titles[index]
      }

      $scope.rate = function (value) {
        if (!$scope.readonly && value >= 0 && value <= $scope.range.length) {
          var newViewValue = self.enableReset && ngModelCtrl.$viewValue === value ? 0 : value
          ngModelCtrl.$setViewValue(newViewValue)
          ngModelCtrl.$render()
        }
      }

      $scope.enter = function (value) {
        if (!$scope.readonly) {
          $scope.value = value
        }
        $scope.onHover({ value: value })
      }

      $scope.reset = function () {
        $scope.value = ngModelCtrl.$viewValue
        $scope.onLeave()
      }

      $scope.onKeydown = function (evt) {
        if (/(37|38|39|40)/.test(evt.which)) {
          evt.preventDefault()
          evt.stopPropagation()
          $scope.rate($scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1))
        }
      }

      this.render = function () {
        $scope.value = ngModelCtrl.$viewValue
        $scope.title = self.getTitle($scope.value - 1)
      }
    },
  ])

  .directive('uibRating', function () {
    return {
      require: ['uibRating', 'ngModel'],
      restrict: 'A',
      scope: {
        readonly: '=?readOnly',
        onHover: '&',
        onLeave: '&',
      },
      controller: 'UibRatingController',
      templateUrl: 'uib/template/rating/rating.html',
      link: function (scope, element, attrs, ctrls) {
        var ratingCtrl = ctrls[0],
          ngModelCtrl = ctrls[1]
        ratingCtrl.init(ngModelCtrl)
      },
    }
  })

angular
  .module('ui.bootstrap.tabs', [])

  .controller('UibTabsetController', [
    '$scope',
    function ($scope) {
      var ctrl = this,
        oldIndex
      ctrl.tabs = []

      ctrl.select = function (index, evt) {
        if (!destroyed) {
          var previousIndex = findTabIndex(oldIndex)
          var previousSelected = ctrl.tabs[previousIndex]
          if (previousSelected) {
            previousSelected.tab.onDeselect({
              $event: evt,
              $selectedIndex: index,
            })
            if (evt && evt.isDefaultPrevented()) {
              return
            }
            previousSelected.tab.active = false
          }

          var selected = ctrl.tabs[index]
          if (selected) {
            selected.tab.onSelect({
              $event: evt,
            })
            selected.tab.active = true
            ctrl.active = selected.index
            oldIndex = selected.index
          } else if (!selected && angular.isDefined(oldIndex)) {
            ctrl.active = null
            oldIndex = null
          }
        }
      }

      ctrl.addTab = function addTab(tab) {
        ctrl.tabs.push({
          tab: tab,
          index: tab.index,
        })
        ctrl.tabs.sort(function (t1, t2) {
          if (t1.index > t2.index) {
            return 1
          }

          if (t1.index < t2.index) {
            return -1
          }

          return 0
        })

        if (
          tab.index === ctrl.active ||
          (!angular.isDefined(ctrl.active) && ctrl.tabs.length === 1)
        ) {
          var newActiveIndex = findTabIndex(tab.index)
          ctrl.select(newActiveIndex)
        }
      }

      ctrl.removeTab = function removeTab(tab) {
        var index
        for (var i = 0; i < ctrl.tabs.length; i++) {
          if (ctrl.tabs[i].tab === tab) {
            index = i
            break
          }
        }

        if (ctrl.tabs[index].index === ctrl.active) {
          var newActiveTabIndex =
            index === ctrl.tabs.length - 1 ? index - 1 : index + (1 % ctrl.tabs.length)
          ctrl.select(newActiveTabIndex)
        }

        ctrl.tabs.splice(index, 1)
      }

      $scope.$watch('tabset.active', function (val) {
        if (angular.isDefined(val) && val !== oldIndex) {
          ctrl.select(findTabIndex(val))
        }
      })

      var destroyed
      $scope.$on('$destroy', function () {
        destroyed = true
      })

      function findTabIndex(index) {
        for (var i = 0; i < ctrl.tabs.length; i++) {
          if (ctrl.tabs[i].index === index) {
            return i
          }
        }
      }
    },
  ])

  .directive('uibTabset', function () {
    return {
      transclude: true,
      replace: true,
      scope: {},
      bindToController: {
        active: '=?',
        type: '@',
      },
      controller: 'UibTabsetController',
      controllerAs: 'tabset',
      templateUrl: function (element, attrs) {
        return attrs.templateUrl || 'uib/template/tabs/tabset.html'
      },
      link: function (scope, element, attrs) {
        scope.vertical = angular.isDefined(attrs.vertical)
          ? scope.$parent.$eval(attrs.vertical)
          : false
        scope.justified = angular.isDefined(attrs.justified)
          ? scope.$parent.$eval(attrs.justified)
          : false
      },
    }
  })

  .directive('uibTab', [
    '$parse',
    function ($parse) {
      return {
        require: '^uibTabset',
        replace: true,
        templateUrl: function (element, attrs) {
          return attrs.templateUrl || 'uib/template/tabs/tab.html'
        },
        transclude: true,
        scope: {
          heading: '@',
          index: '=?',
          classes: '@?',
          onSelect: '&select', //This callback is called in contentHeadingTransclude
          //once it inserts the tab's content into the dom
          onDeselect: '&deselect',
        },
        controller: function () {
          //Empty controller so other directives can require being 'under' a tab
        },
        controllerAs: 'tab',
        link: function (scope, elm, attrs, tabsetCtrl, transclude) {
          scope.disabled = false
          if (attrs.disable) {
            scope.$parent.$watch($parse(attrs.disable), function (value) {
              scope.disabled = !!value
            })
          }

          if (angular.isUndefined(attrs.index)) {
            if (tabsetCtrl.tabs && tabsetCtrl.tabs.length) {
              scope.index =
                Math.max.apply(
                  null,
                  tabsetCtrl.tabs.map(function (t) {
                    return t.index
                  })
                ) + 1
            } else {
              scope.index = 0
            }
          }

          if (angular.isUndefined(attrs.classes)) {
            scope.classes = ''
          }

          scope.select = function (evt) {
            if (!scope.disabled) {
              var index
              for (var i = 0; i < tabsetCtrl.tabs.length; i++) {
                if (tabsetCtrl.tabs[i].tab === scope) {
                  index = i
                  break
                }
              }

              tabsetCtrl.select(index, evt)
            }
          }

          tabsetCtrl.addTab(scope)
          scope.$on('$destroy', function () {
            tabsetCtrl.removeTab(scope)
          })

          //We need to transclude later, once the content container is ready.
          //when this link happens, we're inside a tab heading.
          scope.$transcludeFn = transclude
        },
      }
    },
  ])

  .directive('uibTabHeadingTransclude', function () {
    return {
      restrict: 'A',
      require: '^uibTab',
      link: function (scope, elm) {
        scope.$watch('headingElement', function updateHeadingElement(heading) {
          if (heading) {
            elm.html('')
            elm.append(heading)
          }
        })
      },
    }
  })

  .directive('uibTabContentTransclude', function () {
    return {
      restrict: 'A',
      require: '^uibTabset',
      link: function (scope, elm, attrs) {
        var tab = scope.$eval(attrs.uibTabContentTransclude).tab

        //Now our tab is ready to be transcluded: both the tab heading area
        //and the tab content area are loaded.  Transclude 'em both.
        tab.$transcludeFn(tab.$parent, function (contents) {
          angular.forEach(contents, function (node) {
            if (isTabHeading(node)) {
              //Let tabHeadingTransclude know.
              tab.headingElement = node
            } else {
              elm.append(node)
            }
          })
        })
      },
    }

    function isTabHeading(node) {
      return (
        node.tagName &&
        (node.hasAttribute('uib-tab-heading') ||
          node.hasAttribute('data-uib-tab-heading') ||
          node.hasAttribute('x-uib-tab-heading') ||
          node.tagName.toLowerCase() === 'uib-tab-heading' ||
          node.tagName.toLowerCase() === 'data-uib-tab-heading' ||
          node.tagName.toLowerCase() === 'x-uib-tab-heading' ||
          node.tagName.toLowerCase() === 'uib:tab-heading')
      )
    }
  })

angular
  .module('ui.bootstrap.timepicker', [])

  .constant('uibTimepickerConfig', {
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    showMeridian: true,
    showSeconds: false,
    meridians: null,
    readonlyInput: false,
    mousewheel: true,
    arrowkeys: true,
    showSpinners: true,
    templateUrl: 'uib/template/timepicker/timepicker.html',
  })

  .controller('UibTimepickerController', [
    '$scope',
    '$element',
    '$attrs',
    '$parse',
    '$log',
    '$locale',
    'uibTimepickerConfig',
    function ($scope, $element, $attrs, $parse, $log, $locale, timepickerConfig) {
      var hoursModelCtrl, minutesModelCtrl, secondsModelCtrl
      var selected = new Date(),
        watchers = [],
        ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
        meridians = angular.isDefined($attrs.meridians)
          ? $scope.$parent.$eval($attrs.meridians)
          : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS,
        padHours = angular.isDefined($attrs.padHours) ? $scope.$parent.$eval($attrs.padHours) : true

      $scope.tabindex = angular.isDefined($attrs.tabindex) ? $attrs.tabindex : 0
      $element.removeAttr('tabindex')

      this.init = function (ngModelCtrl_, inputs) {
        ngModelCtrl = ngModelCtrl_
        ngModelCtrl.$render = this.render

        ngModelCtrl.$formatters.unshift(function (modelValue) {
          return modelValue ? new Date(modelValue) : null
        })

        var hoursInputEl = inputs.eq(0),
          minutesInputEl = inputs.eq(1),
          secondsInputEl = inputs.eq(2)

        hoursModelCtrl = hoursInputEl.controller('ngModel')
        minutesModelCtrl = minutesInputEl.controller('ngModel')
        secondsModelCtrl = secondsInputEl.controller('ngModel')

        var mousewheel = angular.isDefined($attrs.mousewheel)
          ? $scope.$parent.$eval($attrs.mousewheel)
          : timepickerConfig.mousewheel

        if (mousewheel) {
          this.setupMousewheelEvents(hoursInputEl, minutesInputEl, secondsInputEl)
        }

        var arrowkeys = angular.isDefined($attrs.arrowkeys)
          ? $scope.$parent.$eval($attrs.arrowkeys)
          : timepickerConfig.arrowkeys
        if (arrowkeys) {
          this.setupArrowkeyEvents(hoursInputEl, minutesInputEl, secondsInputEl)
        }

        $scope.readonlyInput = angular.isDefined($attrs.readonlyInput)
          ? $scope.$parent.$eval($attrs.readonlyInput)
          : timepickerConfig.readonlyInput
        this.setupInputEvents(hoursInputEl, minutesInputEl, secondsInputEl)
      }

      var hourStep = timepickerConfig.hourStep
      if ($attrs.hourStep) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.hourStep), function (value) {
            hourStep = +value
          })
        )
      }

      var minuteStep = timepickerConfig.minuteStep
      if ($attrs.minuteStep) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.minuteStep), function (value) {
            minuteStep = +value
          })
        )
      }

      var min
      watchers.push(
        $scope.$parent.$watch($parse($attrs.min), function (value) {
          var dt = new Date(value)
          min = isNaN(dt) ? undefined : dt
        })
      )

      var max
      watchers.push(
        $scope.$parent.$watch($parse($attrs.max), function (value) {
          var dt = new Date(value)
          max = isNaN(dt) ? undefined : dt
        })
      )

      var disabled = false
      if ($attrs.ngDisabled) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.ngDisabled), function (value) {
            disabled = value
          })
        )
      }

      $scope.noIncrementHours = function () {
        var incrementedSelected = addMinutes(selected, hourStep * 60)
        return (
          disabled ||
          incrementedSelected > max ||
          (incrementedSelected < selected && incrementedSelected < min)
        )
      }

      $scope.noDecrementHours = function () {
        var decrementedSelected = addMinutes(selected, -hourStep * 60)
        return (
          disabled ||
          decrementedSelected < min ||
          (decrementedSelected > selected && decrementedSelected > max)
        )
      }

      $scope.noIncrementMinutes = function () {
        var incrementedSelected = addMinutes(selected, minuteStep)
        return (
          disabled ||
          incrementedSelected > max ||
          (incrementedSelected < selected && incrementedSelected < min)
        )
      }

      $scope.noDecrementMinutes = function () {
        var decrementedSelected = addMinutes(selected, -minuteStep)
        return (
          disabled ||
          decrementedSelected < min ||
          (decrementedSelected > selected && decrementedSelected > max)
        )
      }

      $scope.noIncrementSeconds = function () {
        var incrementedSelected = addSeconds(selected, secondStep)
        return (
          disabled ||
          incrementedSelected > max ||
          (incrementedSelected < selected && incrementedSelected < min)
        )
      }

      $scope.noDecrementSeconds = function () {
        var decrementedSelected = addSeconds(selected, -secondStep)
        return (
          disabled ||
          decrementedSelected < min ||
          (decrementedSelected > selected && decrementedSelected > max)
        )
      }

      $scope.noToggleMeridian = function () {
        if (selected.getHours() < 12) {
          return disabled || addMinutes(selected, 12 * 60) > max
        }

        return disabled || addMinutes(selected, -12 * 60) < min
      }

      var secondStep = timepickerConfig.secondStep
      if ($attrs.secondStep) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.secondStep), function (value) {
            secondStep = +value
          })
        )
      }

      $scope.showSeconds = timepickerConfig.showSeconds
      if ($attrs.showSeconds) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.showSeconds), function (value) {
            $scope.showSeconds = !!value
          })
        )
      }

      // 12H / 24H mode
      $scope.showMeridian = timepickerConfig.showMeridian
      if ($attrs.showMeridian) {
        watchers.push(
          $scope.$parent.$watch($parse($attrs.showMeridian), function (value) {
            $scope.showMeridian = !!value

            if (ngModelCtrl.$error.time) {
              // Evaluate from template
              var hours = getHoursFromTemplate(),
                minutes = getMinutesFromTemplate()
              if (angular.isDefined(hours) && angular.isDefined(minutes)) {
                selected.setHours(hours)
                refresh()
              }
            } else {
              updateTemplate()
            }
          })
        )
      }

      // Get $scope.hours in 24H mode if valid
      function getHoursFromTemplate() {
        var hours = +$scope.hours
        var valid = $scope.showMeridian ? hours > 0 && hours < 13 : hours >= 0 && hours < 24
        if (!valid || $scope.hours === '') {
          return undefined
        }

        if ($scope.showMeridian) {
          if (hours === 12) {
            hours = 0
          }
          if ($scope.meridian === meridians[1]) {
            hours = hours + 12
          }
        }
        return hours
      }

      function getMinutesFromTemplate() {
        var minutes = +$scope.minutes
        var valid = minutes >= 0 && minutes < 60
        if (!valid || $scope.minutes === '') {
          return undefined
        }
        return minutes
      }

      function getSecondsFromTemplate() {
        var seconds = +$scope.seconds
        return seconds >= 0 && seconds < 60 ? seconds : undefined
      }

      function pad(value, noPad) {
        if (value === null) {
          return ''
        }

        return angular.isDefined(value) && value.toString().length < 2 && !noPad
          ? '0' + value
          : value.toString()
      }

      // Respond on mousewheel spin
      this.setupMousewheelEvents = function (hoursInputEl, minutesInputEl, secondsInputEl) {
        var isScrollingUp = function (e) {
          if (e.originalEvent) {
            e = e.originalEvent
          }
          //pick correct delta variable depending on event
          var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY
          return e.detail || delta > 0
        }

        hoursInputEl.on('mousewheel wheel', function (e) {
          if (!disabled) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementHours() : $scope.decrementHours())
          }
          e.preventDefault()
        })

        minutesInputEl.on('mousewheel wheel', function (e) {
          if (!disabled) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementMinutes() : $scope.decrementMinutes())
          }
          e.preventDefault()
        })

        secondsInputEl.on('mousewheel wheel', function (e) {
          if (!disabled) {
            $scope.$apply(isScrollingUp(e) ? $scope.incrementSeconds() : $scope.decrementSeconds())
          }
          e.preventDefault()
        })
      }

      // Respond on up/down arrowkeys
      this.setupArrowkeyEvents = function (hoursInputEl, minutesInputEl, secondsInputEl) {
        hoursInputEl.on('keydown', function (e) {
          if (!disabled) {
            if (e.which === 38) {
              // up
              e.preventDefault()
              $scope.incrementHours()
              $scope.$apply()
            } else if (e.which === 40) {
              // down
              e.preventDefault()
              $scope.decrementHours()
              $scope.$apply()
            }
          }
        })

        minutesInputEl.on('keydown', function (e) {
          if (!disabled) {
            if (e.which === 38) {
              // up
              e.preventDefault()
              $scope.incrementMinutes()
              $scope.$apply()
            } else if (e.which === 40) {
              // down
              e.preventDefault()
              $scope.decrementMinutes()
              $scope.$apply()
            }
          }
        })

        secondsInputEl.on('keydown', function (e) {
          if (!disabled) {
            if (e.which === 38) {
              // up
              e.preventDefault()
              $scope.incrementSeconds()
              $scope.$apply()
            } else if (e.which === 40) {
              // down
              e.preventDefault()
              $scope.decrementSeconds()
              $scope.$apply()
            }
          }
        })
      }

      this.setupInputEvents = function (hoursInputEl, minutesInputEl, secondsInputEl) {
        if ($scope.readonlyInput) {
          $scope.updateHours = angular.noop
          $scope.updateMinutes = angular.noop
          $scope.updateSeconds = angular.noop
          return
        }

        var invalidate = function (invalidHours, invalidMinutes, invalidSeconds) {
          ngModelCtrl.$setViewValue(null)
          ngModelCtrl.$setValidity('time', false)
          if (angular.isDefined(invalidHours)) {
            $scope.invalidHours = invalidHours
            if (hoursModelCtrl) {
              hoursModelCtrl.$setValidity('hours', false)
            }
          }

          if (angular.isDefined(invalidMinutes)) {
            $scope.invalidMinutes = invalidMinutes
            if (minutesModelCtrl) {
              minutesModelCtrl.$setValidity('minutes', false)
            }
          }

          if (angular.isDefined(invalidSeconds)) {
            $scope.invalidSeconds = invalidSeconds
            if (secondsModelCtrl) {
              secondsModelCtrl.$setValidity('seconds', false)
            }
          }
        }

        $scope.updateHours = function () {
          var hours = getHoursFromTemplate(),
            minutes = getMinutesFromTemplate()

          ngModelCtrl.$setDirty()

          if (angular.isDefined(hours) && angular.isDefined(minutes)) {
            selected.setHours(hours)
            selected.setMinutes(minutes)
            if (selected < min || selected > max) {
              invalidate(true)
            } else {
              refresh('h')
            }
          } else {
            invalidate(true)
          }
        }

        hoursInputEl.on('blur', function (e) {
          ngModelCtrl.$setTouched()
          if (modelIsEmpty()) {
            makeValid()
          } else if ($scope.hours === null || $scope.hours === '') {
            invalidate(true)
          } else if (!$scope.invalidHours && $scope.hours < 10) {
            $scope.$apply(function () {
              $scope.hours = pad($scope.hours, !padHours)
            })
          }
        })

        $scope.updateMinutes = function () {
          var minutes = getMinutesFromTemplate(),
            hours = getHoursFromTemplate()

          ngModelCtrl.$setDirty()

          if (angular.isDefined(minutes) && angular.isDefined(hours)) {
            selected.setHours(hours)
            selected.setMinutes(minutes)
            if (selected < min || selected > max) {
              invalidate(undefined, true)
            } else {
              refresh('m')
            }
          } else {
            invalidate(undefined, true)
          }
        }

        minutesInputEl.on('blur', function (e) {
          ngModelCtrl.$setTouched()
          if (modelIsEmpty()) {
            makeValid()
          } else if ($scope.minutes === null) {
            invalidate(undefined, true)
          } else if (!$scope.invalidMinutes && $scope.minutes < 10) {
            $scope.$apply(function () {
              $scope.minutes = pad($scope.minutes)
            })
          }
        })

        $scope.updateSeconds = function () {
          var seconds = getSecondsFromTemplate()

          ngModelCtrl.$setDirty()

          if (angular.isDefined(seconds)) {
            selected.setSeconds(seconds)
            refresh('s')
          } else {
            invalidate(undefined, undefined, true)
          }
        }

        secondsInputEl.on('blur', function (e) {
          if (modelIsEmpty()) {
            makeValid()
          } else if (!$scope.invalidSeconds && $scope.seconds < 10) {
            $scope.$apply(function () {
              $scope.seconds = pad($scope.seconds)
            })
          }
        })
      }

      this.render = function () {
        var date = ngModelCtrl.$viewValue

        if (isNaN(date)) {
          ngModelCtrl.$setValidity('time', false)
          $log.error(
            'Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'
          )
        } else {
          if (date) {
            selected = date
          }

          if (selected < min || selected > max) {
            ngModelCtrl.$setValidity('time', false)
            $scope.invalidHours = true
            $scope.invalidMinutes = true
          } else {
            makeValid()
          }
          updateTemplate()
        }
      }

      // Call internally when we know that model is valid.
      function refresh(keyboardChange) {
        makeValid()
        ngModelCtrl.$setViewValue(new Date(selected))
        updateTemplate(keyboardChange)
      }

      function makeValid() {
        if (hoursModelCtrl) {
          hoursModelCtrl.$setValidity('hours', true)
        }

        if (minutesModelCtrl) {
          minutesModelCtrl.$setValidity('minutes', true)
        }

        if (secondsModelCtrl) {
          secondsModelCtrl.$setValidity('seconds', true)
        }

        ngModelCtrl.$setValidity('time', true)
        $scope.invalidHours = false
        $scope.invalidMinutes = false
        $scope.invalidSeconds = false
      }

      function updateTemplate(keyboardChange) {
        if (!ngModelCtrl.$modelValue) {
          $scope.hours = null
          $scope.minutes = null
          $scope.seconds = null
          $scope.meridian = meridians[0]
        } else {
          var hours = selected.getHours(),
            minutes = selected.getMinutes(),
            seconds = selected.getSeconds()

          if ($scope.showMeridian) {
            hours = hours === 0 || hours === 12 ? 12 : hours % 12 // Convert 24 to 12 hour system
          }

          $scope.hours = keyboardChange === 'h' ? hours : pad(hours, !padHours)
          if (keyboardChange !== 'm') {
            $scope.minutes = pad(minutes)
          }
          $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1]

          if (keyboardChange !== 's') {
            $scope.seconds = pad(seconds)
          }
          $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1]
        }
      }

      function addSecondsToSelected(seconds) {
        selected = addSeconds(selected, seconds)
        refresh()
      }

      function addMinutes(selected, minutes) {
        return addSeconds(selected, minutes * 60)
      }

      function addSeconds(date, seconds) {
        var dt = new Date(date.getTime() + seconds * 1000)
        var newDate = new Date(date)
        newDate.setHours(dt.getHours(), dt.getMinutes(), dt.getSeconds())
        return newDate
      }

      function modelIsEmpty() {
        return (
          ($scope.hours === null || $scope.hours === '') &&
          ($scope.minutes === null || $scope.minutes === '') &&
          (!$scope.showSeconds ||
            ($scope.showSeconds && ($scope.seconds === null || $scope.seconds === '')))
        )
      }

      $scope.showSpinners = angular.isDefined($attrs.showSpinners)
        ? $scope.$parent.$eval($attrs.showSpinners)
        : timepickerConfig.showSpinners

      $scope.incrementHours = function () {
        if (!$scope.noIncrementHours()) {
          addSecondsToSelected(hourStep * 60 * 60)
        }
      }

      $scope.decrementHours = function () {
        if (!$scope.noDecrementHours()) {
          addSecondsToSelected(-hourStep * 60 * 60)
        }
      }

      $scope.incrementMinutes = function () {
        if (!$scope.noIncrementMinutes()) {
          addSecondsToSelected(minuteStep * 60)
        }
      }

      $scope.decrementMinutes = function () {
        if (!$scope.noDecrementMinutes()) {
          addSecondsToSelected(-minuteStep * 60)
        }
      }

      $scope.incrementSeconds = function () {
        if (!$scope.noIncrementSeconds()) {
          addSecondsToSelected(secondStep)
        }
      }

      $scope.decrementSeconds = function () {
        if (!$scope.noDecrementSeconds()) {
          addSecondsToSelected(-secondStep)
        }
      }

      $scope.toggleMeridian = function () {
        var minutes = getMinutesFromTemplate(),
          hours = getHoursFromTemplate()

        if (!$scope.noToggleMeridian()) {
          if (angular.isDefined(minutes) && angular.isDefined(hours)) {
            addSecondsToSelected(12 * 60 * (selected.getHours() < 12 ? 60 : -60))
          } else {
            $scope.meridian = $scope.meridian === meridians[0] ? meridians[1] : meridians[0]
          }
        }
      }

      $scope.blur = function () {
        ngModelCtrl.$setTouched()
      }

      $scope.$on('$destroy', function () {
        while (watchers.length) {
          watchers.shift()()
        }
      })
    },
  ])

  .directive('uibTimepicker', [
    'uibTimepickerConfig',
    function (uibTimepickerConfig) {
      return {
        require: ['uibTimepicker', '?^ngModel'],
        restrict: 'A',
        controller: 'UibTimepickerController',
        controllerAs: 'timepicker',
        scope: {},
        templateUrl: function (element, attrs) {
          return attrs.templateUrl || uibTimepickerConfig.templateUrl
        },
        link: function (scope, element, attrs, ctrls) {
          var timepickerCtrl = ctrls[0],
            ngModelCtrl = ctrls[1]

          if (ngModelCtrl) {
            timepickerCtrl.init(ngModelCtrl, element.find('input'))
          }
        },
      }
    },
  ])

angular
  .module('ui.bootstrap.typeahead', ['ui.bootstrap.debounce', 'ui.bootstrap.position'])

  /**
   * A helper service that can parse typeahead's syntax (string provided by users)
   * Extracted to a separate service for ease of unit testing
   */
  .factory('uibTypeaheadParser', [
    '$parse',
    function ($parse) {
      //                      000001111111100000000000002222222200000000000000003333333333333330000000000044444444000
      var TYPEAHEAD_REGEXP =
        /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/
      return {
        parse: function (input) {
          var match = input.match(TYPEAHEAD_REGEXP)
          if (!match) {
            throw new Error(
              'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
                ' but got "' +
                input +
                '".'
            )
          }

          return {
            itemName: match[3],
            source: $parse(match[4]),
            viewMapper: $parse(match[2] || match[1]),
            modelMapper: $parse(match[1]),
          }
        },
      }
    },
  ])

  .controller('UibTypeaheadController', [
    '$scope',
    '$element',
    '$attrs',
    '$compile',
    '$parse',
    '$q',
    '$timeout',
    '$document',
    '$window',
    '$rootScope',
    '$$debounce',
    '$uibPosition',
    'uibTypeaheadParser',
    function (
      originalScope,
      element,
      attrs,
      $compile,
      $parse,
      $q,
      $timeout,
      $document,
      $window,
      $rootScope,
      $$debounce,
      $position,
      typeaheadParser
    ) {
      var HOT_KEYS = [9, 13, 27, 38, 40]
      var eventDebounceTime = 200
      var modelCtrl, ngModelOptions
      //SUPPORTED ATTRIBUTES (OPTIONS)

      //minimal no of characters that needs to be entered before typeahead kicks-in
      var minLength = originalScope.$eval(attrs.typeaheadMinLength)
      if (!minLength && minLength !== 0) {
        minLength = 1
      }

      originalScope.$watch(attrs.typeaheadMinLength, function (newVal) {
        minLength = !newVal && newVal !== 0 ? 1 : newVal
      })

      //minimal wait time after last character typed before typeahead kicks-in
      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0

      //should it restrict model values to the ones selected from the popup only?
      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false
      originalScope.$watch(attrs.typeaheadEditable, function (newVal) {
        isEditable = newVal !== false
      })

      //binding to a variable that indicates if matches are being retrieved asynchronously
      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop

      //a function to determine if an event should cause selection
      var isSelectEvent = attrs.typeaheadShouldSelect
        ? $parse(attrs.typeaheadShouldSelect)
        : function (scope, vals) {
            var evt = vals.$event
            return evt.which === 13 || evt.which === 9
          }

      //a callback executed when a match is selected
      var onSelectCallback = $parse(attrs.typeaheadOnSelect)

      //should it select highlighted popup value when losing focus?
      var isSelectOnBlur = angular.isDefined(attrs.typeaheadSelectOnBlur)
        ? originalScope.$eval(attrs.typeaheadSelectOnBlur)
        : false

      //binding to a variable that indicates if there were no results after the query is completed
      var isNoResultsSetter = $parse(attrs.typeaheadNoResults).assign || angular.noop

      var inputFormatter = attrs.typeaheadInputFormatter
        ? $parse(attrs.typeaheadInputFormatter)
        : undefined

      var appendToBody = attrs.typeaheadAppendToBody
        ? originalScope.$eval(attrs.typeaheadAppendToBody)
        : false

      var appendTo = attrs.typeaheadAppendTo ? originalScope.$eval(attrs.typeaheadAppendTo) : null

      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false

      //If input matches an item of the list exactly, select it automatically
      var selectOnExact = attrs.typeaheadSelectOnExact
        ? originalScope.$eval(attrs.typeaheadSelectOnExact)
        : false

      //binding to a variable that indicates if dropdown is open
      var isOpenSetter = $parse(attrs.typeaheadIsOpen).assign || angular.noop

      var showHint = originalScope.$eval(attrs.typeaheadShowHint) || false

      //INTERNAL VARIABLES

      //model setter executed upon match selection
      var parsedModel = $parse(attrs.ngModel)
      var invokeModelSetter = $parse(attrs.ngModel + '($$$p)')
      var $setModelValue = function (scope, newValue) {
        if (
          angular.isFunction(parsedModel(originalScope)) &&
          ngModelOptions.getOption('getterSetter')
        ) {
          return invokeModelSetter(scope, { $$$p: newValue })
        }

        return parsedModel.assign(scope, newValue)
      }

      //expressions used by typeahead
      var parserResult = typeaheadParser.parse(attrs.uibTypeahead)

      var hasFocus

      //Used to avoid bug in iOS webview where iOS keyboard does not fire
      //mousedown & mouseup events
      //Issue #3699
      var selected

      //create a child scope for the typeahead directive so we are not polluting original scope
      //with typeahead-specific data (matches, query etc.)
      var scope = originalScope.$new()
      var offDestroy = originalScope.$on('$destroy', function () {
        scope.$destroy()
      })
      scope.$on('$destroy', offDestroy)

      // WAI-ARIA
      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000)
      element.attr({
        'aria-autocomplete': 'list',
        'aria-expanded': false,
        'aria-owns': popupId,
      })

      var inputsContainer, hintInputElem
      //add read-only input to show hint
      if (showHint) {
        inputsContainer = angular.element('<div></div>')
        inputsContainer.css('position', 'relative')
        element.after(inputsContainer)
        hintInputElem = element.clone()
        hintInputElem.attr('placeholder', '')
        hintInputElem.attr('tabindex', '-1')
        hintInputElem.val('')
        hintInputElem.css({
          position: 'absolute',
          top: '0px',
          left: '0px',
          'border-color': 'transparent',
          'box-shadow': 'none',
          opacity: 1,
          background: 'none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)',
          color: '#999',
        })
        element.css({
          position: 'relative',
          'vertical-align': 'top',
          'background-color': 'transparent',
        })

        if (hintInputElem.attr('id')) {
          hintInputElem.removeAttr('id') // remove duplicate id if present.
        }
        inputsContainer.append(hintInputElem)
        hintInputElem.after(element)
      }

      //pop-up element used to display matches
      var popUpEl = angular.element('<div uib-typeahead-popup></div>')
      popUpEl.attr({
        id: popupId,
        matches: 'matches',
        active: 'activeIdx',
        select: 'select(activeIdx, evt)',
        'move-in-progress': 'moveInProgress',
        query: 'query',
        position: 'position',
        'assign-is-open': 'assignIsOpen(isOpen)',
        debounce: 'debounceUpdate',
      })
      //custom item template
      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl)
      }

      if (angular.isDefined(attrs.typeaheadPopupTemplateUrl)) {
        popUpEl.attr('popup-template-url', attrs.typeaheadPopupTemplateUrl)
      }

      var resetHint = function () {
        if (showHint) {
          hintInputElem.val('')
        }
      }

      var resetMatches = function () {
        scope.matches = []
        scope.activeIdx = -1
        element.attr('aria-expanded', false)
        resetHint()
      }

      var getMatchId = function (index) {
        return popupId + '-option-' + index
      }

      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
      // This attribute is added or removed automatically when the `activeIdx` changes.
      scope.$watch('activeIdx', function (index) {
        if (index < 0) {
          element.removeAttr('aria-activedescendant')
        } else {
          element.attr('aria-activedescendant', getMatchId(index))
        }
      })

      var inputIsExactMatch = function (inputValue, index) {
        if (scope.matches.length > index && inputValue) {
          return inputValue.toUpperCase() === scope.matches[index].label.toUpperCase()
        }

        return false
      }

      var getMatchesAsync = function (inputValue, evt) {
        var locals = { $viewValue: inputValue }
        isLoadingSetter(originalScope, true)
        isNoResultsSetter(originalScope, false)
        $q.when(parserResult.source(originalScope, locals)).then(
          function (matches) {
            //it might happen that several async queries were in progress if a user were typing fast
            //but we are interested only in responses that correspond to the current view value
            var onCurrentRequest = inputValue === modelCtrl.$viewValue
            if (onCurrentRequest && hasFocus) {
              if (matches && matches.length > 0) {
                scope.activeIdx = focusFirst ? 0 : -1
                isNoResultsSetter(originalScope, false)
                scope.matches.length = 0

                //transform labels
                for (var i = 0; i < matches.length; i++) {
                  locals[parserResult.itemName] = matches[i]
                  scope.matches.push({
                    id: getMatchId(i),
                    label: parserResult.viewMapper(scope, locals),
                    model: matches[i],
                  })
                }

                scope.query = inputValue
                //position pop-up with matches - we need to re-calculate its position each time we are opening a window
                //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
                //due to other elements being rendered
                recalculatePosition()

                element.attr('aria-expanded', true)

                //Select the single remaining option if user input matches
                if (
                  selectOnExact &&
                  scope.matches.length === 1 &&
                  inputIsExactMatch(inputValue, 0)
                ) {
                  if (
                    angular.isNumber(scope.debounceUpdate) ||
                    angular.isObject(scope.debounceUpdate)
                  ) {
                    $$debounce(
                      function () {
                        scope.select(0, evt)
                      },
                      angular.isNumber(scope.debounceUpdate)
                        ? scope.debounceUpdate
                        : scope.debounceUpdate['default']
                    )
                  } else {
                    scope.select(0, evt)
                  }
                }

                if (showHint) {
                  var firstLabel = scope.matches[0].label
                  if (
                    angular.isString(inputValue) &&
                    inputValue.length > 0 &&
                    firstLabel.slice(0, inputValue.length).toUpperCase() ===
                      inputValue.toUpperCase()
                  ) {
                    hintInputElem.val(inputValue + firstLabel.slice(inputValue.length))
                  } else {
                    hintInputElem.val('')
                  }
                }
              } else {
                resetMatches()
                isNoResultsSetter(originalScope, true)
              }
            }
            if (onCurrentRequest) {
              isLoadingSetter(originalScope, false)
            }
          },
          function () {
            resetMatches()
            isLoadingSetter(originalScope, false)
            isNoResultsSetter(originalScope, true)
          }
        )
      }

      // bind events only if appendToBody params exist - performance feature
      if (appendToBody) {
        angular.element($window).on('resize', fireRecalculating)
        $document.find('body').on('scroll', fireRecalculating)
      }

      // Declare the debounced function outside recalculating for
      // proper debouncing
      var debouncedRecalculate = $$debounce(function () {
        // if popup is visible
        if (scope.matches.length) {
          recalculatePosition()
        }

        scope.moveInProgress = false
      }, eventDebounceTime)

      // Default progress type
      scope.moveInProgress = false

      function fireRecalculating() {
        if (!scope.moveInProgress) {
          scope.moveInProgress = true
          scope.$digest()
        }

        debouncedRecalculate()
      }

      // recalculate actual position and set new values to scope
      // after digest loop is popup in right position
      function recalculatePosition() {
        scope.position = appendToBody ? $position.offset(element) : $position.position(element)
        scope.position.top += element.prop('offsetHeight')
      }

      //we need to propagate user's query so we can higlight matches
      scope.query = undefined

      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
      var timeoutPromise

      var scheduleSearchWithTimeout = function (inputValue) {
        timeoutPromise = $timeout(function () {
          getMatchesAsync(inputValue)
        }, waitTime)
      }

      var cancelPreviousTimeout = function () {
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise)
        }
      }

      resetMatches()

      scope.assignIsOpen = function (isOpen) {
        isOpenSetter(originalScope, isOpen)
      }

      scope.select = function (activeIdx, evt) {
        //called from within the $digest() cycle
        var locals = {}
        var model, item

        selected = true
        locals[parserResult.itemName] = item = scope.matches[activeIdx].model
        model = parserResult.modelMapper(originalScope, locals)
        $setModelValue(originalScope, model)
        modelCtrl.$setValidity('editable', true)
        modelCtrl.$setValidity('parse', true)

        onSelectCallback(originalScope, {
          $item: item,
          $model: model,
          $label: parserResult.viewMapper(originalScope, locals),
          $event: evt,
        })

        resetMatches()

        //return focus to the input element if a match was selected via a mouse click event
        // use timeout to avoid $rootScope:inprog error
        if (scope.$eval(attrs.typeaheadFocusOnSelect) !== false) {
          $timeout(
            function () {
              element[0].focus()
            },
            0,
            false
          )
        }
      }

      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
      element.on('keydown', function (evt) {
        //typeahead is open and an "interesting" key was pressed
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
          return
        }

        var shouldSelect = isSelectEvent(originalScope, { $event: evt })

        /**
         * if there's nothing selected (i.e. focusFirst) and enter or tab is hit
         * or
         * shift + tab is pressed to bring focus to the previous element
         * then clear the results
         */
        if ((scope.activeIdx === -1 && shouldSelect) || (evt.which === 9 && !!evt.shiftKey)) {
          resetMatches()
          scope.$digest()
          return
        }

        evt.preventDefault()
        var target
        switch (evt.which) {
          case 27: // escape
            evt.stopPropagation()

            resetMatches()
            originalScope.$digest()
            break
          case 38: // up arrow
            scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1
            scope.$digest()
            target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx]
            target.parentNode.scrollTop = target.offsetTop
            break
          case 40: // down arrow
            scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length
            scope.$digest()
            target = popUpEl[0].querySelectorAll('.uib-typeahead-match')[scope.activeIdx]
            target.parentNode.scrollTop = target.offsetTop
            break
          default:
            if (shouldSelect) {
              scope.$apply(function () {
                if (
                  angular.isNumber(scope.debounceUpdate) ||
                  angular.isObject(scope.debounceUpdate)
                ) {
                  $$debounce(
                    function () {
                      scope.select(scope.activeIdx, evt)
                    },
                    angular.isNumber(scope.debounceUpdate)
                      ? scope.debounceUpdate
                      : scope.debounceUpdate['default']
                  )
                } else {
                  scope.select(scope.activeIdx, evt)
                }
              })
            }
        }
      })

      element.on('focus', function (evt) {
        hasFocus = true
        if (minLength === 0 && !modelCtrl.$viewValue) {
          $timeout(function () {
            getMatchesAsync(modelCtrl.$viewValue, evt)
          }, 0)
        }
      })

      element.on('blur', function (evt) {
        if (isSelectOnBlur && scope.matches.length && scope.activeIdx !== -1 && !selected) {
          selected = true
          scope.$apply(function () {
            if (
              angular.isObject(scope.debounceUpdate) &&
              angular.isNumber(scope.debounceUpdate.blur)
            ) {
              $$debounce(function () {
                scope.select(scope.activeIdx, evt)
              }, scope.debounceUpdate.blur)
            } else {
              scope.select(scope.activeIdx, evt)
            }
          })
        }
        if (!isEditable && modelCtrl.$error.editable) {
          modelCtrl.$setViewValue()
          scope.$apply(function () {
            // Reset validity as we are clearing
            modelCtrl.$setValidity('editable', true)
            modelCtrl.$setValidity('parse', true)
          })
          element.val('')
        }
        hasFocus = false
        selected = false
      })

      // Keep reference to click handler to unbind it.
      var dismissClickHandler = function (evt) {
        // Issue #3973
        // Firefox treats right click as a click on document
        if (element[0] !== evt.target && evt.which !== 3 && scope.matches.length !== 0) {
          resetMatches()
          if (!$rootScope.$$phase) {
            originalScope.$digest()
          }
        }
      }

      $document.on('click', dismissClickHandler)

      originalScope.$on('$destroy', function () {
        $document.off('click', dismissClickHandler)
        if (appendToBody || appendTo) {
          $popup.remove()
        }

        if (appendToBody) {
          angular.element($window).off('resize', fireRecalculating)
          $document.find('body').off('scroll', fireRecalculating)
        }
        // Prevent jQuery cache memory leak
        popUpEl.remove()

        if (showHint) {
          inputsContainer.remove()
        }
      })

      var $popup = $compile(popUpEl)(scope)

      if (appendToBody) {
        $document.find('body').append($popup)
      } else if (appendTo) {
        angular.element(appendTo).eq(0).append($popup)
      } else {
        element.after($popup)
      }

      this.init = function (_modelCtrl) {
        modelCtrl = _modelCtrl
        ngModelOptions = extractOptions(modelCtrl)

        scope.debounceUpdate = $parse(ngModelOptions.getOption('debounce'))(originalScope)

        //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
        //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
        modelCtrl.$parsers.unshift(function (inputValue) {
          hasFocus = true

          if (minLength === 0 || (inputValue && inputValue.length >= minLength)) {
            if (waitTime > 0) {
              cancelPreviousTimeout()
              scheduleSearchWithTimeout(inputValue)
            } else {
              getMatchesAsync(inputValue)
            }
          } else {
            isLoadingSetter(originalScope, false)
            cancelPreviousTimeout()
            resetMatches()
          }

          if (isEditable) {
            return inputValue
          }

          if (!inputValue) {
            // Reset in case user had typed something previously.
            modelCtrl.$setValidity('editable', true)
            return null
          }

          modelCtrl.$setValidity('editable', false)
          return undefined
        })

        modelCtrl.$formatters.push(function (modelValue) {
          var candidateViewValue, emptyViewValue
          var locals = {}

          // The validity may be set to false via $parsers (see above) if
          // the model is restricted to selected values. If the model
          // is set manually it is considered to be valid.
          if (!isEditable) {
            modelCtrl.$setValidity('editable', true)
          }

          if (inputFormatter) {
            locals.$model = modelValue
            return inputFormatter(originalScope, locals)
          }

          //it might happen that we don't have enough info to properly render input value
          //we need to check for this situation and simply return model value if we can't apply custom formatting
          locals[parserResult.itemName] = modelValue
          candidateViewValue = parserResult.viewMapper(originalScope, locals)
          locals[parserResult.itemName] = undefined
          emptyViewValue = parserResult.viewMapper(originalScope, locals)

          return candidateViewValue !== emptyViewValue ? candidateViewValue : modelValue
        })
      }

      function extractOptions(ngModelCtrl) {
        var ngModelOptions

        if (angular.version.minor < 6) {
          // in angular < 1.6 $options could be missing
          // guarantee a value
          ngModelOptions = ngModelCtrl.$options || {}

          // mimic 1.6+ api
          ngModelOptions.getOption = function (key) {
            return ngModelOptions[key]
          }
        } else {
          // in angular >=1.6 $options is always present
          ngModelOptions = ngModelCtrl.$options
        }

        return ngModelOptions
      }
    },
  ])

  .directive('uibTypeahead', function () {
    return {
      controller: 'UibTypeaheadController',
      require: ['ngModel', 'uibTypeahead'],
      link: function (originalScope, element, attrs, ctrls) {
        ctrls[1].init(ctrls[0])
      },
    }
  })

  .directive('uibTypeaheadPopup', [
    '$$debounce',
    function ($$debounce) {
      return {
        scope: {
          matches: '=',
          query: '=',
          active: '=',
          position: '&',
          moveInProgress: '=',
          select: '&',
          assignIsOpen: '&',
          debounce: '&',
        },
        replace: true,
        templateUrl: function (element, attrs) {
          return attrs.popupTemplateUrl || 'uib/template/typeahead/typeahead-popup.html'
        },
        link: function (scope, element, attrs) {
          scope.templateUrl = attrs.templateUrl

          scope.isOpen = function () {
            var isDropdownOpen = scope.matches.length > 0
            scope.assignIsOpen({ isOpen: isDropdownOpen })
            return isDropdownOpen
          }

          scope.isActive = function (matchIdx) {
            return scope.active === matchIdx
          }

          scope.selectActive = function (matchIdx) {
            scope.active = matchIdx
          }

          scope.selectMatch = function (activeIdx, evt) {
            var debounce = scope.debounce()
            if (angular.isNumber(debounce) || angular.isObject(debounce)) {
              $$debounce(
                function () {
                  scope.select({ activeIdx: activeIdx, evt: evt })
                },
                angular.isNumber(debounce) ? debounce : debounce['default']
              )
            } else {
              scope.select({ activeIdx: activeIdx, evt: evt })
            }
          }
        },
      }
    },
  ])

  .directive('uibTypeaheadMatch', [
    '$templateRequest',
    '$compile',
    '$parse',
    function ($templateRequest, $compile, $parse) {
      return {
        scope: {
          index: '=',
          match: '=',
          query: '=',
        },
        link: function (scope, element, attrs) {
          var tplUrl =
            $parse(attrs.templateUrl)(scope.$parent) ||
            'uib/template/typeahead/typeahead-match.html'
          $templateRequest(tplUrl).then(function (tplContent) {
            var tplEl = angular.element(tplContent.trim())
            element.replaceWith(tplEl)
            $compile(tplEl)(scope)
          })
        },
      }
    },
  ])

  .filter('uibTypeaheadHighlight', [
    '$sce',
    '$injector',
    '$log',
    function ($sce, $injector, $log) {
      var isSanitizePresent
      isSanitizePresent = $injector.has('$sanitize')

      function escapeRegexp(queryToEscape) {
        // Regex: capture the whole query string and replace it with the string that will be used to match
        // the results, for example if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1')
      }

      function containsHtml(matchItem) {
        return /<.*>/g.test(matchItem)
      }

      return function (matchItem, query) {
        if (!isSanitizePresent && containsHtml(matchItem)) {
          $log.warn('Unsafe use of typeahead please use ngSanitize') // Warn the user about the danger
        }
        matchItem = query
          ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>')
          : matchItem // Replaces the capture string with a the same string inside of a "strong" tag
        if (!isSanitizePresent) {
          matchItem = $sce.trustAsHtml(matchItem) // If $sanitize is not present we pack the string in a $sce object for the ng-bind-html directive
        }
        return matchItem
      }
    },
  ])

angular.module('uib/template/accordion/accordion-group.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/accordion/accordion-group.html',
      '<div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="card-header" ng-keypress="toggleOpen($event)">\n' +
        '  <h5 class="mb-0">\n' +
        '    <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::cardId}}" tabindex="0" class="accordion-toggle"  ng-click="toggleOpen()" uib-accordion-transclude="heading" ng-disabled="isDisabled" uib-tabindex-toggle><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n' +
        '  </h5>\n' +
        '</div>\n' +
        '<div id="{{::cardId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabcard" class="card-collapse collapse" uib-collapse="!isOpen">\n' +
        '  <div class="card-body" ng-transclude></div>\n' +
        '</div>\n' +
        ''
    )
  },
])

angular.module('uib/template/accordion/accordion.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/accordion/accordion.html',
      '<div role="tablist" ng-transclude></div>\n' + ''
    )
  },
])

angular.module('uib/template/alert/alert.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/alert/alert.html',
      '<button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n' +
        '  <span aria-hidden="true">&times;</span>\n' +
        '  <span class="sr-only">Close</span>\n' +
        '</button>\n' +
        '<div ng-transclude></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/carousel/carousel.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/carousel/carousel.html',
      '<div class="carousel-inner" ng-transclude></div>\n' +
        '<a role="button" href class="carousel-control-prev" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n' +
        '    <span class="carousel-control-prev-icon" aria-hidden="true"></span>\n' +
        '    <span class="sr-only">Previous</span>\n' +
        '</a>\n' +
        '<a role="button" href class="carousel-control-next" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n' +
        '    <span class="carousel-control-next-icon" aria-hidden="true"></span>\n' +
        '    <span class="sr-only">Next</span>\n' +
        '</a>\n' +
        '<ol class="carousel-indicators" ng-show="slides.length > 1">\n' +
        '  <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n' +
        '    <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n' +
        '  </li>\n' +
        '</ol>\n' +
        ''
    )
  },
])

angular.module('uib/template/carousel/slide.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/carousel/slide.html',
      '<div class="text-center" ng-transclude></div>\n' + ''
    )
  },
])

angular.module('uib/template/datepicker/datepicker.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/datepicker/datepicker.html',
      '<div ng-switch="datepickerMode">\n' +
        '  <div uib-daypicker ng-switch-when="day" tabindex="0" class="uib-daypicker"></div>\n' +
        '  <div uib-monthpicker ng-switch-when="month" tabindex="0" class="uib-monthpicker"></div>\n' +
        '  <div uib-yearpicker ng-switch-when="year" tabindex="0" class="uib-yearpicker"></div>\n' +
        '</div>\n' +
        ''
    )
  },
])

angular.module('uib/template/datepicker/day.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/datepicker/day.html',
      '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th>\n' +
        '        <button type="button" class="btn btn-secondary btn-sm float-left uib-left" ng-click="move(-1)" tabindex="-1">\n' +
        '          <i aria-hidden="true" class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1427 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z"/></svg>\n' +
        '          </i>\n' +
        '          <span class="sr-only">previous</span>\n' +
        '        </button>\n' +
        '      </th>\n' +
        '      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-secondary btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n' +
        '      <th>\n' +
        '        <button type="button" class="btn btn-secondary btn-sm float-right uib-right" ng-click="move(1)" tabindex="-1">\n' +
        '          <i aria-hidden="true" class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1363 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z"/></svg>\n' +
        '          </i>\n' +
        '          <span class="sr-only">next</span>\n' +
        '        </button>\n' +
        '      </th>\n' +
        '    </tr>\n' +
        '    <tr>\n' +
        '      <th ng-if="showWeeks" class="text-center"></th>\n' +
        '      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n' +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr class="uib-weeks" ng-repeat="row in rows track by $index" role="row">\n' +
        '      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n' +
        '      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n' +
        '        id="{{::dt.uid}}"\n' +
        '        ng-class="::dt.customClass">\n' +
        '        <button type="button" class="btn btn-secondary btn-sm"\n' +
        '          uib-is-class="\n' +
        "            'btn-info' for selectedDt,\n" +
        "            'active' for activeDt\n" +
        '            on dt"\n' +
        '          ng-click="select(dt.date)"\n' +
        '          ng-disabled="::dt.disabled"\n' +
        '          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n' +
        '      </td>\n' +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        ''
    )
  },
])

angular.module('uib/template/datepicker/month.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/datepicker/month.html',
      '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th>\n' +
        '        <button type="button" class="btn btn-secondary btn-sm float-left uib-left" ng-click="move(-1)" tabindex="-1">\n' +
        '          <i aria-hidden="true" class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1427 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z"/></svg>\n' +
        '          </i>\n' +
        '          <span class="sr-only">previous</span>\n' +
        '        </button>\n' +
        '      </th>\n' +
        '      <th colspan="{{::yearHeaderColspan}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-secondary btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n' +
        '      <th>\n' +
        '        <button type="button" class="btn btn-secondary btn-sm float-right uib-right" ng-click="move(1)" tabindex="-1">\n' +
        '          <i aria-hidden="true" class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1363 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z"/></svg>\n' +
        '          </i>\n' +
        '          <span class="sr-only">next</span>\n' +
        '        </button>\n' +
        '      </th>\n' +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr class="uib-months" ng-repeat="row in rows track by $index" role="row">\n' +
        '      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n' +
        '        id="{{::dt.uid}}"\n' +
        '        ng-class="::dt.customClass">\n' +
        '        <button type="button" class="btn btn-secondary"\n' +
        '          uib-is-class="\n' +
        "            'btn-info' for selectedDt,\n" +
        "            'active' for activeDt\n" +
        '            on dt"\n' +
        '          ng-click="select(dt.date)"\n' +
        '          ng-disabled="::dt.disabled"\n' +
        '          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' +
        '      </td>\n' +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        ''
    )
  },
])

angular.module('uib/template/datepicker/year.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/datepicker/year.html',
      '<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n' +
        '  <thead>\n' +
        '  <tr>\n' +
        '    <th>\n' +
        '      <button type="button" class="btn btn-secondary btn-sm float-left uib-left" ng-click="move(-1)" tabindex="-1">\n' +
        '        <i aria-hidden="true" class="fa-svg-icon">\n' +
        '          <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1427 301l-531 531 531 531q19 19 19 45t-19 45l-166 166q-19 19-45 19t-45-19l-742-742q-19-19-19-45t19-45l742-742q19-19 45-19t45 19l166 166q19 19 19 45t-19 45z"/></svg>\n' +
        '        </i>\n' +
        '        <span class="sr-only">previous</span>\n' +
        '      </button>\n' +
        '    </th>\n' +
        '    <th colspan="{{::columns - 2}}">\n' +
        '      <button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button"\n' +
        '              class="btn btn-secondary btn-sm uib-title" ng-click="toggleMode()"\n' +
        '              ng-disabled="datepickerMode === maxMode" tabindex="-1">\n' +
        '        <strong>{{title}}</strong>\n' +
        '      </button>\n' +
        '    </th>\n' +
        '    <th>\n' +
        '      <button type="button" class="btn btn-secondary btn-sm float-right uib-right" ng-click="move(1)" tabindex="-1">\n' +
        '        <i aria-hidden="true" class="fa-svg-icon">\n' +
        '          <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1363 877l-742 742q-19 19-45 19t-45-19l-166-166q-19-19-19-45t19-45l531-531-531-531q-19-19-19-45t19-45l166-166q19-19 45-19t45 19l742 742q19 19 19 45t-19 45z"/></svg>\n' +
        '        </i>\n' +
        '        <span class="sr-only">next</span>\n' +
        '      </button>\n' +
        '    </th>\n' +
        '  </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '  <tr class="uib-years" ng-repeat="row in rows track by $index" role="row">\n' +
        '    <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n' +
        '        id="{{::dt.uid}}"\n' +
        '        ng-class="::dt.customClass">\n' +
        '      <button type="button" class="btn btn-secondary"\n' +
        '              uib-is-class="\n' +
        "            'btn-info' for selectedDt,\n" +
        "            'active' for activeDt\n" +
        '            on dt"\n' +
        '              ng-click="select(dt.date)"\n' +
        '              ng-disabled="::dt.disabled"\n' +
        '              tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n' +
        '    </td>\n' +
        '  </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        ''
    )
  },
])

angular.module('uib/template/datepickerPopup/popup.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/datepickerPopup/popup.html',
      '<ul role="presentation" class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n' +
        '  <li ng-transclude></li>\n' +
        '  <li ng-if="showButtonBar" class="uib-button-bar">\n' +
        '    <span class="btn-group float-left">\n' +
        '      <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n' +
        '      <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n' +
        '    </span>\n' +
        '    <button type="button" class="btn btn-sm btn-success float-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n' +
        '  </li>\n' +
        '</ul>\n' +
        ''
    )
  },
])

angular.module('uib/template/modal/window.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/modal/window.html',
      '<div class="modal-dialog {{size ? \'modal-\' + size : \'\'}}"><div class="modal-content" uib-modal-transclude></div></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/pager/pager.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/pager/pager.html',
      '<li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle>{{::getText(\'previous\')}}</a></li>\n' +
        '<li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle>{{::getText(\'next\')}}</a></li>\n' +
        ''
    )
  },
])

angular.module('uib/template/pagination/pagination.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/pagination/pagination.html',
      '<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="page-item"><a href ng-click="selectPage(1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle class="page-link">{{::getText(\'first\')}}</a></li>\n' +
        '<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="page-item"><a href ng-click="selectPage(page - 1, $event)" ng-disabled="noPrevious()||ngDisabled" uib-tabindex-toggle class="page-link">{{::getText(\'previous\')}}</a></li>\n' +
        '<li role="menuitem" ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="page-item"><a href ng-click="selectPage(page.number, $event)" ng-disabled="ngDisabled&&!page.active" uib-tabindex-toggle class="page-link">{{page.text}}</a></li>\n' +
        '<li role="menuitem" ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="page-item"><a href ng-click="selectPage(page + 1, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle class="page-link">{{::getText(\'next\')}}</a></li>\n' +
        '<li role="menuitem" ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="page-item"><a href ng-click="selectPage(totalPages, $event)" ng-disabled="noNext()||ngDisabled" uib-tabindex-toggle class="page-link">{{::getText(\'last\')}}</a></li>\n' +
        ''
    )
  },
])

angular.module('uib/template/tooltip/tooltip-html-popup.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/tooltip/tooltip-html-popup.html',
      '<div class="arrow"></div>\n' +
        '<div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/tooltip/tooltip-popup.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/tooltip/tooltip-popup.html',
      '<div class="arrow"></div>\n' + '<div class="tooltip-inner" ng-bind="content"></div>\n' + ''
    )
  },
])

angular.module('uib/template/tooltip/tooltip-template-popup.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/tooltip/tooltip-template-popup.html',
      '<div class="arrow"></div>\n' +
        '<div class="tooltip-inner"\n' +
        '  uib-tooltip-template-transclude="contentExp()"\n' +
        '  tooltip-template-transclude-scope="originScope()"></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/popover/popover-html.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/popover/popover-html.html',
      '<div class="arrow"></div>\n' +
        '<h3 class="popover-header" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' +
        '<div class="popover-body" ng-bind-html="contentExp()"></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/popover/popover-template.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/popover/popover-template.html',
      '<div class="arrow"></div>\n' +
        '\n' +
        '<h3 class="popover-header" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' +
        '<div class="popover-body"\n' +
        '  uib-tooltip-template-transclude="contentExp()"\n' +
        '  tooltip-template-transclude-scope="originScope()"></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/popover/popover.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/popover/popover.html',
      '<div class="arrow"></div>\n' +
        '<h3 class="popover-header" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n' +
        '<div class="popover-body" ng-bind="content"></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/progressbar/bar.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/progressbar/bar.html',
      '<div class="progress-bar" ng-class="[type ? \'bg-\' + type : \'\', striped ? \'progress-bar-striped\' : \'\']" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n' +
        ''
    )
  },
])

angular.module('uib/template/progressbar/progress.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/progressbar/progress.html',
      '<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>'
    )
  },
])

angular.module('uib/template/progressbar/progressbar.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/progressbar/progressbar.html',
      '<div class="progress">\n' +
        '  <div class="progress-bar" ng-class="[type ? \'bg-\' + type : \'\', striped ? \'progress-bar-striped\' : \'\']" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n' +
        '</div>\n' +
        ''
    )
  },
])

angular.module('uib/template/rating/rating.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/rating/rating.html',
      '<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n' +
        '    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n' +
        '    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="fa-svg-icon" ng-class="$index < value && (r.stateOn || \'star\') || (r.stateOff || \'star-empty\')" ng-attr-title="{{r.title}}">\n' +
        '        <svg data-ng-if="$index < value" width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1728 647q0 22-26 48l-363 354 86 500q1 7 1 20 0 21-10.5 35.5t-30.5 14.5q-19 0-40-12l-449-236-449 236q-22 12-40 12-21 0-31.5-14.5t-10.5-35.5q0-6 2-20l86-500-364-354q-25-27-25-48 0-37 56-46l502-73 225-455q19-41 49-41t49 41l225 455 502 73q56 9 56 46z"/></svg>\n' +
        '        <svg data-ng-if="$index >= value" width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1201 1004l306-297-422-62-189-382-189 382-422 62 306 297-73 421 378-199 377 199zm527-357q0 22-26 48l-363 354 86 500q1 7 1 20 0 50-41 50-19 0-40-12l-449-236-449 236q-22 12-40 12-21 0-31.5-14.5t-10.5-35.5q0-6 2-20l86-500-364-354q-25-27-25-48 0-37 56-46l502-73 225-455q19-41 49-41t49 41l225 455 502 73q56 9 56 46z"/></svg>\n' +
        '    </i>\n' +
        '</span>\n' +
        ''
    )
  },
])

angular.module('uib/template/tabs/tab.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/tabs/tab.html',
      '<li class="uib-tab nav-item">\n' +
        '  <a href ng-click="select($event)" ng-class="[{active: active, disabled: disabled}, classes]" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n' +
        '</li>\n' +
        ''
    )
  },
])

angular.module('uib/template/tabs/tabset.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/tabs/tabset.html',
      '<div>\n' +
        "  <ul class=\"nav nav-{{tabset.type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
        '  <div class="tab-content">\n' +
        '    <div class="tab-pane"\n' +
        '         ng-repeat="tab in tabset.tabs"\n' +
        '         ng-class="{active: tabset.active === tab.index}"\n' +
        '         uib-tab-content-transclude="tab">\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        ''
    )
  },
])

angular.module('uib/template/timepicker/timepicker.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/timepicker/timepicker.html',
      '<table class="uib-timepicker">\n' +
        '  <tbody>\n' +
        '    <tr class="text-center" ng-show="::showSpinners">\n' +
        '      <td class="uib-increment hours">\n' +
        '        <a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td>&nbsp;</td>\n' +
        '      <td class="uib-increment minutes">\n' +
        '        <a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td ng-show="showSeconds">&nbsp;</td>\n' +
        '      <td ng-show="showSeconds" class="uib-increment seconds">\n' +
        '        <a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 1331l-166 165q-19 19-45 19t-45-19l-531-531-531 531q-19 19-45 19t-45-19l-166-165q-19-19-19-45.5t19-45.5l742-741q19-19 45-19t45 19l742 741q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td ng-show="showMeridian"></td>\n' +
        '    </tr>\n' +
        '    <tr>\n' +
        '      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n' +
        '        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n' +
        '      </td>\n' +
        '      <td class="uib-separator">:</td>\n' +
        '      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n' +
        '        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n' +
        '      </td>\n' +
        '      <td ng-show="showSeconds" class="uib-separator">:</td>\n' +
        '      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n' +
        '        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n' +
        '      </td>\n' +
        '      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-secondary text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n' +
        '    </tr>\n' +
        '    <tr class="text-center" ng-show="::showSpinners">\n' +
        '      <td class="uib-decrement hours">\n' +
        '        <a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td>&nbsp;</td>\n' +
        '      <td class="uib-decrement minutes">\n' +
        '        <a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td ng-show="showSeconds">&nbsp;</td>\n' +
        '      <td ng-show="showSeconds" class="uib-decrement seconds">\n' +
        '        <a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="-1">\n' +
        '          <span class="fa-svg-icon">\n' +
        '            <svg width="1792" height="1792" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1683 808l-742 741q-19 19-45 19t-45-19l-742-741q-19-19-19-45.5t19-45.5l166-165q19-19 45-19t45 19l531 531 531-531q19-19 45-19t45 19l166 165q19 19 19 45.5t-19 45.5z"/></svg>\n' +
        '          </span>\n' +
        '        </a>\n' +
        '      </td>\n' +
        '      <td ng-show="showMeridian"></td>\n' +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        ''
    )
  },
])

angular.module('uib/template/typeahead/typeahead-match.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/typeahead/typeahead-match.html',
      '<a href\n' +
        '   tabindex="-1"\n' +
        '   class="dropdown-item"\n' +
        '   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n' +
        '   ng-attr-title="{{match.label}}"></a>\n' +
        ''
    )
  },
])

angular.module('uib/template/typeahead/typeahead-popup.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put(
      'uib/template/typeahead/typeahead-popup.html',
      '<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n' +
        '    <li class="uib-typeahead-match" ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n' +
        '        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n' +
        '    </li>\n' +
        '</ul>\n' +
        ''
    )
  },
])
angular.module('ui.bootstrap.carousel').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibCarouselCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'
      )
  angular.$$uibCarouselCss = true
})
angular.module('ui.bootstrap.common').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibCommonCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">.fa-svg-icon{display:inline-block;vertical-align:middle;min-width:1em;min-height:1em;height:100%;position:relative;top:-1px;}.fa-svg-icon svg{position:absolute;top:0;left:0;width:100%;height:100%;}.fa-svg-icon svg g,.fa-svg-icon svg path{fill:currentColor;}</style>'
      )
  angular.$$uibCommonCss = true
})
angular.module('ui.bootstrap.datepicker').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibDatepickerCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'
      )
  angular.$$uibDatepickerCss = true
})
angular.module('ui.bootstrap.position').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibPositionCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'
      )
  angular.$$uibPositionCss = true
})
angular.module('ui.bootstrap.datepickerPopup').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibDatepickerpopupCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px;}</style>'
      )
  angular.$$uibDatepickerpopupCss = true
})
angular.module('ui.bootstrap.tooltip').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibTooltipCss &&
    angular
      .element(document)
      .find('head')
      .prepend(
        '<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'
      )
  angular.$$uibTooltipCss = true
})
angular.module('ui.bootstrap.timepicker').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibTimepickerCss &&
    angular
      .element(document)
      .find('head')
      .prepend('<style type="text/css">.uib-time input{width:50px !important;}</style>')
  angular.$$uibTimepickerCss = true
})
angular.module('ui.bootstrap.typeahead').run(function () {
  !angular.$$csp().noInlineStyle &&
    !angular.$$uibTypeaheadCss &&
    angular
      .element(document)
      .find('head')
      .prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>')
  angular.$$uibTypeaheadCss = true
})
/* eslint no-unused-vars: ["error", { "varsIgnorePattern": "^GL|\$locale$" }] */

var _flowFactoryProvider

var GL = angular
  .module('GL', [
    'angular.filter',
    'ngAria',
    'ngIdle',
    'ngRoute',
    'ui.bootstrap',
    'ui.select',
    'tmh.dynamicLocale',
    'flow',
    'monospaced.qrcode',
    'pascalprecht.translate',
    'ngCsv',
    'ngResource',
    'ngSanitize',
    'ngFileSaver',
    'ng-showdown',
  ])
  .config([
    '$compileProvider',
    function ($compileProvider) {
      $compileProvider.debugInfoEnabled(false)
    },
  ])
  .config([
    '$httpProvider',
    function ($httpProvider) {
      $httpProvider.interceptors.push('globaleaksRequestInterceptor')
    },
  ])
  .config([
    '$locationProvider',
    function ($locationProvider) {
      $locationProvider.hashPrefix('')
    },
  ])
  .config([
    '$showdownProvider',
    function ($showdownProvider) {
      $showdownProvider.setOption('sanitize', true)
      $showdownProvider.setOption('openLinksInNewWindow', true)
    },
  ])
  .config([
    '$provide',
    function ($provide) {
      $provide.decorator('$templateRequest', [
        '$delegate',
        function ($delegate) {
          // This decorator is required in order to inject the "true" for setting ignoreRequestError
          // in relation to https://docs.angularjs.org/error/$compile/tpload
          var fn = $delegate

          $delegate = function (tpl) {
            for (var key in fn) {
              $delegate[key] = fn[key]
            }

            return fn.apply(this, [tpl, true])
          }

          return $delegate
        },
      ])

      $provide.decorator('$exceptionHandler', [
        '$delegate',
        '$injector',
        'stacktraceService',
        function ($delegate, $injector, stacktraceService) {
          return function (exception, cause) {
            var $rootScope = $injector.get('$rootScope')

            if (typeof $rootScope.exceptions_count === 'undefined') {
              $rootScope.exceptions_count = 0
            }

            $rootScope.exceptions_count += 1

            if ($rootScope.exceptions_count >= 3) {
              // Give each client the ability to forward only the first 3 exceptions
              // scattered; this is also important to avoid looping exceptions to
              // cause looping POST requests.
              return
            }

            $delegate(exception, cause)

            stacktraceService.fromError(exception).then(function (result) {
              var errorData = angular.toJson({
                errorUrl: $injector.get('$location').path(),
                errorMessage: exception.toString(),
                stackTrace: result,
                agent: navigator.userAgent,
              })

              return $rootScope.Utils.notifyException(errorData)
            })
          }
        },
      ])
    },
  ])
  .config([
    '$qProvider',
    function ($qProvider) {
      $qProvider.errorOnUnhandledRejections(false)
    },
  ])
  .config([
    '$rootScopeProvider',
    function ($rootScopeProvider) {
      // Raise the default digest loop limit to 30 because of the template recursion used by fields:
      // https://github.com/angular/angular.js/issues/6440
      $rootScopeProvider.digestTtl(30)
    },
  ])
  .config([
    '$routeProvider',
    function ($routeProvider) {
      function requireAuth(role) {
        return [
          'Access',
          function (Access) {
            return Access.isAuthenticated(role)
          },
        ]
      }

      function fetchResources(role, lst) {
        return [
          '$location',
          '$q',
          '$rootScope',
          'Access',
          'GLTranslate',
          'AdminAuditLogResource',
          'AdminContextResource',
          'AdminQuestionnaireResource',
          'AdminStepResource',
          'AdminFieldResource',
          'AdminFieldTemplateResource',
          'AdminUserResource',
          'AdminNodeResource',
          'AdminNotificationResource',
          'AdminRedirectResource',
          'AdminTenantResource',
          'FieldAttrs',
          'TipsCollection',
          'JobsAuditLog',
          'AdminSubmissionStatusResource',
          'ReceiverTips',
          'UserPreferences',
          function (
            $location,
            $q,
            $rootScope,
            Access,
            GLTranslate,
            AdminAuditLogResource,
            AdminContextResource,
            AdminQuestionnaireResource,
            AdminStepResource,
            AdminFieldResource,
            AdminFieldTemplateResource,
            AdminUserResource,
            AdminNodeResource,
            AdminNotificationResource,
            AdminRedirectResource,
            AdminTenantResource,
            FieldAttrs,
            TipsCollection,
            JobsAuditLog,
            AdminSubmissionStatusResource,
            ReceiverTips,
            UserPreferences
          ) {
            var resourcesPromises = {
              auditlog: function () {
                return AdminAuditLogResource.query().$promise
              },
              node: function () {
                return AdminNodeResource.get().$promise
              },
              contexts: function () {
                return AdminContextResource.query().$promise
              },
              field_attrs: function () {
                return FieldAttrs.get().$promise
              },
              fieldtemplates: function () {
                return AdminFieldTemplateResource.query().$promise
              },
              users: function () {
                return AdminUserResource.query().$promise
              },
              notification: function () {
                return AdminNotificationResource.get().$promise
              },
              redirects: function () {
                return AdminRedirectResource.query().$promise
              },
              tenants: function () {
                return AdminTenantResource.query().$promise
              },
              tips: function () {
                return TipsCollection.query().$promise
              },
              jobs: function () {
                return JobsAuditLog.query().$promise
              },
              questionnaires: function () {
                return AdminQuestionnaireResource.query().$promise
              },
              submission_statuses: function () {
                return AdminSubmissionStatusResource.query().$promise
              },
              rtips: function () {
                return ReceiverTips.get().$promise
              },
              preferences: function () {
                return UserPreferences.get().$promise
              },
            }

            return Access.isAuthenticated(role).then(function () {
              var promises = {}

              for (var i = 0; i < lst.length; i++) {
                var name = lst[i]
                promises[name] = resourcesPromises[name]()
              }

              return $q.all(promises).then(function (resources) {
                $rootScope.resources = resources

                if ($rootScope.resources.preferences) {
                  GLTranslate.addUserPreference($rootScope.resources.preferences.language)

                  if ($rootScope.resources.preferences.password_change_needed) {
                    $location.path('/actions/forcedpasswordchange')
                  } else if ($rootScope.resources.preferences.require_two_factor) {
                    $location.path('/actions/forcedtwofactor')
                  }
                }
              })
            })
          },
        ]
      }

      $routeProvider
        .when('/wizard', {
          templateUrl: 'views/wizard/main.html',
          controller: 'WizardCtrl',
          header_title: 'Platform wizard',
        })
        .when('/submission', {
          templateUrl: 'views/whistleblower/submission.html',
          controller: 'SubmissionCtrl',
          header_title: '',
        })
        .when('/activation', {
          templateUrl: 'views/signup/activation.html',
          controller: 'SignupActivationCtrl',
          header_title: 'Signup',
        })
        .when('/status/:tip_id', {
          templateUrl: 'views/recipient/tip.html',
          controller: 'TipCtrl',
          header_title: 'Report',
          resolve: {
            access: requireAuth('receiver'),
            resources: fetchResources('receiver', ['preferences']),
          },
        })
        .when('/actions/forcedpasswordchange', {
          templateUrl: 'views/actions/forced_password_change.html',
          controller: 'ForcedPasswordChangeCtrl',
          header_title: 'Change your password',
          resolve: {
            access: requireAuth('*'),
            resources: fetchResources('*', ['preferences']),
          },
        })
        .when('/actions/forcedtwofactor', {
          templateUrl: 'views/actions/forced_two_factor.html',
          controller: 'EnableTwoFactorAuthCtrl',
          header_title: 'Enable two factor authentication',
          resolve: {
            access: requireAuth('*'),
            resources: fetchResources('*', ['preferences']),
          },
        })
        .when('/recipient/home', {
          templateUrl: 'views/recipient/home.html',
          header_title: 'Home',
          sidebar: 'views/recipient/sidebar.html',
          resolve: {
            access: requireAuth('receiver'),
            resources: fetchResources('receiver', ['preferences']),
          },
        })
        .when('/recipient/preferences', {
          templateUrl: 'views/partials/preferences.html',
          controller: 'PreferencesCtrl',
          header_title: 'Preferences',
          sidebar: 'views/recipient/sidebar.html',
          resolve: {
            access: requireAuth('receiver'),
            resources: fetchResources('receiver', ['preferences']),
          },
        })
        .when('/recipient/content', {
          templateUrl: 'views/recipient/content.html',
          controller: 'AdminCtrl',
          header_title: 'Site settings',
          sidebar: 'views/recipient/sidebar.html',
          resolve: {
            access: requireAuth('receiver'),
            resources: fetchResources('receiver', ['node', 'preferences']),
          },
        })
        .when('/recipient/reports', {
          templateUrl: 'views/recipient/tips.html',
          controller: 'ReceiverTipsCtrl',
          header_title: 'Reports',
          resolve: {
            access: requireAuth('receiver'),
            resources: fetchResources('receiver', ['preferences', 'rtips']),
          },
        })
        .when('/admin/home', {
          templateUrl: 'views/admin/home.html',
          controller: 'AdminCtrl',
          header_title: 'Home',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'users']),
          },
        })
        .when('/admin/preferences', {
          templateUrl: 'views/partials/preferences.html',
          controller: 'PreferencesCtrl',
          header_title: 'Preferences',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences']),
          },
        })
        .when('/admin/content', {
          templateUrl: 'views/admin/content.html',
          controller: 'AdminCtrl',
          header_title: 'Site settings',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences']),
          },
        })
        .when('/admin/contexts', {
          templateUrl: 'views/admin/contexts.html',
          controller: 'AdminCtrl',
          header_title: 'Contexts',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', [
              'contexts',
              'node',
              'preferences',
              'questionnaires',
              'users',
            ]),
          },
        })
        .when('/admin/questionnaires', {
          templateUrl: 'views/admin/questionnaires.html',
          controller: 'AdminCtrl',
          header_title: 'Questionnaires',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', [
              'fieldtemplates',
              'field_attrs',
              'node',
              'preferences',
              'questionnaires',
              'users',
            ]),
          },
        })
        .when('/admin/users', {
          templateUrl: 'views/admin/users.html',
          controller: 'AdminCtrl',
          header_title: 'Users',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'users']),
          },
        })
        .when('/admin/notifications', {
          templateUrl: 'views/admin/notifications.html',
          controller: 'AdminCtrl',
          header_title: 'Notification settings',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'notification']),
          },
        })
        .when('/admin/network', {
          templateUrl: 'views/admin/network.html',
          controller: 'AdminCtrl',
          header_title: 'Network settings',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'redirects']),
          },
        })
        .when('/admin/advanced', {
          templateUrl: 'views/admin/advanced.html',
          controller: 'AdminCtrl',
          header_title: 'Advanced settings',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'questionnaires', 'users']),
          },
        })
        .when('/admin/auditlog', {
          templateUrl: 'views/admin/auditlog.html',
          controller: 'AdminCtrl',
          header_title: 'Audit log',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', [
              'auditlog',
              'jobs',
              'node',
              'preferences',
              'tips',
              'users',
            ]),
          },
        })
        .when('/admin/sites', {
          templateUrl: 'views/admin/sites.html',
          controller: 'AdminCtrl',
          header_title: 'Sites management',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'tenants']),
          },
        })
        .when('/admin/casemanagement', {
          templateUrl: 'views/admin/casemanagement.html',
          controller: 'AdminCtrl',
          header_title: 'Case management',
          sidebar: 'views/admin/sidebar.html',
          resolve: {
            access: requireAuth('admin'),
            resources: fetchResources('admin', ['node', 'preferences', 'submission_statuses']),
          },
        })
        .when('/custodian/home', {
          templateUrl: 'views/custodian/home.html',
          header_title: 'Home',
          sidebar: 'views/custodian/sidebar.html',
          resolve: {
            access: requireAuth('custodian'),
            resources: fetchResources('custodian', ['preferences']),
          },
        })
        .when('/custodian/preferences', {
          templateUrl: 'views/partials/preferences.html',
          controller: 'PreferencesCtrl',
          header_title: 'Preferences',
          sidebar: 'views/custodian/sidebar.html',
          resolve: {
            access: requireAuth('custodian'),
            resources: fetchResources('custodian', ['preferences']),
          },
        })
        .when('/custodian/content', {
          templateUrl: 'views/custodian/content.html',
          controller: 'AdminCtrl',
          header_title: 'Site settings',
          sidebar: 'views/custodian/sidebar.html',
          resolve: {
            access: requireAuth('custodian'),
            resources: fetchResources('custodian', ['node', 'preferences']),
          },
        })
        .when('/custodian/requests', {
          templateUrl: 'views/custodian/identity_access_requests.html',
          header_title: 'Requests',
          resolve: {
            access: requireAuth('custodian'),
            resources: fetchResources('custodian', ['preferences']),
          },
        })
        .when('/login', {
          templateUrl: 'views/login/main.html',
          controller: 'LoginCtrl',
          header_title: 'Log in',
        })
        .when('/admin', {
          templateUrl: 'views/login/main.html',
          controller: 'LoginCtrl',
          header_title: 'Log in',
        })
        .when('/login/passwordreset', {
          templateUrl: 'views/passwordreset/main.html',
          controller: 'PasswordResetCtrl',
          header_title: 'Password reset',
        })
        .when('/login/passwordreset/requested', {
          templateUrl: 'views/passwordreset/requested.html',
          header_title: 'Password reset',
        })
        .when('/login/passwordreset/failure/token', {
          templateUrl: 'views/passwordreset/failure_token.html',
          header_title: 'Password reset',
        })
        .when('/login/passwordreset/failure/recovery', {
          templateUrl: 'views/passwordreset/failure_recovery.html',
          header_title: 'Password reset',
        })
        .when('/password/reset', {
          templateUrl: 'views/empty.html',
          controller: 'PasswordResetCompleteCtrl',
          header_title: 'Password reset',
        })
        .when('/password/reset/2fa', {
          templateUrl: 'views/passwordreset/2fa.html',
          controller: 'PasswordResetCompleteCtrl',
          header_title: 'Password reset',
        })
        .when('/password/reset/recovery', {
          templateUrl: 'views/passwordreset/recovery.html',
          controller: 'PasswordResetCompleteCtrl',
          header_title: 'Password reset',
        })
        .when('/email/validation/success', {
          templateUrl: 'views/email_validation_success.html',
          controller: 'EmptyCtrl',
          header_title: '',
        })
        .when('/email/validation/failure', {
          templateUrl: 'views/email_validation_failure.html',
          controller: 'EmptyCtrl',
          header_title: '',
        })
        .when('/', {
          templateUrl: 'views/home.html',
          header_title: '',
        })
        .otherwise({
          redirectTo: '/',
        })
    },
  ])
  .config([
    '$translateProvider',
    function ($translateProvider) {
      $translateProvider.useStaticFilesLoader({
        prefix: 'l10n/',
        suffix: '',
      })

      $translateProvider.useInterpolation('noopInterpolation')
      $translateProvider.useSanitizeValueStrategy('escape')
    },
  ])
  .config([
    '$uibModalProvider',
    function ($uibModalProvider) {
      $uibModalProvider.options.animation = false
      $uibModalProvider.options.backdrop = 'static'
      $uibModalProvider.options.keyboard = false
      $uibModalProvider.options.focus = true
      $uibModalProvider.options.size = 'lg'
    },
  ])
  .config([
    '$uibTooltipProvider',
    function ($uibTooltipProvider) {
      $uibTooltipProvider.options({ placement: 'auto', appendToBody: true, trigger: 'mouseenter' })
    },
  ])
  .config([
    'tmhDynamicLocaleProvider',
    function (tmhDynamicLocaleProvider) {
      var map = {
        ba: 'bas',
        'ca@valencia': 'ca-es-valencia',
        dv: 'en',
        'sl-si': 'sl',
        'sr_RS@latin': 'sr-latn',
        'sr_ME@latin': 'sr-latn-me',
        tt: 'ru',
        ug: 'ug-arab',
        'ug@Cyrl': 'ug',
        'ug@Latin': 'ug',
      }

      tmhDynamicLocaleProvider.addLocalePatternValue('map', map)

      tmhDynamicLocaleProvider.localeLocationPattern(
        "{{map[locale] ? 'lib/js/locale/angular-locale_' + map[locale] +'.js' : 'lib/js/locale/angular-locale_' + locale +'.js'}}"
      )
    },
  ])
  .config([
    'flowFactoryProvider',
    function (flowFactoryProvider) {
      // Trick to move the flowFactoryProvider config inside run block.
      _flowFactoryProvider = flowFactoryProvider
    },
  ])
  .config([
    'IdleProvider',
    'KeepaliveProvider',
    'TitleProvider',
    function (IdleProvider, KeepaliveProvider, TitleProvider) {
      IdleProvider.idle(300)
      IdleProvider.timeout(3600)
      KeepaliveProvider.interval(600)
      TitleProvider.enabled(false)
    },
  ])
  .run([
    '$rootScope',
    '$http',
    '$route',
    '$routeParams',
    '$window',
    '$location',
    '$filter',
    '$translate',
    '$uibModal',
    '$templateCache',
    'Idle',
    'Authentication',
    'SessionResource',
    'PublicResource',
    'Utils',
    'AdminUtils',
    'fieldUtilities',
    'CONSTANTS',
    'GLTranslate',
    'Access',
    function (
      $rootScope,
      $http,
      $route,
      $routeParams,
      $window,
      $location,
      $filter,
      $translate,
      $uibModal,
      $templateCache,
      Idle,
      Authentication,
      SessionResource,
      PublicResource,
      Utils,
      AdminUtils,
      fieldUtilities,
      CONSTANTS,
      GLTranslate,
      Access
    ) {
      $rootScope.started = false

      $rootScope.page = 'homepage'
      $rootScope.Authentication = Authentication
      $rootScope.GLTranslate = GLTranslate
      $rootScope.Utils = Utils
      $rootScope.fieldUtilities = fieldUtilities
      $rootScope.AdminUtils = AdminUtils
      $rootScope.CONSTANTS = CONSTANTS

      $rootScope.showLoadingPanel = false

      _flowFactoryProvider.defaults = {
        chunkSize: 1000 * 1024,
        forceChunkSize: true,
        testChunks: false,
        simultaneousUploads: 1,
        generateUniqueIdentifier: function () {
          return Math.random() * 1000000 + 1000000
        },
        headers: function () {
          return $rootScope.Authentication.get_headers()
        },
      }

      $rootScope.setPage = function (page) {
        $location.path('/')
        $rootScope.page = page
        $rootScope.Utils.set_title()
      }

      $rootScope.setHomepage = function () {
        $window.location = '/'
      }

      $rootScope.dismissError = function () {
        delete $rootScope.error
      }

      $rootScope.open_confidentiality_modal = function () {
        $uibModal.open({
          controller: 'ConfirmableModalCtrl',
          templateUrl: 'views/modals/security_awareness_confidentiality.html',
          scope: $rootScope,
        })
      }

      $rootScope.open_disclaimer_modal = function () {
        $uibModal.open({
          templateUrl: 'views/modals/disclaimer.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: null,
            confirmFun: function () {
              return function () {
                $rootScope.setPage('submissionpage')
              }
            },
            cancelFun: null,
          },
        })
      }

      $rootScope.evaluateConfidentialityModalOpening = function () {
        if (
          !$rootScope.connection.tor &&
          !$rootScope.connection.https &&
          !$rootScope.confidentiality_warning_opened &&
          ['localhost', '127.0.0.1'].indexOf($location.host()) === -1
        ) {
          $rootScope.confidentiality_warning_opened = true
          return $rootScope.open_confidentiality_modal()
        }
      }

      $rootScope.openSubmission = function () {
        if ($rootScope.public.node.disclaimer_text) {
          return $rootScope.open_disclaimer_modal()
        }

        return $rootScope.setPage('submissionpage')
      }

      $rootScope.init = function () {
        return PublicResource.get(function (result, getResponseHeaders) {
          var elem

          $rootScope.public = result

          if ($rootScope.public.node.css) {
            elem = document.getElementById('load-custom-css')
            if (elem === null) {
              elem = document.createElement('link')
              elem.setAttribute('id', 'load-custom-css')
              elem.setAttribute('rel', 'stylesheet')
              elem.setAttribute('type', 'text/css')
              elem.setAttribute('href', 's/css')
              document.getElementsByTagName('head')[0].appendChild(elem)
            }
          }

          if ($rootScope.public.node.script) {
            elem = document.getElementById('load-custom-script')
            if (elem === null) {
              elem = document.createElement('script')
              elem.setAttribute('id', 'load-custom-script')
              elem.setAttribute('src', 's/script')
              document.getElementsByTagName('body')[0].appendChild(elem)
            }
          }

          if ($rootScope.public.node.favicon) {
            document.getElementById('favicon').setAttribute('href', 's/favicon')
          }

          $rootScope.contexts_by_id = $rootScope.Utils.array_to_map(result.contexts)
          $rootScope.receivers_by_id = $rootScope.Utils.array_to_map(result.receivers)
          $rootScope.questionnaires_by_id = $rootScope.Utils.array_to_map(result.questionnaires)

          $rootScope.submission_statuses = result.submission_statuses
          $rootScope.submission_statuses_by_id = $rootScope.Utils.array_to_map(
            result.submission_statuses
          )

          angular.forEach($rootScope.questionnaires_by_id, function (element, key) {
            $rootScope.fieldUtilities.parseQuestionnaire($rootScope.questionnaires_by_id[key], {})
            $rootScope.questionnaires_by_id[key].steps = $filter('orderBy')(
              $rootScope.questionnaires_by_id[key].steps,
              'order'
            )
          })

          angular.forEach($rootScope.contexts_by_id, function (element, key) {
            $rootScope.contexts_by_id[key].questionnaire =
              $rootScope.questionnaires_by_id[$rootScope.contexts_by_id[key].questionnaire_id]
            if ($rootScope.contexts_by_id[key].additional_questionnaire_id) {
              $rootScope.contexts_by_id[key].additional_questionnaire =
                $rootScope.questionnaires_by_id[
                  $rootScope.contexts_by_id[key].additional_questionnaire_id
                ]
            }
          })

          $rootScope.connection = {
            tor:
              getResponseHeaders()['X-Check-Tor'] === 'true' || $location.host().match(/\.onion$/),
          }

          $rootScope.privacy_badge_open = !$rootScope.connection.tor

          Utils.route_check()

          $rootScope.languages_enabled = {}
          $rootScope.languages_enabled_selector = []
          $rootScope.languages_supported = {}
          angular.forEach($rootScope.public.node.languages_supported, function (lang) {
            $rootScope.languages_supported[lang.code] = lang
            if ($rootScope.public.node.languages_enabled.indexOf(lang.code) !== -1) {
              $rootScope.languages_enabled[lang.code] = lang
              $rootScope.languages_enabled_selector.push(lang)
            }
          })

          GLTranslate.addNodeFacts(
            $rootScope.public.node.default_language,
            $rootScope.public.node.languages_enabled
          )
          Utils.set_title()

          $rootScope.started = true
        }).$promise
      }

      //////////////////////////////////////////////////////////////////

      var hasRegistered = false
      $rootScope.$watch(function () {
        if (hasRegistered) return
        hasRegistered = true
        $rootScope.$$postDigest(function () {
          hasRegistered = false
          GL.mockEngine.run()
        })
      })

      $rootScope.$watch(
        function () {
          var count = 0
          for (var i = 0; i < $http.pendingRequests.length; i++) {
            if ($http.pendingRequests[i].url.indexOf('api/session') === -1) {
              count += 1
            }
          }
          return count
        },
        function (count) {
          $rootScope.showLoadingPanel = count > 0
        }
      )

      $rootScope.$watch('GLTranslate.state.language', function (new_val, old_val) {
        if (new_val !== old_val) {
          if (old_val && old_val !== '*') {
            $location.search('lang', new_val)
            GLTranslate.setLang(new_val)
            $rootScope.reload()
          }
        }
      })

      $rootScope.$on('$locationChangeStart', function () {
        var lang = $location.search().lang
        if (lang) {
          if (lang !== GLTranslate.state.language) {
            $window.location.href = $location.absUrl()
            $window.location.reload()
          }
        }

        if (
          $location.path() === '/' &&
          $rootScope.Authentication.session &&
          $rootScope.Authentication.session.role !== 'whistleblower'
        ) {
          // Get sure to reset the user session when visiting the public interface
          // This is intended as protection in relation to possible XSS and XSRF
          // on components implementing markdown and direct html input.
          $rootScope.Authentication.session = undefined
        }
      })

      $rootScope.$on('$routeChangeStart', Utils.route_check)

      $rootScope.$on('$routeChangeSuccess', function (event, current) {
        if (current.$$route) {
          delete $rootScope.error
          $rootScope.header_title = current.$$route.header_title
          $rootScope.sidebar = current.$$route.sidebar
          Utils.set_title()
        }
      })

      $rootScope.$on('$routeChangeError', function (event, current, previous, rejection) {
        if (rejection === Access.FORBIDDEN) {
          $rootScope.Authentication.loginRedirect(false)
        }
      })

      $rootScope.$on('REFRESH', function () {
        $rootScope.reload()
      })

      $rootScope.keypress = function (e) {
        if (
          (e.which || e.keyCode) === 116 /* F5 */ ||
          ((e.which || e.keyCode) === 82 && (e.ctrlKey || e.metaKey))
        ) {
          /* (ctrl or meta) + r */
          e.preventDefault()
          $rootScope.$emit('REFRESH')
        }
      }

      $rootScope.reload = function (new_path) {
        delete $rootScope.error

        $rootScope.init().then(function () {
          $route.reload()

          if (new_path) {
            $location.path(new_path).replace()
          }
        })
      }

      $rootScope.$on('Keepalive', function () {
        if ($rootScope.Authentication.session) {
          return SessionResource.get()
        }
      })

      $rootScope.$on('IdleTimeout', function () {
        if ($rootScope.Authentication.session) {
          return $rootScope.Authentication.loginRedirect(false)
        }
      })

      Idle.watch()

      $rootScope.init()
    },
  ])
  .factory('globaleaksRequestInterceptor', [
    '$injector',
    function ($injector) {
      return {
        request: function (config) {
          var $rootScope = $injector.get('$rootScope')

          angular.extend(config.headers, $rootScope.Authentication.get_headers())

          return config
        },
        responseError: function (response) {
          /*/
          When the response has failed write the rootScope
          errors array the error message.
       */
          var $rootScope = $injector.get('$rootScope')
          var $q = $injector.get('$q')
          var $location = $injector.get('$location')

          if (response.status === 405) {
            var errorData = angular.toJson({
              errorUrl: $location.path(),
              errorMessage: response.statusText,
              stackTrace: [
                {
                  url: response.config.url,
                  method: response.config.method,
                },
              ],
              agent: navigator.userAgent,
            })

            $rootScope.Utils.notifyException(errorData)
          }

          if (response.data !== null) {
            var error = {
              message: response.data.error_message,
              code: response.data.error_code,
              arguments: response.data.arguments,
            }

            /* 10: Not Authenticated */
            if (error.code === 10) {
              $rootScope.Authentication.loginRedirect(false)
            } else if (error.code === 6 && $rootScope.Authentication.session) {
              if ($rootScope.Authentication.session.role !== 'whistleblower') {
                $location.path($rootScope.Authentication.session.homepage)
              }
            }

            $rootScope.error = error
          }

          return $q.reject(response)
        },
      }
    },
  ])
  .factory('noopInterpolation', [
    '$interpolate',
    '$translateSanitization',
    function ($interpolate, $translateSanitization) {
      // simple noop interpolation service

      var $locale,
        $identifier = 'noop'

      return {
        setLocale: function (locale) {
          $locale = locale
        },
        getInterpolationIdentifier: function () {
          return $identifier
        },
        useSanitizeValueStrategy: function (value) {
          $translateSanitization.useStrategy(value)
          return this
        },
        interpolate: function (
          value /*, interpolationParams, context, sanitizeStrategy, translationId*/
        ) {
          return value
        },
      }
    },
  ])
  .factory('stacktraceService', function () {
    return {
      fromError: StackTrace.fromError,
    }
  })

GL.constant('CONSTANTS', {
  /* The email regexp restricts email addresses to less than 400 chars. See #1215 */
  email_regexp: /^([\w+-.]){0,100}[\w]{1,100}@([\w+-.]){0,100}[\w]{1,100}$/,
  number_regexp: /^\d+$/,
  phonenumber_regexp: /^[+]?[ \d]+$/,
  hostname_regexp: /^[a-z0-9-.]+$|^$/,
  https_regexp: /^https:\/\/([a-z0-9-]+)\.(.*)$|^$/,
  uuid_regexp: /^([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$/,
})

GL.factory('glbcUtil', function () {
  return {
    /**
     * @param {String} str
     * @return {Uint8Array} the int representing each 'character'
     **/
    str2Uint8Array: function (str) {
      var result = new Uint8Array(str.length)
      for (var i = 0; i < str.length; i++) {
        result[i] = str.charCodeAt(i)
      }
      return result
    },
  }
}).factory('glbcProofOfWork', [
  '$q',
  'glbcUtil',
  function ($q, glbcUtil) {
    // proofOfWork return the answer to the proof of work
    // { [challenge string] -> [ answer index] }
    var getWebCrypto = function () {
      if (typeof window === 'undefined' || !window.isSecureContext) {
        return
      }

      if (window.crypto) {
        return window.crypto.subtle || window.crypto.webkitSubtle
      } else if (window.msCrypto) {
        return window.msCrypto.subtle
      }
    }

    return {
      proofOfWork: function (data) {
        var deferred = $q.defer()

        var work = function (i) {
          var webCrypto = getWebCrypto()
          var toHash = glbcUtil.str2Uint8Array(data + i)
          var damnIE

          var xxx = function (hash) {
            hash = new Uint8Array(hash)
            if (hash[31] === 0) {
              deferred.resolve(i)
            } else {
              work(i + 1)
            }
          }

          if (webCrypto) {
            damnIE = webCrypto.digest({ name: 'SHA-256' }, toHash)
          } else {
            damnIE = $q.resolve(sha256(toHash))
          }

          if (typeof damnIE.then !== 'undefined') {
            damnIE.then(xxx)
          } else {
            damnIE.oncomplete = function (r) {
              xxx(r.target.result)
            }
          }
        }

        work(0)

        return deferred.promise
      },
    }
  },
])

GL.directive('dynamicTextarea', function () {
  return {
    restrict: 'A',
    link: function postLink(scope, elem, attrs) {
      elem.css('min-height', '2rem')

      var update = function () {
        elem.css('height', 'auto')

        var height = elem[0].scrollHeight
        if (height) {
          elem.css('height', height + 'px')
        }
      }

      scope.$watch(attrs.ngModel, function () {
        update()
      })

      attrs.$set('ngTrim', 'false')
    },
  }
})
  .directive('receiptvalidator', function () {
    return {
      require: 'ngModel',
      link: function (scope, elem, attrs, model) {
        model.$setValidity('receiptvalidator', false)
        model.$parsers.unshift(function (viewValue) {
          var result = ''

          model.$setValidity('receiptvalidator', false)
          viewValue = viewValue.replace(/\D/g, '')

          while (viewValue.length) {
            result += viewValue.substring(0, 4)
            if (viewValue.length >= 4) {
              if (result.length < 19) {
                result += ' '
              }
              viewValue = viewValue.substring(4)
            } else {
              break
            }
          }

          angular.element(elem).val(result)

          if (result.length === 19) {
            model.$setValidity('receiptvalidator', true)
          }

          return result
        })
      },
    }
  })
  .directive('recoverykeyvalidator', function () {
    return {
      require: 'ngModel',
      link: function (scope, elem, attrs, model) {
        model.$setValidity('recoverykeyvalidator', false)
        model.$parsers.unshift(function (viewValue) {
          var result = ''

          model.$setValidity('recoverykeyvalidator', false)
          viewValue = viewValue.replace(/[^[a-zA-Z0-9]/g, '').toUpperCase()

          while (viewValue.length) {
            result += viewValue.substring(0, 4)
            if (viewValue.length >= 4) {
              if (result.length < 64) {
                result += '-'
              }
              viewValue = viewValue.substring(4)
            } else {
              break
            }
          }

          angular.element(elem).val(result)

          if (result.length === 64) {
            model.$setValidity('recoverykeyvalidator', true)
          }

          return result
        })
      },
    }
  })
  .directive('subdomainvalidator', function () {
    return {
      require: 'ngModel',
      link: function (scope, elem, attrs, model) {
        model.$parsers.unshift(function (viewValue) {
          viewValue = viewValue.toLowerCase()
          viewValue = viewValue.replace(/[^a-z0-9-]/g, '')
          angular.element(elem).val(viewValue)
          return viewValue
        })
      },
    }
  })
  .directive('passwordMeter', function () {
    return {
      scope: {
        value: '=',
      },
      templateUrl: 'views/partials/password_meter.html',
      link: function (scope) {
        scope.type = null
        scope.text = ''

        scope.$watch('value', function (newValue) {
          if (newValue < 2) {
            scope.type = 'danger'
            scope.text = 'Weak'
          } else if (newValue < 3) {
            scope.type = 'warning'
            scope.text = 'Acceptable'
          } else {
            scope.type = 'primary'
            scope.text = 'Strong'
          }
        })
      },
    }
  })
  .directive('singleErrorUpload', function () {
    return {
      restrict: 'A',
      controller: [
        '$scope',
        function ($scope) {
          $scope.$watch('file_error_msgs.length', function () {
            // Reset the error display flag when a new error is pushed
            $scope.displayErr = true
          })

          $scope.displayErr = true
        },
      ],
      templateUrl: 'views/partials/upload_error_msg.html',
    }
  })
  .directive('errorsUpload', function () {
    // Depends on file_error_msgs is defined in parent scope.
    return {
      restrict: 'A',
      templateUrl: 'views/partials/upload_error_msgs.html',
    }
  })
  .directive('extendFlowValidSize', [
    'uploadUtils',
    function (uploadUtils) {
      return {
        restrict: 'A',
        scope: true,
        link: function (scope, elem, attrs) {
          var validSize = parseInt(scope.$eval(attrs.extendFlowValidSize), 10)
          scope.$on('flow::fileAdded', function (event, _, flowFile) {
            if (flowFile.size > validSize) {
              if (typeof scope.file_error_msgs === 'undefined') {
                scope.file_error_msgs = []
              }
              var errMsg = uploadUtils.translateInvalidSizeErr(flowFile.name, validSize)
              scope.file_error_msgs.push(errMsg)
              event.preventDefault()
            }
          })
        },
      }
    },
  ])
  .directive('imageUpload', function () {
    return {
      restrict: 'A',
      scope: {
        imageUploadModel: '=',
        imageUploadModelAttr: '@',
        imageUploadId: '@',
        imageSrcUrl: '@',
      },
      templateUrl: 'views/partials/image_upload.html',
      controller: 'ImageUploadCtrl',
    }
  })
  // pgpPubkeyValidator binds to text-areas to provide input validation on user
  // input PGP public keys. Note that the directive attaches itself to the
  // containing form's modelController NOT the model bound to the value of the
  // text-area itself. If the key word 'canBeEmpty' the pgp key validator is disabled
  // when the textarea's input is empty.
  .directive('pgpPubkeyValidator', function () {
    // scope is the directives scope
    // elem is a jqlite reference to the bound element
    // attrs is the list of directives on the element
    // model is the model controller attached to the form
    function link(scope, elem, attrs, model) {
      scope.canBeEmpty = scope.pgpPubkeyValidator === 'canBeEmpty'

      // modelValue is the models value, viewVal is displayed on the page.
      model.$validators.pgpPubKeyValidator = function (modelVal) {
        // Check for obvious problems.
        if (typeof modelVal !== 'string') {
          modelVal = ''
        }

        modelVal = modelVal.trim()

        if (scope.canBeEmpty && modelVal === '') {
          return true
        }

        return (
          modelVal.startsWith('-----BEGIN PGP PUBLIC KEY BLOCK-----') &&
          modelVal.endsWith('-----END PGP PUBLIC KEY BLOCK-----')
        )
      }
    }
    // Return a Directive Definition Object for angular to compile
    return {
      restrict: 'A',
      require: 'ngModel',
      link: link,
      scope: {
        // The string passed to the directive is used to assign special key word behavior.
        pgpPubkeyValidator: '@',
      },
    }
  })
  .directive('singleClick', [
    function () {
      return {
        restrict: 'A',
        link: function (scope, elm) {
          elm.on('click', function () {
            elm.attr('disabled', true)
          })
        },
      }
    },
  ])
  .directive('wbfile', [
    function () {
      return {
        restrict: 'A',
        scope: false,
        templateUrl: 'views/partials/wbfile.html',
      }
    },
  ])
  .directive('fileInput', function () {
    return {
      restrict: 'A',
      templateUrl: 'views/partials/file_input.html',
      scope: {
        fileInput: '&',
        fileInputLabel: '@',
      },
      link: function (scope, elem) {
        elem.find('input').on('change', function (event) {
          if (event.target.files && event.target.files.length) {
            scope.$apply(function () {
              scope.fileInput({ file: event.target.files[0] })
            })
          }
        })
      },
    }
  })
  .directive('isolateClick', function () {
    return {
      link: function (scope, elem) {
        elem.on('click', function (e) {
          e.stopPropagation()
        })
      },
    }
  })
  .directive('disableCcp', function () {
    return {
      scope: {},
      link: function (scope, elem) {
        elem.on('cut copy paste', function (event) {
          event.preventDefault()
        })
      },
    }
  })
  .directive('convertToNumber', function () {
    return {
      require: 'ngModel',
      link: function (scope, elem, attrs, model) {
        model.$parsers.push(function (val) {
          return val !== null ? parseInt(val, 10) : null
        })
        model.$formatters.push(function (val) {
          return val !== null ? '' + val : null
        })
      },
    }
  })
  .directive('passwordStrengthValidator', function () {
    function link(scope, elem, attrs, model) {
      model.$validators.passwordStrengthValidator = function (pwd) {
        var types = {
          lower: /[a-z]/.test(pwd),
          upper: /[A-Z]/.test(pwd),
          symbols: /\W/.test(pwd),
          digits: /\d/.test(pwd),
        }

        var i,
          variation1 = 0,
          variation2 = 0,
          letters = {},
          score = 0

        if (pwd) {
          /* Score symbols variation */
          for (i in types) {
            variation1 += types[i] ? 1 : 0
          }

          /* Score unique symbols */
          for (i = 0; i < pwd.length; i++) {
            if (!letters[pwd[i]]) {
              letters[pwd[i]] = 1
              variation2 += 1
            }
          }

          if (variation1 !== 4 || variation2 < 8 || pwd.length < 10) {
            score = 1
          } else if (variation1 !== 4 || variation2 < 10 || pwd.length < 12) {
            score = 2
          } else {
            score = 3
          }
        }

        scope.$parent.passwordStrengthScore = score

        return score > 1
      }
    }

    return {
      restrict: 'A',
      require: 'ngModel',
      link: link,
      scope: {
        passwordStrengthValidator: '@',
      },
    }
  })

GL.filter('weekNumber', function () {
  return function (value) {
    var date = new Date(value)
    date.setHours(0, 0, 0, 0)
    // Thursday in current week decides the year.
    date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7))
    // January 4 is always in week 1.
    var week1 = new Date(date.getFullYear(), 0, 4)
    // Adjust to Thursday in week 1 and count number of weeks from date to week1.
    return (
      1 +
      Math.round(
        ((date.getTime() - week1.getTime()) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7
      )
    )
  }
})
  .filter('expirationDate', function () {
    return function (date, ttl) {
      if (angular.isUndefined(date)) {
        return undefined
      }

      var e = new Date(new Date(date).getTime())
      e.setUTCHours(0, 0, 0, 0)
      e.setDate(ttl + 1)
      return e
    }
  })
  .filter('split', function () {
    return function (input, splitChar, splitIndex) {
      return input.split(splitChar)[splitIndex]
    }
  })

GL.factory('GLResource', [
  '$resource',
  function ($resource) {
    return function (url, params, actions) {
      var defaults = {
        get: { method: 'GET' },
        query: { method: 'GET', isArray: true },
        update: { method: 'PUT' },
      }

      actions = angular.extend(defaults, actions)

      return $resource(url, params, actions)
    }
  },
])
  .factory('Authentication', [
    '$filter',
    '$http',
    '$location',
    '$window',
    '$rootScope',
    'GLTranslate',
    'TokenResource',
    function ($filter, $http, $location, $window, $rootScope, GLTranslate, TokenResource) {
      function Session() {
        var self = this

        self.loginInProgress = false
        self.requireAuthCode = false
        self.loginData = {}

        self.set_session = function (response) {
          response = response.data

          var session = {
            id: response.session_id,
            user_id: response.user_id,
            role: response.role,
            require_password_change: response.require_password_change,
            two_factor: response.two_factor,
            properties: response.properties,
            homepage: '',
            preferencespage: '',
          }

          if (session.role !== 'whistleblower') {
            var role = session.role === 'receiver' ? 'recipient' : session.role

            session.homepage = '/' + role + '/home'
            session.preferencespage = '/' + role + '/preferences'
          }

          self.session = session
        }

        self.reset = function () {
          self.loginInProgress = false
          self.requireAuthCode = false
          self.loginData = {}
        }

        self.login = function (tid, username, password, authcode, authtoken) {
          if (typeof authcode === 'undefined') {
            authcode = ''
          }

          self.loginInProgress = true

          var success_fn = function (response) {
            self.reset()

            if ('redirect' in response.data) {
              $window.location.replace(response.data.redirect)
            }

            self.set_session(response)

            var src = $location.search().src
            if (src) {
              $location.path(src)
            } else {
              // Override the auth_landing_page if a password change is needed
              if (self.session.role === 'whistleblower') {
                if (password) {
                  $rootScope.setPage('tippage')
                }
              } else {
                $location.path(self.session.homepage)
              }
            }
          }

          var failure_fn = function (response) {
            self.loginInProgress = false

            if (response.data && response.data.error_code) {
              if (response.data.error_code === 4) {
                self.requireAuthCode = true
              } else if (response.data.error_code !== 13) {
                self.reset()
              }
            }
          }

          return new TokenResource().$get().then(function (token) {
            var promise
            if (authtoken) {
              promise = $http.post('api/tokenauth?token=' + token.id, { authtoken: authtoken })
            } else {
              if (username === 'whistleblower') {
                password = password.replace(/\D/g, '')
                promise = $http.post('api/receiptauth?token=' + token.id, { receipt: password })
              } else {
                promise = $http.post('api/authentication?token=' + token.id, {
                  tid: tid,
                  username: username,
                  password: password,
                  authcode: authcode,
                })
              }
            }

            return promise.then(success_fn, failure_fn)
          })
        }

        self.deleteSession = function () {
          if (self.session) {
            self.session = undefined
          }
        }

        self.logout = function () {
          var cb

          $rootScope.Authentication.reset()

          if (self.session.role === 'whistleblower') {
            cb = function () {
              self.deleteSession()
              $rootScope.setPage('homepage')
            }
          } else {
            cb = function () {
              self.deleteSession()
              self.loginRedirect(true)
            }
          }

          return $http.delete('api/session').then(cb, cb)
        }

        self.loginRedirect = function (isLogout) {
          var source_path = $location.path()

          if (source_path !== '/login') {
            $location.path('/login')

            if (!isLogout) {
              $location.search('src', source_path)
            }

            $window.location = $location.absUrl()
            $window.location.reload()
          }
        }

        self.hasUserRole = function () {
          if (angular.isUndefined(self.session)) {
            return false
          }

          return ['admin', 'receiver', 'custodian'].indexOf(self.session.role) !== -1
        }

        self.get_headers = function () {
          var h = {}

          if (self.session) {
            h['X-Session'] = self.session.id
          }

          h['Accept-Language'] = GLTranslate.state.language

          return h
        }
      }

      return new Session()
    },
  ])
  .factory('Access', [
    '$q',
    'Authentication',
    function ($q, Authentication) {
      var Access = {
        OK: 200,

        FORBIDDEN: 403,

        isUnauth: function () {
          if (typeof Authentication.session === 'undefined') {
            return $q.resolve(Access.OK)
          } else {
            return $q.reject(Access.FORBIDDEN)
          }
        },

        isAuthenticated: function (role) {
          if (Authentication.session && (role === '*' || Authentication.session.role === role)) {
            return $q.resolve(Access.OK)
          } else {
            return $q.reject(Access.FORBIDDEN)
          }
        },
      }

      return Access
    },
  ])
  .factory('SessionResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/session')
    },
  ])
  .factory('PublicResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/public')
    },
  ])
  .factory('TokenResource', [
    'GLResource',
    'glbcProofOfWork',
    function (GLResource, glbcProofOfWork) {
      return new GLResource(
        'api/token/:id',
        { id: '@id' },
        {
          get: {
            method: 'POST',
            interceptor: {
              response: function (response) {
                var token = response.resource
                return glbcProofOfWork.proofOfWork(token.id).then(function (result) {
                  token.answer = result
                  return token.$update().then(function (token) {
                    return token
                  })
                })
              },
            },
          },
        }
      )
    },
  ])
  .factory('SubmissionResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/submission')
    },
  ])
  .factory('FieldAttrs', [
    '$resource',
    function ($resource) {
      return $resource('data/field_attrs.json')
    },
  ])
  .factory('DATA_COUNTRIES_ITALY_REGIONS', [
    '$resource',
    function ($resource) {
      return $resource('data/countries/it/regioni.json')
    },
  ])
  .factory('DATA_COUNTRIES_ITALY_PROVINCES', [
    '$resource',
    function ($resource) {
      return $resource('data/countries/it/province.json')
    },
  ])
  .factory('DATA_COUNTRIES_ITALY_CITIES', [
    '$resource',
    function ($resource) {
      return $resource('data/countries/it/comuni.json')
    },
  ])
  .factory('Submission', [
    '$q',
    '$location',
    '$rootScope',
    'Authentication',
    'GLResource',
    'SubmissionResource',
    'TokenResource',
    function ($q, $location, $rootScope, Authentication, GLResource, SubmissionResource) {
      return function (fn) {
        /**
         * This factory returns a Submission object that will call the fn
         * callback once all the information necessary for creating a submission
         * has been collected.
         *
         * This means getting the node information, the list of receivers and the
         * list of contexts.
         */
        var self = this

        self._submission = null
        self.context = undefined
        self.receivers = []
        self.mandatory_receivers = 0
        self.optional_receivers = 0
        self.selected_receivers = {}
        self.done = false

        self.setContextReceivers = function (context_id) {
          self.context = $rootScope.contexts_by_id[context_id]

          // bypass the re-initialization if recipients are manually selected
          if (
            Object.keys(self.selected_receivers).length &&
            self.context.allow_recipients_selection
          ) {
            return
          }

          self.selected_receivers = {}
          self.receivers = []

          angular.forEach(self.context.receivers, function (receiver) {
            var r = $rootScope.receivers_by_id[receiver]

            if (!r) {
              return
            }

            self.receivers.push(r)

            if (r.forcefully_selected) {
              self.mandatory_receivers += 1
            } else {
              self.optional_receivers += 1
            }

            if (self.context.select_all_receivers || r.forcefully_selected) {
              self.selected_receivers[r.id] = true
            }
          })
        }

        self.countSelectedReceivers = function () {
          return Object.keys(self.selected_receivers).length
        }

        /**
         * @name Submission.create
         * @description
         * Create a new submission based on the currently selected context.
         *
         * */
        self.create = function (context_id) {
          self.setContextReceivers(context_id)

          self._submission = new SubmissionResource({
            context_id: self.context.id,
            receivers: [],
            identity_provided: false,
            answers: {},
            answer: 0,
            score: 0,
            removed_files: [],
          })

          Authentication.login(0, 'whistleblower', '')
        }

        /**
         * @name Submission.submit
         * @description
         * Submit the currently configured submission.
         * This involves setting the receivers of the submission object to those
         * currently selected and setting up the submission fields entered by the
         * whistleblower.
         */
        self.submit = function () {
          self.done = true

          self._submission.receivers = []
          angular.forEach(self.selected_receivers, function (selected, id) {
            if (selected) {
              self._submission.receivers.push(id)
            }
          })

          return self._submission.$save().then(function (result) {
            if (result && result.success) {
              $rootScope.receipt = result.receipt
              $rootScope.setPage('receiptpage')
            }
          })
        }

        fn(self)
      }
    },
  ])
  .factory('RTipResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/rtips/:id', { id: '@id' })
    },
  ])
  .factory('RTipCommentResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/rtips/:id/comments', { id: '@id' })
    },
  ])
  .factory('RTipMessageResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/rtips/:id/messages', { id: '@id' })
    },
  ])
  .factory('RTipDownloadRFile', [
    '$http',
    '$window',
    'TokenResource',
    function ($http, $window, TokenResource) {
      return function (file) {
        return new TokenResource().$get().then(function (token) {
          $window.open('api/rfile/' + file.id + '?token=' + token.id)
        })
      }
    },
  ])
  .factory('RTipWBFileResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/wbfile/:id', { id: '@id' })
    },
  ])
  .factory('RTipDownloadWBFile', [
    '$http',
    '$window',
    'TokenResource',
    function ($http, $window, TokenResource) {
      return function (file) {
        return new TokenResource().$get().then(function (token) {
          $window.open('api/wbfile/' + file.id + '?token=' + token.id)
        })
      }
    },
  ])
  .factory('RTipExport', [
    '$http',
    '$window',
    'TokenResource',
    function ($http, $window, TokenResource) {
      return function (tip) {
        return new TokenResource().$get().then(function (token) {
          $window.open('api/rtips/' + tip.id + '/export?token=' + token.id)
        })
      }
    },
  ])
  .factory('RTip', [
    '$rootScope',
    '$http',
    'RTipResource',
    'RTipMessageResource',
    'RTipCommentResource',
    function ($rootScope, $http, RTipResource, RTipMessageResource, RTipCommentResource) {
      return function (tipID, fn) {
        var self = this

        self.tip = RTipResource.get(tipID, function (tip) {
          tip.context = $rootScope.contexts_by_id[tip.context_id]
          tip.questionnaire = $rootScope.questionnaires_by_id[tip.context.questionnaire_id]
          tip.additional_questionnaire =
            $rootScope.questionnaires_by_id[tip.context.additional_questionnaire_id]

          tip.newComment = function (content) {
            var c = new RTipCommentResource(tipID)
            c.content = content
            c.$save(function (newComment) {
              tip.comments.unshift(newComment)
              tip.localChange()
            })
          }

          tip.newMessage = function (content) {
            var m = new RTipMessageResource(tipID)
            m.content = content
            m.$save(function (newMessage) {
              tip.messages.unshift(newMessage)
              tip.localChange()
            })
          }

          tip.operation = function (operation, args) {
            var req = {
              operation: operation,
              args: args,
            }

            return $http({ method: 'PUT', url: 'api/rtips/' + tip.id, data: req })
          }

          tip.updateSubmissionStatus = function () {
            return tip
              .operation('update_status', {
                status: tip.status,
                substatus: tip.substatus ? tip.substatus : '',
              })
              .then(function () {
                $rootScope.reload()
              })
          }

          tip.localChange = function () {
            tip.update_date = new Date().toISOString()
          }

          if (fn) {
            fn(tip)
          }
        })
      }
    },
  ])
  .factory('WBTipResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/wbtip')
    },
  ])
  .factory('WBTipCommentResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/wbtip/comments')
    },
  ])
  .factory('WBTipMessageResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/wbtip/messages/:id', { id: '@id' })
    },
  ])
  .factory('WBTipDownloadFile', [
    '$http',
    '$window',
    'TokenResource',
    function ($http, $window, TokenResource) {
      return function (file) {
        return new TokenResource().$get().then(function (token) {
          $window.open('api/wbtip/wbfile/' + file.id + '?token=' + token.id)
        })
      }
    },
  ])
  .factory('WBTip', [
    '$rootScope',
    'WBTipResource',
    'WBTipCommentResource',
    'WBTipMessageResource',
    function ($rootScope, WBTipResource, WBTipCommentResource, WBTipMessageResource) {
      return function (fn) {
        var self = this

        self.tip = WBTipResource.get(function (tip) {
          tip.context = $rootScope.contexts_by_id[tip.context_id]
          tip.questionnaire = $rootScope.questionnaires_by_id[tip.context.questionnaire_id]
          tip.additional_questionnaire =
            $rootScope.questionnaires_by_id[tip.context.additional_questionnaire_id]

          tip.msg_receiver_selected = null
          tip.msg_receivers_selector = []

          angular.forEach(tip.receivers, function (r) {
            if ($rootScope.receivers_by_id[r.id]) {
              r = $rootScope.receivers_by_id[r.id]
              tip.msg_receivers_selector.push({
                key: r.id,
                value: r.name,
              })
            }
          })

          tip.newComment = function (content) {
            var c = new WBTipCommentResource()
            c.content = content
            c.$save(function (newComment) {
              tip.comments.unshift(newComment)
              tip.localChange()
            })
          }

          tip.newMessage = function (content) {
            var m = new WBTipMessageResource({ id: tip.msg_receiver_selected })
            m.content = content
            m.$save(function (newMessage) {
              tip.messages.unshift(newMessage)
              tip.localChange()
            })
          }

          tip.localChange = function () {
            tip.update_date = new Date().toISOString()
          }

          if (fn) {
            fn(tip)
          }
        })
      }
    },
  ])
  .factory('ReceiverTips', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/rtips')
    },
  ])
  .factory('IdentityAccessRequests', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/custodian/iars')
    },
  ])
  .factory('AdminAuditLogResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/auditlog')
    },
  ])
  .factory('AdminContextResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/contexts/:id', { id: '@id' })
    },
  ])
  .factory('AdminQuestionnaireResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/questionnaires/:id', { id: '@id' })
    },
  ])
  .factory('AdminStepResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/steps/:id', { id: '@id' })
    },
  ])
  .factory('AdminFieldResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/fields/:id', { id: '@id' })
    },
  ])
  .factory('AdminFieldTemplateResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/fieldtemplates/:id', { id: '@id' })
    },
  ])
  .factory('AdminRedirectResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/redirects/:id', { id: '@id' })
    },
  ])
  .factory('AdminTenantResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/tenants/:id', { id: '@id' })
    },
  ])
  .factory('AdminUserResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/users/:id', { id: '@id' })
    },
  ])
  .factory('AdminSubmissionStatusResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/submission_statuses/:id', { id: '@id' })
    },
  ])
  .factory('AdminSubmissionSubStatusResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/submission_statuses/:submissionstatus_id/substatuses/:id', {
        id: '@id',
        submissionstatus_id: '@submissionstatus_id',
      })
    },
  ])
  .factory('AdminNodeResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/node')
    },
  ])
  .factory('AdminNotificationResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/notification')
    },
  ])
  .factory('AdminL10NResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/l10n/:lang', { lang: '@lang' })
    },
  ])
  .factory('AdminTLSConfigResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource(
        'api/admin/config/tls',
        {},
        {
          enable: { method: 'POST', params: {} },
          disable: { method: 'PUT', params: {} },
        }
      )
    },
  ])
  .factory('AdminTLSCertFileResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/config/tls/files')
    },
  ])
  .factory('AdminAcmeResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/config/acme/run')
    },
  ])
  .factory('AdminTLSCfgFileResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/config/tls/files/:name', { name: '@name' })
    },
  ])
  .factory('AdminUtils', [
    'AdminContextResource',
    'AdminQuestionnaireResource',
    'AdminStepResource',
    'AdminFieldResource',
    'AdminFieldTemplateResource',
    'AdminUserResource',
    'AdminNodeResource',
    'AdminNotificationResource',
    'AdminRedirectResource',
    'AdminTenantResource',
    function (
      AdminContextResource,
      AdminQuestionnaireResource,
      AdminStepResource,
      AdminFieldResource,
      AdminFieldTemplateResource,
      AdminUserResource,
      AdminNodeResource,
      AdminNotificationResource,
      AdminRedirectResource,
      AdminTenantResource
    ) {
      return {
        new_context: function () {
          var context = new AdminContextResource()
          context.id = ''
          context.status = 'hidden'
          context.name = ''
          context.description = ''
          context.order = 0
          context.tip_timetolive = 90
          context.show_recipients_details = false
          context.allow_recipients_selection = false
          context.show_receivers_in_alphabetical_order = true
          context.show_steps_navigation_interface = true
          context.select_all_receivers = true
          context.maximum_selectable_receivers = 0
          context.enable_comments = true
          context.enable_messages = false
          context.enable_two_way_comments = true
          context.enable_two_way_messages = true
          context.enable_attachments = true
          context.questionnaire_id = ''
          context.additional_questionnaire_id = ''
          context.score_threshold_medium = 0
          context.score_threshold_high = 0
          context.score_receipt_text_custom = false
          context.score_receipt_text_l = ''
          context.score_receipt_text_m = ''
          context.score_receipt_text_h = ''
          context.score_threshold_receipt = 0
          context.receivers = []
          return context
        },

        new_questionnaire: function () {
          var questionnaire = new AdminQuestionnaireResource()
          questionnaire.id = ''
          questionnaire.key = ''
          questionnaire.name = ''
          questionnaire.steps = []
          return questionnaire
        },

        new_step: function (questionnaire_id) {
          var step = new AdminStepResource()
          step.id = ''
          step.label = ''
          step.description = ''
          step.order = 0
          step.children = []
          step.questionnaire_id = questionnaire_id
          step.triggered_by_score = 0
          step.triggered_by_options = []
          return step
        },

        new_field: function (step_id, fieldgroup_id) {
          var field = new AdminFieldResource()
          field.id = ''
          field.key = ''
          field.instance = 'instance'
          field.descriptor_id = ''
          field.label = ''
          field.type = 'inputbox'
          field.description = ''
          field.hint = ''
          field.placeholder = ''
          field.multi_entry = false
          field.required = false
          field.preview = false
          field.attrs = {}
          field.options = []
          field.x = 0
          field.y = 0
          field.width = 0
          field.children = []
          field.fieldgroup_id = fieldgroup_id
          field.step_id = step_id
          field.template_id = ''
          field.template_override_id = ''
          field.triggered_by_score = 0
          field.triggered_by_options = []
          return field
        },

        new_field_template: function (fieldgroup_id) {
          var field = new AdminFieldTemplateResource()
          field.id = ''
          field.instance = 'template'
          field.label = ''
          field.type = 'inputbox'
          field.description = ''
          field.placeholder = ''
          field.hint = ''
          field.multi_entry = false
          field.required = false
          field.preview = false
          field.attrs = {}
          field.options = []
          field.x = 0
          field.y = 0
          field.width = 0
          field.children = []
          field.fieldgroup_id = fieldgroup_id
          field.step_id = ''
          field.template_id = ''
          field.template_override_id = ''
          field.triggered_by_score = 0
          field.triggered_by_options = []
          return field
        },

        new_user: function () {
          var user = new AdminUserResource()
          user.id = ''
          user.username = ''
          user.role = 'receiver'
          user.state = 'enable'
          user.password = ''
          user.old_password = ''
          user.password_change_needed = true
          user.state = 'enabled'
          user.name = ''
          user.description = ''
          user.public_name = ''
          user.mail_address = ''
          user.pgp_key_fingerprint = ''
          user.pgp_key_remove = false
          user.pgp_key_public = ''
          user.pgp_key_expiration = ''
          user.language = 'en'
          user.notification = true
          user.forcefully_selected = false
          user.can_edit_general_settings = false
          user.can_grant_access_to_reports = false
          user.can_delete_submission = false
          user.can_postpone_expiration = false
          user.send_account_activation_link = true
          return user
        },

        new_redirect: function () {
          return new AdminRedirectResource()
        },

        new_tenant: function () {
          var tenant = new AdminTenantResource()
          tenant.active = true
          tenant.name = ''
          tenant.mode = 'default'
          tenant.subdomain = ''
          return tenant
        },
      }
    },
  ])
  .factory('UserPreferences', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/preferences', {}, { update: { method: 'PUT' } })
    },
  ])
  .factory('TipsCollection', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/auditlog/tips')
    },
  ])
  .factory('JobsAuditLog', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/auditlog/jobs')
    },
  ])
  .factory('Files', [
    'GLResource',
    function (GLResource) {
      return new GLResource('api/admin/files')
    },
  ])
  .factory('DefaultL10NResource', [
    'GLResource',
    function (GLResource) {
      return new GLResource('/data/l10n/:lang.json', { lang: '@lang' })
    },
  ])
  .factory('Utils', [
    '$rootScope',
    '$http',
    '$q',
    '$location',
    '$filter',
    '$uibModal',
    '$window',
    'FileSaver',
    'TokenResource',
    function (
      $rootScope,
      $http,
      $q,
      $location,
      $filter,
      $uibModal,
      $window,
      FileSaver,
      TokenResource
    ) {
      return {
        array_to_map: function (array) {
          var ret = {}
          angular.forEach(array, function (element) {
            ret[element.id] = element
          })
          return ret
        },

        set_title: function () {
          if (!$rootScope.public) {
            return
          }

          var projectTitle = $rootScope.public.node.name,
            pageTitle = $rootScope.public.node.header_title_homepage

          if ($location.path() === '/') {
            if ($rootScope.page === 'tippage') {
              pageTitle = 'Report'
            }
          } else {
            pageTitle = $rootScope.header_title
          }

          if (!projectTitle) {
            projectTitle = ''
          }

          if (!pageTitle) {
            pageTitle = projectTitle
          }

          $rootScope.projectTitle = $filter('translate')(projectTitle)
          $rootScope.pageTitle = $filter('translate')(pageTitle)

          $window.document.title = $rootScope.projectTitle
          if ($rootScope.projectTitle !== $rootScope.pageTitle) {
            $window.document.title += ' - ' + $rootScope.pageTitle
          }

          $window.document.getElementsByName('description')[0].content =
            $rootScope.public.node.description
        },

        route_check: function () {
          var path = $location.path()
          if (path !== '/') {
            $rootScope.page = ''
          }

          if (!$rootScope.public) {
            return
          }

          if (!$rootScope.public.node.wizard_done) {
            $location.path('/wizard')
          } else if (path === '/' && $rootScope.public.node.enable_signup) {
            $rootScope.setPage('signuppage')
          } else if (
            (path === '/' || path === '/submission') &&
            $rootScope.public.node.adminonly &&
            !$rootScope.Authentication.session
          ) {
            $location.path('/admin')
          }
        },

        getXOrderProperty: function () {
          return 'x'
        },

        getYOrderProperty: function (elem) {
          var key = 'order'
          if (typeof elem[key] === 'undefined') {
            key = 'y'
          }
          return key
        },

        getCardSize: function (num) {
          if (num < 2) {
            return 'col-md-12'
          } else if (num === 2) {
            return 'col-md-6'
          } else if (num === 3) {
            return 'col-md-4'
          } else {
            return 'col-md-3 col-sm-6'
          }
        },

        update: function (model, cb, errcb) {
          model.$update(
            function () {
              if (typeof cb !== 'undefined') {
                cb()
              }
            },
            function () {
              if (typeof errcb !== 'undefined') {
                errcb()
              }
            }
          )
        },

        go: function (path) {
          $location.path(path)
        },

        isWhistleblowerPage: function () {
          return ['/', '/submission'].indexOf($location.path()) !== -1
        },

        getCSSFlags: function () {
          return {
            public: this.isWhistleblowerPage(),
            embedded: $window.self !== $window.top,
            'block-user-input': $rootScope.showLoadingPanel,
          }
        },

        showUserStatusBox: function () {
          return (
            $rootScope.public.node.wizard_done &&
            $rootScope.page !== 'homepage' &&
            $rootScope.page !== 'submissionpage' &&
            angular.isDefined($rootScope.Authentication.session) &&
            !$rootScope.Authentication.session.require_password_change
          )
        },

        showWBLoginBox: function () {
          return $location.path() === '/submission'
        },

        showFilePreview: function (content_type) {
          var content_types = ['image/gif', 'image/jpeg', 'image/png', 'image/bmp']

          return content_types.indexOf(content_type) > -1
        },

        moveUp: function (elem) {
          elem[this.getYOrderProperty(elem)] -= 1
        },

        moveDown: function (elem) {
          elem[this.getYOrderProperty(elem)] += 1
        },

        moveLeft: function (elem) {
          elem[this.getXOrderProperty(elem)] -= 1
        },

        moveRight: function (elem) {
          elem[this.getXOrderProperty(elem)] += 1
        },

        deleteFromList: function (list, elem) {
          var idx = list.indexOf(elem)
          if (idx !== -1) {
            list.splice(idx, 1)
          }
        },

        deleteFromDict: function (dict, key) {
          delete dict[key]
        },

        assignUniqueOrderIndex: function (elements) {
          if (elements.length <= 0) {
            return
          }

          var key = this.getYOrderProperty(elements[0])
          if (elements.length) {
            var i = 0
            elements = $filter('orderBy')(elements, key)
            angular.forEach(elements, function (element) {
              element[key] = i
              i += 1
            })
          }
        },

        getUploadStatus: function (uploads) {
          if (uploads.progress() !== 1) {
            return 'uploading'
          }

          return 'finished'
        },

        isUploading: function (uploads) {
          for (var key in uploads) {
            if (uploads[key].files.length && uploads[key].progress() !== 1) {
              return true
            }
          }

          return false
        },

        openConfirmableModalDialog: function (template, arg, scope) {
          scope = !scope ? $rootScope : scope

          var modal = $uibModal.open({
            templateUrl: template,
            controller: 'ConfirmableModalCtrl',
            scope: scope,
            resolve: {
              arg: function () {
                return arg
              },
              confirmFun: null,
              cancelFun: null,
            },
          })

          return modal.result
        },

        deleteDialog: function () {
          return this.openConfirmableModalDialog('views/modals/delete_confirmation.html')
        },

        deleteResource: function (factory, list, res) {
          factory.delete(
            {
              id: res.id,
            },
            function () {
              list.splice(list.indexOf(res), 1)
            }
          )
        },

        isNever: function (time) {
          var date = new Date(time)
          return date.getTime() === 32503680000000
        },

        getPostponeDate: function (ttl) {
          var date = new Date()
          date.setDate(date.getDate() + ttl + 1)
          date.setUTCHours(0, 0, 0, 0)
          return date
        },

        readFileAsText: function (file) {
          var deferred = $q.defer()

          var reader = new $window.FileReader()

          reader.onload = function (e) {
            deferred.resolve(e.target.result)
          }

          reader.readAsText(file)

          return deferred.promise
        },

        displayErrorMsg: function (reason) {
          $rootScope.error = {
            message: 'local-failure',
            arguments: [reason],
            code: 10,
          }
        },

        getSubmissionStatusText: function (status, substatus, submission_statuses) {
          var text
          for (var i = 0; i < submission_statuses.length; i++) {
            if (submission_statuses[i].id === status) {
              text = $filter('translate')(submission_statuses[i].label)

              var substatuses = submission_statuses[i].substatuses
              for (var j = 0; j < substatuses.length; j++) {
                if (substatuses[j].id === substatus) {
                  text += '(' + $filter('translate')(substatuses[j].label) + ')'
                  break
                }
              }
              break
            }
          }

          return text
        },

        openSupportModal: function () {
          return this.openConfirmableModalDialog('views/modals/request_support.html', {})
        },

        submitSupportRequest: function (data) {
          return new TokenResource().$get().then(function (token) {
            return $http({
              method: 'POST',
              url: 'api/support?token=' + token.id,
              data: { mail_address: data.mail_address, text: data.text, url: $location.absUrl() },
            })
          })
        },

        print: function () {
          $window.print()
        },

        scrollToTop: function () {
          $window.document.getElementsByTagName('body')[0].scrollIntoView()
        },

        copyToClipboard: function (data) {
          if ($window.navigator.clipboard && $window.isSecureContext) {
            $window.navigator.clipboard.writeText(data)
          }
        },

        download: function (filename, url) {
          return $http({
            method: 'GET',
            url: url,
            responseType: 'blob',
          }).then(function (response) {
            FileSaver.saveAs(response.data, filename)
          })
        },

        role_l10n: function (role) {
          var ret = ''

          if (role) {
            ret = role === 'receiver' ? 'recipient' : role
            ret = $filter('translate')(ret.charAt(0).toUpperCase() + ret.substr(1))
          }

          return ret
        },

        applyConfig: function (cmd, value, refresh) {
          var req = {
            operation: cmd,
            args: {
              value: value,
            },
          }

          return $http({ method: 'PUT', url: 'api/admin/config', data: req }).then(function () {
            if (refresh) {
              $rootScope.reload()
            }
          })
        },

        removeFile: function (submission, list, file) {
          if (typeof submission._submission.removed_files !== 'undefined') {
            submission._submission.removed_files.push(String(file.uniqueIdentifier))
          }

          for (var i = list.length - 1; i >= 0; i--) {
            if (list[i] === file) {
              list.splice(i, 1)
              file.abort()
            }
          }

          $rootScope.$broadcast('GL::uploadsUpdated', {})
        },

        notifyException: function (exception) {
          var uuid4RE = /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/g
          var uuid4Empt = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
          // Note this RE is different from our usual email validator
          var emailRE = /(([\w+-.]){0,100}[\w]{1,100}@([\w+-.]){0,100}.[\w]{1,100})/g
          var emailEmpt = '~~~~~~@~~~~~~'

          function scrub(s) {
            return s.replace(uuid4RE, uuid4Empt).replace(emailRE, emailEmpt)
          }

          return new TokenResource().$get().then(function (token) {
            return $http.post('api/exception?token=' + token.id, scrub(exception))
          })
        },
      }
    },
  ])
  .factory('fieldUtilities', [
    '$filter',
    '$http',
    'CONSTANTS',
    function ($filter, $http, CONSTANTS) {
      var flatten_field = function (id_map, field) {
        if (field.children.length === 0) {
          id_map[field.id] = field
          return id_map
        } else {
          id_map[field.id] = field
          return field.children.reduce(flatten_field, id_map)
        }
      }

      return {
        getClass: function (field, row_length) {
          if (field.width !== 0) {
            return 'col-md-' + field.width
          }

          return 'col-md-' + (row_length > 12 ? 1 : 12 / row_length)
        },

        getValidator: function (field) {
          var validators = {
            custom: field.attrs.regexp ? field.attrs.regexp.value : '',
            none: '',
            email: CONSTANTS.email_regexp,
            number: CONSTANTS.number_regexp,
            phonenumber: CONSTANTS.phonenumber_regexp,
          }

          if (field.attrs.input_validation) {
            return validators[field.attrs.input_validation.value]
          } else {
            return ''
          }
        },

        minY: function (arr) {
          return $filter('min')($filter('map')(arr, 'y'))
        },

        splitRows: function (fields) {
          var rows = []
          var y = null

          angular.forEach(fields, function (f) {
            if (y !== f.y) {
              y = f.y
              rows.push([])
            }

            rows[rows.length - 1].push(f)
          })

          return rows
        },

        flatten_field: flatten_field,

        build_field_id_map: function (questionnaire) {
          return questionnaire.steps.reduce(function (id_map, cur_step) {
            return cur_step.children.reduce(flatten_field, id_map)
          }, {})
        },

        underscore: function (s) {
          return s.replace(new RegExp('-', 'g'), '_')
        },

        stepFormName: function (id) {
          return 'stepForm_' + this.underscore(id)
        },

        fieldFormName: function (id) {
          return 'fieldForm_' + this.underscore(id)
        },

        findField: function (answers_obj, field_id) {
          var r

          for (var key in answers_obj) {
            if (key === field_id) {
              return answers_obj[key][0]
            }

            if (
              answers_obj.hasOwnProperty(key) &&
              answers_obj[key] instanceof Array &&
              answers_obj[key].length
            ) {
              r = this.findField(answers_obj[key][0], field_id)
              if (typeof r !== 'undefined') {
                return r
              }
            }
          }
          return r
        },

        isFieldTriggered: function (parent, field, answers, score) {
          var count = 0
          var i

          field.enabled = false

          if (parent !== null && !parent.enabled) {
            return false
          }

          if (field.triggered_by_score > score) {
            return false
          }

          if (!field.triggered_by_options || field.triggered_by_options.length === 0) {
            field.enabled = true
            return true
          }

          for (i = 0; i < field.triggered_by_options.length; i++) {
            var trigger = field.triggered_by_options[i]
            var answers_field = this.findField(answers, trigger.field)
            if (typeof answers_field === 'undefined') {
              continue
            }

            // Check if triggering field is in answers object
            if (
              trigger.option === answers_field.value ||
              (answers_field.hasOwnProperty(trigger.option) && answers_field[trigger.option])
            ) {
              if (trigger.sufficient) {
                field.enabled = true
                return true
              }

              count += 1
            }
          }

          if (count === field.triggered_by_options.length) {
            field.enabled = true
            return true
          }

          return false
        },

        calculateScore: function (scope, field, entry) {
          var self = this
          var score, i

          if (['selectbox', 'multichoice'].indexOf(field.type) > -1) {
            for (i = 0; i < field.options.length; i++) {
              if (entry['value'] === field.options[i].id) {
                if (field.options[i].score_type === 'addition') {
                  scope.points_to_sum += field.options[i].score_points
                } else if (field.options[i].score_type === 'multiplier') {
                  scope.points_to_mul *= field.options[i].score_points
                }
              }
            }
          } else if (field.type === 'checkbox') {
            for (i = 0; i < field.options.length; i++) {
              if (entry[field.options[i].id]) {
                if (field.options[i].score_type === 'addition') {
                  scope.points_to_sum += field.options[i].score_points
                } else if (field.options[i].score_type === 'multiplier') {
                  scope.points_to_mul *= field.options[i].score_points
                }
              }
            }
          } else if (field.type === 'fieldgroup') {
            angular.forEach(field.children, function (field) {
              angular.forEach(entry[field.id], function (entry) {
                self.calculateScore(scope, field, entry)
              })
            })

            return
          }

          score = scope.points_to_sum * scope.points_to_mul

          if (score < scope.context.score_threshold_medium) {
            scope.score = 1
          } else if (score < scope.context.score_threshold_high) {
            scope.score = 2
          } else {
            scope.score = 3
          }
        },

        updateAnswers: function (scope, parent, list, answers) {
          var entry, option, i, j
          var self = this

          angular.forEach(list, function (field) {
            if (self.isFieldTriggered(parent, field, scope.answers, scope.score)) {
              if (!(field.id in answers)) {
                answers[field.id] = [{}]
              }
            } else {
              if (field.id in answers) {
                answers[field.id] = [{}]
              }
            }

            if (field.id in answers) {
              for (i = 0; i < answers[field.id].length; i++) {
                self.updateAnswers(scope, field, field.children, answers[field.id][i])
              }
            } else {
              self.updateAnswers(scope, field, field.children, {})
            }

            if (!field.enabled) {
              return
            }

            if (scope.public.node.enable_scoring_system) {
              angular.forEach(scope.answers[field.id], function (entry) {
                self.calculateScore(scope, field, entry)
              })
            }

            for (i = 0; i < answers[field.id].length; i++) {
              entry = answers[field.id][i]

              /* Block related to updating required status */
              if (['inputbox', 'textarea'].indexOf(field.type) > -1) {
                entry.required_status =
                  (field.required || field.attrs.min_len.value > 0) && !entry['value']
              } else if (field.type === 'checkbox') {
                if (!field.required) {
                  entry.required_status = false
                } else {
                  entry.required_status = true
                  for (j = 0; j < field.options.length; j++) {
                    if (entry[field.options[j].id]) {
                      entry.required_status = false
                      break
                    }
                  }
                }
              } else if (field.type === 'fileupload') {
                entry.required_status =
                  field.required &&
                  (!scope.uploads[field.id] || !scope.uploads[field.id].files.length)
              } else {
                entry.required_status = field.required && !entry['value']
              }

              /* Block related to evaluate options */
              if (['checkbox', 'selectbox', 'multichoice'].indexOf(field.type) > -1) {
                for (j = 0; j < field.options.length; j++) {
                  option = field.options[j]
                  option.set = false
                  if (field.type === 'checkbox') {
                    if (entry[option.id]) {
                      option.set = true
                    }
                  } else {
                    if (option.id === entry['value']) {
                      option.set = true
                    }
                  }

                  if (option.set) {
                    if (option.block_submission) {
                      scope.block_submission = true
                    }

                    if (option.trigger_receiver.length) {
                      scope.replaceReceivers(option.trigger_receiver)
                    }
                  }
                }
              }
            }
          })
        },

        onAnswersUpdate: function (scope) {
          var self = this
          scope.block_submission = false
          scope.score = 0
          scope.points_to_sum = 0
          scope.points_to_mul = 1

          if (!scope.questionnaire) {
            return
          }

          if (scope.context) {
            scope.submission.setContextReceivers(scope.context.id)
          }

          angular.forEach(scope.questionnaire.steps, function (step) {
            step.enabled = self.isFieldTriggered(null, step, scope.answers, scope.score)

            self.updateAnswers(scope, step, step.children, scope.answers)
          })

          if (scope.context) {
            scope.submission._submission.score = scope.score
            scope.submission.blocked = scope.block_submission
          }
        },

        parseField: function (field, parsedFields) {
          var self = this

          if (!Object.keys(parsedFields).length) {
            parsedFields.fields = []
            parsedFields.fields_by_id = {}
            parsedFields.options_by_id = {}
          }

          if (['checkbox', 'selectbox', 'multichoice'].indexOf(field.type) > -1) {
            parsedFields.fields_by_id[field.id] = field
            parsedFields.fields.push(field)
            field.options.forEach(function (option) {
              parsedFields.options_by_id[option.id] = option
            })
          } else if (field.type === 'fieldgroup') {
            field.children.forEach(function (field) {
              self.parseField(field, parsedFields)
            })
          }

          return parsedFields
        },

        parseFields: function (fields, parsedFields) {
          var self = this

          fields.forEach(function (field) {
            parsedFields = self.parseField(field, parsedFields)
          })

          return parsedFields
        },

        parseQuestionnaire: function (questionnaire, parsedFields) {
          var self = this

          questionnaire.steps.forEach(function (step) {
            parsedFields = self.parseFields(step.children, parsedFields)
          })

          return parsedFields
        },
      }
    },
  ])
  .factory('GLTranslate', [
    '$translate',
    '$location',
    '$window',
    'tmhDynamicLocale',
    function ($translate, $location, $window, tmhDynamicLocale) {
      // facts are (un)defined in order of importance to the factory.
      var facts = {
        userChoice: null,
        urlParam: null,
        userPreference: null,
        nodeDefault: null,
      }

      // This is a value set by the public.node.
      var enabledLanguages = []

      var state = {
        language: null,
      }

      initializeStartLanguage()

      function initializeStartLanguage() {
        var lang = $location.search().lang
        if (lang) {
          if (validLang(lang)) {
            facts.urlParam = lang
          }
        }

        determineLanguage()
      }

      function validLang(inp) {
        if (typeof inp !== 'string') {
          return false
        }

        // Check if lang is in the list of enabled langs if we have enabledLangs
        if (enabledLanguages.length) {
          return enabledLanguages.indexOf(inp) > -1
        }

        return true
      }

      // TODO updateTranslationServices should return a promise.
      function updateTranslationServices(lang) {
        // Set text direction for languages that read from right to left.
        var useRightToLeft =
          ['ar', 'dv', 'fa', 'fa_AF', 'he', 'ps', 'ug', 'ur'].indexOf(lang) !== -1
        document.getElementsByTagName('html')[0].setAttribute('dir', useRightToLeft ? 'rtl' : 'ltr')

        // Update the $translate module to use the new language.
        $translate.use(lang).then(function () {
          // TODO reload the new translations returned by public.node.
        })

        // For languages that are of the form 'zh_TW', handle the mapping of 'lang'
        // to angular-i18n locale name as best we can. For example: 'zh_TW' becomes 'zh-tw'
        var t = lang
        if (lang.length === 5) {
          // Angular-i18n's format is typically 'zh-tw'
          t = lang.replace('_', '-').toLowerCase()
        }

        tmhDynamicLocale.set(t)
      }

      // setLang either uses the current state.language or the passed value
      // to set the language for the entire application.
      function setLang(choice) {
        if (angular.isUndefined(choice)) {
          choice = state.language
        }

        if (validLang(choice)) {
          facts.userChoice = choice
          determineLanguage()
        }
      }

      function isSelectable(language) {
        if (language === null) {
          return false
        }

        if (enabledLanguages.length) {
          return enabledLanguages.indexOf(language) !== -1
        }

        return true
      }

      // bestLanguage returns the best language for the application to use given
      // all of the state the GLTranslate service has collected in facts. It picks
      // the language in the order that the properties of the 'facts' object is
      // defined.
      // { object -> string }
      function bestLanguage(facts) {
        var lang = '*'
        if (isSelectable(facts.userChoice)) {
          lang = facts.userChoice
        } else if (isSelectable(facts.urlParam)) {
          lang = facts.urlParam
        } else if (isSelectable(facts.userPreference)) {
          lang = facts.userPreference
        } else if (isSelectable(facts.nodeDefault)) {
          lang = facts.nodeDefault
        }

        return lang
      }

      // determineLanguage contains all of the scope creeping ugliness of the
      // factory. It finds the best language to use, changes the language
      // pointer, and notifies the dependent services of the change.
      function determineLanguage() {
        GL.language = state.language = bestLanguage(facts)
        if (state.language !== '*') {
          updateTranslationServices(state.language)
          $window.document.getElementsByTagName('html')[0].setAttribute('lang', state.language)
        }
      }

      return {
        // Use state object to preserve the reference to language across scopes.
        state: state,

        setLang: setLang,

        addNodeFacts: function (defaultLang, languages_enabled) {
          facts.nodeDefault = defaultLang

          enabledLanguages = languages_enabled

          determineLanguage()
        },

        addUserPreference: function (lang) {
          facts.userPreference = lang
          determineLanguage()
        },
      }
    },
  ])

angular.module('GL').run([
  '$templateCache',
  function ($templateCache) {
    'use strict'

    $templateCache.put(
      'views/actions/forced_password_change.html',
      '<div class="row">\n' +
        '  <div class="col-md-12" data-translate>Before proceeding, please set a new password.</div>\n' +
        '</div>\n' +
        '<div class="row mt-3">\n' +
        '  <div class="col-md-4">\n' +
        '    <form name="resources.preferences.orm" novalidate>\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <span data-translate>New password</span>\n' +
        '          <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '        <input class="form-control" name="password" data-ng-model="resources.preferences.password" type="password" autocomplete="off" data-ng-class="{\'is-invalid\': passwordChangeForm.password.$error.required || passwordChangeForm.password.$error.passwordStrengthValidator}" data-password-strength-validator required />\n' +
        '        <password-meter data-ng-show="passwordStrengthScore" value="passwordStrengthScore"></password-meter>\n' +
        '        <div class="text-danger" data-ng-show="passwordStrengthScore && passwordStrengthScore < 2">\n' +
        '          <p data-translate>The chosen password is too weak. A valid password should be at least 10 characters long and contain a variety of characters including at least a lowercase character, a capital character, a number and a special character.</p>\n' +
        '         </div>\n' +
        '        <div class="text-danger" data-ng-show="resources.preferences.password && resources.preferences.password === resources.preferences.old_password">\n' +
        '          <p data-translate>The new password must be different from the current one.</p>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <span data-translate>Type your new password again</span>\n' +
        '          <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '        <input class="form-control" name="checkpassword" data-ng-model="resources.preferences.check_password" type="password" autocomplete="off" data-ng-class="{\'is-invalid\': resources.preferences.password.length && !passwordChangeForm.password.$error && (passwordChangeForm.checkpassword.$error.required || resources.preferences.password !== resources.preferences.check_password)}" required/>\n' +
        '        <p class="text-danger" data-ng-show="resources.preferences.password.length && !passwordChangeForm.password.$error.passwordStrengthValidator && (resources.preferences.password !== resources.preferences.check_password)">\n' +
        '          <span data-translate>The two passwords do not match</span>\n' +
        '        </p>\n' +
        '      </div>\n' +
        '\n' +
        '      <div class="alert alert-danger" data-ng-show="error.code === 11">\n' +
        '        <span data-translate>The new password must differ from the previous.</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <button type="submit" class="mt-3 btn btn-primary" data-ng-disabled="passwordChangeForm.$invalid || passwordChangeForm.$pristine || resources.preferences.password !== resources.preferences.check_password || (resources.preferences.password && resources.preferences.password === resources.preferences.old_password)" data-ng-click="save()">\n' +
        '        <span data-translate>Proceed</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/actions/forced_two_factor.html',
      '<div class="row">\n' +
        '  <div class="col-md-12" data-translate>Before proceeding, please enable the two factor authentication.</div>\n' +
        '</div>\n' +
        '<div class="row mt-3">\n' +
        '  <div class="col-md-6" data-ng-include="\'views/partials/enable_2fa.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row mt-3">\n' +
        '  <div class="col-md-6">\n' +
        '    <button data-ng-click="enable2FA(totp.token)" data-ng-disabled="totp.secret.length !== 32 || totp.token.length !== 6" class="btn btn-primary" data-translate>Enable</button>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/advanced.html',
      '<div data-ng-controller="AdminAdvancedCtrl">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <form name="advancedForm" class="tab-content" data-ng-include="tab.template" novalidate></form>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/advanced/tab1.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.disable_submissions" type="checkbox" />\n' +
        '        <span data-translate>Disable submissions</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.encryption_possible">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.encryption" type="checkbox" data-ng-change="toggleEncryption()" data-ng-disabled="resources.node.encryption" />\n' +
        '        <span data-translate>Enable encryption</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div data-ng-if="resources.preferences.encryption">\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <input data-ng-model="resources.node.escrow" type="checkbox" data-ng-disabled="resources.node.escrow && !resources.preferences.escrow" />\n' +
        '          <span data-translate>Enable administrators to change user passwords</span>\n' +
        '        </label>\n' +
        '      </div>\n' +
        '      <div class="form-group" data-ng-if="resources.node.escrow">\n' +
        '        <label data-translate>Administrators authorized to change user passwords:</label>\n' +
        '        <ol class="selectionList">\n' +
        '          <li data-ng-repeat="user in resources.users | filter: {escrow: true}">\n' +
        '            <span>{{user.name}}</span>\n' +
        '          </li>\n' +
        '        </ol>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.multisite" type="checkbox" />\n' +
        '        <span data-translate>Enable multisite feature</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.simplified_login" type="checkbox" />\n' +
        '        <span data-translate>Enable simplified login</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.allow_indexing" type="checkbox" />\n' +
        '        <span data-translate>Enable search engines indexing</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Default questionnaire</label>\n' +
        '      <select class="form-control" data-ng-model="resources.node.default_questionnaire" data-ng-options="item.id as item.name for item in resources.questionnaires"></select>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Text shown on top of the interface for selecting contexts</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" data-ng-model="resources.node.contexts_clarification"></textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.show_contexts_in_alphabetical_order" type="checkbox" />\n' +
        '        <span data-translate>Show contexts in alphabetical order</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <span data-translate>Size limit for file attachments</span> <span>(</span><span data-translate>megabytes</span><span>)</span>\n' +
        '      </label>\n' +
        '      <input class="form-control" data-ng-model="resources.node.maximum_filesize" type="number" min="0" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.node.https_preload" type="checkbox" />\n' +
        '      <label data-translate>Enable HSTS preload</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.two_factor" type="checkbox" />\n' +
        '        <span data-translate>Require two factor authentication</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Password change interval</label>\n' +
        '      <input class="form-control" data-ng-model="resources.node.password_change_period" type="number" min="0" />\n' +
        '      <div data-translate>For security reasons, password changes are required at regular intervals.</div>\n' +
        '      <div data-translate>Set the value to 0 to disable this feature.</div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '      <label data-translate>Number of days till notifying unread reports to users</label>\n' +
        '      <input class="form-control" data-ng-model="resources.node.unread_reminder_time" type="number" min="1" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.node.enable_custodian" type="checkbox">\n' +
        '      <label data-translate>Enable custodian user role</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.node.enable_scoring_system" type="checkbox">\n' +
        '      <label data-translate>Enable scoring system</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '      <label data-translate>Logging level</label>\n' +
        '      <select class="form-control" data-ng-model="resources.node.log_level">\n' +
        '        <option value="ERROR">ERROR</option>\n' +
        '        <option value="INFO">INFO</option>\n' +
        '        <option value="DEBUG">DEBUG</option>\n' +
        '      </select>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.node.log_accesses_of_internal_users" type="checkbox" />\n' +
        '      <label data-translate>Log accesses of internal users</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '      <input data-ng-model="resources.node.enable_admin_exception_notification" type="checkbox">\n' +
        '      <label data-translate>Notify administrators of software problems</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '      <input data-ng-model="resources.node.enable_developers_exception_notification" type="checkbox">\n' +
        '      <label data-translate>Notify developers of software problems</label>\n' +
        '      <div data-translate>By enabling this feature, you will contribute to the development and security of the platform.</div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <button class="btn btn-primary"\n' +
        '        data-ng-disabled="advancedForm.$invalid"\n' +
        '        data-ng-click="updateNode()" type="submit">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Save</span>\n' +
        '      </button>\n' +
        '\n' +
        '      <button class="btn btn-danger"\n' +
        '        data-ng-click="resetSubmissions()">\n' +
        '        <i class="fas fa-trash"></i>\n' +
        '        <span data-translate>Reset reports</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/advanced/tab2.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <table class="table-responsive">\n' +
        '      <thead>\n' +
        '        <tr>\n' +
        '          <th></th>\n' +
        '          <th data-translate>Low</th>\n' +
        '          <th data-translate>High</th>\n' +
        '        </tr>\n' +
        '      </thead>\n' +
        '      <tbody>\n' +
        '        <tr>\n' +
        '          <td>\n' +
        '            <label>\n' +
        '              <span data-translate>Available disk space</span>\n' +
        '              <span>(</span><span data-translate>megabytes</span><span>)</span>\n' +
        '            </label>\n' +
        '          </td>\n' +
        '          <td><input class="form-control" data-ng-model="resources.node.threshold_free_disk_megabytes_low" type="number" min="0" /></td>\n' +
        '          <td><input class="form-control" data-ng-model="resources.node.threshold_free_disk_megabytes_high" type="number" min="0" /></td>\n' +
        '        </tr>\n' +
        '        <tr>\n' +
        '          <td>\n' +
        '            <label>\n' +
        '              <span data-translate>Available disk space</span>\n' +
        '              <span>(</span><span data-translate>percentage</span><span>)</span>\n' +
        '            </label>\n' +
        '          </td>\n' +
        '          <td><input class="form-control" data-ng-model="resources.node.threshold_free_disk_percentage_low" type="number"  min="0" max="100" /></td>\n' +
        '          <td><input class="form-control" data-ng-model="resources.node.threshold_free_disk_percentage_high" type="number"  min="0" max="100" /></td>\n' +
        '        </tr>\n' +
        '      </tbody>\n' +
        '    </table>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <button class="btn btn-primary"\n' +
        '          data-ng-disabled="advancedForm.$invalid"\n' +
        '          data-ng-click="updateNode()" type="submit">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Save</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/auditlog.html',
      '<div id="SectionContent" data-ng-controller="AdminAuditLogCtrl">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/auditlog/tab1.html',
      '<table id="userList" class="table table-condensed table-striped">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th data-translate>Date</th>\n' +
        '      <th data-translate>Type</th>\n' +
        '      <th data-translate>Severity</th>\n' +
        '      <th data-translate>User</th>\n' +
        '      <th data-translate>Object</th>\n' +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr data-ng-repeat="data in auditLog.auditlog.elems | orderBy:\'date\':true | limitTo:itemsPerPage:((auditLog.auditlog.currentPage - 1) * itemsPerPage)">\n' +
        "      <td>{{data.date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '      <td>{{data.type}}</td>\n' +
        '      <td>{{data.severity}}</td>\n' +
        '      <td>{{data.user_id}}</td>\n' +
        '      <td>{{data.object_id}}</td>\n' +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        '<div class="text-center" data-ng-show="auditLog.auditlog.elems.length > itemsPerPage | limitTo:itemsPerPage:((auditLog.auditlog.currentPage - 1) * itemsPerPage)">\n' +
        '  <ul uib-pagination\n' +
        '      total-items="auditLog.auditlog.elems.length"\n' +
        '      first-text="<< {{\'First\' | translate}}"\n' +
        '      last-text="{{\'Last\' | translate}} >>"\n' +
        '      previous-text="< {{\'Previous\' | translate}}"\n' +
        '      next-text="{{\'Next\' | translate}} >"\n' +
        '      items-per-page="itemsPerPage"\n' +
        '      data-ng-model="auditLog.auditlog.currentPage"\n' +
        '      max-size="10"\n' +
        '      class="pagination-sm"\n' +
        '      boundary-links="true"\n' +
        '      force-ellipses="true"></ul>\n' +
        '</div>\n' +
        '<button class="btn btn-sm btn-link" type="button" ng-csv="resources.auditlog" csv-label=\'true\' filename="auditlog.csv"><i class="fa fa-download"></i> <span data-translate>Export</span></button>\n' +
        '<span data-ng-if="resources.node.root_tenant">\n' +
        '  <a class="btn btn-sm btn-link" type="button" data-ng-click="Utils.download(\'globaleaks.log\', \'/api/admin/auditlog/debug\')"><i class="fa fa-download"></i> <span>globaleaks.log</span></a>\n' +
        '  <a class="btn btn-sm btn-link" type="button" data-ng-click="Utils.download(\'access.log\', \'/api/admin/auditlog/access\')"><i class="fa fa-download"></i> <span>access.log</span></a>\n' +
        '</span>\n'
    )

    $templateCache.put(
      'views/admin/auditlog/tab2.html',
      '<table id="userList" class="table table-condensed table-striped">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th data-translate>ID</th>\n' +
        '      <th data-translate>Username</th>\n' +
        '      <th data-translate>Role</th>\n' +
        '      <th data-translate>Name</th>\n' +
        '      <th>2FA</th>\n' +
        '      <th data-translate>Creation date</th>\n' +
        '      <th data-translate>Last access</th>\n' +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr data-ng-repeat="user in auditLog.users.elems | orderBy:\'name\' | limitTo:itemsPerPage:((auditLog.users.currentPage - 1) * itemsPerPage)">\n' +
        '      <td>{{user.id}}</td>\n' +
        '      <td>{{user.username}}</td>\n' +
        '      <td>{{user.role}}</td>\n' +
        '      <td>{{user.name}}</td>\n' +
        '      <td><i class="fas" data-ng-class="{\'fa-check\': user.two_factor, \'fa-times\': !user.two_factor}"></i></td>\n' +
        "      <td>{{user.creation_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "      <td>{{user.last_login | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        '<div class="text-center" data-ng-show="auditLog.users.elems.length > itemsPerPage | limitTo:itemsPerPage:((auditLog.users.currentPage - 1) * itemsPerPage)">\n' +
        '  <ul uib-pagination\n' +
        '      total-items="auditLog.users.elems.length"\n' +
        '      first-text="<< {{\'First\' | translate}}"\n' +
        '      last-text="{{\'Last\' | translate}} >>"\n' +
        '      previous-text="< {{\'Previous\' | translate}}"\n' +
        '      next-text="{{\'Next\' | translate}} >"\n' +
        '      items-per-page="itemsPerPage"\n' +
        '      data-ng-model="auditLog.users.currentPage"\n' +
        '      max-size="10"\n' +
        '      class="pagination-sm"\n' +
        '      boundary-links="true"\n' +
        '      force-ellipses="true"></ul>\n' +
        '</div>\n' +
        '<button class="btn btn-sm btn-link" type="button" ng-csv="resources.users" csv-label=\'true\' filename="users.csv"><i class="fa fa-download"></i> <span data-translate>Export</span></button>\n'
    )

    $templateCache.put(
      'views/admin/auditlog/tab3.html',
      '<table id="ReportsTable" class="table table-condensed table-striped">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th data-translate>ID</th>\n' +
        '      <th data-translate>Date</th>\n' +
        '      <th data-translate>Last update</th>\n' +
        '      <th data-translate>Expiration date</th>\n' +
        '      <th data-translate>Context</th>\n' +
        '      <th data-translate>Status</th>\n' +
        '      <th>Tor</th>\n' +
        '      <th data-translate>Comments</th>\n' +
        '      <th data-translate>Messages</th>\n' +
        '      <th data-translate>Files</th>\n' +
        "      <th data-translate>Whistleblower's last access</th>\n" +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr data-ng-repeat="tip in auditLog.tips.elems | orderBy:\'last_update\':true | limitTo:itemsPerPage:((auditLog.tips.currentPage - 1) * itemsPerPage)">\n' +
        '      <td>{{tip.id}}</td>\n' +
        "      <td>{{tip.creation_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "      <td>{{tip.last_update | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "      <td>{{tip.expiration_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "      <td>{{contexts_by_id[tip.context_id]['name']}}</td>\n" +
        '      <td>{{Utils.getSubmissionStatusText(tip.status, tip.substatus, submission_statuses)}}</td>\n' +
        '      <td><i data-ng-if="itip.tor" class="fas fa-check"></i></td>\n' +
        '      <td>{{tip.comments}}</td>\n' +
        '      <td>{{tip.messages}}</td>\n' +
        '      <td>{{tip.files}}</td>\n' +
        "      <td>{{tip.last_access | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        '<div class="text-center" data-ng-show="auditLog.tips.elems.length > itemsPerPage">\n' +
        '  <ul uib-pagination\n' +
        '      total-items="auditLog.tips.elems.length"\n' +
        '      first-text="<< {{\'First\' | translate}}"\n' +
        '      last-text="{{\'Last\' | translate}} >>"\n' +
        '      previous-text="< {{\'Previous\' | translate}}"\n' +
        '      next-text="{{\'Next\' | translate}} >"\n' +
        '      items-per-page="itemsPerPage"\n' +
        '      data-ng-model="auditLog.tips.currentPage"\n' +
        '      max-size="10"\n' +
        '      class="pagination-sm"\n' +
        '      boundary-links="true"\n' +
        '      force-ellipses="true"></ul>\n' +
        '</div>\n' +
        '<button class="btn btn-sm btn-link" type="button" ng-csv="resources.tips" csv-label=\'true\' filename="reports.csv"><i class="fa fa-download"></i> <span data-translate>Export</span></button>\n'
    )

    $templateCache.put(
      'views/admin/auditlog/tab4.html',
      '<table id="AnomaliesHistoryTable" class="table table-condensed table-striped">\n' +
        '  <thead>\n' +
        '    <tr>\n' +
        '      <th></th>\n' +
        '      <th data-ng-repeat="t in [1,2,3,4,5,6,7,8,9,10]">#{{t}}</th>\n' +
        '    </tr>\n' +
        '  </thead>\n' +
        '  <tbody>\n' +
        '    <tr data-ng-repeat="job in resources.jobs | orderBy:\'name\'">\n' +
        '      <td>{{job.name}}</td>\n' +
        '      <td data-ng-repeat="t in [0,1,2,3,4,5,6,7,8,9]">\n' +
        '        <div data-ng-if="job.timings[t]">\n' +
        '          <div>{{(job.timings[t][1] - job.timings[t][0]) / 1000}}s</div>\n' +
        "          <div>{{job.timings[t][0] | date:'HH:mm:ss'}}</div>\n" +
        "          <div>{{job.timings[t][0] | date:'dd-MM-yyyy'}}</div>\n" +
        '        </div>\n' +
        '      </td>\n' +
        '    </tr>\n' +
        '  </tbody>\n' +
        '</table>\n' +
        '<button class="btn btn-sm btn-link" type="button" ng-csv="resources_export.jobs" csv-label=\'true\' filename="jobs.csv"><i class="fa fa-download"></i> <span data-translate>Export</span></button>\n'
    )

    $templateCache.put(
      'views/admin/casemanagement.html',
      '<form name="notificationForm" data-ng-controller="AdminCaseManagementCtrl" class="col-md-12" novalidate>\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/admin/casemanagement/substatuses.html',
      '<div id="SubstatusEditBox">\n' +
        '  <div class="row">\n' +
        '    <span class="col-md-8">\n' +
        '      <span data-translate>Substatuses</span>\n' +
        '      <button class="btn btn-sm btn-primary" data-ng-click="toggleAddSubstatus()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div id="SubstatusAddBox" data-ng-controller="AdminSubmissionSubStatusAddCtrl" class="row" data-ng-if="showAddSubstatus">\n' +
        '    <div class="col-md-6">\n' +
        '      <div data-ng-form="newSubstatus">\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Label</label>\n' +
        '              <input name="label" class="form-control" data-ng-model="new_substatus.label" type="text" required>\n' +
        '              <div class="text-danger" data-ng-show="newSubstatus.label.$error.required">\n' +
        '                <span data-translate>This field is mandatory</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group clearfix">\n' +
        '              <button class="float-left btn btn-primary" data-ng-disabled="newSubstatus.$invalid"\n' +
        '                      data-ng-click="addSubmissionSubStatus(); toggleAddSubstatus()">\n' +
        '                <i class="fas fa-plus"></i>\n' +
        '                <span data-translate>Add</span>\n' +
        '              </button>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div data-ng-repeat="substatus in submissions_status.substatuses" class="col-md-12">\n' +
        '      <div data-ng-controller="AdminSubmissionSubStatusEditorCtrl">\n' +
        '        <div class="configItem">\n' +
        '          <div class="editorHeader row" data-ng-click="toggleSubstatusEditing(); $event.stopPropagation();">\n' +
        '            <span class="col-md-7">\n' +
        '              <span class="substatusLabel">{{substatus.label}}</span>\n' +
        '            </span>\n' +
        '            <span class="col-md-5 clearfix">\n' +
        '              <span class="float-right">\n' +
        '                <button data-ng-if="!$first" class="btn btn-sm btn-primary" data-ng-click="moveSsUp($event, $index)" data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-up"></i>\n' +
        '                </button>\n' +
        '                <button data-ng-if="!$last" class="btn btn-sm btn-primary" data-ng-click="moveSsDown($event, $index)" data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-down"></i>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-outline-secondary" data-ng-show="!substatus_editing"\n' +
        '                        data-ng-click="toggleSubstatusEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Edit</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-show="substatus_editing"\n' +
        '                        data-ng-click="save_submissions_substatuses(substatus);">\n' +
        '                  <span data-translate>Save</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-outline-secondary" data-ng-show="substatus_editing"\n' +
        '                        data-ng-click="toggleSubstatusEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Cancel</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-danger"\n' +
        '                        data-ng-click="deleteSubSubmissionStatus(substatus); $event.stopPropagation();">\n' +
        '                  <span data-translate>Delete</span>\n' +
        '                </button>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </div>\n' +
        '          <div data-ng-form="editStep" data-ng-if="substatus_editing">\n' +
        '            <hr/>\n' +
        '            <div class="row">\n' +
        '              <div class="form-group">\n' +
        '                <div class="col-md-6">\n' +
        '                  <label data-translate>Label</label>\n' +
        '                  <input class="form-control" data-ng-model="substatus.label" type="text" required/>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/casemanagement/tab1.html',
      '<div data-ng-controller="AdminSubmissionStatusCtrl" class="configSection">\n' +
        '  <div>\n' +
        '    <span data-translate>Report statuses</span>\n' +
        '    <button class="btn btn-sm btn-primary show-add-user-btn" data-ng-click="toggleAddStatus()">\n' +
        '      <i class="fas fa-plus"></i>\n' +
        '      <span data-translate>Add</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '  <div class="configSection row" data-ng-controller="AdminSubmissionStatusAddCtrl" data-ng-if="showAddStatus">\n' +
        '    <div data-ng-form="newSubmissionStatus" class="addSubmissionStatus col-md-6">\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <span data-translate>Label</span>\n' +
        '          <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '        <div data-ng-class="{\'is-invalid\': newSubmissionStatus.submissions_status.$error.required}">\n' +
        '          <input name="name" class="form-control" data-ng-model="new_submissions_status.label" type="text" required />\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <button id="add-btn" class="btn btn-primary" data-ng-disabled="newSubmissionStatus.$invalid" data-ng-click="addSubmissionStatus(); toggleAddStatus()"\n' +
        '          type="submit">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-repeat="submissions_status in resources.submission_statuses">\n' +
        '    <div data-ng-controller="AdminSubmissionStatusEditorCtrl" class="submissionStatusList">\n' +
        '      <div data-ng-form="submissionStatus-{{$index}}" name="editsubmissionStatus">\n' +
        '        <div class="configItem">\n' +
        '          <div class="editorHeader row" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '            <span class="col-md-7">{{submissions_status.label | translate}}</span>\n' +
        '            <span class="col-md-5 clearfix">\n' +
        '              <span class="float-right">\n' +
        '                <button data-ng-if="!$first" class="btn btn-sm btn-primary" data-ng-click="moveUp($event, $index)" data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-up"></i>\n' +
        '                </button>\n' +
        '                <button data-ng-if="!$last" class="btn btn-sm btn-primary" data-ng-click="moveDown($event, $index)" data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-down"></i>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-outline-secondary" data-ng-show="isEditable() && !editing" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Edit</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-show="editing" data-ng-disabled="editSubmissionStatus.$invalid" data-ng-click="save_submissions_status(submissions_status); toggleEditing();">\n' +
        '                  <span data-translate>Save</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-outline-secondary" data-ng-show="editing" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Cancel</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-danger" data-ng-if="!isSystemDefined(submissions_status)" data-ng-click="deleteSubmissionStatus(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Delete</span>\n' +
        '                </button>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </div>\n' +
        '          <div data-ng-if="editing">\n' +
        '            <hr />\n' +
        '            <div class="row">\n' +
        '              <div class="col-md-6" data-ng-if="!isSystemDefined(submissions_status)">\n' +
        '                <div class="form-group">\n' +
        '                  <label data-translate>Label</label>\n' +
        '                  <input name="name" class="form-control" data-ng-model="submissions_status.label" data-ng-disabled="submissions_status.system_defined" type="text" required>\n' +
        '                  <div class="text-danger" data-ng-show="editSubmissionStatus.name.$error.required" data-translate>This field is mandatory</div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div class="col-md-12" data-ng-include="\'views/admin/casemanagement/substatuses.html\'"></div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/content.html',
      '<form name="contentForm" data-ng-controller="AdminGeneralSettingsCtrl" novalidate>\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</form>'
    )

    $templateCache.put(
      'views/admin/content/tab1.html',
      '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Logo</label>\n' +
        '      <div data-image-upload data-image-upload-model="resources.node" data-image-upload-model-attr=\'logo\' data-image-upload-id="{{\'logo\'}}"></div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Project name</label>\n' +
        '      <input class="form-control" data-ng-model="resources.node.name" type="text" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Description</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" data-ng-model="resources.node.description"></textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Homepage title</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" data-ng-model="resources.node.header_title_homepage"></textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Presentation</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" data-ng-model="resources.node.presentation"></textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="Authentication.session.role === \'admin\'">\n' +
        '      <label data-translate>Question to solicit possible whistleblowers</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" data-ng-model="resources.node.whistleblowing_question"></textarea>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="Authentication.session.role === \'admin\'">\n' +
        '      <label data-translate>Whistleblowing button</label>\n' +
        '      <input class="form-control" data-ng-model="resources.node.whistleblowing_button" type="text" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="public.node.mode === \'default\'">\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Disclaimer</label>\n' +
        '        <div>\n' +
        '          <textarea class="form-control" data-ng-model="resources.node.disclaimer_text"></textarea>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '\n' +
        '      <div>\n' +
        '        <label data-translate>Footer</label>\n' +
        '        <div>\n' +
        '          <textarea class="form-control" data-ng-model="resources.node.footer"></textarea>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <button class="btn btn-primary"\n' +
        '              data-ng-disabled="contentForm.$invalid"\n' +
        '              data-ng-click="updateNode()" type="submit">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Save</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/content/tab2.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <div data-ng-repeat="admin_file in admin_files" data-ng-include="\'views/partials/admin_file.html\'"></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/content/tab3.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <div data-flow-init="{target: \'api/admin/files/custom\'}"\n' +
        '           data-flow-files-submitted="$flow.upload()"\n' +
        '           data-flow-file-success="reload()"\n' +
        '           extend-flow-valid-size="public.node.maximum_filesize*1024*1024">\n' +
        '        <span data-translate>Files</span>\n' +
        '        <span class="uploadfile file-custom">\n' +
        '          <span class="custom-file">\n' +
        '            <input id="customFile" class="custom-file-input" type="file" data-flow-btn />\n' +
        '            <label class="btn btn-sm btn-primary" for="customFile">\n' +
        '              <i class="fas fa-upload"></i>\n' +
        '              <span data-translate>Upload</span>\n' +
        '            </label>\n' +
        '          </span>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div class="table-responsive">\n' +
        '        <table class="table table-striped" id="fileList">\n' +
        '          <tbody id="fileListBody">\n' +
        '            <tr data-ng-repeat="file in files | orderBy:\'name\'">\n' +
        '              <td>{{file.name}}</td>\n' +
        '              <td>\n' +
        '                <a class="btn btn-sm btn-primary" data-ng-href="s/{{file.name}}" download="{{file.name}}">\n' +
        '                  <i class="fas fa-download"></i>\n' +
        '                  <span data-translate>Download</span>\n' +
        '                </a>\n' +
        '                <button class="btn btn-sm btn-danger" data-ng-click="delete_file(\'api/admin/files/\' + file.id)" data-single-click>\n' +
        '                  <i class="fas fa-trash"></i>\n' +
        '                  <span data-translate>Delete</span>\n' +
        '                </button>\n' +
        '              </td>\n' +
        '            </tr>\n' +
        '          </tbody>\n' +
        '        </table>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/content/tab4.html',
      '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <input data-ng-model="resources.node.languages_enabled" class="d-none" />\n' +
        '    <input data-ng-model="resources.node.default_language" class="d-none" />\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Languages</label>\n' +
        '      <button class="btn btn-sm btn-primary add-language-btn" data-ng-click="toggleLangSelect()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '      <div>\n' +
        '        <div id="LanguageAdder" class="row">\n' +
        '          <div class="col-md-12" data-ng-if="showLangSelect">\n' +
        '            <ui-select data-ng-model="selected.value" data-theme="bootstrap" data-on-select=\'enableLanguage($item);\'>\n' +
        '              <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '                <span data-ng-bind="$select.selected.name"></span>\n' +
        '              </ui-select-match>\n' +
        '              <ui-select-choices data-repeat="language in resources.node.languages_supported | filter:langNotEnabledFilter | filter: {name: $select.search}">\n' +
        '                <span data-ng-bind-html="language.name | highlight: $select.search"></span>\n' +
        '                <span>[{{language.code}}]</span>\n' +
        '              </ui-select-choices>\n' +
        '            </ui-select>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <br/>\n' +
        '        <ul class="selectionList">\n' +
        '          <li data-ng-repeat="lang_code in resources.node.languages_enabled">\n' +
        '            <span class="action-btns">\n' +
        '              <span data-ng-if="lang_code === resources.node.default_language" class="default-language">\n' +
        '                <i class="fas fa-check"></i>\n' +
        '              </span>\n' +
        '              <span data-ng-if="lang_code !== resources.node.default_language" class="non-default-language"\n' +
        '                data-uib-tooltip="{{\'Use as default\' | translate}}"\n' +
        '                data-ng-click="resources.node.default_language = lang_code">\n' +
        '                <i class="fas fa-check"></i>\n' +
        '              </span>\n' +
        '              <span data-ng-if="lang_code !== resources.node.default_language" data-ng-click="removeLang($index, lang_code)" data-uib-tooltip="{{\'Remove\' | translate}}" class="remove-lang-btn">\n' +
        '                <i class="fas fa-times"></i>\n' +
        '              </span>\n' +
        '              <i data-ng-if="lang_code === resources.node.default_language" class="fas fa-times disabled-icon"></i>\n' +
        '            </span>\n' +
        "            <label>{{languages_supported[lang_code]['name']}} [{{lang_code}}]</label>\n" +
        '          </li>\n' +
        '        </ul>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <button class="btn btn-primary"\n' +
        '              data-ng-disabled="contentForm.$invalid"\n' +
        '              data-ng-click="updateNode()" type="submit">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Save</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/content/tab5.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Language:</label>\n' +
        '      <select class="form-control" data-ng-model="vars.language_to_customize" data-ng-change="get_l10n(vars.language_to_customize)">\n' +
        '        <option data-ng-repeat="item in languages_enabled_selector" value="{{item.code}}">{{item.name}}</option>\n' +
        '      </select>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Add custom text</label>\n' +
        '      <select class="form-control" data-ng-model="vars.text_to_customize" data-ng-change="vars.custom_text = custom_texts[vars.text_to_customize] ? custom_texts[vars.text_to_customize] : default_texts[vars.text_to_customize]">\n' +
        '        <option data-ng-repeat="item in custom_texts_selector" value="{{item.key}}">{{item.value}}</option>\n' +
        '      </select>\n' +
        '      <div data-ng-show="vars.text_to_customize">\n' +
        '        <label data-translate>Custom text</label>\n' +
        '        <div>\n' +
        '          <textarea class="form-control" data-ng-model="vars.custom_text"></textarea>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <br />\n' +
        '      <div class="form-group clearfix">\n' +
        '        <button id="addCustomTextButton" class="float-left btn btn-primary" data-ng-disabled="!vars.text_to_customize" type="submit" data-ng-click="custom_texts[vars.text_to_customize] = vars.custom_text; custom_texts.$update({\'lang\': vars.language_to_customize})">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br /><br />\n' +
        '<div class="row" data-ng-if="custom_texts">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <table class="table table-striped">\n' +
        '        <thead>\n' +
        '          <tr>\n' +
        '            <th data-translate>Original text</th>\n' +
        '            <th data-translate>Original translation</th>\n' +
        '            <th data-translate>Custom translation</th>\n' +
        '          </tr>\n' +
        '        </thead>\n' +
        '        <tbody>\n' +
        '          <tr data-ng-repeat="(key, value) in custom_texts" data-ng-class="{danger: !default_texts[key]}" data-uib-tooltip="{{!default_texts[key] ? \'This custom text is no longer displayed on the platform. The original text has either changed or been removed.\' : \'\' | translate }}">\n' +
        '            <td class="preformatted">{{key}}</td>\n' +
        '            <td class="preformatted">{{default_texts[key]}}</td>\n' +
        '            <td class="clearfix">\n' +
        '              <span class="preformatted">{{custom_texts[key]}}</span>\n' +
        '              <button class="deleteCustomTextButton float-right btn btn-sm btn-danger" data-ng-click="Utils.deleteFromDict(custom_texts, key); custom_texts.$update({\'lang\': vars.language_to_customize})">\n' +
        '                <i class="fa" data-ng-class="{\'fa-times\': default_texts[key], \'fa-alert\': !default_texts[key]}"></i>\n' +
        '              </button>\n' +
        '            </td>\n' +
        '          </tr>\n' +
        '        </tbody>\n' +
        '      </table>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/contexts.html',
      '<div class="configSection" data-ng-controller="AdminContextsCtrl">\n' +
        '  <div>\n' +
        '    <span data-translate>Contexts</span>\n' +
        '    <button class="btn btn-sm btn-primary show-add-context-btn" data-ng-click="toggleAddContext()">\n' +
        '      <i class="fas fa-plus"></i>\n' +
        '      <span data-translate>Add</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '  <div class="row" data-ng-controller="AdminContextAddCtrl" data-ng-if="showAddContext">\n' +
        '    <div data-ng-form="newContext" class="addContext col-md-6">\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <span data-translate>Name</span>\n' +
        '          <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '        <div data-ng-class="{\'is-invalid\': newContext.name.$error.required}">\n' +
        '          <input name="name" class="form-control" data-ng-model="new_context.name" type="text" required />\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <button id="add-btn" class="btn btn-primary" data-ng-disabled="newContext.$invalid"\n' +
        '                data-ng-click="add_context(); toggleAddContext()" type="submit">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-repeat="context in resources.contexts">\n' +
        '    <form id="context-{{$index}}" name="editContext" data-ng-controller="AdminContextEditorCtrl" novalidate>\n' +
        '      <div class="configItem">\n' +
        '        <div class="editorHeader row" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '          <span class="col-md-7">\n' +
        '            <span>{{context.name}}</span>\n' +
        '            <span class="badge badge-secondary" data-ng-if="context.status === \'hidden\'" data-translate>Hidden</span>\n' +
        '            <span class="badge badge-secondary" data-ng-if="context.status === \'disabled\'" data-translate>Disabled</span>\n' +
        '          </span>\n' +
        '          <span class="col-md-5 clearfix">\n' +
        '            <span class="float-right">\n' +
        '              <button data-ng-if="!$first && resources.node.show_contexts_in_alphabetical_order"\n' +
        '		      class="btn btn-sm btn-primary"\n' +
        '		      data-ng-click="moveUp($event, $index)"\n' +
        '                      data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                <i class="fas fa-chevron-up"></i>\n' +
        '              </button>\n' +
        '              <button data-ng-if="!$last && resources.node.show_contexts_in_alphabetical_order"\n' +
        '		      class="btn btn-sm btn-primary"\n' +
        '		      data-ng-click="moveDown($event, $index)"\n' +
        '                      data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                <i class="fas fa-chevron-down"></i>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-outline-secondary"\n' +
        '                      data-ng-show="!editing"\n' +
        '                      data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Edit</span>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-primary"\n' +
        '                      data-ng-show="editing"\n' +
        '                      data-ng-disabled="editContext.$invalid"\n' +
        '                      data-ng-click="save_context(context)">\n' +
        '                <span data-translate>Save</span>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-outline-secondary"\n' +
        '                      data-ng-show="editing"\n' +
        '                      data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Cancel</span>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-danger"\n' +
        '                      data-ng-click="deleteContext(); $event.stopPropagation();">\n' +
        '                <span data-translate>Delete</span>\n' +
        '              </button>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '        </div>\n' +
        '        <div data-ng-if="editing">\n' +
        '          <hr/>\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-6">\n' +
        '              <div class="form-group">\n' +
        '                <div data-image-upload data-image-upload-model="context" data-image-upload-model-attr="picture" data-image-upload-id="{{context.id}}"></div>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Name</label>\n' +
        '                <input name="name" class="form-control" data-ng-model="context.name" type="text" required>\n' +
        '                <div class="text-danger" data-ng-show="editContext.name.$error.required" data-translate>This field is mandatory</div>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Status</label>\n' +
        '                <select class="form-control" data-ng-model="context.status">\n' +
        '                  <option value="enabled" data-translate>Enabled</option>\n' +
        '                  <option value="hidden" data-translate>Hidden</option>\n' +
        '                  <option value="disabled" data-translate>Disabled</option>\n' +
        '                </select>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Description</label>\n' +
        '                <textarea name="description" class="form-control" data-ng-model="context.description"></textarea>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Questionnaire</label>\n' +
        '                <select class="form-control" data-ng-model="context.questionnaire_id"\n' +
        '                        data-ng-options="item.id as item.name for item in resources.questionnaires"></select>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label>\n' +
        '                  <span data-translate>Recipients</span>\n' +
        '                  <button class="btn btn-sm btn-primary add-receiver-btn" data-ng-click="toggleSelect()">\n' +
        '                    <i class="fas fa-plus"></i>\n' +
        '                    <span data-translate>Add</span>\n' +
        '                  </button>\n' +
        '                </label>\n' +
        '                <div id="ReceiverContextAdder" class="row">\n' +
        '                  <div class="col-md-12" data-ng-if="showSelect">\n' +
        '                    <ui-select data-ng-model="selected.value" data-theme="bootstrap"\n' +
        "                               data-on-select='moveReceiver($item)'>\n" +
        '                      <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '                        <span data-ng-bind="$select.selected.name"></span>\n' +
        '                      </ui-select-match>\n' +
        '                      <ui-select-choices data-repeat="receiver in resources.users | filter: {role: \'receiver\', name: $select.search} | filter:receiverNotSelectedFilter">\n' +
        '                        <span data-ng-bind-html="receiver.name | highlight: $select.search"></span>\n' +
        '                      </ui-select-choices>\n' +
        '                    </ui-select>\n' +
        '                    <br/>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '                <ol class="selectionList">\n' +
        '                  <li data-ng-repeat="receiver in context.receivers">\n' +
        '                    <span data-ng-controller="AdminContextReceiverSelectorCtrl">\n' +
        '                      <span class="action-btns">\n' +
        '                        <span data-ng-if="!context.show_receivers_in_alphabetical_order">\n' +
        '                          <span data-ng-if="!$first" data-ng-click="moveUp($index)"\n' +
        '                                data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                            <i class="fas fa-chevron-up"></i>\n' +
        '                          </span>\n' +
        '                          <i data-ng-if="$first || $last" class="fas fa-none"></i>\n' +
        '                          <span data-ng-if="!$last" data-ng-click="moveDown($index)"\n' +
        '                                data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                            <i class="fas fa-chevron-down"></i>\n' +
        '                          </span>\n' +
        '                        </span>\n' +
        '                        <span data-ng-click="context.receivers.splice($index, 1)"\n' +
        '                              data-uib-tooltip="{{\'Remove\' | translate}}">\n' +
        '                          <i class="fas fa-times"></i>\n' +
        '                        </span>\n' +
        '                      </span>\n' +
        '                      <span>{{admin_receivers_by_id[receiver].name}}</span>\n' +
        '                    </span>\n' +
        '                  </li>\n' +
        '                </ol>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label>\n' +
        '                  <span data-translate>Expiration date</span> (<span data-translate>days</span>)\n' +
        '                </label>\n' +
        '                <div>\n' +
        '                      <span data-ng-class="{\'is-invalid\': editContext.timetolive.$invalid}">\n' +
        '                        <input class="form-control" name="timetolive" data-ng-model="context.tip_timetolive"\n' +
        '                               type="number" min="0" max="3650"/>\n' +
        '                      </span>\n' +
        '                  <div data-translate>Set the value to 0 to disable this feature.</div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <hr/>\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-12">\n' +
        '              <button class="btn btn-primary" data-ng-click="show_advanced_settings = !show_advanced_settings"\n' +
        '                      data-ng-init="show_advanced_settings=false">\n' +
        '                <i data-ng-if="!show_advanced_settings" class="fas fa-plus"></i>\n' +
        '                <i data-ng-if="show_advanced_settings" class="fas fa-minus"></i>\n' +
        '                <span data-translate>Advanced settings</span>\n' +
        '              </button>\n' +
        '              <div id="ContextAdvancedSettingsBox">\n' +
        '                <div class="row" data-ng-show="show_advanced_settings">\n' +
        '                  <div class="col-md-6">\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.show_steps_navigation_interface" type="checkbox"/>\n' +
        '                        <span data-translate>Show the questionnaire navigation interface</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.allow_recipients_selection" type="checkbox"/>\n' +
        '                        <span data-translate>Allow whistleblowers to select their recipients</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div data-ng-show="context.allow_recipients_selection" class="form-group well">\n' +
        '                      <div class="form-group">\n' +
        '                        <label class="inline-checkbox">\n' +
        '                          <input data-ng-model="context.select_all_receivers"\n' +
        '                                 data-ng-disabled="!context.allow_recipients_selection"\n' +
        '                                 type="checkbox"\n' +
        '                                 data-ng-click="context.maximum_selectable_receivers=0"/>\n' +
        '                          <span data-translate>Select all recipients by default</span>\n' +
        '                        </label>\n' +
        '                      </div>\n' +
        '                      <div class="form-group">\n' +
        '                        <label class="inline-checkbox">\n' +
        '                          <span data-translate>Maximum number of selectable recipients:</span>\n' +
        '                          <input class="form-control" data-ng-model="context.maximum_selectable_receivers"\n' +
        '                                 type="number" min="0" data-ng-disabled="context.select_all_receivers"/>\n' +
        '                          <div data-translate>Set the value to 0 to disable this feature.</div>\n' +
        '                        </label>\n' +
        '                      </div>\n' +
        '                      <div class="form-group">\n' +
        '                        <label class="inline-checkbox">\n' +
        '                          <input data-ng-model="context.show_receivers_in_alphabetical_order" type="checkbox"/>\n' +
        '                          <span data-translate>Show recipients in alphabetical order</span>\n' +
        '                        </label>\n' +
        '                      </div>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.show_recipients_details" type="checkbox"/>\n' +
        '                        <span data-translate>Show recipient details on the status page of the report</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.enable_comments" type="checkbox"/>\n' +
        '                        <span data-translate>Enable comments</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox" data-ng-if="context.enable_comments">\n' +
        '                        <input data-ng-model="context.enable_two_way_comments" type="checkbox"/>\n' +
        '                        <span data-translate>Allow whistleblowers to write comments</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.enable_messages" type="checkbox"/>\n' +
        '                        <span data-translate>Enable private messages</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group" data-ng-if="context.enable_messages">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.enable_two_way_messages" type="checkbox"/>\n' +
        '                        <span data-translate>Allow whistleblowers to send messages</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label class="inline-checkbox">\n' +
        '                        <input data-ng-model="context.enable_attachments" type="checkbox"/>\n' +
        '                        <span data-translate>Let whistleblowers add attachments onto existing reports</span>\n' +
        '                      </label>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label data-translate>Additional questionnaire</label>\n' +
        '                      <select class="form-control" data-ng-model="context.additional_questionnaire_id"\n' +
        '                              data-ng-options="item.id as item.name for item in resources.questionnaires">\n' +
        '                        <option data-ng-if="context.additional_questionnaire_id" value=\'\'></option>\n' +
        '                      </select>\n' +
        '                    </div>\n' +
        '                    <div class="form-group">\n' +
        '                      <label data-translate>Languages</label>\n' +
        '                      <div>\n' +
        '                        <input class="form-control" name="languages" data-ng-model="context.languages" type="text" placeholder="langcode, langcode, langcode (e.g.: en, it)"/>\n' +
        '                      </div>\n' +
        '                    </div>\n' +
        '                    <div data-ng-if="resources.node.enable_scoring_system">\n' +
        '                      <label data-ng-translate>Scoring system options</label>\n' +
        '                      <div class="form-group well">\n' +
        '                        <table class="table table-bordered">\n' +
        '                          <thead>\n' +
        '                          <th data-translate>Threshold</th>\n' +
        '                          <th data-translate>Value</th>\n' +
        '                          </thead>\n' +
        '                          <tbody>\n' +
        '                          <tr>\n' +
        '                            <td data-translate>Medium</td>\n' +
        '                            <td><input class="form-control" data-ng-model="context.score_threshold_medium"\n' +
        '                                       type="number"/></td>\n' +
        '                          </tr>\n' +
        '                          <tr>\n' +
        '                            <td data-translate>High</td>\n' +
        '                            <td><input class="form-control" data-ng-model="context.score_threshold_high"\n' +
        '                                       type="number"/></td>\n' +
        '                          </tr>\n' +
        '                          </tbody>\n' +
        '                        </table>\n' +
        '                        <div class="form-group">\n' +
        '                          <label class="inline-checkbox">\n' +
        '                            <input data-ng-model="context.score_receipt_text_custom" type="checkbox"/>\n' +
        '                            <span data-translate>Customize the message shown in the receipt page</span>\n' +
        '                          </label>\n' +
        '                          <div class="nested" data-ng-if="context.score_receipt_text_custom">\n' +
        '                            <div class="form-group">\n' +
        '                              <label data-translate>Low</label>\n' +
        '                              <div>\n' +
        '                                  <textarea class="form-control"\n' +
        '                                            data-ng-model="context.score_receipt_text_l"></textarea>\n' +
        '                              </div>\n' +
        '                            </div>\n' +
        '                            <div class="form-group">\n' +
        '                              <label data-translate>Medium</label>\n' +
        '                              <div>\n' +
        '                                  <textarea class="form-control"\n' +
        '                                            data-ng-model="context.score_receipt_text_m"></textarea>\n' +
        '                              </div>\n' +
        '                            </div>\n' +
        '                            <div class="form-group">\n' +
        '                              <label data-translate>High</label>\n' +
        '                              <div>\n' +
        '                                  <textarea class="form-control"\n' +
        '                                            data-ng-model="context.score_receipt_text_h"></textarea>\n' +
        '                              </div>\n' +
        '                            </div>\n' +
        '                          </div>\n' +
        '                          <label data-translate>Assign the receipt only to reports reaching score:</label>\n' +
        '                          <select class="form-control" data-ng-model="context.score_threshold_receipt" convert-to-number>\n' +
        '                            <option value="0" data-translate>Low</option>\n' +
        '                            <option value="1" data-translate>Medium</option>\n' +
        '                            <option value="2" data-translate>High</option>\n' +
        '                          </select>\n' +
        '                        </div>\n' +
        '                      </div>\n' +
        '                    </div>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <hr/>\n' +
        '          <div class="form-group">UUID: <a href="#/submission?context={{context.id}}" target="_blank">{{context.id}}</a></div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/home.html',
      '<div id="AdminHomepage">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-index="0" heading="{{\'Home\' | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="\'views/partials/user_home.html\'"></div>\n' +
        '    </uib-tab>\n' +
        '    <uib-tab data-index="1">\n' +
        '      <uib-tab-heading>\n' +
        '        <i data-ng-if="resources.node.update_available" class="fas fa-exclamation-sign text-danger"></i>\n' +
        '        <span data-translate>Changelog</span>\n' +
        '      </uib-tab-heading>\n' +
        '      <div class="tab-content">\n' +
        '        <label><span data-translate>Software version:</span> {{resources.node.version}}</label>\n' +
        '        <div class="tos-text">{{resources.node.changelog}}</div>\n' +
        '      </div>\n' +
        '    </uib-tab>\n' +
        '    <uib-tab data-index="2" heading="{{\'License\' | translate}}">\n' +
        '      <div class="tab-content">\n' +
        '        <div class="tos-text">{{resources.node.license}}</div>\n' +
        '      </div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network.html',
      '<div data-ng-controller="AdminNetworkCtrl">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/access_control.html',
      '<div class="card card-default">\n' +
        '  <div class="card-body">\n' +
        '    <form name="adminIPAccessControlForm">\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-12">\n' +
        '          <div class="form-group">\n' +
        '            <label data-translate>Restrict access to specific IP addresses</label>\n' +
        '          </div>\n' +
        '          <table class="table table-bordered">\n' +
        '            <thead>\n' +
        '              <tr>\n' +
        '                <th data-translate>Role</th>\n' +
        '                <th data-translate>Enabled</th>\n' +
        '                <th data-translate>Allowed IP addresses</th>\n' +
        '              </tr>\n' +
        '            </thead>\n' +
        '            <tbody>\n' +
        '              <tr>\n' +
        '                <td data-translate>Admin</td>\n' +
        '                <td><input data-ng-model="resources.node.ip_filter_admin_enable" type="checkbox"></td>\n' +
        '                <td><input data-ng-if="resources.node.ip_filter_admin_enable" class="form-control" name="ip_filter_list" data-ng-model="resources.node.ip_filter_admin" type="text" autocomplete="off" /></td>\n' +
        '              </tr>\n' +
        '              <tr data-ng-if="resources.node.enable_custodian">\n' +
        '                <td data-translate>Custodian</td>\n' +
        '                <td><input data-ng-model="resources.node.ip_filter_custodian_enable" type="checkbox"></td>\n' +
        '                <td><input data-ng-if="resources.node.ip_filter_custodian_enable" class="form-control" name="ip_filter_list" data-ng-model="resources.node.ip_filter_custodian" type="text" autocomplete="off" /></td>\n' +
        '              </tr>\n' +
        '              <tr>\n' +
        '                <td data-translate>Recipient</td>\n' +
        '                <td><input data-ng-model="resources.node.ip_filter_receiver_enable" type="checkbox"></td>\n' +
        '                <td><input data-ng-if="resources.node.ip_filter_receiver_enable" class="form-control" name="ip_filter_list" data-ng-model="resources.node.ip_filter_receiver" type="text" autocomplete="off" /></td>\n' +
        '              </tr>\n' +
        '            </tbody>\n' +
        '          </table>\n' +
        '          <div>\n' +
        '            <div><span data-translate>Each entry must be separated with a comma.</span></div>\n' +
        '            <div><span data-translate>Example:</span> <span>212.35.212.87,192.0.2.0/24,2001:db8::/32</span></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <hr />\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-6">\n' +
        '          <button id="AccessControlSave" class="btn btn-primary" data-ng-disabled="adminIPAccessControlForm.$invalid" data-ng-click="Utils.update(resources.node)" type="submit">\n' +
        '            <i class="fas fa-check"></i>\n' +
        '            <span data-translate>Save</span>\n' +
        '          </button>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/https_csr_gen.html',
      '<div data-ng-form name="certSigRequestForm" class="form-horizontal was-validated clearfix">\n' +
        '  <div class="form-group">\n' +
        '    <label class="col-md-4 control-label" data-translate>Organization</label>\n' +
        '    <div class="col-md-8">\n' +
        '      <input class="form-control" data-ng-model="csr_cfg.company"\n' +
        '             data-ng-class="{\'is-invalid\': certSigRequestForm.company.$invalid}"\n' +
        '             name="company" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label class="col-md-4 control-label" data-translate>Email</label>\n' +
        '    <div class="col-md-8">\n' +
        '      <input class="form-control" data-ng-model="csr_cfg.email"\n' +
        '             data-ng-class="{\'is-invalid\': certSigRequestForm.email.$invalid}"\n' +
        '             name="email" type="text" required data-ng-pattern="CONSTANTS.email_regexp"/>\n' +
        '      <div class="text-danger" data-ng-show="certSigRequestForm.email.$error.pattern">\n' +
        '        <span data-translate>Invalid email address</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label class="col-md-4 control-label" data-translate>City</label>\n' +
        '    <div class="col-md-8">\n' +
        '      <input class="form-control" data-ng-model="csr_cfg.city"\n' +
        '             data-ng-class="{\'is-invalid\': certSigRequestForm.city.$invalid}"\n' +
        '             name="city" type="text" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label class="col-md-4 control-label" data-translate>Country</label>\n' +
        '    <div class="col-md-8">\n' +
        '      <input class="form-control" data-ng-model="csr_cfg.province"\n' +
        '             data-ng-class="{\'is-invalid\': certSigRequestForm.province.$invalid}"\n' +
        '             name="province" type="text" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label class="col-md-4 control-label" data-translate>Country code</label>\n' +
        '    <div class="col-md-8">\n' +
        '      <input class="form-control" type="text" data-ng-model="csr_cfg.country"\n' +
        '        data-ng-class="{\'is-invalid\': certSigRequestForm.country.$invalid}"\n' +
        '        name="country" minlength="2" maxlength="2" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <button id="csrSubmit" class="btn btn-primary float-right"\n' +
        '      data-ng-click="submitCSR()"\n' +
        '      data-ng-disabled="certSigRequestForm.$invalid"\n' +
        '      data-translate>Generate</button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/https_files.html',
      '<div class="https-file-res">\n' +
        '  <div class="card card-default key mb-1">\n' +
        '    <div class="card-body clearfix">\n' +
        '      <span data-translate>Private Key</span>\n' +
        '      <span>(PEM)</span>\n' +
        '      <span class="float-right">\n' +
        '        <span class="file-upload" data-ng-if="!tls_config.files.key.set">\n' +
        '          <label id="keyUpload" file-input="postFile(file, file_resources.key)" file-input-label="Upload" class="file-upload btn btn-sm btn-primary"></label>\n' +
        '        </span>\n' +
        '        <button id="pkGen" class="btn btn-sm btn-primary" data-ng-if="!tls_config.files.key.set" data-ng-click="gen_key()">\n' +
        '            <i class="fas fa-cog"></i>\n' +
        '          <span data-translate>Generate</span>\n' +
        '        </button>\n' +
        '        <button data-ng-if="tls_config.files.key.set" id="downloadKey" class="btn btn-sm btn-primary" data-ng-click="downloadFile(file_resources.key)">\n' +
        '          <i class="fas fa-file-export"></i>\n' +
        '          <span data-translate>Download</span>\n' +
        '        </button>\n' +
        '        <span data-ng-if="tls_config.files.key.set">\n' +
        '          <button id="deleteKey" class="btn btn-sm btn-danger" data-ng-click="deleteFile(file_resources.key)">\n' +
        '            <i class="fas fa-times"></i>\n' +
        '            <span data-translate>Delete</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div data-ng-if="tls_config.files.key.set && !tls_config.acme" class="card card-default csr mb-1">\n' +
        '    <div class="card-body clearfix">\n' +
        '      <span data-translate>Certificate Signing Request</span>\n' +
        '      <span>(PEM)</span>\n' +
        '      <span data-ng-if="!tls_config.files.csr.set">\n' +
        '        <span class="float-right">\n' +
        '          <button id="csrGen" class="btn btn-sm btn-primary" data-ng-hide="csr_state.open" data-ng-click="csr_state.open = true">\n' +
        '            <i class="fas fa-cog"></i>\n' +
        '            <span data-translate>Generate</span>\n' +
        '          </button>\n' +
        '          <button type="submit" class="close" data-ng-show="csr_state.open" data-ng-click="csr_state.open = false" aria-label="Close">&times;</button>\n' +
        '        </span>\n' +
        '        <div data-ng-show="csr_state.open">\n' +
        '          <hr />\n' +
        '          <div data-ng-include="\'views/admin/network/https_csr_gen.html\'"></div>\n' +
        '        </div>\n' +
        '      </span>\n' +
        '      <span data-ng-if="tls_config.files.csr.set" class="clearfix">\n' +
        '        <span class="float-right">\n' +
        '          <button id="downloadCsr" class="btn btn-sm btn-primary" data-ng-click="downloadFile(file_resources.csr)">\n' +
        '            <i class="fas fa-file-export"></i>\n' +
        '            <span data-translate>Download</span>\n' +
        '          </button>\n' +
        '          <button id="deleteCsr" class="btn btn-sm btn-danger" data-ng-click="deleteFile(file_resources.csr)">\n' +
        '            <i class="fas fa-times"></i>\n' +
        '            <span data-translate>Delete</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="card card-default cert mb-1">\n' +
        '    <div class="card-body clearfix">\n' +
        '      <span data-translate>Certificate</span>\n' +
        '      <span>(PEM)</span>\n' +
        '      <span data-ng-show="tls_config.files.cert.set" class="badge badge-primary">\n' +
        "        <span data-translate>Valid until:</span> {{ tls_config.files.cert.expiration_date | date:'dd-MM-yyyy HH:mm' }}\n" +
        '        <span data-translate>Issuer:</span> <b>{{ tls_config.files.cert.issuer }}</b>\n' +
        '      </span>\n' +
        '      <span class="float-right">\n' +
        '        <span class="file-upload" data-ng-if="!tls_config.files.cert.set">\n' +
        '          <label id="certUpload" file-input="postFile(file, file_resources.cert)" file-input-label="Upload" class="file-upload btn btn-sm btn-primary"></label>\n' +
        '        </span>\n' +
        '        <span data-ng-if="tls_config.files.cert.set">\n' +
        '          <button id="downloadCert" class="btn btn-sm btn-primary" data-ng-click="downloadFile(file_resources.cert)">\n' +
        '            <i class="fas fa-file-export"></i>\n' +
        '            <span data-translate>Download</span>\n' +
        '          </button>\n' +
        '          <button id="deleteCert" class="btn btn-sm btn-danger" data-ng-click="deleteFile(file_resources.cert)">\n' +
        '            <i class="fas fa-times"></i>\n' +
        '            <span data-translate>Delete</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="card card-default chain mb-1">\n' +
        '    <div class="card-body clearfix">\n' +
        '      <span data-translate>Intermediate Certificates</span>\n' +
        '      <span>(PEM)</span>\n' +
        '      <span data-ng-show="tls_config.files.chain.set" class="badge badge-primary">\n' +
        "        <span data-translate>Valid until:</span> {{ tls_config.files.chain.expiration_date | date:'dd-MM-yyyy HH:mm' }}\n" +
        '        <span data-translate>Issuer:</span> <b>{{ tls_config.files.chain.issuer }}</b>\n' +
        '      </span>\n' +
        '      <div class="float-right">\n' +
        '        <span class="file-upload" data-ng-if="!tls_config.files.chain.set">\n' +
        '          <label id="chainUpload" file-input="postFile(file, file_resources.chain)" file-input-label="Upload" class="file-upload btn btn-sm btn-primary"></label>\n' +
        '        </span>\n' +
        '        <span data-ng-if="tls_config.files.chain.set">\n' +
        '          <button id="downloadChain" class="btn btn-sm btn-primary" data-ng-click="downloadFile(file_resources.chain)">\n' +
        '            <i class="fas fa-file-export"></i>\n' +
        '            <span data-translate>Download</span>\n' +
        '          </button>\n' +
        '          <button id="deleteChain" class="btn btn-sm btn-danger" data-ng-click="deleteFile(file_resources.chain)">\n' +
        '            <i class="fas fa-times"></i>\n' +
        '            <span data-translate>Delete</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <button class="btn btn-primary" data-ng-if="state > 1" data-ng-click="toggleCfg()" data-translate>Enable</button>\n' +
        '  <button class="btn btn-danger" data-ng-click="resetCfg()" data-translate>Reset</button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/https_setup.html',
      '<div class="mb-3" data-translate>The platform supports the configuration of HTTPS through this interface.</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="card card-default">\n' +
        '      <div class="card-header" data-translate>Automatic configuration</div>\n' +
        '      <div class="card-body">\n' +
        '        <p>\n' +
        "          <span data-translate>Using automatic HTTPS configuration will handle the entire process of requesting, enabling and renewing certificates from the Let's Encrypt Certificate Authority.</span> <span data-translate>The platform must be reachable through a public IP address and the selected hostname must have a DNS record referencing that address.</span>\n" +
        '        </p>\n' +
        '        <button id="HTTPSAutoMode" class="btn btn-primary" data-ng-click="setupAcme()" data-translate>Proceed</button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="card card-default">\n' +
        '      <div class="card-header" data-translate>Manual configuration</div>\n' +
        '      <div class="card-body">\n' +
        '        <p data-translate>The manual configuration wizard will guide you through the setup of HTTPS from an alternative Certificate Authority.</p>\n' +
        '        <button id="HTTPSManualMode" class="btn btn-primary" data-ng-click="setup()" data-translate>Proceed</button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/https_status.html',
      '<div class="info-section">\n' +
        '  <div>\n' +
        '    <span data-translate>Status</span>\n' +
        '    <span data-ng-if="tls_config.enabled">\n' +
        '      <span class="badge badge-primary">\n' +
        '        <span data-translate>Enabled</span>\n' +
        '      </span>\n' +
        '    </span>\n' +
        '\n' +
        '    <span data-ng-if="!tls_config.enabled" class="badge badge-danger">\n' +
        '      <span data-translate>Disabled</span>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="hostname">\n' +
        '    <div data-ng-if="tls_config.enabled">\n' +
        '      <span>URL</span><span>:</span>\n' +
        '      <a href="https://{{resources.node.hostname}}" rel="noreferrer" target="_blank">https://{{resources.node.hostname}}</a>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div data-translate>Certificate</div>\n' +
        '<div>\n' +
        '  <p><span data-translate>Issuer:</span> {{tls_config.files.cert.issuer}}</p>\n' +
        "  <p><span data-translate>Valid until:</span> {{tls_config.files.cert.expiration_date | date:'dd-MM-yyyy HH:mm'}}</p>\n" +
        '  <p data-ng-if="tls_config.acme">\n' +
        '    <span data-translate>Auto-renewal</span>: <span data-translate>Enabled</span>\n' +
        '  </p>\n' +
        '</div>\n' +
        '\n' +
        '<hr />\n' +
        '<button class="btn btn-danger" data-ng-click="toggleCfg()" data-translate>Disable</button>\n' +
        '<button class="btn btn-danger" data-ng-click="resetCfg()" data-translate>Reset</button>\n'
    )

    $templateCache.put(
      'views/admin/network/https.html',
      '<div class="form-group">\n' +
        '  <form name="adminNetForm" novalidate>\n' +
        '    <p class="input-group">\n' +
        '      <span class="input-group-prepend"><span class="input-group-text" data-translate>Hostname</span></span>\n' +
        '      <input name="hostname"\n' +
        '             class="form-control"\n' +
        '             type="text"\n' +
        '             data-ng-model="resources.node.hostname"\n' +
        '             data-ng-pattern="CONSTANTS.hostname_regexp"\n' +
        '	     data-ng-class="{\'is-invalid\': adminNetForm.hostname.$error.pattern}"/>\n' +
        '      <span class="input-group-append">\n' +
        '        <button class="btn btn-primary" data-ng-click="Utils.applyConfig(\'set_hostname\', resources.node.hostname, true)" data-ng-disabled="adminNetForm.$pristine" data-translate>Save</button>\n' +
        '      </span>\n' +
        '    </p>\n' +
        '  </form>\n' +
        '</div>\n' +
        '<div id="HTTPSSettings" data-ng-controller="AdminHTTPSConfigCtrl" data-ng-show="resources.node.hostname">\n' +
        '  <div class="card card-default">\n' +
        '    <div class="card-body" data-ng-switch="menuState">\n' +
        '      <div data-ng-switch-when="setup">\n' +
        '        <div data-ng-include="\'views/admin/network/https_setup.html\'"></div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="files">\n' +
        '        <div data-ng-include="\'views/admin/network/https_files.html\'"></div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="status">\n' +
        '        <div data-ng-include="\'views/admin/network/https_status.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/tor.html',
      '<div class="form-group">\n' +
        '  <div class="input-group">\n' +
        '    <span class="input-group-prepend">\n' +
        '      <span class="input-group-text" data-translate>Tor Onion Service</span>\n' +
        '    </span>\n' +
        '    <input name="onionservice" class="form-control" type="text" value="{{resources.node.onionservice}}" disabled />\n' +
        '    <span class="input-group-append">\n' +
        '      <button class="btn btn-danger" data-ng-disabled="torOnionResetInProgress" data-ng-click="resetOnionPrivateKey()">\n' +
        '        <i class="fas fa-sync"></i>\n' +
        '        <span data-translate>Regenerate</span>\n' +
        '      </button>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div class="card card-default">\n' +
        '  <div class="card-body">\n' +
        '    <form name="adminNetForm">\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-12">\n' +
        '          <div class="form-group">\n' +
        '            <label>\n' +
        '              <input data-ng-model="resources.node.disable_privacy_badge" type="checkbox" />\n' +
        '              <span data-translate>Disable the privacy panel</span>\n' +
        '            </label>\n' +
        '          </div>\n' +
        '\n' +
        '          <div class="form-group" data-ng-if="!resources.node.disable_privacy_badge">\n' +
        '            <label>\n' +
        '              <input data-ng-model="resources.node.enable_custom_privacy_badge" type="checkbox" />\n' +
        '              <span data-translate>Enable custom privacy panel</span>\n' +
        '            </label>\n' +
        '          </div>\n' +
        '\n' +
        '          <div class="form-group" data-ng-if="!resources.node.disable_privacy_badge && resources.node.enable_custom_privacy_badge">\n' +
        '            <label data-translate>Custom privacy panel</label>\n' +
        '            <div>\n' +
        '              <textarea class="form-control" data-ng-model="resources.node.custom_privacy_badge_text" type="text"></textarea>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '\n' +
        '          <div class="form-group" data-ng-if="resources.node.root_tenant">\n' +
        '            <input data-ng-model="resources.node.anonymize_outgoing_connections" type="checkbox">\n' +
        '            <label data-translate>Anonymize outgoing connections</label>\n' +
        '          </div>\n' +
        '\n' +
        '          <div class="form-group">\n' +
        '            <input data-ng-disabled="!resources.node.https_possible" data-ng-model="resources.node.reachable_via_web" type="checkbox">\n' +
        '            <label data-translate>Let the platform be reachable without Tor</label>\n' +
        '          </div>\n' +
        '\n' +
        '          <div data-ng-show="resources.node.reachable_via_web">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Roles enabled to use the platform without Tor</label>\n' +
        '            </div>\n' +
        '            <table class="table table-bordered">\n' +
        '              <thead>\n' +
        '                <th data-translate>Role</th>\n' +
        '                <th data-translate>Enabled</th>\n' +
        '              </thead>\n' +
        '              <tbody>\n' +
        '                <tr>\n' +
        '                  <td data-translate>Admin</td>\n' +
        '                  <td>\n' +
        '                    <input data-ng-model="resources.node.https_admin" type="checkbox">\n' +
        '                  </td>\n' +
        '                </tr>\n' +
        '                <tr data-ng-if="resources.node.enable_custodian">\n' +
        '                  <td data-translate>Custodian</td>\n' +
        '                  <td>\n' +
        '                    <input data-ng-model="resources.node.https_custodian" type="checkbox">\n' +
        '                  </td>\n' +
        '                </tr>\n' +
        '                <tr>\n' +
        '                  <td data-translate>Recipient</td>\n' +
        '                  <td>\n' +
        '                    <input data-ng-model="resources.node.https_receiver" type="checkbox">\n' +
        '                  </td>\n' +
        '                </tr>\n' +
        '                <tr>\n' +
        '                  <td data-translate>Whistleblower</td>\n' +
        '                  <td>\n' +
        '                    <input data-ng-model="resources.node.https_whistleblower" type="checkbox">\n' +
        '                  </td>\n' +
        '                </tr>\n' +
        '              </tbody>\n' +
        '            </table>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <hr />\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-6">\n' +
        '          <button class="btn btn-primary" data-ng-disabled="adminNetForm.$invalid" data-ng-click="Utils.update(resources.node)" type="submit">\n' +
        '            <i class="fas fa-check"></i>\n' +
        '            <span data-translate>Save</span>\n' +
        '          </button>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/network/url_redirects.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div data-ng-form="redirectAddForm" class="form-inline" isolate-form>\n' +
        '      <div class="form-group d-block">\n' +
        '	<div class="input-group">\n' +
        '          <span class="input-group-prepend"><span class="input-group-text" data-translate>From</span></span>\n' +
        '          <input type="text" class="form-control" name="path1" data-ng-model="new_redirect.path1" />\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group d-block ml-2">\n' +
        '	<span class="input-group">\n' +
        '          <span class="input-group-prepend"><span class="input-group-text" data-translate>To</span></span>\n' +
        '          <input type="text" class="form-control" name="path2" data-ng-model="new_redirect.path2" />\n' +
        '	</span>\n' +
        '      </div>\n' +
        '      <button type="submit"\n' +
        '              class="btn btn-primary ml-2"\n' +
        '              data-ng-disabled="redirectAddForm.$invalid"\n' +
        '              data-ng-click="add_redirect()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<br />\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <table class="table">\n' +
        '      <thead>\n' +
        '        <tr>\n' +
        '          <th data-translate>From</th>\n' +
        '          <th data-translate>To</th>\n' +
        '          <th></th>\n' +
        '        </tr>\n' +
        '      </thead>\n' +
        '      <tbody>\n' +
        '        <tr data-ng-repeat="redirect in resources.redirects | orderBy:\'path1\'" data-ng-controller="AdminRedirectEditCtrl">\n' +
        '          <td>{{redirect.path1}}</td>\n' +
        '          <td>{{redirect.path2}}</td>\n' +
        '          <td>\n' +
        '            <button class="btn btn-sm btn-danger"\n' +
        '                    data-ng-click="delete_redirect(redirect)">\n' +
        '              <i class="fas fa-trash"></i>\n' +
        '              <span data-translate>Delete</span>\n' +
        '            </button>\n' +
        '          </td>\n' +
        '        </tr>\n' +
        '      </tbody>\n' +
        '    </table>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/notifications.html',
      '<form name="notificationForm" data-ng-controller="AdminMailCtrl" novalidate>\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</form>'
    )

    $templateCache.put(
      'views/admin/notifications/tab1.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>SMTP email address</label>\n' +
        '      <input class="form-control" name="source_email" data-ng-model="resources.notification.smtp_source_email" data-ng-pattern="CONSTANTS.email_regexp" type="text" />\n' +
        '    </div>\n' +
        '    <div class="text-danger" data-ng-show="notificationForm.source_email.$error.pattern">\n' +
        '      <span data-translate>Invalid email address</span>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>SMTP server address</label>\n' +
        '      <input class="form-control" data-ng-model="resources.notification.smtp_server" type="text" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>SMTP server port</label>\n' +
        '      <input class="form-control" data-ng-model="resources.notification.smtp_port" type="number" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Security</label>\n' +
        '      <select class="form-control" data-ng-model="resources.notification.smtp_security">\n' +
        '        <option value="PLAIN">PLAIN</option>\n' +
        '        <option value="SSL">SMTPS</option>\n' +
        '        <option value="TLS">SMTP/TLS</option>\n' +
        '      </select>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.notification.smtp_authentication" type="checkbox">\n' +
        '      <label data-translate>Require authentication</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div data-ng-show="resources.notification.smtp_authentication">\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Username</label>\n' +
        '        <input class="form-control" data-ng-model="resources.notification.smtp_username" type="text" />\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Password</label>\n' +
        '        <input class="form-control" data-ng-model="resources.notification.smtp_password" type="password" placeholder="*****************" />\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.notification.disable_admin_notification_emails" type="checkbox">\n' +
        '      <label data-translate>Disable notifications to administrators</label>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <input data-ng-model="resources.notification.disable_receiver_notification_emails" type="checkbox">\n' +
        '      <label data-translate>Disable notifications to recipients</label>\n' +
        '      <div data-ng-show="resources.notification.disable_receiver_notification_emails">\n' +
        '        <span class="badge badge-danger" data-translate>Disabled</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group" data-ng-if="resources.node.enable_custodian">\n' +
        '      <input data-ng-model="resources.notification.disable_custodian_notification_emails" type="checkbox">\n' +
        '      <label data-translate>Disable notifications to custodians</label>\n' +
        '      <div data-ng-show="resources.notification.disable_custodian_notification_emails">\n' +
        '        <span class="badge badge-danger" data-translate>Disabled</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Number of hours before sending a report expiration alert</label>\n' +
        '      <input class="form-control" data-ng-model="resources.notification.tip_expiration_threshold" type="number" />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="form-group">\n' +
        '      <button class="btn btn-primary" data-ng-disabled="notificationForm.$invalid" data-ng-click="Utils.update(resources.notification)" type="submit">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Save</span>\n' +
        '      </button>\n' +
        '      <button data-uib-tooltip="{{\'Send a test email to your email address.\' | translate}}"\n' +
        '              data-ng-click="updateThenTestMail()"\n' +
        '              class="btn btn-primary">\n' +
        '        <i class="fas fa-envelope"></i>\n' +
        '        <span data-translate>Test the configuration</span>\n' +
        '      </button>\n' +
        '      <button data-ng-click="Utils.applyConfig(\'reset_smtp_settings\', {}, true)"\n' +
        '              class="btn btn-primary">\n' +
        '        <span data-translate>Reset SMTP configuration</span>\n' +
        '      </button>\n' +
        '      <button data-ng-click="Utils.applyConfig(\'reset_templates\', {}, true)"\n' +
        '              class="btn btn-primary">\n' +
        '        <span data-translate>Reset notification templates to default</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/notifications/tab2.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Template</label>\n' +
        '      <select name="template" class="form-control" data-ng-model="template" data-ng-options="t as t for t in resources.notification.templates"></select>\n' +
        '    </div>\n' +
        '\n' +
        '    <br /><br />\n' +
        '\n' +
        '    <div class="row" data-ng-if="template">\n' +
        '      <div class="col-md-12">\n' +
        '        <div class="form-group">\n' +
        '          <textarea data-ng-model="resources.notification[template]" class="form-control" rows="10"></textarea>\n' +
        '        </div>\n' +
        '\n' +
        '        <div class="form-group">\n' +
        '          <button class="btn btn-primary" data-ng-disabled="notificationForm.$invalid" data-ng-click="Utils.update(resources.notification)" type="submit">\n' +
        '            <i class="fas fa-check"></i>\n' +
        '            <span data-translate>Save</span>\n' +
        '          </button>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires.html',
      '<div data-ng-controller="AdminQuestionnaireCtrl">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/add_field_from_template.html',
      '<div class="addFieldFromTemplate" data-ng-form="newField">\n' +
        '  <div class="form-group">\n' +
        '    <label data-translate>Type</label>\n' +
        '    <select name="template_id" class="form-control" data-ng-model="new_field.template_id" data-ng-options="f.id as f.label for f in resources.fieldtemplates" required></select>\n' +
        '    <div class="text-danger" data-ng-show="newField.template_id.$error.required">\n' +
        '      <span data-translate>This field is mandatory</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="form-group">\n' +
        '    <button id="add-field-btn" data-ng-click="add_field_from_template(); toggleAddFieldFromTemplate()" class="btn btn-primary"\n' +
        '            data-ng-disabled="newField.$invalid" type="button">\n' +
        '      <i class="fas fa-plus"></i>\n' +
        '      <span data-translate>Add</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/add_field.html',
      '<div class="addField" data-ng-form="newField">\n' +
        '  <div class="form-group">\n' +
        '    <label data-translate>Question</label>\n' +
        '    <input name="label" class="form-control" data-ng-model="new_field.label" type="text" required>\n' +
        '    <div class="text-danger" data-ng-show="newField.label.$error.required">\n' +
        '      <span data-translate>This field is mandatory</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="form-group">\n' +
        '    <label data-translate>Type</label>\n' +
        '    <select name="type" class="form-control" data-ng-model="new_field.type" required>\n' +
        '      <option value="inputbox" data-translate>Single-line text input</option>\n' +
        '      <option value="textarea" data-translate>Multi-line text input</option>\n' +
        '      <option value="selectbox" data-translate>Selection box</option>\n' +
        '      <option value="checkbox" data-translate>Checkbox</option>\n' +
        '      <option value="fileupload" data-translate>Attachment</option>\n' +
        '      <option value="tos" data-translate>Terms of service</option>\n' +
        '      <option value="date" data-translate>Date</option>\n' +
        '      <option value="daterange" data-translate>Date range</option>\n' +
        '      <option value="fieldgroup" data-translate>Group of questions</option>\n' +
        '    </select>\n' +
        '    <div class="text-danger" data-ng-show="newField.type.$error.required">\n' +
        '      <span data-translate>This field is mandatory</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="form-group">\n' +
        '    <button id="add-field-btn" class="btn btn-primary" data-ng-disabled="newField.$invalid" data-ng-click="add_field(); toggleAddQuestion()">\n' +
        '      <i class="fas fa-plus"></i>\n' +
        '      <span data-translate>Add</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/fields.html',
      '<div id="field-{{$index}}" class="fieldBox"\n' +
        '  data-ng-init="editing=false" data-ng-controller="AdminFieldEditorCtrl">\n' +
        '  <div data-ng-form="editField">\n' +
        '    <div class="configItem">\n' +
        '      <div class="editorHeader" data-ng-click="field.editable && toggleEditing(); $event.stopPropagation();">\n' +
        '        <div class="row">\n' +
        '          <span class="col-md-6">\n' +
        '            <span>{{field.label}}</span>\n' +
        '            <span class="fieldIndex badge badge-secondary" data-ng-if="field.step_id || field.fieldgroup_id">\n' +
        '              <span data-translate>Row</span><span>: {{field.y}}</span>\n' +
        '              <span data-translate>Column</span><span>: {{field.x}}</span>\n' +
        '              <span data-translate>Width</span><span>: {{field.width}}</span>\n' +
        '            </span>\n' +
        '            <span class="fieldType badge badge-primary">\n' +
        '              <span data-translate>Type</span><span>:</span>\n' +
        '              <span data-ng-switch="field.type">\n' +
        '                <span data-ng-switch-when="inputbox" data-translate>Single-line text input</span>\n' +
        '                <span data-ng-switch-when="textarea" data-translate>Multi-line text input</span>\n' +
        '                <span data-ng-switch-when="selectbox" data-translate>Selection box</span>\n' +
        '                <span data-ng-switch-when="multichoice" data-translate>Multiple choice input</span>\n' +
        '                <span data-ng-switch-when="checkbox" data-translate>Checkbox</span>\n' +
        '                <span data-ng-switch-when="fileupload" data-translate>Attachment</span>\n' +
        '                <span data-ng-switch-when="tos" data-translate>Terms of service</span>\n' +
        '                <span data-ng-switch-when="date" data-translate>Date</span>\n' +
        '                <span data-ng-switch-when="daterange" data-translate>Date range</span>\n' +
        '                <span data-ng-switch-when="fieldgroup" data-translate>Question group</span>\n' +
        '                <span data-ng-switch-default="default">{{field.type}}</span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '            <span data-ng-if="field.preview" class="badge badge-default">\n' +
        '              <span data-uib-tooltip="{{\'Preview\' | translate}}"><i class="fas fa-list-alt"></i></span>\n' +
        '            </span>\n' +
        '            <span data-ng-if="field.multi_entry" class="badge badge-default">\n' +
        '              <span data-ng-switch="field.type">\n' +
        '                <span data-ng-switch-when="fileupload" data-uib-tooltip="{{\'Accept multiple file uploads\' | translate}}"><i class="fas fa-option-horizontal"></i></span>\n' +
        '                <span data-ng-switch-default data-uib-tooltip="{{\'Accept multiple answers for the field\' | translate}}"><i class="fas fa-option-horizontal"></i></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '            <span data-ng-if="field.required" class="badge badge-danger">\n' +
        '              <span data-uib-tooltip="{{\'Mandatory\' | translate}}"><i class="fas fa-asterisk"></i></span>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '          <span class="col-md-6 clearfix" data-ng-if="field.editable">\n' +
        '            <span class="float-right">\n' +
        '              <button class="btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-if="!editing"\n' +
        '                data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Edit</span>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-primary"\n' +
        '                data-ng-if="editing"\n' +
        '                data-ng-click="save_field(field)">\n' +
        '                <span data-translate>Save</span>\n' +
        '              </button>\n' +
        '              <button\n' +
        '                class="btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-if="editing"\n' +
        '                data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Cancel</span>\n' +
        '              </button>\n' +
        '              <button class="downloadButton btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-click="exportQuestion(field); $event.stopPropagation()">\n' +
        '                <i class="fas fa-file-export"></i>\n' +
        '                <span data-translate>Export</span>\n' +
        '              </button>\n' +
        '              <button class="btn btn-sm btn-danger"\n' +
        '                data-ng-if="field.editable"\n' +
        '		data-ng-click="delField(field); $event.stopPropagation();">\n' +
        '                <span data-translate>Delete</span>\n' +
        '              </button>\n' +
        '              <span data-ng-if="field.step_id || field.fieldgroup_id">\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-click="moveLeftAndSave(field); $event.stopPropagation();" data-uib-tooltip="{{\'Move left\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-left"></i>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-click="moveRightAndSave(field); $event.stopPropagation();" data-uib-tooltip="{{\'Move right\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-right"></i>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-click="moveUpAndSave(field); $event.stopPropagation();" data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-up"></i>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-click="moveDownAndSave(field); $event.stopPropagation();" data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-down"></i>\n' +
        '                </button>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="fieldEditor" data-ng-if="editing">\n' +
        '        <hr />\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12" data-ng-if="field.editable">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Name</label>\n' +
        '              <input name="label" class="form-control" data-ng-model="field.label" type="text" required />\n' +
        '              <div class="text-danger" data-ng-show="editField.label.$error.required">\n' +
        '                <span data-translate>This field is mandatory</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="field.type === \'inputbox\' || field.type === \'textarea\'">\n' +
        '              <label><span data-translate>Type</span><span>:</span></label>\n' +
        '              <select name="type" class="form-control" data-ng-model="field.type" required>\n' +
        '                <option value="inputbox" data-translate>Single-line text input</option>\n' +
        '                <option value="textarea" data-translate>Multi-line text input</option>\n' +
        '              </select>\n' +
        '            </div>\n' +
        "            <div class=\"form-group\" data-ng-if=\"field.type === 'selectbox' || field.type === 'checkbox' || field.type === 'multichoice'\">\n" +
        '              <label><span data-translate>Type</span><span>:</span></label>\n' +
        '              <select name="type" class="form-control" data-ng-model="field.type" required>\n' +
        '                <option value="selectbox" data-translate>Selection box</option>\n' +
        '                <option value="multichoice" data-translate>Multiple choice input</option>\n' +
        '                <option value="checkbox" data-translate>Checkbox</option>\n' +
        '              </select>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Hint</label>\n' +
        '              <input name="hint" class="form-control" data-ng-model="field.hint" type="text">\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Description</label>\n' +
        '              <textarea name="description" class="form-control" data-ng-model="field.description"></textarea>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="(field.type === \'inputbox\' || field.type === \'textarea\')">\n' +
        '              <label data-translate>Placeholder</label>\n' +
        '              <input name="hint" class="form-control" data-ng-model="field.placeholder" type="text">\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="field.type !== \'fieldgroup\'">\n' +
        '              <input data-ng-model="field.required" type="checkbox">\n' +
        '              <label data-translate>Mandatory</label>\n' +
        '            </div>\n' +
        "            <div class=\"form-group\" data-ng-if=\"(field.type === 'fieldgroup' || field.type === 'fileupload') && field.template_id === ''\">\n" +
        '              <div data-ng-switch="typeSwitch(field.type)">\n' +
        '                <input data-ng-model="field.multi_entry" type="checkbox">\n' +
        '                <label data-ng-switch-when="fileupload" data-translate>Accept multiple file uploads</label>\n' +
        '                <label data-ng-switch-default data-translate>Accept multiple answers</label>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="fieldIsMarkableSubjectToPreview">\n' +
        '              <input data-ng-model="field.preview" type="checkbox">\n' +
        '              <label data-translate>Preview</label>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label>\n' +
        '                <span data-translate>Width</span>\n' +
        '                <span>(</span><span data-translate>0 = auto</span><span>)</span>\n' +
        '               </label>\n' +
        '              <input class="form-control" data-ng-model="field.width" type="number" min="0" max="12">\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="field.template_id">\n' +
        '              <label data-translate>Template override</label>\n' +
        '              <input name="template_override_id" class="form-control" data-ng-model="field.template_override_id" type="text">\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row" data-ng-if="field.instance !== \'reference\'">\n' +
        '          <div class="col-md-12">\n' +
        "            <div data-ng-if=\"field.type === 'inputbox' || field.type === 'textarea'\">\n" +
        '              <div class="form-group">\n' +
        '                <label data-translate>Minimum number of input characters</label>\n' +
        '                <input data-ng-model="field.attrs.min_len.value" type="text" class="form-control" data-ng-disabled="!field.editable" />\n' +
        '                <div data-translate>Set the value to 0 to disable this feature.</div>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Maximum number of input characters</label>\n' +
        '                <input data-ng-model="field.attrs.max_len.value" type="text" class="form-control" data-ng-disabled="!field.editable" />\n' +
        '                <div data-translate>Set the value to 0 to disable this feature.</div>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Input validation</label>\n' +
        '                <select name="type" class="form-control" data-ng-model="field.attrs.input_validation.value" required>\n' +
        '                  <option value="none" data-translate>None</option>\n' +
        '                  <option value="email" data-translate>Email address</option>\n' +
        '                  <option value="number" data-translate>Number</option>\n' +
        '                  <option value="phonenumber" data-translate>Phone number</option>\n' +
        '                  <option value="custom" data-translate>Custom</option>\n' +
        '                </select>\n' +
        '              </div>\n' +
        '              <div class="form-group" data-ng-if="field.attrs.input_validation.value === \'custom\'">\n' +
        '                <label data-translate>Regular expression</label>\n' +
        '                <input data-ng-model="field.attrs.regexp.value" type="text" class="form-control" data-ng-disabled="!field.editable" />\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div data-ng-if="field.type === \'tos\'" data-ng-disabled="!field.editable">\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Text</label>\n' +
        '                <textarea data-ng-model="field.attrs.text.value" class="form-control"></textarea>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Checkbox label</label>\n' +
        '                <input data-ng-model="field.attrs.checkbox_label.value" type="text" class="form-control" />\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <input data-ng-model="field.attrs.attachment.value" type="checkbox" />\n' +
        '                <label data-translate>Attachment</label>\n' +
        '              </div>\n' +
        '              <div data-ng-if="field.attrs.attachment.value" class="nested">\n' +
        '                <div class="form-group">\n' +
        '                  <label data-translate>Text</label>\n' +
        '                  <input data-ng-model="field.attrs.attachment_text.value" type="text" class="form-control" />\n' +
        '                </div>\n' +
        '                <div class="form-group">\n' +
        '                  <label>URL</label>\n' +
        '                  <input data-ng-model="field.attrs.attachment_url.value" type="text" class="form-control" />\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div data-ng-if="field.type === \'fieldgroup\'">\n' +
        '              <div class="form-group">\n' +
        '                <input data-ng-model="field.attrs.multimedia.value" type="checkbox">\n' +
        '                <label data-translate>Add multimedia content</label>\n' +
        '                <div data-ng-if="field.attrs.multimedia.value" class="nested">\n' +
        '                  <div class="form-group">\n' +
        '                    <label data-translate>Type</label>\n' +
        '                    <select name="type" class="form-control" data-ng-model="field.attrs.multimedia_type.value" required>\n' +
        '                      <option value="image" data-translate>Image</option>\n' +
        '                      <option value="audio" data-translate>Audio</option>\n' +
        '                      <option value="video" data-translate>Video</option>\n' +
        '                    </select>\n' +
        '                  </div>\n' +
        '                  <div class="form-group">\n' +
        '                    <label>URL</label>\n' +
        '                    <input data-ng-model="field.attrs.multimedia_url.value" type="text" class="form-control" required />\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div data-ng-disabled="!field.editable">\n' +
        "              <div data-ng-if=\"field.type === 'checkbox' || field.type === 'selectbox' || field.type === 'multichoice'\">\n" +
        '                <div class="form-group">\n' +
        '                  <input data-ng-model="field.attrs.display_alphabetically.value" type="checkbox">\n' +
        '                  <label data-translate>Display options alphabetically</label>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div data-ng-if="field.type === \'date\' || field.type === \'daterange\'" data-ng-init="open_min_date = false; open_max_date = false">\n' +
        '                <div class="form-group">\n' +
        '                  <div uib-datepicker-popup\n' +
        '                       data-ng-model="field.attrs.min_date.value"\n' +
        '                       is-open="open_min_date"\n' +
        '                       show-button-bar="false"\n' +
        '                       data-ng-click="open_min_date = !open_min_date">\n' +
        '                    <label data-translate>Earliest selectable date</label>:\n' +
        '                    <span data-ng-show="field.attrs.min_date.value">\n' +
        "                      <span>{{field.attrs.min_date.value | date:'dd-MM-yyyy'}}</span>\n" +
        '                      <button class="btn btn-sm btn-danger"\n' +
        '                              data-ng-click="field.attrs.min_date.value = \'\'; $event.stopPropagation();">\n' +
        '                        <i class="fas fa-times"></i>\n' +
        '                      </button>\n' +
        '                    </span>\n' +
        '                    <button data-ng-show="field.attrs.min_date.value === \'\'" type="button" class="btn btn-sm btn-outline-secondary"><i class="fas fa-calendar"></i></button>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '                <div class="form-group">\n' +
        '                  <div uib-datepicker-popup\n' +
        '                       data-ng-model="field.attrs.max_date.value"\n' +
        '                       is-open="open_max_date"\n' +
        '                       show-button-bar="false"\n' +
        '                       data-ng-click="open_max_date = !open_max_date">\n' +
        '                    <label data-translate>Latest selectable date</label>:\n' +
        '                    <span data-ng-show="field.attrs.max_date.value">\n' +
        "                      <span>{{field.attrs.max_date.value | date:'dd-MM-yyyy'}}</span>\n" +
        '                      <button class="btn btn-sm btn-danger"\n' +
        '                              data-ng-click="field.attrs.max_date.value = \'\'; $event.stopPropagation();">\n' +
        '                        <i class="fas fa-times"></i>\n' +
        '                      </button>\n' +
        '                    </span>\n' +
        '                    <button data-ng-show="field.attrs.max_date.value === \'\'" type="button" class="btn btn-sm btn-outline-secondary"><i class="fas fa-calendar"></i></button>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12" data-ng-if="field.instance === \'reference\'" data-ng-switch="field.template_id">\n' +
        '            <div data-ng-switch-when="whistleblower_identity">\n' +
        '              <div class="form-group">\n' +
        '                <input data-ng-model="field.required" type="checkbox">\n' +
        '                <label data-translate>Mandatory</label>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group" data-ng-if="resources.node.enable_scoring_system">\n' +
        '              <label data-translate>Triggered by score:</label>\n' +
        '              <select class="form-control" data-ng-model="field.triggered_by_score" convert-to-number>\n' +
        '                <option value="0" data-translate>Low</option>\n' +
        '                <option value="1" data-translate>Medium</option>\n' +
        '                <option value="2" data-translate>High</option>\n' +
        '              </select>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label>\n' +
        '                <span data-translate>Trigger conditions</span>\n' +
        '                <button class="btn btn-sm btn-primary show-add-question-btn" data-ng-click="toggleAddTrigger()">\n' +
        '                  <i class="fas fa-plus"></i>\n' +
        '                  <span data-translate>Add</span>\n' +
        '                </button>\n' +
        '              </label>\n' +
        '              <div data-ng-if="showAddTrigger">\n' +
        '                <div  class="form-group">\n' +
        '                  <select name="type" class="form-control" data-ng-model="new_trigger.field" required>\n' +
        '                    <option data-ng-repeat="field in parsedFields.fields" value="{{field.id}}">{{field.label}}</option>\n' +
        '                  </select>\n' +
        '                </div>\n' +
        '                <div data-ng-if="new_trigger.field" class="form-group">\n' +
        '                  <select name="type" class="form-control" data-ng-model="new_trigger.option" required>\n' +
        '                    <option data-ng-repeat="option in parsedFields.fields_by_id[new_trigger.field].options" value="{{option.id}}">{{option.label}}</option>\n' +
        '                  </select>\n' +
        '                </div>\n' +
        '                  <div data-ng-if="new_trigger.field" class="form-group">\n' +
        '                    <input data-ng-model="new_trigger.sufficient" type="checkbox">\n' +
        '                    <label data-translate>Sufficient</label>\n' +
        '                  </div>\n' +
        '                <div class="form-group">\n' +
        '                  <button id="add-step-btn" class="btn btn-primary" data-ng-disabled="!new_trigger.field || !new_trigger.option" data-ng-click="addTrigger()">\n' +
        '                    <i class="fas fa-plus"></i>\n' +
        '                    <span data-translate>Add</span>\n' +
        '                  </button>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div data-ng-repeat="trigger in field.triggered_by_options" class="nested">\n' +
        '                <button class="btn btn-sm btn-danger" data-ng-click="delTrigger(trigger)">\n' +
        '                  <i class="fas fa-times"></i>\n' +
        '                </button>\n' +
        "                <span>{{parsedFields.fields_by_id[trigger.field].label}}</span>: <span>{{parsedFields.options_by_id[trigger.option].label}}</span> <span data-ng-if='trigger.sufficient'>(<span data-translate>Sufficient</span>)</span>\n" +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group" data-ng-if="showOptions(field)">\n' +
        '              <label>\n' +
        '                <span data-translate>Options</span>\n' +
        '                <button class="btn btn-sm btn-primary show-add-question-btn" data-ng-click="addOption()">\n' +
        '                  <i class="fas fa-plus"></i>\n' +
        '                  <span data-translate>Add</span>\n' +
        '                </button>\n' +
        '              </label>\n' +
        '              <div class="col-md-12">\n' +
        '                <div class="fieldOption" data-ng-repeat="option in field.options">\n' +
        '                  <div class="row">\n' +
        '                    <div class="col-md-1">\n' +
        '                      <div class="badge badge-secondary">{{$index + 1}}</div>\n' +
        '                    </div>\n' +
        '                    <div class="col-md-6">\n' +
        '                      <input class="form-control" data-ng-model="option.label" data-ng-attr-placeholder="{{\'Label\' | translate }}" type="text" data-ng-disabled="!field.editable" required />\n' +
        '                    </div>\n' +
        '                    <div class="col-md-5">\n' +
        '                      <button class="btn btn-sm btn-danger" data-ng-click="delOption(option)">\n' +
        '                        <i class="fas fa-times"></i>\n' +
        '                      </button>\n' +
        '                      <button data-ng-disabled="$first" class="btn btn-sm btn-primary" data-ng-click="moveOptionUp($index);" data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                        <i class="fas fa-chevron-up"></i>\n' +
        '                      </button>\n' +
        '                      <button data-ng-disabled="$last" class="btn btn-sm btn-primary" data-ng-click="moveOptionDown($index);" data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                        <i class="fas fa-chevron-down"></i>\n' +
        '                      </button>\n' +
        '                      <span>\n' +
        '                        <button class="btn btn-sm" data-ng-class="option.hint1 || option.hint2 ? \'btn-primary\' : \'btn-outline-secondary\'" data-ng-click="addOptionHintDialog(option)" data-uib-tooltip="{{\'Hint\' | translate}}">\n' +
        '                          <i class="fas fa-question-circle"></i>\n' +
        '                        </button>\n' +
        '                      </span>\n' +
        '                      <span>\n' +
        '                        <button class="btn btn-sm" data-ng-class="option.block_submission ? \'btn-danger\' : \'btn-outline-secondary\'" data-ng-click="flipBlockSubmission(option)" data-uib-tooltip="{{\'Block the submission\' | translate}}">\n' +
        '                          <i class="fas fa-ban"></i>\n' +
        '                        </button>\n' +
        '                      </span>\n' +
        '                      <span>\n' +
        '                        <button class="btn btn-sm" data-ng-class="option.trigger_receiver.length ? \'btn-primary\' : \'btn-outline-secondary\'" data-ng-click="triggerReceiverDialog(option)" data-uib-tooltip="{{\'Recipients\' | translate}}">\n' +
        '                          <i class="fas fa-user"></i>\n' +
        '                        </button>\n' +
        '                      </span>\n' +
        '                      <span data-ng-if="resources.node.enable_scoring_system">\n' +
        '                        <button class="btn btn-sm" data-ng-class="option.score_type !== \'none\' ? \'btn-primary\' : \'btn-outline-secondary\'" data-ng-click="assignScorePointsDialog(option)" data-uib-tooltip="{{\'Assign score points\' | translate}}">\n' +
        '                          <i class="fas fa-bolt"></i>\n' +
        '                          <span data-ng-if="option.score_type !== \'none\'">\n' +
        '                            <span> {{option.score_points}} </span>\n' +
        '                            <span data-ng-switch="option.score_type">\n' +
        '                              <span data-ng-switch-when="addition"> (<span data-translate>Addition</span>)</span>\n' +
        '                              <span data-ng-switch-when="multiplier"> (<span data-translate>Multiplier</span>)</span>\n' +
        '                            </span>\n' +
        '                          </span>\n' +
        '                        </button>\n' +
        '                      </span>\n' +
        '                    </div>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div data-ng-if="field.editable && field.instance !== \'reference\' && field.type === \'fieldgroup\'" class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group">\n' +
        '              <div>\n' +
        '                <span data-translate>Questions</span>\n' +
        '                <button class="btn btn-sm btn-primary show-add-question-btn" data-ng-click="toggleAddQuestion()">\n' +
        '                  <i class="fas fa-plus"></i>\n' +
        '                  <span data-translate>Add new question</span>\n' +
        '                </button>\n' +
        '                <button class="btn btn-sm btn-primary show-add-question-from-template-btn" data-ng-click="toggleAddQuestionFromTemplate()" data-ng-if="resources.fieldtemplates.length">\n' +
        '                  <i class="fas fa-plus"></i>\n' +
        '                  <span data-translate>Add question from template</span>\n' +
        '                </button>\n' +
        '              </div>\n' +
        '              <div class="row" data-ng-if="field.editable && field.type === \'fieldgroup\'">\n' +
        '                <div class="col-md-12" data-ng-if="showAddQuestion">\n' +
        '                  <div data-ng-include="\'views/admin/questionnaires/add_field.html\'"></div>\n' +
        '                </div>\n' +
        '                <div class="col-md-12" data-ng-if="showAddQuestionFromTemplate">\n' +
        '                  <div data-ng-include="\'views/admin/questionnaires/add_field_from_template.html\'"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div class="configuredFields">\n' +
        "                <div data-ng-repeat=\"field in children | orderBy:['y', 'x']\">\n" +
        '                  <div data-ng-include="\'views/admin/questionnaires/fields.html\'"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="form-group" data-ng-if="field.instance === \'template\'">UUID: {{field.id}}</div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/main.html',
      '<div class="configSection row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div>\n' +
        '      <span data-translate>Questionnaires</span>\n' +
        '      <button class="btn btn-sm btn-primary show-add-questionnaire-btn" data-ng-click="toggleAddQuestionnaire()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '      <span class="custom-file">\n' +
        '        <label file-input="importQuestionnaire(file)" file-input-label="Import" class="file-upload btn btn-sm btn-outline-secondary"></label>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '    <div class="configSection row" data-ng-controller="AdminQuestionnaireAddCtrl" data-ng-if="showAddQuestionnaire">\n' +
        '      <form id="newQuestionnaire" class="addQuestionnaire col-md-6" novalidate>\n' +
        '        <div class="form-group">\n' +
        '          <label>\n' +
        '            <span data-translate>Name</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '        <div>\n' +
        '          <input name="name" class="form-control" data-ng-model="new_questionnaire.name" type="text" data-ng-class="{\'is-invalid\': newQuestionnaire.name.$error.required}" required />\n' +
        '        </div>\n' +
        '        </div>\n' +
        '        <div class="form-group">\n' +
        '          <button id="add-questionnaire-btn" class="btn btn-primary" data-ng-disabled="newQuestionnaire.$invalid" data-ng-click="add_questionnaire(); toggleAddQuestionnaire()" type="button">\n' +
        '            <i class="fas fa-plus"></i>\n' +
        '            <span data-translate>Add</span>\n' +
        '          </button>\n' +
        '        </div>\n' +
        '      </form>\n' +
        '    </div>\n' +
        '    <div data-ng-repeat="questionnaire in resources.questionnaires | orderBy: \'name\'">\n' +
        '      <form id="questionnaire-{{$index}}" class="configItem" name="editQuestionnaire" data-ng-controller="AdminQuestionnaireEditorCtrl" novalidate>\n' +
        '        <div class="editorHeader row" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '          <span class="col-md-7">{{questionnaire.name}}</span>\n' +
        '          <span class="col-md-5 clearfix">\n' +
        '            <span class="float-right">\n' +
        '              <button\n' +
        '                class="btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-show="questionnaire.editable && !editing"\n' +
        '                data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Edit</span>\n' +
        '              </button>\n' +
        '              <button\n' +
        '                class="btn btn-sm btn-primary"\n' +
        '                data-ng-show="editing"\n' +
        '                data-ng-click="save_questionnaire(questionnaire)">\n' +
        '                <span data-translate>Save</span>\n' +
        '              </button>\n' +
        '              <button\n' +
        '               class="btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-show="editing"\n' +
        '                data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                <span data-translate>Cancel</span>\n' +
        '              </button>\n' +
        '              <button class="downloadButton btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-click="exportQuestionnaire(questionnaire); $event.stopPropagation()">\n' +
        '                <i class="fas fa-file-export"></i>\n' +
        '                <span data-translate>Export</span>\n' +
        '              </button>\n' +
        '              <button\n' +
        '                class="btn btn-sm btn-outline-secondary"\n' +
        '                data-ng-click="duplicate_questionnaire(questionnaire)">\n' +
        '                <i class="fas fa-duplicate"></i>\n' +
        '                <span data-translate>Duplicate</span>\n' +
        '              </button>\n' +
        '              <button\n' +
        '                class="btn btn-sm btn-danger"\n' +
        '                data-ng-show="questionnaire.editable"\n' +
        '                data-ng-click="delete_questionnaire(questionnaire); $event.stopPropagation();">\n' +
        '                <span data-translate>Delete</span>\n' +
        '              </button>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '        </div>\n' +
        '        <div data-ng-if="editing">\n' +
        '          <hr />\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-6">\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Name</label>\n' +
        '                <input name="name" class="form-control" data-ng-model="questionnaire.name" type="text" required>\n' +
        '                <div class="text-danger" data-ng-show="editQuestionnaire.name.$error.required">\n' +
        '                  <span data-translate>This field is mandatory</span>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="col-md-12" data-ng-include="\'views/admin/questionnaires/steps.html\'"></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </form>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/questions.html',
      '<div data-ng-controller="AdminFieldTemplatesCtrl">\n' +
        '  <div class="configSection row" data-ng-init="fields = resources.fieldtemplates">\n' +
        '    <div class="col-md-12">\n' +
        '      <div>\n' +
        '        <span data-translate>Question templates</span>\n' +
        '        <button class="btn btn-sm btn-primary show-add-question-btn" data-ng-click="toggleAddQuestion()">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '        <span class="custom-file">\n' +
        '          <label file-input="importQuestion(file)" file-input-label="Import" class="file-upload btn btn-sm btn-outline-secondary"></label>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="configSection col-md-6" data-ng-if="showAddQuestion">\n' +
        '      <div data-ng-form="newField" class="addField" novalidate>\n' +
        '        <div data-ng-controller="AdminFieldTemplatesAddCtrl" data-ng-include="\'views/admin/questionnaires/add_field.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-12" data-ng-repeat="field in fields | filter: {editable: true} | orderBy:\'label\'">\n' +
        '      <div data-ng-include="\'views/admin/questionnaires/fields.html\'"></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/step.html',
      '            <div id="FieldsEditBox" class="form-group">\n' +
        '              <div class="row">\n' +
        '                <span class="col-md-12">\n' +
        '                  <label>\n' +
        '                    <span data-translate>Questions</span>\n' +
        '                    <button class="btn btn-sm btn-primary show-add-question-btn" data-ng-click="toggleAddQuestion()">\n' +
        '                      <i class="fas fa-plus"></i>\n' +
        '                      <span data-translate>Add new question</span>\n' +
        '                    </button>\n' +
        '                    <button class="btn btn-sm btn-primary show-add-question-from-template-btn" data-ng-click="toggleAddQuestionFromTemplate()" data-ng-if="resources.fieldtemplates.length">\n' +
        '                      <i class="fas fa-plus"></i>\n' +
        '                      <span data-translate>Add question from template</span>\n' +
        '                    </button>\n' +
        '                  </label>\n' +
        '                </span>\n' +
        '              </div>\n' +
        '              <div class="row configSection" data-ng-if="showAddQuestion">\n' +
        '                <div class="col-md-6">\n' +
        '                  <div data-ng-include="\'views/admin/questionnaires/add_field.html\'"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div class="row configSection" data-ng-if="showAddQuestionFromTemplate">\n' +
        '                <div class="col-md-6">\n' +
        '                  <div data-ng-include="\'views/admin/questionnaires/add_field_from_template.html\'"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div class="row configuredFields">\n' +
        '                <div class="col-md-12" data-ng-repeat="field in step.children | orderBy:[\'y\', \'x\']">\n' +
        '                  <div data-ng-include="\'views/admin/questionnaires/fields.html\'"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n'
    )

    $templateCache.put(
      'views/admin/questionnaires/steps.html',
      '<div id="StepsEditBox">\n' +
        '  <div class="row">\n' +
        '    <span class="col-md-8">\n' +
        '      <span data-translate>Steps</span>\n' +
        '      <button class="btn btn-sm btn-primary show-add-step-btn" data-ng-click="toggleAddStep()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div id="StepAddBox" data-ng-controller="AdminStepAddCtrl" class="row" data-ng-if="showAddStep">\n' +
        '    <div class="col-md-6">\n' +
        '      <div data-ng-form="newStep">\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Label</label>\n' +
        '              <input name="label" class="form-control" data-ng-model="new_step.label" type="text" required>\n' +
        '              <div class="text-danger" data-ng-show="newStep.label.$error.required">\n' +
        '                <span data-translate>This field is mandatory</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group clearfix">\n' +
        '              <button id="add-step-btn" class="float-left btn btn-primary" data-ng-disabled="newStep.$invalid" data-ng-click="add_step(); toggleAddStep()">\n' +
        '                <i class="fas fa-plus"></i>\n' +
        '                <span data-translate>Add</span>\n' +
        '              </button>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div data-ng-if="questionnaire.steps.length == 1" data-ng-init="step = questionnaire.steps[0]" class="col-md-12">\n' +
        '      <div data-ng-controller="AdminStepEditorCtrl" data-ng-include="\'views/admin/questionnaires/step.html\'"></div>\n' +
        '    </div>\n' +
        '    <div data-ng-if="questionnaire.steps.length > 1" data-ng-repeat="step in questionnaire.steps" class="col-md-12">\n' +
        '      <div data-ng-controller="AdminStepEditorCtrl">\n' +
        '        <div class="configItem">\n' +
        '          <div class="editorHeader row" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '            <span class="col-md-7">\n' +
        '              <span class="badge badge-primary">{{$index + 1}}</span>\n' +
        '              <span>{{step.label}}</span>\n' +
        '            </span>\n' +
        '            <span class="col-md-5 clearfix">\n' +
        '              <span class="float-right">\n' +
        '                <button data-ng-show="!$first" class="actionButton btn btn-sm btn-primary" data-ng-click="moveUp($event, $index)" data-uib-tooltip="{{\'Move up\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-up"></i>\n' +
        '                </button>\n' +
        '                <button data-ng-show="!$last" class="actionButton btn btn-sm btn-primary" data-ng-click="moveDown($event, $index)" data-uib-tooltip="{{\'Move down\' | translate}}">\n' +
        '                  <i class="fas fa-chevron-down"></i>\n' +
        '                </button>\n' +
        '                <button\n' +
        '                  class="btn btn-sm btn-outline-secondary"\n' +
        '                  data-ng-show="!editing"\n' +
        '                  data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Edit</span>\n' +
        '                </button>\n' +
        '                <button\n' +
        '                  class="btn btn-sm btn-primary"\n' +
        '                  data-ng-show="editing"\n' +
        '                  data-ng-click="save_step(step);">\n' +
        '                  <span data-translate>Save</span>\n' +
        '                </button>\n' +
        '                <button\n' +
        '                  class="btn btn-sm btn-outline-secondary"\n' +
        '                  data-ng-show="editing"\n' +
        '                  data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '                  <span data-translate>Cancel</span>\n' +
        '                </button>\n' +
        '                <button\n' +
        '                  class="btn btn-sm btn-danger"\n' +
        '                  data-ng-click="delStep(step); $event.stopPropagation();">\n' +
        '                  <span data-translate>Delete</span>\n' +
        '                </button>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </div>\n' +
        '          <div data-ng-form="editStep" data-ng-if="editing">\n' +
        '            <hr />\n' +
        '            <div class="row">\n' +
        '              <div class="form-group col-md-6">\n' +
        '                <label data-translate>Label</label>\n' +
        '                <input class="form-control" data-ng-model="step.label" type="text" required />\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="row">\n' +
        '              <div class="form-group col-md-6">\n' +
        '                <label data-translate>Description</label>\n' +
        '                <div>\n' +
        '                  <textarea class="form-control" data-ng-model="step.description"></textarea>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="row">\n' +
        '              <div class="form-group col-md-12" data-ng-if="resources.node.enable_scoring_system">\n' +
        '                <label data-translate>Triggered by score:</label>\n' +
        '                <select class="form-control" data-ng-model="step.triggered_by_score" convert-to-number>\n' +
        '                  <option value="0" data-translate>Low</option>\n' +
        '                  <option value="1" data-translate>Medium</option>\n' +
        '                  <option value="2" data-translate>High</option>\n' +
        '                </select>\n' +
        '              </div>\n' +
        '              <div class="form-group col-md-12">\n' +
        '                <label>\n' +
        '                  <span data-translate>Trigger conditions</span>\n' +
        '                  <button class="btn btn-sm btn-primary show-add-trigger-btn" data-ng-click="toggleAddTrigger()">\n' +
        '                    <i class="fas fa-plus"></i>\n' +
        '                    <span data-translate>Add</span>\n' +
        '                  </button>\n' +
        '                </label>\n' +
        '                <div data-ng-if="showAddTrigger" class="col-md-12">\n' +
        '                  <div class="form-group">\n' +
        '                    <select name="type" class="form-control" data-ng-model="new_trigger.field" required>\n' +
        '                      <option data-ng-repeat="field in parsedFields.fields" value="{{field.id}}">{{field.label}}</option>\n' +
        '                    </select>\n' +
        '                  </div>\n' +
        '                  <div data-ng-if="new_trigger.field" class="form-group">\n' +
        '                    <select name="type" class="form-control" data-ng-model="new_trigger.option" required>\n' +
        '                      <option data-ng-repeat="option in parsedFields.fields_by_id[new_trigger.field].options" value="{{option.id}}">{{option.label}}</option>\n' +
        '                    </select>\n' +
        '                  </div>\n' +
        '                  <div data-ng-if="new_trigger.field" class="form-group">\n' +
        '                    <input data-ng-model="new_trigger.sufficient" type="checkbox">\n' +
        '                    <label data-translate>Sufficient</label>\n' +
        '                  </div>\n' +
        '                  <div class="form-group">\n' +
        '                    <button id="add-step-btn" class="btn btn-primary" data-ng-disabled="!new_trigger.field || !new_trigger.option" data-ng-click="addTrigger()">\n' +
        '                      <i class="fas fa-plus"></i>\n' +
        '                      <span data-translate>Add</span>\n' +
        '                    </button>\n' +
        '                  </div>\n' +
        '	        </div>\n' +
        '                <div data-ng-repeat="trigger in step.triggered_by_options" class="nested">\n' +
        '                  <button class="btn btn-sm btn-danger" data-ng-click="delTrigger(trigger)">\n' +
        '                    <i class="fas fa-times"></i>\n' +
        '                  </button>\n' +
        "		  <span>{{parsedFields.fields_by_id[trigger.field].label}}</span>: <span>{{parsedFields.options_by_id[trigger.option].label}}</span> <span data-ng-if='trigger.sufficient'>(<span data-translate>Sufficient</span>)</span>\n" +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div data-ng-include="\'views/admin/questionnaires/step.html\'"></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/sidebar.html',
      '<a href="#/admin/home" data-ng-class="{\'active\': location.path() === \'/admin/home\'}" data-translate>Home</a>\n' +
        '<a href="#/admin/content" data-ng-class="{\'active\': location.path() === \'/admin/content\'}" data-translate>Site settings</a>\n' +
        '<a href="#/admin/users" data-ng-class="{\'active\': location.path() === \'/admin/users\'}" span data-translate>Users</a>\n' +
        '<a href="#/admin/questionnaires" data-ng-class="{\'active\': location.path() === \'/admin/questionnaires\'}" data-translate>Questionnaires</a>\n' +
        '<a href="#/admin/contexts" data-ng-class="{\'active\': location.path() === \'/admin/contexts\'}" data-translate>Contexts</a>\n' +
        '<a href="#/admin/casemanagement" data-ng-class="{\'active\': location.path() === \'/admin/casemanagement\'}" data-translate>Case management</a>\n' +
        '<a href="#/admin/notifications" data-ng-class="{\'active\': location.path() === \'/admin/notifications\'}" data-translate>Notification settings</a>\n' +
        '<a href="#/admin/network" data-ng-class="{\'active\': location.path() === \'/admin/network\'}" data-translate>Network settings</a>\n' +
        '<a href="#/admin/sites" data-ng-class="{\'active\': location.path() === \'/admin/sites\'}" data-ng-if="resources.node.root_tenant && resources.node.multisite" data-translate>Sites management</a>\n' +
        '<a href="#/admin/advanced" data-ng-class="{\'active\': location.path() === \'/admin/advanced\'}" data-translate>Advanced settings</a>\n' +
        '<a href="#/admin/auditlog" data-ng-class="{\'active\': location.path() === \'/admin/auditlog\'}" data-translate>Audit log</a>\n'
    )

    $templateCache.put(
      'views/admin/sites.html',
      '<div data-ng-controller="TenantCtrl">\n' +
        '  <uib-tabset>\n' +
        '    <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '      <form name="tenantsForm" class="tab-content" data-ng-include="tab.template" novalidate></form>\n' +
        '    </uib-tab>\n' +
        '  </uib-tabset>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/sites/tab1.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div>\n' +
        '      <span data-translate>Sites</span>\n' +
        '      <button class="btn btn-sm btn-primary show-add-tenant-btn" data-ng-click="toggleAddTenant()">\n' +
        '        <i class="fas fa-plus"></i>\n' +
        '        <span data-translate>Add</span>\n' +
        '      </button>\n' +
        '      <span id="SearchFilter" class="form-group float-right">\n' +
        '        <input type="text" class="form-control" data-ng-attr-placeholder="{{\'Search\' | translate}}" data-ng-model="search">\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div data-ng-if="showAddTenant" class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <form name="newTenantForm" class="addTenant" novalidate>\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <span data-translate>Name</span>\n' +
        '          <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '        <div>\n' +
        '          <input name="name" class="form-control" data-ng-model="newTenant.name" maxlength="120" type="text" data-ng-class="{\'is-invalid\': newTenantForm.name.$error.required}" required />\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Mode:</label>\n' +
        '        <select name="type" class="form-control" data-ng-model="newTenant.mode" required>\n' +
        '          <option value="default">DEFAULT</option>\n' +
        '          <option value="whistleblowing.it">WHISTLEBLOWINGPA</option>\n' +
        '          <option value="eat">EAT</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '      <div class="form-group clearfix">\n' +
        '        <button id="add-btn" class="float-left btn btn-primary" data-ng-disabled="newTenantForm.$invalid" data-ng-click="addTenant(); toggleAddTenant()" type="button">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div data-ng-repeat="tenant in resources.tenants | orderBy:\'id\' | filter:{$: search} | limitTo:itemsPerPage:(currentPage - 1) * itemsPerPage">\n' +
        '      <form data-ng-if="tenant.id != 1" id="tenant-{{$index}}" name="editTenant" data-ng-controller="TenantEditorCtrl" novalidate>\n' +
        '        <div class="configItem">\n' +
        '          <div class="editorHeader row" data-ng-click="toggleEditing($event)">\n' +
        '            <div class="col-md-6">\n' +
        '              <div>\n' +
        '                <span class="badge badge-secondary">{{tenant.id}}</span>\n' +
        '                <span>{{tenant.name}}</span>\n' +
        '              </div>\n' +
        '              <div data-ng-if="tenant.active && (tenant.onionservice || tenant.hostname || (tenant.subdomain || resources.node.rootdomain))">\n' +
        '                <a class="badge badge-primary" data-ng-if="tenant.onionservice" data-ng-href="http://{{tenant.onionservice}}" rel="noreferrer" target="_blank" isolate-click>{{tenant.onionservice}}</a>\n' +
        '                <span data-ng-if="tenant.subdomain">\n' +
        '                  <a data-ng-if="resources.node.rootdomain" class="badge badge-primary" data-ng-href="https://{{tenant.subdomain}}.{{resources.node.rootdomain}}" target="_blank" isolate-click>{{tenant.subdomain}}.{{resources.node.rootdomain}}</a>\n' +
        '                  <a data-ng-if="resources.node.onionservice && tenant.subdomain" class="badge badge-primary" data-ng-href="http://{{tenant.subdomain}}.{{resources.node.onionservice}}" rel="noreferrer" target="_blank" isolate-click>{{tenant.subdomain}}.{{resources.node.onionservice}}</a>\n' +
        '                </span>\n' +
        '                <a class="badge badge-primary" data-ng-if="tenant.hostname" data-ng-href="https://{{tenant.hostname}}" rel="noreferrer" target="_blank" isolate-click>{{tenant.hostname}}</a>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="col-md-6 clearfix">\n' +
        '                <span class="float-right">\n' +
        '                  <span data-ng-show="tenant.active" class="btn btn-sm btn-primary"\n' +
        '                        data-ng-click="toggleActivation($event)"\n' +
        '                        data-translate>Enabled</span>\n' +
        '                  <span data-ng-hide="tenant.active" class="btn btn-sm btn-danger"\n' +
        '                        data-ng-click="toggleActivation($event)"\n' +
        '                        data-translate>Disabled</span>\n' +
        '                  <span data-ng-show="!resources.node.tenant.active" class="btn btn-sm btn-primary"\n' +
        '                        data-ng-click="configureTenant($event, tenant.id)"\n' +
        '                        data-translate>Configure</span>\n' +
        '                  <button class="btn btn-sm btn-outline-secondary"\n' +
        '                          data-ng-show="!editing"\n' +
        '                          data-ng-click="toggleEditing($event)">\n' +
        '                    <span data-translate>Edit</span>\n' +
        '                  </button>\n' +
        '                  <button class="btn btn-sm btn-primary"\n' +
        '                          data-ng-show="editing"\n' +
        '                          data-ng-disabled="editContext.$invalid"\n' +
        '                          data-ng-click="saveTenant()">\n' +
        '                    <span data-translate>Save</span>\n' +
        '                  </button>\n' +
        '                  <button class="btn btn-sm btn-danger"\n' +
        '                          data-ng-show="isRemovableTenant()"\n' +
        '                          data-ng-click="deleteTenant($event)">\n' +
        '                    <span data-translate>Delete</span>\n' +
        '                  </button>\n' +
        '                </span>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div data-ng-if="editing">\n' +
        '            <hr/>\n' +
        '            <div class="row">\n' +
        '              <div class="col-md-6">\n' +
        '                <div class="form-group">\n' +
        '                  <label data-translate>Name</label>\n' +
        '                  <input name="name" class="form-control" data-ng-model="tenant.name" type="text" required>\n' +
        '                </div>\n' +
        '                <div class="form-group">\n' +
        '                  <label data-translate>Subdomain</label>\n' +
        '                  <input name="subdomain" class="form-control" data-ng-model="tenant.subdomain" type="text" subdomainvalidator required>\n' +
        '                </div>\n' +
        '                <div class="form-group">\n' +
        '                  <label data-translate>Mode:</label>\n' +
        '                  <select name="type" class="form-control" data-ng-model="tenant.mode" required>\n' +
        '                    <option value="default">DEFAULT</option>\n' +
        '                    <option value="demo">DEMO</option>\n' +
        '                    <option value="whistleblowing.it">WHISTLEBLOWINGPA</option>\n' +
        '                    <option value="eat">EAT</option>\n' +
        '                  </select>\n' +
        '                </div>\n' +
        '                <div class="form-group">\n' +
        "                  <label><span data-translate>Creation date:</span> {{tenant.creation_date | date:'dd-MM-yyyy'}}</label>\n" +
        '                </div>\n' +
        '                <div class="form-group" data-ng-if="tenant.signup" data-ng-include="\'views/partials/signup.html\'"></div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </form>\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="text-center" data-ng-show="(resources.tenants | filter:{\'name\': search}).length > 20">\n' +
        '      <ul uib-pagination\n' +
        '          total-items="(resources.tenants | filter:{\'name\': search}).length"\n' +
        '          first-text="<<"\n' +
        '          last-text=">>"\n' +
        '          previous-text="<"\n' +
        '          next-text=">"\n' +
        '          items-per-page="itemsPerPage"\n' +
        '          data-ng-model="currentPage"\n' +
        '          max-size="10"\n' +
        '          class="pagination-sm"\n' +
        '          boundary-links="true"\n' +
        '          force-ellipses="true"></ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/sites/tab2.html',
      '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Mode:</label>\n' +
        '      <select name="type" class="form-control" data-ng-model="resources.node.mode" required>\n' +
        '        <option value="default">DEFAULT</option>\n' +
        '        <option value="demo">DEMO</option>\n' +
        '        <option value="whistleblowing.it">WHISTLEBLOWINGPA</option>\n' +
        '        <option value="eat">EAT</option>\n' +
        '      </select>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Root domain used for secondary sites</label>\n' +
        '      <div>\n' +
        '        <input class="form-control" data-ng-model="resources.node.rootdomain" type="text" />\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <label>\n' +
        '        <input data-ng-model="resources.node.adminonly" type="checkbox" />\n' +
        '        <span data-translate>Use the first site for administrative purposes only</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '    <div data-ng-if="!resources.node.adminonly">\n' +
        '      <div class="form-group">\n' +
        '        <label>\n' +
        '          <input data-ng-model="resources.node.enable_signup" type="checkbox" />\n' +
        '          <span data-translate>Allow users to sign up</span>\n' +
        '        </label>\n' +
        '      </div>\n' +
        '      <div data-ng-if="resources.node.enable_signup">\n' +
        '        <div class="form-group">\n' +
        '          <label>\n' +
        '            <input data-ng-model="resources.node.signup_tos1_enable" type="checkbox" />\n' +
        '            <span data-translate>Enable terms of service</span> <span>#1</span>\n' +
        '          </label>\n' +
        '          <div data-ng-if="resources.node.signup_tos1_enable" class="nested">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Title</label>\n' +
        '              <input data-ng-model="resources.node.signup_tos1_title" type="text" class="form-control"/>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Text</label>\n' +
        '              <div>\n' +
        '                <textarea class="form-control" data-ng-model="resources.node.signup_tos1_text" rows="4"></textarea>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Checkbox label</label>\n' +
        '              <input data-ng-model="resources.node.signup_tos1_checkbox_label" type="text" class="form-control"/>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="form-group">\n' +
        '          <label>\n' +
        '            <input data-ng-model="resources.node.signup_tos2_enable" type="checkbox" />\n' +
        '            <span data-translate>Enable terms of service</span> <span>#2</span>\n' +
        '          </label>\n' +
        '          <div data-ng-if="resources.node.signup_tos2_enable" class="nested">\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Title</label>\n' +
        '              <input data-ng-model="resources.node.signup_tos2_title" type="text" class="form-control"/>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Text</label>\n' +
        '              <div>\n' +
        '                <textarea class="form-control" data-ng-model="resources.node.signup_tos2_text" rows="4"></textarea>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Checkbox label</label>\n' +
        '              <input data-ng-model="resources.node.signup_tos2_checkbox_label" type="text" class="form-control"/>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <button class="btn btn-primary" data-ng-click="updateNode()">\n' +
        '      <i class="fas fa-check"></i>\n' +
        '      <span data-translate>Save</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/admin/users.html',
      '<div class="configSection" data-ng-controller="AdminUsersCtrl">\n' +
        '  <div>\n' +
        '    <span data-translate>Users</span>\n' +
        '    <button class="btn btn-sm btn-primary show-add-user-btn" data-ng-click="toggleAddUser()">\n' +
        '      <i class="fas fa-plus"></i>\n' +
        '      <span data-translate>Add</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '  <div class="row" data-ng-controller="AdminUserAddCtrl" data-ng-show="showAddUser">\n' +
        '    <div data-ng-form="newUser" class="addUser col-md-6">\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Role</label>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        <div>\n' +
        '          <select name="role" class="form-control" data-ng-model="new_user.role" required>\n' +
        '            <option value="admin" data-translate>Admin</option>\n' +
        '            <option value="receiver" data-translate>Recipient</option>\n' +
        '            <option data-ng-if="resources.node.enable_custodian" value="custodian" data-translate>Custodian</option>\n' +
        '          </select>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group" data-ng-if="new_user.role !== \'receiver\' || !resources.node.simplified_login">\n' +
        '        <label data-translate>Username</label>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        <div>\n' +
        '          <input class="form-control" name="username" data-ng-model="new_user.username" type="text" required/>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Name</label>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        <div>\n' +
        '          <input class="form-control" name="name" data-ng-model="new_user.name" type="text" required/>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Email address</label>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        <div>\n' +
        '          <input class="form-control" name="email" data-ng-model="new_user.email" data-ng-pattern="CONSTANTS.email_regexp" type="email" data-ng-class="{\'is-invalid\': newUser.email.$error.pattern}" required/>\n' +
        '        </div>\n' +
        '        <div class="text-danger" data-ng-show="newUser.email.$error.pattern" data-translate>Invalid email address</div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <div class="form-check">\n' +
        '          <input class="form-check-input inputelem" type="checkbox" data-ng-model="new_user.send_account_activation_link">\n' +
        '          <span class="form-check-label" data-translate>Send an account activation link to the user.</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <button id="add-btn" class="btn btn-primary" data-ng-disabled="newUser.$invalid"\n' +
        '                data-ng-click="add_user(); toggleAddUser()" type="submit">\n' +
        '          <i class="fas fa-plus"></i>\n' +
        '          <span data-translate>Add</span>\n' +
        '        </button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="userList" data-ng-repeat="user in resources.users | orderBy:\'name\'">\n' +
        '  <form id="user-{{$index}}" name="editUser" data-ng-controller="AdminUserEditorCtrl" novalidate>\n' +
        '    <div class="configItem">\n' +
        '      <div class="editorHeader row" data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '        <span class="col-md-7">\n' +
        '          <span>{{user.name}}</span>\n' +
        '          <span class="badge badge-primary">\n' +
        '            <span data-ng-switch="user.role">\n' +
        '              <span data-ng-switch-when="admin" data-translate>Admin</span>\n' +
        '              <span data-ng-switch-when="receiver" data-translate>Recipient</span>\n' +
        '              <span data-ng-switch-when="custodian" data-translate>Custodian</span>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '          <span class="badge badge-secondary" data-ng-if="user.state === \'disabled\'" data-translate>Disabled</span>\n' +
        '	  <span class="badge badge-default" data-ng-if="resources.node.encryption && !user.encryption" data-uib-tooltip="{{\'This user has not performed the first login yet.\' | translate}}">\n' +
        '	    <i class="fas fa-exclamation-circle"></i>\n' +
        '	  </span>\n' +
        '        </span>\n' +
        '        <span class="col-md-5 clearfix">\n' +
        '          <span class="float-right">\n' +
        '            <button class="btn btn-sm btn-outline-secondary"\n' +
        '              data-ng-show="!editing"\n' +
        '              data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '              <span data-translate>Edit</span>\n' +
        '            </button>\n' +
        '            <button class="btn btn-sm btn-primary"\n' +
        '              data-ng-show="editing"\n' +
        '              data-ng-disabled="editUser.$invalid"\n' +
        '              data-ng-click="saveUser()">\n' +
        '              <span data-translate>Save</span>\n' +
        '            </button>\n' +
        '            <button class="btn btn-sm btn-outline-secondary"\n' +
        '              data-ng-show="editing"\n' +
        '              data-ng-click="toggleEditing(); $event.stopPropagation();">\n' +
        '              <span data-translate>Cancel</span>\n' +
        '            </button>\n' +
        '            <button class="btn btn-sm btn-danger"\n' +
        '              data-ng-if="Authentication.session.user_id !== user.id"\n' +
        '              data-ng-click="deleteUser(); $event.stopPropagation();">\n' +
        '              <span data-translate>Delete</span>\n' +
        '            </button>\n' +
        '          </span>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div class="editor" data-ng-if="editing">\n' +
        '        <hr/>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-6">\n' +
        '            <div class="form-group">\n' +
        '              <div data-image-upload data-image-upload-model="user" data-image-upload-model-attr="picture" data-image-upload-id="{{user.id}}"></div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group" data-ng-if="user.role !== \'receiver\' || !resources.node.simplified_login">\n' +
        '              <label data-translate>Username</label>\n' +
        '              <input class="form-control" name="username" data-ng-model="user.username" type="text" required/>\n' +
        '              <div class="text-danger" data-ng-show="editUser.name.$error.required" data-translate>This field is mandatory</div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Name</label>\n' +
        '              <input class="form-control" name="name" data-ng-model="user.name" type="text" required/>\n' +
        '              <div class="text-danger" data-ng-show="editUser.name.$error.required" data-translate>This field is mandatory</div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Public name</label>\n' +
        '              <input class="form-control" name="public_name" data-ng-model="user.public_name" type="text" required/>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Email address</label>\n' +
        '              <input class="form-control" name="email" data-ng-model="user.mail_address" type="email"\n' +
        '                     data-ng-pattern="CONSTANTS.email_regexp" required/>\n' +
        '              <div class="text-danger" data-ng-show="editUser.email.$error.required" data-translate>This field is mandatory</div>\n' +
        '              <div class="text-danger" data-ng-show="editUser.email.$error.pattern" data-translate>Invalid email address</div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Password</label>\n' +
        '              <div>\n' +
        '                <span class="btn btn-outline-secondary" data-ng-click="resetUserPassword()">\n' +
        '                  <i class="fas fa-sync"></i>\n' +
        '                  <span data-ng-if="user.last_login === \'1970-01-01T00:00:00Z\'" data-translate>Send activation link</span>\n' +
        '                  <span data-ng-if="user.last_login !== \'1970-01-01T00:00:00Z\'" data-translate>Send reset link</span>\n' +
        '                </span>\n' +
        '                <span class="btn btn-outline-secondary"\n' +
        '                      data-ng-if="!user.encryption || resources.preferences.escrow"\n' +
        '                      data-ng-init="user.newpassword = false"\n' +
        '                      data-ng-click="user.newpassword=!user.newpassword">\n' +
        '                  <i class="fas fa-edit"></i>\n' +
        '                  <span data-translate>Set password</span>\n' +
        '                </span>\n' +
        '                <span class="btn btn-danger" data-ng-if="user.two_factor" data-ng-click="disable2FA()">\n' +
        '                  <i class="fas fa-ban"></i>\n' +
        '                  <span data-translate>Disable two factor authentication</span>\n' +
        '                </span>\n' +
        '              </div>\n' +
        '              <div class="form-group" data-ng-if="user.newpassword" data-ng-form="userPasswordForm">\n' +
        '                <input class="d-none" type="password" name="disable-autocomplete-hack" />\n' +
        '                <input name="password" class="form-control" data-ng-model="user.password" type="password"\n' +
        '                       data-ng-class="{\'is-invalid\': user.password && (!editUser.password.$error.passwordStrengthValidator && !userPasswordForm.password.$valid)}"\n' +
        '                       autocomplete="off" data-password-strength-validator/>\n' +
        '                <password-meter data-ng-show="passwordStrengthScore" value="passwordStrengthScore"></password-meter>\n' +
        '                <div class="text-danger" data-ng-show="passwordStrengthScore && passwordStrengthScore < 2">\n' +
        '                  <p data-translate>The chosen password is too weak. A valid password should be at least 10 characters long and contain a variety of characters including at least a lowercase character, a capital character, a number and a special character.</p>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <input data-ng-model="user.password_change_needed" type="checkbox" />\n' +
        '              <label data-translate>Force password change</label>\n' +
        '              <div data-ng-show="user.password_change_needed">\n' +
        '                <span class="badge badge-primary" data-translate>Enabled</span>\n' +
        '                <span data-translate>The user will be forced to change its password on next login.</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Description</label>\n' +
        '              <textarea name="description" class="form-control" data-ng-model="user.description"></textarea>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Status</label>\n' +
        '              <select class="form-control" data-ng-model="user.state">\n' +
        '                <option value="disabled" data-translate>Disabled</option>\n' +
        '                <option value="enabled" data-translate>Enabled</option>\n' +
        '              </select>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <label data-translate>Language</label>\n' +
        '              <select class="form-control" data-ng-model="user.language"\n' +
        '                      data-ng-options="item.code as item.name for item in languages_enabled_selector"></select>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="(user.role === \'admin\' && !resources.node.disable_admin_notification) ||\n' +
        "                                                (user.role === 'receiver' && !resources.node.disable_receiver_notification) ||\n" +
        "                                                (user.role === 'custodian' && !resources.node.disable_custodian_notification)\">\n" +
        '              <input data-ng-model="user.notification" type="checkbox">\n' +
        '              <label data-translate>Enable email notifications</label>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '	</div>\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group" data-ng-show="user.pgp_key_fingerprint">\n' +
        '              <div class="form-group">\n' +
        '                <label data-translate>Details of the PGP key:</label>\n' +
        '                <p><span data-translate>Fingerprint</span>: <span>{{user.pgp_key_fingerprint}}</span></p>\n' +
        '                <p><span data-translate>Expiration date</span>: {{user.pgp_key_expiration | date:"dd/MM/yyyy" }}</p>\n' +
        '              </div>\n' +
        '              <div class="form-group">\n' +
        '                <input data-ng-model="user.pgp_key_remove" type="checkbox"/>\n' +
        '                <label data-translate>Remove</label>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-show="user.pgp_key_fingerprint === \'\'">\n' +
        '              <div class="position-relative">\n' +
        '                <label data-translate>Set up encryption by providing a PGP public key</label>\n' +
        '                <textarea class="form-control" name="pgp_key"\n' +
        '                          data-ng-model="user.pgp_key_public"\n' +
        '                          data-ng-class="{\'is-invalid\': !editUser.pgp_key.$valid}"\n' +
        '                          data-pgp-pubkey-validator="canBeEmpty"></textarea>\n' +
        '                <label file-input="loadPublicKeyFile(file)" file-input-label="Select"\n' +
        '                       class="btn btn-sm btn-outline-secondary textarea-btn"></label>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row" data-ng-if="user.role === \'admin\'">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group" data-ng-if="resources.node.escrow && user.encryption && resources.preferences.escrow">\n' +
        '              <input data-ng-model="user.escrow" type="checkbox" data-ng-change="Utils.applyConfig(\'toggle_escrow\', user.id)">\n' +
        '              <label data-translate>Give this admin ability to change user passwords</label>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row" data-ng-if="user.role === \'receiver\'">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-group">\n' +
        '              <input data-ng-model="user.forcefully_selected" type="checkbox">\n' +
        '              <label data-translate>Forcefully selected</label>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <input data-ng-model="user.can_delete_submission" type="checkbox"/>\n' +
        '              <label data-translate>Allow the recipient to delete reports</label>\n' +
        '            </div>\n' +
        '            <div class="form-group" data-ng-if="!resources.node.can_postpone_expiration">\n' +
        '              <input data-ng-model="user.can_postpone_expiration" type="checkbox"/>\n' +
        '              <label data-translate>Allow the recipient to postpone the report expiration date</label>\n' +
        '            </div>\n' +
        '            <div class="form-group">\n' +
        '              <input data-ng-model="user.can_grant_access_to_reports" type="checkbox"/>\n' +
        '              <label data-translate>Give this recipient ability to grant user access to reports</label>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row" data-ng-if="user.role !== \'admin\'">\n' +
        '          <div class="col-md-12">\n' +
        '            <label data-translate>Give the user administrative access to the following features:</label>\n' +
        '            <div class="form-group">\n' +
        '              <input data-ng-model="user.can_edit_general_settings" type="checkbox"/>\n' +
        '              <span data-translate>Site settings</span>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </form>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/custodian/content.html',
      '<form name="contentForm" data-ng-controller="AdminGeneralSettingsCtrl" data-ng-include="tabs[0].template" novalidate></form>'
    )

    $templateCache.put(
      'views/custodian/home.html',
      '<div id="CustodianHomepage" data-ng-include="\'views/partials/user_home.html\'"></div>\n'
    )

    $templateCache.put(
      'views/custodian/identity_access_requests.html',
      '<div data-ng-controller="CustodianIdentityAccessRequestsCtrl">\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 clearfix">\n' +
        '        <span class="float-left">\n' +
        '        <a id="link-tiplist"\n' +
        '           href="#/custodian/home"\n' +
        '           data-uib-tooltip="{{\'Home\' | translate}}"\n' +
        '           class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-arrow-left"></i>\n' +
        '        </a>\n' +
        '\n' +
        '        <span id="link-reload"\n' +
        '              data-ng-click="reload()"\n' +
        '              data-uib-tooltip="{{\'Refresh\' | translate}}"\n' +
        '              class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-sync"></i>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row mt-2">\n' +
        '    <div class="col-md-12">\n' +
        '      <table class="table table-condensed table-striped">\n' +
        '        <thead>\n' +
        '        <tr>\n' +
        '          <th data-translate>Request date</th>\n' +
        '          <th data-translate>ID</th>\n' +
        '          <th data-translate>Report date</th>\n' +
        '          <th data-translate>User</th>\n' +
        '          <th data-translate>Request motivation</th>\n' +
        '          <th data-translate>Authorization</th>\n' +
        '        </tr>\n' +
        '        </thead>\n' +
        '        <tbody>\n' +
        '        <tr id="iar-{{$index}}" data-ng-repeat="iar in iars | orderBy:request_date:true">\n' +
        "          <td>{{iar.request_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '          <td>{{iar.submission_progressive}}</td>\n' +
        "          <td>{{iar.submission_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "          <td>{{iar.request_user_name | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        "          <td>{{iar.request_motivation | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '          <td>\n' +
        '            <span data-ng-switch="iar.reply">\n' +
        '              <span data-ng-switch-when="authorized" data-translate>Authorized</span>\n' +
        '              <span data-ng-switch-when="denied" data-translate>Denied</span>\n' +
        '              <span data-ng-switch-when="pending">\n' +
        '                <button class="btn btn-sm btn-primary" data-ng-click="authorize_identity_access_request(iar.id)"\n' +
        '                        data-translate>Authorize</button>&nbsp;\n' +
        '                <button class="btn btn-sm btn-danger" data-ng-click="file_denied_identity_access_reply(iar.id)"\n' +
        '                        data-translate>Deny</button>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </td>\n' +
        '        </tr>\n' +
        '        </tbody>\n' +
        '      </table>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/custodian/sidebar.html',
      '<a href="#/custodian/home" data-ng-class="{\'active\': location.path() === \'/custodian/home\'}" data-translate>Home</a>\n' +
        '<a href="#/custodian/requests" data-ng-class="{\'active\': location.path() === \'/custodian/requests\'}" data-translate>Requests</a>\n'
    )

    $templateCache.put(
      'views/email_validation_failure.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span data-translate>The validation link is either incorrect or has expired.</span>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/email_validation_success.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span data-translate>Your new email address has been validated.</span>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put('views/empty.html', '')

    $templateCache.put(
      'views/home.html',
      '<div data-ng-switch="page">\n' +
        '  <div data-ng-switch-when="submissionpage">\n' +
        '    <div data-ng-controller="SubmissionCtrl" data-ng-include="\'views/whistleblower/submission.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-when="receiptpage">\n' +
        '    <div data-ng-controller="ReceiptCtrl" data-ng-include="\'views/whistleblower/receipt.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-when="tippage">\n' +
        '    <div data-ng-controller="TipCtrl" data-ng-include="\'views/whistleblower/tip.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-when="signuppage">\n' +
        '    <div data-ng-controller="SignupCtrl" data-ng-include="\'views/signup/main.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-default>\n' +
        '    <div data-ng-include="\'views/whistleblower/home.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/login/default.html',
      '<div data-ng-if="!Authentication.requireAuthCode">\n' +
        '  <div class="form-group">\n' +
        '    <div class="input-group">\n' +
        '      <div class="input-group-prepend">\n' +
        '        <span class="input-group-text"><i class="fas fa-user"></i></span>\n' +
        '      </div>\n' +
        '      <input class="form-control" name="username" placeholder="{{\'Username\' | translate}}" data-ng-model="Authentication.loginData.loginUsername" type="text" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <div class="input-group">\n' +
        '      <div class="input-group-prepend">\n' +
        '        <span class="input-group-text"><i class="fas fa-lock"></i></span>\n' +
        '      </div>\n' +
        '      <input class="form-control" name="password" placeholder="{{\'Password\' | translate}}" data-ng-model="Authentication.loginData.loginPassword" type="password" required />\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <button id="login-button" class="btn btn-primary" data-ng-disabled="Authentication.loginInProgress || loginForm.$invalid" data-ng-click="Authentication.login(0, Authentication.loginData.loginUsername, Authentication.loginData.loginPassword)" type="submit">\n' +
        '    <i class="fas fa-sign-in-alt"></i>\n' +
        '    <span data-translate>Log in</span>\n' +
        '  </button>\n' +
        '\n' +
        '  <span id="forgot-button">\n' +
        '    <a class="btn btn-outline-secondary" href="#/login/passwordreset" data-translate>Forgot password?</a>\n' +
        '  </span>\n' +
        '</div>\n' +
        '\n' +
        '<div data-ng-if="Authentication.requireAuthCode">\n' +
        '  <div class="form-group">\n' +
        '    <label data-translate>Enter the two factor authentication code</label>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="input-group">\n' +
        '    <input class="form-control" data-ng-model="Authentication.loginData.loginAuthCode" type="text" size="6" maxlength="6" required />\n' +
        '\n' +
        '    <div class="input-group-btn">\n' +
        '      <button id="login-button" class="btn btn-primary" data-ng-disabled="Authentication.loginInProgress || loginForm.$invalid" data-ng-click="Authentication.login(0, Authentication.loginData.loginUsername, Authentication.loginData.loginPassword, Authentication.loginData.loginAuthCode)" type="submit">\n' +
        '        <i class="fas fa-sign-in-alt"></i>\n' +
        '        <span data-translate>Log in</span>\n' +
        '      </button>\n' +
        '\n' +
        '      <a class="btn" data-ng-click="Utils.openSupportModal()" data-uib-tooltip="{{\'Request support\' | translate}}"><i class="fas fa-life-ring"></i></a>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/login/main.html',
      '<div class="row">\n' +
        '  <div class="col-md-4">\n' +
        '    <form name="loginForm" autocomplete="off" novalidate>\n' +
        '      <input class="d-none" type="password" name="disable-autocomplete-hack" />\n' +
        '      <div data-ng-include="login_template"></div>\n' +
        '      <br />\n' +
        '      <div id="LoginError" class="alert alert-danger" data-ng-show="error.code === 9">\n' +
        '        <span data-translate>Authentication failed</span>\n' +
        '      </div>\n' +
        '      <div id="LoginError" class="alert alert-danger" data-ng-show="error.code === 13">\n' +
        '        <span data-translate>The code is either invalid or expired.</span>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/login/simplified.html',
      '<div data-ng-if="!Authentication.requireAuthCode">\n' +
        '  <div data-ng-if="public.receivers.length === 1">\n' +
        '    <div class="form-group" data-ng-init="loginData.loginUsername = public.receivers[0].username">\n' +
        '      <input class="form-control" name="label" placeholder="{{public.node.name}}" type="text" disabled />\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <input class="form-control" name="password" placeholder="{{\'Password\' | translate}}" data-ng-model="loginData.loginPassword" type="password" required />\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <button id="login-button" class="btn btn-primary" data-ng-disabled="Authentication.loginInProgress || loginForm.$invalid" data-ng-click="Authentication.login(0, loginData.loginUsername, loginData.loginPassword)" type="submit">\n' +
        '        <i class="fas fa-sign-in-alt"></i>\n' +
        '        <span data-translate>Log in</span>\n' +
        '      </button>\n' +
        '\n' +
        '      <span id="forgot-button">\n' +
        '        <a class="btn btn-outline-secondary" href="#/login/passwordreset" data-translate>Forgot password?</a>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div data-ng-if="public.receivers.length !== 1">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Please select your account:</label>\n' +
        '      <select class="form-control" data-ng-model="loginData.loginUsername" data-ng-options="item.username as item.name for item in public.receivers | orderBy:\'name\'" required></select>\n' +
        '    </div>\n' +
        '\n' +
        '    <div data-ng-show="loginData.loginUsername">\n' +
        '      <div class="form-group">\n' +
        "        <label data-translate>Now type your password, then click 'Log in':</label>\n" +
        '        <input class="form-control" name="password" data-ng-model="loginData.loginPassword" type="password" required />\n' +
        '      </div>\n' +
        '\n' +
        '      <div class="form-group">\n' +
        '        <button id="login-button" class="btn btn-primary" data-ng-disabled="Authentication.loginInProgress || loginForm.$invalid" data-ng-click="Authentication.login(0, loginData.loginUsername, loginData.loginPassword)" type="submit">\n' +
        '          <i class="fas fa-sign-in-alt"></i>\n' +
        '          <span data-translate>Log in</span>\n' +
        '        </button>\n' +
        '\n' +
        '        <span id="forgot-button">\n' +
        '          <a class="btn btn-outline-secondary" href="/#/login/passwordreset" data-translate>Forgot password?</a>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div data-ng-if="Authentication.requireAuthCode">\n' +
        '  <div class="form-group">\n' +
        '    <label data-translate>Enter the two factor authentication code</label>\n' +
        '    <input class="form-control" data-ng-model="loginData.loginAuthCode" type="text" size="6" maxlength="6" required />\n' +
        '  </div>\n' +
        '\n' +
        '  <button id="login-button" class="btn btn-primary" data-ng-disabled="Authentication.loginInProgress || loginForm.$invalid" data-ng-click="Authentication.login(0, loginData.loginUsername, loginData.loginPassword, loginData.loginAuthCode)" type="submit">\n' +
        '    <i class="fas fa-sign-in-alt"></i>\n' +
        '    <span data-translate>Log in</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/add_option_hint.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Hint</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div>\n' +
        '    <span data-translate>Hint</span>\n' +
        '    <input id="hint1" class="form-control" data-ng-model="arg.hint1" type="text" />\n' +
        '  </div>\n' +
        '  <div>\n' +
        '    <span data-translate>Text shown after the user has selected the option.</span>\n' +
        '    <input id="hint2" class="form-control" data-ng-model="arg.hint2" type="text" />\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Confirm</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-reset" class="btn btn-danger" data-ng-click="arg.hint1 = \'\'; arg.hint2 = \'\'; cancel()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Reset</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/assign_score_points.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Assign score points</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <span class="alert alert-default">\n' +
        '    <div>\n' +
        '      <span data-translate>Type</span>\n' +
        '      <select class="form-control" data-ng-model="arg.score_type">\n' +
        '        <option value="none" data-translate>None</option>\n' +
        '        <option value="addition" data-translate>Addition</option>\n' +
        '        <option value="multiplier" data-translate>Multiplier</option>\n' +
        '      </select>\n' +
        '    </div>\n' +
        '    <div data-ng-if="arg.score_type !== 0">\n' +
        '      <span data-translate>Value</span>\n' +
        '      <input id="score_points" class="form-control" data-ng-model="arg.score_points" type="number" />\n' +
        '    </div>\n' +
        '  </span>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <a id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Confirm</span>\n' +
        '  </a>\n' +
        '  <a id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </a>\n' +
        '  <a id="modal-action-reset" class="btn btn-danger" data-ng-click="arg.score_type = 0; arg.score_points = 0; cancel()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Reset</span>\n' +
        '  </a>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/confirmation.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Are you sure?</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body"></div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm(arg)">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Yes</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>No</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/delete_confirmation.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Are you sure?</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body" data-translate>Please note that all the associated data will be permanently deleted.</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm(arg)">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Yes</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>No</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/disclaimer.html',
      '<div class="modal-header">\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div data-markdown-to-html="public.node.disclaimer_text"></div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button data-ng-click="confirm()" class="btn btn-primary" data-translate>Proceed</button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()" data-translate>Close</button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/enable_2fa.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Enable two factor authentication</div>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div data-ng-include="\'views/partials/enable_2fa.html\'"></div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        ' <button data-ng-click="confirm(totp.token)" data-ng-disabled="totp.secret.length !== 32 || totp.token.length !== 6" class="btn btn-primary" data-translate>Enable</button>\n' +
        ' <button data-ng-click="cancel()" class="btn btn-light" data-translate>Close</button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/enable_encryption.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Are you sure?</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <span data-translate>Before proceeding please read carefully the documentation at:</span> <a href="https://docs.globaleaks.org/en/main/security/EncryptionProtocol.html" rel="noreferrer" target="_blank">Encryption</a>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm(arg)">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Yes</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>No</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/encryption_recovery_key.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Account recovery key</div>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div class="text-center font-weight-bold" data-uib-tooltip="{{\'Copy to clipboard\' | translate}}" data-ng-click="Utils.copyToClipboard(erk)">{{erk}}</div>\n' +
        '  <br />\n' +
        '  <div data-translate>Make a copy and store it in a safe place. It will be necessary if you lose your password to recover the access to your account without data loss.</div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button data-ng-click="cancel()" class="btn btn-outline-secondary" data-translate>Close</button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/grant_access.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Grant access</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div id="ReceiverContextAdder" class="form-group">\n' +
        '    <div class="input-group">\n' +
        '        <ui-select data-ng-model="arg.receiver_id" data-theme="bootstrap">\n' +
        '        <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '           <span data-ng-bind="arg.users_names[$select.selected.id]"></span>\n' +
        '	</ui-select-match>\n' +
        '        <ui-select-choices data-repeat="receiver in public.receivers | filter: {name: $select.search}">\n' +
        '           <span data-ng-bind-html="arg.users_names[receiver.id] | highlight: $select.search"></span>\n' +
        '        </ui-select-choices>\n' +
        '      </ui-select>\n' +
        '      <div class="input-group-append">\n' +
        '        <span class="input-group-text"><i class="fas fa-search"></i></span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm(arg.receiver_id.id)">\n' +
        '    <span data-translate>Confirm</span>\n' +
        '  </button>\n' +
        '\n' +
        '  <a id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span>Close</span>\n' +
        '  </a>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/questionnaire_duplication.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Enter a name for the copy</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <span data-translate>Name</span>\n' +
        '  <div class="form-group">\n' +
        '    <input name="name" class="form-control" data-ng-model="duplicate_questionnaire.name" type="text" data-ng-class="{\'is-invalid\': duplocateQuestionnaire.name.$error.required}" required />\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <span id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Duplicate</span>\n' +
        '  </span>\n' +
        '  <span id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/request_support.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Request support</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body" data-ng-init="sent=false; arg.mail_address=resources.preferences.mail_address">\n' +
        '  <form data-ng-hide="sent" name="SupportRequest" novalidate>\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Email address</label>\n' +
        '      <input class="form-control" name="email" data-ng-model="arg.mail_address" type="email" data-ng-pattern="CONSTANTS.email_regexp" required/>\n' +
        '      <div class="text-danger" data-ng-show="SupportRequest.email.$error.required" data-translate>This field is mandatory</div>\n' +
        '      <div class="text-danger" data-ng-show="SupportRequest.email.$error.pattern" data-translate>Invalid email address</div>\n' +
        '    </div>\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Text</label>\n' +
        '      <div>\n' +
        '        <textarea class="form-control" name="message" data-ng-model="arg.text" required></textarea>\n' +
        '      </div>\n' +
        '      <div class="text-danger" data-ng-show="SupportRequest.message.$error.required" data-translate>This field is mandatory</div>\n' +
        '    </div>\n' +
        '  </form>\n' +
        '  <div data-ng-show="sent" class="alert alert-secondary"><span data-translate>Thank you.</span> <span data-translate>We will try to get back to you as soon as possible.</span></div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-hide="sent" data-ng-disabled="SupportRequest.$invalid" data-ng-click="sent=true; Utils.submitSupportRequest(arg);">\n' +
        '    <span data-translate>Submit</span>\n' +
        '  </button>\n' +
        '\n' +
        '  <a id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Close</span>\n' +
        '  </a>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/revoke_access.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Revoke access</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div id="ReceiverContextAdder" class="form-group">\n' +
        '    <div class="input-group">\n' +
        '        <ui-select data-ng-model="arg.receiver_id" data-theme="bootstrap">\n' +
        '        <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '           <span data-ng-bind="$select.selected.name"></span>\n' +
        '	</ui-select-match>\n' +
        '        <ui-select-choices data-repeat="receiver in public.receivers | filter: {name: $select.search}">\n' +
        '           <span data-ng-bind-html="receiver.name | highlight: $select.search"></span>\n' +
        '        </ui-select-choices>\n' +
        '      </ui-select>\n' +
        '      <div class="input-group-append">\n' +
        '        <span class="input-group-text"><i class="fas fa-search"></i></span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm(arg.receiver_id.id)">\n' +
        '    <span data-translate>Confirm</span>\n' +
        '  </button>\n' +
        '\n' +
        '  <a id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span>Close</span>\n' +
        '  </a>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/security_awareness_confidentiality.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>The connection is not secure.</div>\n' +
        '</div>\n' +
        '<div class="modal-body" data-translate>The platform is still not configured for HTTPS connections and should therefore only be used for testing purposes.</div>\n' +
        '<div class="modal-footer">\n' +
        '  <a data-ng-click="confirm()" class="btn btn-primary" data-translate>Proceed</a>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/tip_additional_questionnaire_form.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Additional questionnaire</div>\n' +
        '  <button type="submit" class="close" aria-hidden="true" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <form id="submissionForm" name="vars.submissionForm" autocomplete="off" novalidate>\n' +
        '    <div class="tabbable tabs-below">\n' +
        '      <ul id="SubmissionTabsNavigationBox" class="nav nav-tabs" data-ng-if="tip.additional_questionnaire.steps.length > 1">\n' +
        '        <li class="nav-item" data-ng-repeat="step in tip.additional_questionnaire.steps | orderBy:\'order\'" data-ng-if="step.enabled">\n' +
        '          <a id="step-{{$index}}-link" class="nav-link title" data-ng-class="{active: navigation === $index}" data-ng-click="goToStep($index)">\n' +
        '            <span>{{$index + 1}} - {{step.label}}</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '      </ul>\n' +
        '\n' +
        '      <div id="SubmissionTabsContentBox" class="tab-content">\n' +
        '        <div data-ng-if="displayErrors()" data-ng-include="\'views/whistleblower/submission_error.html\'"></div>\n' +
        '        <div data-ng-repeat="step in tip.additional_questionnaire.steps | orderBy:\'order\'" data-ng-controller="SubmissionStepCtrl" data-ng-if="step.enabled">\n' +
        '          <div id="{{stepId}}" data-ng-form="{{stepId}}" class="SubmissionStep" data-ng-show="navigation === $index">\n' +
        '            <div class="description" data-ng-if="step.description">{{step.description}}</div>\n' +
        '            <div data-ng-include="\'views/whistleblower/form.html\'"></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </form>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <div id="SubmissionButtons">\n' +
        '    <button id="PreviousStepButton" class="btn btn-outline-secondary" data-ng-show="hasPreviousStep()" data-ng-click="decrementStep()">\n' +
        '      <i class="fas fa-arrow-circle-left"></i>\n' +
        '      <span data-translate>Previous</span>\n' +
        '    </button>\n' +
        '\n' +
        '    <button id="NextStepButton" class="btn btn-outline-secondary" data-ng-show="hasNextStep()" data-ng-click="incrementStep()">\n' +
        '      <span data-translate>Next</span>\n' +
        '      <i class="fas fa-arrow-circle-right"></i>\n' +
        '    </button>\n' +
        '\n' +
        '    <button id="SubmitButton" class="btn btn-primary" data-ng-show="!hasNextStep()" data-ng-click="completeSubmission()" type="submit">\n' +
        '      <i id="SubmitIconOK" class="fas fa-check"></i>\n' +
        '      <span data-translate>Submit</span>\n' +
        '      <span data-ng-show="submission.wait">({{submission.countdown}})</span>\n' +
        '    </button>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/tip_operation_file_identity_access_reply.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Deny access to the whistleblower\'s identity</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <label data-translate>Please write a motivation for the reply</label>\n' +
        '  <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '  <textarea class="form-control" data-ng-model="reply_motivation" data-ng-attr-placeholder="{{\'Reply motivation\' | translate}}"></textarea>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <span id="modal-action-ok" class="btn btn-primary" data-ng-disabled="reply_motivation == undefined || reply_motivation == \'\'" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Send</span>\n' +
        '  </span>\n' +
        '  <span id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/tip_operation_file_identity_access_request.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Request access to the whistleblower\'s identity</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <label data-translate>Please write a motivation</label>\n' +
        '  <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '  <textarea class="form-control" data-ng-model="request_motivation" data-ng-attr-placeholder="{{\'Request motivation\' | translate}}"></textarea>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <span id="modal-action-ok" class="btn btn-primary" data-ng-disabled="request_motivation == undefined || request_motivation == \'\'" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Send</span>\n' +
        '  </span>\n' +
        '  <span id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/tip_operation_postpone.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Are you sure?</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <span data-translate>By confirming, you will postpone the expiration date to:</span>\n' +
        '  <div class="input-group">\n' +
        '    <input class="form-control inputelem"\n' +
        '           type="text"\n' +
        '           readonly="readonly"\n' +
        '           data-ng-model="args.expiration_date"\n' +
        '           data-ng-required="true"\n' +
        '           data-ng-click="args.opened = true"\n' +
        '           uib-datepicker-popup\n' +
        '           datepicker-options="args.dateOptions"\n' +
        '           is-open="args.opened"\n' +
        '           show-button-bar="false" />\n' +
        '    <span class="input-group-append" data-ng-click="args.opened = true"><i class="input-group-text fas fa-calendar"></i></span>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Yes</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>No</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/modals/trigger_receiver.html',
      '<div class="modal-header">\n' +
        '  <div class="modal-title" data-translate>Recipients</div>\n' +
        '  <button type="button" class="close" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '  </button>\n' +
        '</div>\n' +
        '<div class="modal-body">\n' +
        '  <div data-translate>Recipients</div>\n' +
        '  <ui-select data-ng-model="selected.value" data-theme="bootstrap" data-on-select=\'addReceiver($item)\'>\n' +
        '    <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '      <span data-ng-bind="$select.selected.name"></span>\n' +
        '    </ui-select-match>\n' +
        '    <ui-select-choices data-repeat="user in resources.users | filter: {role: \'receiver\', name: $selected.search} | filter:receiverNotSelectedFilter">\n' +
        '      <span data-ng-bind-html="user.name | highlight: $select.search"></span>\n' +
        '    </ui-select-choices>\n' +
        '  </ui-select>\n' +
        '  <div data-ng-if="arg.trigger_receiver">\n' +
        '    <br />\n' +
        '    <ol class="selectionList">\n' +
        '      <li data-ng-repeat="user in arg.trigger_receiver">\n' +
        '        <span class="action-btns">\n' +
        '          <span data-ng-click="arg.trigger_receiver.splice($index, 1)" data-uib-tooltip="{{\'Remove\' | translate}}">\n' +
        '            <i class="fas fa-times"></i>\n' +
        '          </span>\n' +
        '        </span>\n' +
        '        <span>{{admin_receivers_by_id[user].name}}</span>\n' +
        '      </li>\n' +
        '    </ol>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="modal-footer">\n' +
        '  <button id="modal-action-ok" class="btn btn-primary" data-ng-click="confirm()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Confirm</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-ok" class="btn btn-danger" data-ng-click="arg.trigger_receiver = []; cancel()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Reset</span>\n' +
        '  </button>\n' +
        '  <button id="modal-action-cancel" class="btn btn-outline-secondary" data-ng-click="cancel()">\n' +
        '    <i class="fas fa-times"></i>\n' +
        '    <span data-translate>Cancel</span>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/admin_file.html',
      '<label>{{admin_file.title}}</label>\n' +
        '<div class="card.card-body uploadfile file-{{admin_file.varname}}"\n' +
        '     data-flow-init="{target: \'api/admin/files/\' + admin_file.varname}"\n' +
        '     data-flow-files-submitted="$flow.upload()"\n' +
        '     data-flow-file-success="reload()"\n' +
        '     data-flow-file-single\n' +
        '     data-flow-drop\n' +
        '     extend-flow-valid-types="[admin_file.type]"\n' +
        '     extend-flow-valid-size="admin_file.size">\n' +
        '  <span data-ng-show="!public.node[admin_file.varname]">\n' +
        '    <div class="custom-file">\n' +
        '      <input data-ng-attr-id="customFile-{{admin_file.varname}}" class="custom-file-input" type="file" data-flow-btn />\n' +
        '      <label class="btn btn-sm btn-primary" data-ng-attr-for="customFile-{{admin_file.varname}}">\n' +
        '        <i class="fas fa-upload"></i>\n' +
        '        <span data-translate>Upload</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '  </span>\n' +
        '  <span data-ng-show="public.node[admin_file.varname]">\n' +
        '    <a class="btn btn-sm btn-primary" href="{{\'s/\' + admin_file.varname}}" download="{{admin_file.filename}}">\n' +
        '      <i class="fas fa-download"></i>\n' +
        '      <span data-translate>Download</span>\n' +
        '    </a>\n' +
        '    <button class="btn btn-sm btn-danger" data-ng-click="delete_file(\'api/admin/files/\' + admin_file.varname)">\n' +
        '      <i class="fas fa-trash"></i>\n' +
        '      <span data-translate>Delete</span>\n' +
        '    </button>\n' +
        '  </span>\n' +
        '  <div data-single-error-upload></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/demo.html',
      '<div id="DemoBadge" class="bg-secondary text-white" translate>This is a demo platform, please do not use it for real submissions.</div>\n'
    )

    $templateCache.put(
      'views/partials/enable_2fa.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div>\n' +
        '      <span class="badge badge-primary">1</span>\n' +
        '      <span data-translate>Install an authenticator app on your phone</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row mt-3">\n' +
        '  <div class="col-md-12">\n' +
        '    <div>\n' +
        '      <div>\n' +
        '        <span class="badge badge-primary">2</span>\n' +
        '        <span data-translate>Scan the QR code with the app</span>\n' +
        '      </div>\n' +
        '      <br />\n' +
        '      <div class="text-center">\n' +
        '        <qrcode data-ng-if="totp.qrcode_string" data-uib-tooltip="{{\'Copy to clipboard\' | translate}}" data-ng-click="Utils.copyToClipboard(totp.secret);" data="{{totp.qrcode_string}}" version="2" error-correction-level="Q" size="300" color="#1d1f2a" background="#FFF"></qrcode>\n' +
        '        <div id="OTPSecretForm" data-ng-form="OTPSecretForm" class="form-inline">\n' +
        '          <div class="form-group d-block mx-auto">\n' +
        '            <div class="input-group">\n' +
        '              <input class="form-control" data-ng-class="{\'is-invalid\': OTPSecretForm.$invalid}" name="secret" data-ng-model="totp.secret" data-ng-disabled="!totp.edit" type="text" data-ng-minlength=32 data-ng-maxlength="32" maxlength="32" size="32" required />\n' +
        '             <span  data-ng-if="totp.edit" class="input-group-append" data-ng-click="OTPSecretForm.$valid && (totp.edit=!totp.edit)" data-uib-tooltip="{{\'Save\' | translate}}"><button class="btn btn-secondary" data-ng-disabled="OTPSecretForm.$invalid"><i class="fas fa-save"></i></button></span>\n' +
        '             <span  data-ng-if="!totp.edit" class="input-group-append" data-ng-click="totp.edit=!totp.edit" data-uib-tooltip="{{\'Edit\' | translate}}"><button class="btn btn-secondary" data-ng-disabled="totp.secret.length !== 32"><i class="fas fa-edit"></i></button></span>\n' +
        '           </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row mt-3">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="form-group">\n' +
        '      <div>\n' +
        '        <span class="badge badge-primary">3</span>\n' +
        '        <span data-translate>Enter the two factor authentication code</span>\n' +
        '      </div>\n' +
        '      <input class="form-control" data-ng-model="totp.token" type="text" size="6" maxlength="6" />\n' +
        '      <div class="mt-3 alert alert-danger" data-ng-show="error.code === 13">\n' +
        '        <span data-translate>The code is either invalid or expired.</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/file_input.html',
      '<i class="fas fa-upload"></i>\n' +
        '<span>{{fileInputLabel | translate}}</span>\n' +
        '<input class="custom-file-input" type="file" />\n'
    )

    $templateCache.put(
      'views/partials/footer.html',
      '<div id="CustomFooter" class="vcenter preformatted mb-1" data-ng-if="public.node.footer" data-markdown-to-html="public.node.footer"></div>\n' +
        '<div id="AttributionClause" class="vcenter">Powered by <a href="https://www.globaleaks.org/" title="GlobaLeaks - Secure Whistleblowing Software" rel="noreferrer" target="_blank">GlobaLeaks</a></div>\n'
    )

    $templateCache.put(
      'views/partials/header.html',
      '<header id="HeaderBox">\n' +
        '  <div class="row">\n' +
        '    <div class="col-lg-9 col-md-12 float-left">\n' +
        '     <span id="LogoBox" data-ng-click="setHomepage()"><img data-ng-if="!public.node.logo" class="default-logo" alt="project logo" data-ng-src="data/logo.png" /><img data-ng-if="public.node.logo" class="img-fluid\'" alt="project logo" data-ng-src="s/logo" /></span><span id="TitleBox"><span id="ProjectTitle" data-ng-click="setHomepage()">{{projectTitle}}</span><span class="TitleSeparator" data-ng-if="projectTitle && pageTitle"> - </span><span id="PageTitle">{{pageTitle | translate}}</span></span>\n' +
        '    </div>\n' +
        '    <div class="col-lg-3 col-md-12 float-right">\n' +
        '      <span id="UserBox" data-ng-include="\'views/partials/user.html\'"></span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</header>\n'
    )

    $templateCache.put(
      'views/partials/image_upload.html',
      '<div id="projectImageLoader"\n' +
        '     class="imageUpload"\n' +
        '     data-ng-controller="ImageUploadCtrl"\n' +
        '     data-flow-name="imageUploadObj.flow"\n' +
        '     data-flow-init="{target: \'api/admin/files/\' + imageUploadId}"\n' +
        '     data-flow-files-submitted="$flow.upload()"\n' +
        '     data-flow-drop\n' +
        '     extend-flow-valid-types="[\'png\']">\n' +
        '  <label for="projectImageLoader"\n' +
        '         class="changePictureButton text-primary"\n' +
        '         data-ng-if="!imageUploadModel[imageUploadModelAttr] && !imageUploadObj.flow.files.length"\n' +
        '         data-uib-tooltip="{{\'Edit\' | translate}}" data-flow-btn><i class="fas fa-edit"></i></label>\n' +
        '  <label data-ng-attr-id="projectImageLoader"\n' +
        '         class="changePictureButton text-danger"\n' +
        '         data-ng-click="deletePicture()"\n' +
        '         data-ng-if="!imageSrcId && (imageUploadModel[imageUploadModelAttr] || imageUploadObj.flow.files.length)"\n' +
        '         data-uib-tooltip="{{\'Delete\' | translate}}"><i class="fas fa-times"></i></label>\n' +
        '  <div class="imageUploadThumbnail">\n' +
        '    <img data-ng-if="imageUploadModel[imageUploadModelAttr]" data-ng-src="s/{{imageUploadId}}">\n' +
        '  </div>\n' +
        '  <div errors-upload></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/messageconsole.html',
      '<div data-ng-if="error && [4, 9, 11, 13].indexOf(error.code) === -1 ">\n' +
        '  <div data-uib-alert class="alert-danger" close="dismissError()" dismiss-on-timeout="3000">\n' +
        '    <!--\n' +
        '      We skip authentication errors (9) that are handled by the request interceptor.\n' +
        '    -->\n' +
        '    <div data-translate>Error!</div>\n' +
        '    <div data-ng-switch="error.code">\n' +
        '      <div data-ng-switch-when="1">\n' +
        '        <span data-translate>Internal server error</span> <span>({{error.arguments[0]}})</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <div data-ng-switch-when="3">\n' +
        '        <span data-translate>Error on input validation</span> <span>[{{error.arguments[0]}}]</span>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="6">\n' +
        '        <span data-translate>Resource not found</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <div data-ng-switch-when="8">\n' +
        '        <span data-translate>Forbidden operation</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <div data-ng-switch-when="12">\n' +
        '        <span data-translate>The specified old password is not valid</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <div data-ng-switch-when="13">\n' +
        '        <span data-translate>Resource can only be accessed via the Tor network</span>\n' +
        '      </div>\n' +
        '\n' +
        '      <div data-ng-switch-when="14">\n' +
        '        <span data-translate>The upload request exceeds the size limit</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/password_meter.html',
      '<uib-progressbar value="value" max="3" type="{{ type }}">\n' +
        '  <span>{{ text | translate }}</span>\n' +
        '</uib-progressbar>\n'
    )

    $templateCache.put(
      'views/partials/preferences.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <uib-tabset>\n' +
        '      <uib-tab data-ng-repeat="tab in tabs" heading="{{tab.title | translate}}">\n' +
        '        <div class="tab-content" data-ng-include="tab.template"></div>\n' +
        '      </uib-tab>\n' +
        '    </uib-tabset>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/preferences/tab1.html',
      '<form name="resources.preferences.orm" id="PreferencesForm">\n' +
        '  <div data-ng-if="resources.preferences.picture" class="imageThumbnail">\n' +
        '    <img class="receiverImg" alt="user picture" data-ng-src="/s/{{resources.preferences.id}}" /><br />\n' +
        '  </div>\n' +
        '  <div id="Username"><label><span data-translate>Username</span>:</label> {{resources.preferences.username }}</div>\n' +
        '  <div id="Role"><label><span data-translate>Role</span>:</label> <span>{{Utils.role_l10n(Authentication.session.role)}}</span></div>\n' +
        '  <div id="Name"><label><span data-translate>Name</span>:</label>\n' +
        '    <span data-ng-if="!editingName">\n' +
        '      <span>{{resources.preferences.name }}</span>\n' +
        '      <button class="btn btn-sm btn-outline-secondary"\n' +
        '              data-ng-show="!editingName"\n' +
        '              data-ng-click="toggleNameEditing(); $event.stopPropagation();">\n' +
        '        <span data-translate>Edit</span>\n' +
        '      </button>\n' +
        '    </span>\n' +
        '    <input data-ng-if="editingName" class="form-control" name="name" data-ng-model="resources.preferences.name" type="text" required />\n' +
        '  </div>\n' +
        '  <div id="PublicName"><label><span data-translate>Public name</span>:</label>\n' +
        '    <span data-ng-if="!editingPublicName">\n' +
        '      <span>{{resources.preferences.public_name }}</span>\n' +
        '      <button class="btn btn-sm btn-outline-secondary"\n' +
        '              data-ng-show="!editingPublicName"\n' +
        '              data-ng-click="togglePublicNameEditing(); $event.stopPropagation();">\n' +
        '        <span data-translate>Edit</span>\n' +
        '      </button>\n' +
        '    </span>\n' +
        '    <input data-ng-if="editingPublicName" class="form-control" name="public_name" data-ng-model="resources.preferences.public_name" type="text" required />\n' +
        '  </div>\n' +
        '  <div id="EmailAddress"><label><span data-translate>Email address</span>:</label>\n' +
        '    <div>\n' +
        '      <span data-ng-if="!editingEmailAddress">{{resources.preferences.mail_address}}</span>\n' +
        '      <button class="btn btn-sm btn-outline-secondary"\n' +
        '              data-ng-show="!editingEmailAddress"\n' +
        '              data-ng-click="toggleEmailAddressEditing(); $event.stopPropagation();">\n' +
        '        <span data-translate>Edit</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="editingEmailAddress">\n' +
        '    <input class="form-control" name="mail_address" data-ng-model="resources.preferences.mail_address" data-ng-pattern="CONSTANTS.email_regexp" type="email" data-ng-class="{\'is-invalid\': resources.preferences.orm.$error.pattern}" />\n' +
        '  </div>\n' +
        '  <div data-ng-if="!editingEmailAddress && resources.preferences.change_email_address" class="alert alert-secondary">\n' +
        '    <div data-translate>Validation of email address change in progress.</div>\n' +
        '    <div data-translate>Please check your inbox for further instructions.</div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="resources.preferences.description"><label data-translate>Description</label> {{resources.preferences.description}}</div>\n' +
        '\n' +
        '  <div id="Contexts" data-ng-if="Authentication.session.role === \'receiver\' && public.contexts.length > 1">\n' +
        '    <label><span data-translate>Contexts</span></label>\n' +
        '    <ul data-ng-repeat="context_id in resources.preferences.contexts">\n' +
        '      <li>{{contexts_by_id[context_id].name}}</li>\n' +
        '    </ul>\n' +
        '  </div>\n' +
        '\n' +
        '  <div id="Language" class="form-group" data-ng-if="languages_enabled_selector.length > 1">\n' +
        '    <label data-translate>Language</label>\n' +
        '    <select class="form-control" data-ng-model="resources.preferences.language" data-ng-options="item.code as item.native for item in languages_enabled_selector"></select>\n' +
        '  </div>\n' +
        '\n' +
        '  <div id="EnableNotifications" class="form-group" data-ng-if="(Authentication.session.role === \'admin\' && !public.node.disable_admin_notification) ||\n' +
        "                                                               (Authentication.session.role === 'receiver' && !public.node.disable_receiver_notification) ||\n" +
        "                                                               (Authentication.session.role === 'custodian' && !public.node.disable_custodian_notification)\">\n" +
        '    <input data-ng-model="resources.preferences.notification" type="checkbox">\n' +
        '    <label data-translate>Enable email notifications</label>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label>\n' +
        '      <input data-ng-model="resources.preferences.two_factor" data-ng-change="toggle2FA()" type="checkbox" />\n' +
        '      <span data-translate>Enable two factor authentication</span>\n' +
        '    </label>\n' +
        '  </div>\n' +
        '\n' +
        '  <div id="EditPGP" data-ng-form="pgpkeyForm">\n' +
        '    <div data-ng-show="resources.preferences.pgp_key_fingerprint">\n' +
        '      <div class="form-group">\n' +
        '        <label data-translate>Details of the PGP key:</label>\n' +
        '        <div><span data-translate>Fingerprint</span>: <span>{{resources.preferences.pgp_key_fingerprint}}</span></div>\n' +
        '        <div><span data-translate>Expiration date</span>: {{resources.preferences.pgp_key_expiration | date:"dd/MM/yyyy"}}</div>\n' +
        '      </div>\n' +
        '      <div class="form-group">\n' +
        '        <input data-ng-model="resources.preferences.pgp_key_remove" type="checkbox">\n' +
        '        <label data-translate>Remove</label>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div data-ng-hide="resources.preferences.pgp_key_fingerprint">\n' +
        '      <div class="position-relative">\n' +
        '        <label data-translate>Set up encryption by providing a PGP public key</label>\n' +
        '        <textarea data-pgp-pubkey-validator="canBeEmpty" class="form-control" data-ng-model="resources.preferences.pgp_key_public" data-ng-class="{\'is-invalid\': pgpkeyForm.$invalid}"></textarea>\n' +
        '        <label file-input="loadPublicKeyFile(file)" file-input-label="Select" class="btn btn-sm btn-outline-secondary textarea-btn"></label>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <br />\n' +
        '\n' +
        '  <button type="submit" class="btn btn-primary" data-ng-click="save()" data-ng-disabled="resources.preferences.orm.$invalid || pgpkeyForm.$invalid">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Save</span>\n' +
        '  </button>\n' +
        '\n' +
        '  <button data-ng-if="resources.preferences.encryption" class="btn btn-outline-secondary" data-ng-click="getEncryptionRecoveryKey()" data-translate>Account recovery key</button>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/partials/preferences/tab2.html',
      '<form name="passwordChangeForm">\n' +
        '  <input class="d-none" type="password" name="disable-autocomplete-hack" />\n' +
        '\n' +
        '  <div class="form-group" data-ng-if=\'!Authentication.session.require_password_change\'>\n' +
        '    <label>\n' +
        '      <span data-translate>Current password</span>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '    </label>\n' +
        '    <input class="form-control" name="oldpassword" data-ng-model="resources.preferences.old_password" type="password" autocomplete="off" data-ng-class="{\'is-invalid\': freferences.password && passwordChangeForm.oldpassword.$error.required}" required />\n' +
        '    <p class="text-danger" data-ng-show="resources.preferences.password && passwordChangeForm.oldpassword.$error.required">\n' +
        '      <span data-translate>Old password confirmation required</span>\n' +
        '    </p>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label>\n' +
        '      <span data-translate>New password</span>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '    </label>\n' +
        '    <input class="form-control" name="password" data-ng-model="resources.preferences.password" type="password" autocomplete="off" data-password-strength-validator data-ng-class="{\'is-invalid\': resources.preferences.password && passwordChangeForm.password.$error.passwordStrengthValidator}" required />\n' +
        '    <password-meter data-ng-show="passwordStrengthScore" value="passwordStrengthScore"></password-meter>\n' +
        '    <div class="text-danger" data-ng-show="passwordStrengthScore && passwordStrengthScore < 2">\n' +
        '      <p data-translate>The chosen password is too weak. A valid password should be at least 10 characters long and contain a variety of characters including at least a lowercase character, a capital character, a number and a special character.</p>\n' +
        '     </div>\n' +
        '    <div class="text-danger" data-ng-show="resources.preferences.password && resources.preferences.password === resources.preferences.old_password">\n' +
        '      <p data-translate>The new password must be different from the current one.</p>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '\n' +
        '  <div class="form-group">\n' +
        '    <label>\n' +
        '      <span data-translate>Type your new password again</span>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '    </label>\n' +
        '    <input class="form-control" name="checkpassword" data-ng-model="resources.preferences.check_password" type="password" autocomplete="off" data-ng-class="{\'is-invalid\': resources.preferences.password && !passwordChangeForm.password.$error && (passwordChangeForm.checkpassword.$error.required || resources.preferences.password !== resources.preferences.check_password)}" required/>\n' +
        '    <p class="text-danger" data-ng-show="resources.preferences.password && !passwordChangeForm.password.$error.passwordStrengthValidator && (resources.preferences.password !== resources.preferences.check_password)">\n' +
        '      <span data-translate>The two passwords do not match</span>\n' +
        '    </p>\n' +
        '  </div>\n' +
        '\n' +
        '  <br />\n' +
        '\n' +
        '  <button type="submit" class="btn btn-primary" data-ng-disabled="passwordChangeForm.$invalid || passwordChangeForm.$pristine || resources.preferences.password !== resources.preferences.check_password || (resources.preferences.password && resources.preferences.password === resources.preferences.old_password)" data-ng-click="save()">\n' +
        '    <i class="fas fa-check"></i>\n' +
        '    <span data-translate>Save</span>\n' +
        '  </button>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/partials/privacybadge.html',
      '<div data-ng-if="!connection.tor">\n' +
        '  <div id="PrivacyBadge" class="clearfix" data-ng-init="connection.privacy_badge_open = true" data-ng-click="connection.privacy_badge_open = !connection.privacy_badge_open" >\n' +
        '    <div data-ng-if="!public.node.enable_custom_privacy_badge">\n' +
        '      <div id="PrivacyBadgeTextBox" class="float-left">\n' +
        '        <span class="badge badge-warning">\n' +
        '          <i class="fas fa-exclamation-circle"></i>\n' +
        '          <span data-translate>Warning</span>\n' +
        '        </span>\n' +
        '        <div data-ng-show="connection.privacy_badge_open">\n' +
        '          <div id="PrivacyBadgeText">\n' +
        '            <div data-translate>You are strongly advised to visit this site using the app called Tor Browser, that protects your identity.</div>\n' +
        '          </div>\n' +
        '          <div id="PrivacyBadgeDownloadLink"><a class="btn btn-sm btn-secondary" href="https://www.torproject.org/download/" rel="noreferrer" target="_blank"><i class="fas fa-download"></i> <span data-translate>Download the Tor Browser</span></a></div>\n' +
        '          <div data-ng-if="public.node.onionservice">\n' +
        '            <span data-translate>Then, copy and paste the following address into the Tor Browser:</span> <span class="onionaddress" data-uib-tooltip="{{\'Copy to clipboard\' | translate}}" data-ng-click="Utils.copyToClipboard(public.node.onionservice); $event.stopPropagation()">{{public.node.onionservice}}</span>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div data-ng-if="public.node.enable_custom_privacy_badge">\n' +
        '      <div id="PrivacyBoxTextBox" class="float-left">\n' +
        '        <span id="PrivacyBadgeCustomText" data-ng-show="connection.privacy_badge_open" data-markdown-to-html="public.node.custom_privacy_badge_text"></span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div id="PrivacyBoxToggleButton" class="float-right" data-ng-if="!public.node.enable_custom_privacy_badge" aria-label="Toggle">\n' +
        '      <i data-ng-if="!connection.privacy_badge_open" class="fas fa-chevron-circle-down"></i>\n' +
        '      <i data-ng-if="connection.privacy_badge_open" class="fas fa-chevron-circle-up"></i>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/receipt.html',
      '<label id="WhistleblowerLoginQuestion" for="receipt" data-translate>Have you already filed a report? Enter your receipt.</label>\n' +
        '<form id="WhistleblowerLoginForm" class="form-inline" autocomplete="off" novalidate>\n' +
        '  <div class="form-group d-block mx-auto">\n' +
        '    <div class="input-group">\n' +
        '      <input class="form-control" type="text" placeholder="XXXX XXXX XXXX XXXX" maxlength="19" size="19" data-ng-model="formatted_receipt" name="receipt" receiptvalidator>\n' +
        '      <span class="input-group-append">\n' +
        '        <button id="ReceiptButton"\n' +
        '                data-ng-click="Authentication.login(0, \'whistleblower\', formatted_receipt)" class="btn btn-primary"\n' +
        '                data-ng-disabled="formatted_receipt.length !== 19 || Authentication.loginInProgress || WhistleblowerLoginForm.receipt.$error.receiptvalidator" type="submit">\n' +
        '          <span data-translate>Log in</span>\n' +
        '        </button>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</form>\n' +
        '<div class="LoginErrorBoxHomepage text-danger" data-ng-show="error.code == 9" data-translate>The receipt is either invalid or the report has expired.</div>\n'
    )

    $templateCache.put(
      'views/partials/rfile_upload_button.html',
      '<div data-ng-init="fileinput = field ? field.id : \'status_page\'; uploads[fileinput] = {}">\n' +
        '  <div data-ng-controller="RFileUploadCtrl"\n' +
        '       data-flow-init="{target: fileupload_url}"\n' +
        '       data-flow-files-submitted="$flow.upload()"\n' +
        '       data-flow-name="uploads[fileinput]"\n' +
        '       data-flow-drop\n' +
        '       data-flow-drag-enter="dragClass=\'drag-over\'"\n' +
        '       data-flow-drag-leave="dragClass=\'\'"\n' +
        '       data-extend-flow-valid-size="public.node.maximum_filesize*1024*1024"\n' +
        '       data-ng-class="dragClass"\n' +
        '       class="drag-drop">\n' +
        '    <div data-ng-if="field === undefined || field.multi_entry">\n' +
        '      <div class="custom-file">\n' +
        '        <input data-ng-attr-id="customFile-{{fileinput}}" data-ng-model="_fakemodel[fileinput]" class="custom-file-input inputelem" type="file" data-ng-required="field && field.required && entry.required_status" data-flow-btn />\n' +
        '        <label class="btn btn-sm btn-outline-secondary" data-ng-attr-for="customFile-{{fileinput}}">\n' +
        '          <i class="fas fa-upload"></i>\n' +
        '          <span data-translate>Upload</span>\n' +
        '	</label>\n' +
        '        <span class="mx-2" data-translate>Select a file or drag it here.</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div data-ng-if="field !== undefined && !field.multi_entry">\n' +
        '      <div class="custom-file">\n' +
        '        <input id="customFile-{{fileinput}}" data-ng-model="_fakemodel[fileinput]" class="custom-file-input inputelem" data-ng-disabled="disabled" type="file" data-ng-required="field && field.required && entry.required_status" data-flow-btn data-flow-single-file />\n' +
        '        <label class="btn btn-sm btn-outline-secondary" data-ng-attr-for="customFile-{{fileinput}}">\n' +
        '          <i class="fas fa-upload"></i>\n' +
        '          <span data-translate>Upload</span>\n' +
        '        </label>\n' +
        '        <span class="mx-2" data-translate>Select a file or drag it here.</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div errors-upload></div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div data-ng-include="\'views/partials/rfile_upload_status.html\'"></div>\n'
    )

    $templateCache.put(
      'views/partials/rfile_upload_status.html',
      '<div data-ng-if="uploads[fileinput].files.length" data-flow-init>\n' +
        '  <div data-ng-switch="Utils.getUploadStatus(uploads[fileinput])">\n' +
        '    <span data-ng-switch-when="uploading" data-translate>Uploading files…</span>\n' +
        '    <span data-ng-switch-when="finished" data-translate>Upload completed successfully!</span>\n' +
        '    <span data-ng-switch-when="error" data-translate>Error while uploading files; check below for details.</span>\n' +
        '  </div>\n' +
        '  <div id="FileUpoloadsInfo">\n' +
        '    <div data-ng-show="uploads[fileinput].progress() !== 1">\n' +
        '	    <span data-translate>Estimated upload time:</span> <span>{{uploads[fileinput].timeRemaining()}} </span><span data-translate>seconds</span>\n' +
        '      <div class="progress progress-striped" data-ng-class="active">\n' +
        '        <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" data-ng-style="{width: (uploads[fileinput].progress() * 100) + \'%\'}"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-flow-name="flow" class="row">\n' +
        '    <div data-ng-repeat="file in uploads[fileinput].files" data-ng-hide="hideUploadWhenFinished === true && file.isComplete() && !file.error" data-ng-class="{\'col-md-12\': uploads[fileinput].files.length === 1, \'col-md-6\': uploads[fileinput].files.length > 1}">\n' +
        '      <div class="fileUploadBox mb-5">\n' +
        '        <div class="row">\n' +
        '          <div class="col-md-4">\n' +
        '            <div class="filePreview">\n' +
        '              <div class="imgPreview">\n' +
        '                <img alt="preview picture" data-flow-img="file" data-ng-if="Utils.showFilePreview(file.file.type)" />\n' +
        '              </div>\n' +
        '              <div class="fileButtons">\n' +
        '                <div data-ng-if="page === \'submissionpage\' || !file.isComplete()" class="removeFileButton text-danger">\n' +
        '                  <div class="btn btn-sm btn-danger" data-ng-click="Utils.removeFile(submission, uploads[fileinput].files, file)"><i class="fas fa-times"></i></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '              <div class="fileUpload">\n' +
        '                <div>\n' +
        '                  <div class="fileUploadIcon" data-ng-show="file.error">\n' +
        '                    <i class="fas fa-ban-circle"></i>\n' +
        '                  </div>\n' +
        '                  <div class="fileUploadIcon" data-ng-show="!file.error && !file.isComplete()">\n' +
        '                    <i class="fas fa-clock"></i>\n' +
        '                  </div>\n' +
        '                  <div class="fileUploadIcon" data-ng-show="!file.error && file.isComplete()">\n' +
        '                    <i class="fas fa-check"></i>\n' +
        '                  </div>\n' +
        '                </div>\n' +
        '                <div class="fileUploadProgress progress progress-striped">\n' +
        '                  <div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" data-ng-style="{\'width\': (file.progress() * 100) + \'%\'}"></div>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div class="col-md-8">\n' +
        '            <div class="pl-2 pr-2">\n' +
        '              <div>\n' +
        '                <label class="fileName">{{file.name}}</label>\n' +
        '              </div>\n' +
        '              <div>\n' +
        '                <label class="fileSize">\n' +
        '                  <span data-translate>Size:</span> <span>{{file.size | byteFmt:2}}</span>\n' +
        '                </label>\n' +
        '              </div>\n' +
        '              <br />\n' +
        '              <div data-ng-hide="file.error">\n' +
        '                <div data-ng-repeat="option in file.value">\n' +
        '                  <textarea class="form-control" data-ng-model="option.value" data-ng-attr-placeholder="{{option[\'attrs\'][\'name\']}}"></textarea>\n' +
        '                </div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/signup.html',
      '<div data-ng-switch="public.node.mode">\n' +
        '  <div data-ng-switch-when="whistleblowing.it">\n' +
        '    <div data-ng-include="\'views/partials/signup/whistleblowingit.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-default>\n' +
        '    <div data-ng-include="\'views/partials/signup/default.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n'
    )

    $templateCache.put(
      'views/partials/signup/default.html',
      '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Name</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.name}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Surname</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.surname}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Language</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.language}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Email address</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.email}}</span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/signup/whistleblowingit.html',
      '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Name</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.name}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Surname</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.surname}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Language</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.language}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Email address</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.email}}</span>\n' +
        '</div>\n' +
        '<div class="form-group">\n' +
        '  <label>\n' +
        '    <span data-translate>Phone number</span><span>: </span>\n' +
        '  </label>\n' +
        '  <span>{{tenant.signup.phone}}</span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_additional_questionnaire_invite.html',
      '<div id="TipInfoBox" class="card card.bg-primary" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Additional questionnaire</span>\n' +
        '  </div>\n' +
        '  <div class="card-body clearfix" data-ng-show="!collapsed">\n' +
        '    <div data-translate>Recipients have requested you to fill an additional questionnaire.</div>\n' +
        '    <div class="float-right">\n' +
        '      <button class="btn btn-primary" data-ng-click="tip_open_additional_questionnaire()">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Fill the additional questionnaire</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_comments.html',
      '<div id="TipCommunicationComments" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Comments</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-if="tip.status !== \'closed\' && tip.context.enable_comments && (Authentication.session.role !== \'whistleblower\' || tip.enable_two_way_comments)" class="row">\n' +
        '      <div class="col-md-12 clearfix">\n' +
        '        <textarea id="TipCommunicationCommentsInput" data-ng-model="tip.newCommentContent" maxlength="4096" class="form-control" autocomplete="off" dynamic-textarea></textarea>\n' +
        '        <span class="float-right">{{tip.newCommentContent.length ? tip.newCommentContent.length : \'0\'}}/4096</span>\n' +
        '      </div>\n' +
        '      <div class="col-md-12 clearfix">\n' +
        '        <span class="float-left">\n' +
        '          <button id="comment-action-send" class="btn btn-primary" data-ng-click="newComment()" data-ng-disabled="!tip.newCommentContent">\n' +
        '            <i class="fas fa-comment"></i>\n' +
        '            <span data-translate>Send</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '        <span data-ng-if="Authentication.session.role === \'receiver\' && !tip.context.enable_two_way_comments" class="form-group">\n' +
        '          <label class="inline-checkbox">\n' +
        "            <input data-ng-model=\"tip.enable_two_way_comments\" data-ng-change=\"tip.operation('set', {'key': 'enable_two_way_comments', 'value': tip.enable_two_way_comments})\" type=\"checkbox\" />\n" +
        '            <span data-translate>Allow the whistleblower to write comments</span>\n' +
        '          </label>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div id="SubmissionComments" data-ng-if="tip.comments.length" data-ng-repeat="comment in tip.comments | orderBy:\'creation_date\':true| limitTo:itemsPerPage:((currentCommentsPage - 1) * itemsPerPage)">\n' +
        '      <div id="comment-{{$index}}" data-ng-switch="comment.type" class="mt-2">\n' +
        '        <div data-ng-switch-when="whistleblower" class="messageWB">\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-6" data-translate>Whistleblower</div>\n' +
        '            <div class="col-md-6 text-right">{{comment.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</div>\n' +
        '          </div>\n' +
        '          <div class="preformatted">{{comment.content}}</div>\n' +
        '        </div>\n' +
        '        <div data-ng-switch-when="receiver" class="message">\n' +
        '          <div class="row">\n' +
        '            <div class="col-md-6">{{tip.receivers_by_id[comment.author].name}}</div>\n' +
        '	    <div class="col-md-6 text-right">{{comment.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</div>\n' +
        '          </div>\n' +
        '          <div class="preformatted">{{comment.content}}</div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="mt-2 text-center" data-ng-show="tip.comments.length > itemsPerPage">\n' +
        '      <ul uib-pagination\n' +
        '          total-items="tip.comments.length"\n' +
        '          first-text="<< {{\'First\' | translate}}"\n' +
        '          last-text="{{\'Last\' | translate}} >>"\n' +
        '          previous-text="< {{\'Previous\' | translate}}"\n' +
        '          next-text="{{\'Next\' | translate}} >"\n' +
        '          items-per-page="itemsPerPage"\n' +
        '          data-ng-model="currentCommentsPage"\n' +
        '          max-size="5"\n' +
        '          class="pagination-sm"\n' +
        '          boundary-links="true"\n' +
        '          force-ellipses="true"></ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_field_answer_entry.html',
      '<div data-ng-switch="field.type" class="nested">\n' +
        '  <span data-ng-if="entry" data-ng-switch-when="checkbox">\n' +
        '    <div data-ng-repeat="(k, v) in entry">\n' +
        '      <div data-ng-repeat="option in field.options" data-ng-if="k === option.id && v === true">\n' +
        '        <i class="fas fa-check-square"></i>\n' +
        '        <span>{{option.label}}</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </span>\n' +
        '\n' +
        '  <span data-ng-if="entry[\'value\']" data-ng-switch-when="selectbox|multichoice" data-ng-switch-when-separator="|">\n' +
        '    <div data-ng-repeat="option in field.options">\n' +
        '      <span data-ng-if="entry[\'value\'] === option.id">{{option.label}}</span>\n' +
        '    </div>\n' +
        '  </span>\n' +
        '\n' +
        "  <span data-ng-if=\"entry['value']\" data-ng-switch-when=\"date\">{{entry['value'] | date:'dd-MM-yyyy'}}</span>\n" +
        '\n' +
        "  <span data-ng-if=\"entry['value']\" data-ng-switch-when=\"daterange\"><span data-translate>From:</span> {{entry['value'] | split:':':0 | date:'dd-MM-yyyy'}} <span data-translate>To:</span> {{entry['value'] | split:':':1 | date:'dd-MM-yyyy'}}</span>\n" +
        '\n' +
        '  <span data-ng-if="entry[\'value\']" data-ng-switch-when="tos">\n' +
        '    <i data-ng-if="entry[\'value\'] === true" class="fas fa-check-square"></i>\n' +
        '    <i data-ng-if="entry[\'value\'] === false" class="far fa-square"></i>\n' +
        '  </span>\n' +
        '\n' +
        '  <span data-ng-if="entry" data-ng-switch-when="fieldgroup">\n' +
        "    <div data-ng-repeat=\"field in field.children | orderBy:['y', 'x'] | filter:{ type: '!fileupload'}\">\n" +
        '      <div data-ng-init="fieldAnswers=entry" data-ng-include="\'views/partials/tip_field.html\'"></div>\n' +
        '    </div>\n' +
        '  </span>\n' +
        '\n' +
        '  <span data-ng-if="entry[\'value\']" class="entry-text preformatted" data-ng-switch-default>{{entry[\'value\']}}</span>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_field.html',
      '<div data-ng-if="field.enabled && (!preview || field.preview)" data-ng-class="{\'nested\': !preview}" class="fieldAnswer">\n' +
        '  <div data-ng-class="{\'font-weight-bold\': !preview}">\n' +
        '    <span data-ng-if="!$parent.field && !preview">{{$index + 1}})</span>\n' +
        '    <span>{{field.label}}</span>\n' +
        '  </div>\n' +
        '  <div data-ng-if="!hasMultipleEntries(fieldAnswers[field.id])">\n' +
        '    <div data-ng-init="entry = fieldAnswers[field.id][0]" data-ng-include="\'views/partials/tip_field_answer_entry.html\'"></div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="hasMultipleEntries(fieldAnswers[field.id])">\n' +
        '    <div data-ng-repeat="entry in fieldAnswers[field.id]">\n' +
        '      <div class="nested"><span class="text-muted">#{{$index + 1}}</span></div>\n' +
        '      <div class="nested" data-ng-include="\'views/partials/tip_field_answer_entry.html\'"></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_files_receiver.html',
      '<div id="TipPageFilesInfoBox" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Attachments</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-show="tip.rfiles.length" class="table-responsive">\n' +
        '      <table class="table table-striped" id="fileList">\n' +
        '        <thead>\n' +
        '          <tr>\n' +
        '            <th data-translate>Filename</th>\n' +
        '            <th data-translate>Download</th>\n' +
        '            <th data-translate>Upload date</th>\n' +
        '            <th data-translate>Type</th>\n' +
        '            <th data-translate>File size</th>\n' +
        '          </tr>\n' +
        '        </thead>\n' +
        '        <tbody id="fileListBody">\n' +
        '          <tr id="file-{{$index}}" data-ng-repeat="file in tip.rfiles">\n' +
        '            <td>{{file.name}}</td>\n' +
        '            <td>\n' +
        '              <button class="btn btn-sm btn-primary tip-action-download-file"\n' +
        '                      data-uib-tooltip="{{\'Download\' | translate}}"\n' +
        '                      data-ng-click="downloadRFile(file)">\n' +
        '                <i class="fas fa-download"></i>\n' +
        '              </button>\n' +
        '            </td>\n' +
        "            <td>{{file.creation_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '            <td>{{file.type}}</td>\n' +
        '            <td>{{file.size | byteFmt:2}}</td>\n' +
        '          </tr>\n' +
        '        </tbody>\n' +
        '      </table>\n' +
        '    </div>\n' +
        '    <div data-ng-if="Authentication.session.role === \'receiver\' && !tip.context.enable_attachments" class="form-group">\n' +
        '      <label class="inline-checkbox">\n' +
        "        <input data-ng-model=\"tip.enable_attachments\" data-ng-change=\"tip.operation('set', {'key': 'enable_attachments', 'value': tip.enable_attachments})\" type=\"checkbox\" />\n" +
        '        <span data-translate>Allow the whistleblower to add attachments to the report</span>\n' +
        '      </label>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_files_whistleblower.html',
      '<div id="TipPageFilesInfoBox" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed" data-ng-keypress="eventDismiss(); $event.stopPropagation();">\n' +
        '    <span data-translate>Attachments</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-show="tip.rfiles.length" class="table-responsive">\n' +
        '      <table class="table table-striped" id="fileList">\n' +
        '        <thead>\n' +
        '          <tr>\n' +
        '            <th data-translate>Filename</th>\n' +
        '            <th data-translate>Upload date</th>\n' +
        '            <th data-translate>Type</th>\n' +
        '            <th data-translate>File size</th>\n' +
        '          </tr>\n' +
        '        </thead>\n' +
        '        <tbody id="fileListBody">\n' +
        '          <tr id="file-{{$index}}" data-ng-repeat="file in tip.rfiles | orderBy:\'creation_date\'">\n' +
        '            <td>{{file.name}}</td>\n' +
        "            <td>{{file.creation_date | date:'dd-MM-yyyy HH:mm'}}</td>\n" +
        '            <td>{{file.type}}</td>\n' +
        '            <td>{{file.size | byteFmt:2}}</td>\n' +
        '          </tr>\n' +
        '        </tbody>\n' +
        '      </table>\n' +
        '    </div>\n' +
        '    <br />\n' +
        '    <div data-ng-if="tip.status !== \'closed\'">\n' +
        '      <div data-ng-include="\'views/partials/rfile_upload_button.html\'"></div>\n' +
        '      <br />\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-6" data-ng-include="\'views/partials/rfile_upload_status.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_info.html',
      '<div id="TipInfoBox" class="card card-default">\n' +
        '  <div class="card-header" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '    <div class="row">\n' +
        '      <div class="col-md-12">\n' +
        '        <div class="float-left">\n' +
        '          <span class="input-group">\n' +
        '            <input id="assignLabelInput" type="text" class="form-control" data-ng-attr-placeholder="{{\'Label\' | translate}}" data-ng-model="tip.label" />\n' +
        '            <span class="input-group-append" data-uib-tooltip="{{\'Label the report\' | translate}}">\n' +
        '              <button id="assignLabelButton" class="btn btn-primary" data-ng-click="updateLabel(tip.label)">\n' +
        '                <i class="fas fa-tag"></i>\n' +
        '              </button>\n' +
        '            </span>\n' +
        '          </span>\n' +
        '        </div>\n' +
        '        <div class="float-right" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <span data-ng-include="\'views/partials/tip_submission_status.html\'"></span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="card-body">\n' +
        '    <table class="table table-borderless table-striped">\n' +
        '      <thead>\n' +
        '      <tr>\n' +
        '        <th class="TipInfoID" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <i class="fas fa-hashtag"></i>\n' +
        '        </th>\n' +
        '        <th class="TipInfoContext" data-ng-if="public.contexts.length > 1">\n' +
        '          <i class="fas fa-inbox"></i>\n' +
        '          <span data-translate>Context</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoSubmissionDate">\n' +
        '          <i class="fas fa-clock"></i>\n' +
        '          <span data-translate>Date</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoLastUpdate">\n' +
        '          <i class="fas fa-clock"></i>\n' +
        '          <span data-translate>Last update</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoExpirationDate">\n' +
        '          <i class="fas fa-hourglass"></i>\n' +
        '          <span data-translate>Expiration date</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoReadReceipt" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <i class="fas fa-eye"></i>\n' +
        '        </th>\n' +
        '        <th class="TipInfoConnection" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <i class="fas fa-network-wired"></i>\n' +
        '          <span>Tor</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoSubmissionStatus">\n' +
        '          <i class="fas fa-dot-circle"></i>\n' +
        '          <span data-translate>Status</span>\n' +
        '        </th>\n' +
        '        <th class="TipInfoScore" data-ng-if="Authentication.session.role === \'receiver\' && public.node.enable_scoring_system">\n' +
        '          <i class="fas fa-flash"></i>\n' +
        '          <span data-translate>Score</span>\n' +
        '        </th>\n' +
        '      </tr>\n' +
        '      </thead>\n' +
        '      <tbody>\n' +
        '      <tr>\n' +
        '        <td class="TipInfoID" data-ng-if="Authentication.session.role === \'receiver\'">{{tip.progressive}}</td>\n' +
        '        <td class="TipInfoContext" data-ng-if="public.contexts.length > 1">{{tip.context.name}}</td>\n' +
        '        <td class="TipInfoCreationDate">{{tip.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</td>\n' +
        '        <td class="TipInfoUpdateDate">{{tip.update_date | date:\'dd-MM-yyyy HH:mm\'}}</td>\n' +
        '        <td class="TipInfoExpirationDate">\n' +
        '          <span data-ng-if="!Utils.isNever(tip.expiration_date)">{{tip.expiration_date | date:\'dd-MM-yyyy HH:mm\'}}</span>\n' +
        '          <span data-ng-if="Utils.isNever(tip.expiration_date)">-</span>\n' +
        '        </td>\n' +
        '        <td class="TipInfoLastAccess" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <i data-ng-if="tip.last_access >= tip.update_date" class="fas fa-check"\n' +
        "             data-uib-tooltip=\"{{'The whistleblower has already read the last update' | translate }} ({{tip.last_access | date:'dd-MM-yyyy HH:mm'}})\"></i>\n" +
        '          <i data-ng-if="tip.last_access < tip.update_date" class="fas fa-times"\n' +
        '             data-uib-tooltip="{{\'The whistleblower has not read the last update yet\' | translate }}"></i>\n' +
        '        </td>\n' +
        '        <td class="TipInfoConnection" data-ng-if="Authentication.session.role === \'receiver\'">\n' +
        '          <i data-ng-if="tip.tor" class="fas fa-check"></i>\n' +
        '        </td>\n' +
        '	<td class="TipInfoSubmissionStatus">{{tip.submissionStatusStr}}</td>\n' +
        '        <td class="TipInfoScore" data-ng-if="Authentication.session.role === \'receiver\' && public.node.enable_scoring_system" data-ng-switch="tip.score">\n' +
        '          <span data-ng-switch-when="0">-</span>\n' +
        '          <span class="badge badge-primary" data-ng-switch-when="1" data-translate>Low</span>\n' +
        '          <span class="badge badge-primary" data-ng-switch-when="2" data-translate>Medium</span>\n' +
        '          <span class="badge badge-primary" data-ng-switch-when="3" data-translate>High</span>\n' +
        '        </td>\n' +
        '      </tr>\n' +
        '      </tbody>\n' +
        '    </table>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_message.html',
      '<div id="message-{{$index}}" data-ng-switch="message.type" class="mt-2">\n' +
        '  <div data-ng-switch-when="whistleblower" class="messageWB">\n' +
        '    <div class="row">\n' +
        '      <div class="col-md-6" data-ng-switch="Authentication.session.role">\n' +
        '        <div data-ng-switch-when="whistleblower"><span data-translate>To:</span> {{tip.receivers_by_id[message.receiver_involved_id].name}}</div>\n' +
        '        <div data-ng-switch-when="receiver" translate>Whistleblower</div>\n' +
        '      </div>\n' +
        '      <div class="col-md-6 text-right">{{message.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</div>\n' +
        '    </div>\n' +
        '    <div class="preformatted">{{message.content}}</div>\n' +
        '  </div>\n' +
        '  <div data-ng-switch-when="receiver" class="message">\n' +
        '    <div class="row">\n' +
        '      <div class="col-md-6" data-ng-switch="Authentication.session.role">\n' +
        '        <div data-ng-switch-when="whistleblower"><span data-translate>From:</span> {{tip.receivers_by_id[message.receiver_involved_id].name}}</div>\n' +
        '        <div data-ng-switch-when="receiver">{{receivers_by_id[message.receiver_involved_id].name}}</div>\n' +
        '      </div>\n' +
        '      <div class="col-md-6 text-right">{{message.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</div>\n' +
        '    </div>\n' +
        '    <div class="preformatted">{{message.content}}</div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_messages.html',
      '<div id="TipCommunicationMessages" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Messages</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-if="tip.status !== \'closed\' && tip.context.enable_messages && (Authentication.session.role !== \'whistleblower\' || tip.enable_two_way_messages)" class="row">\n' +
        '      <div class="col-md-12 clearfix">\n' +
        '        <div class="form-inline">\n' +
        '          <span data-ng-if="Authentication.session.role === \'whistleblower\'">\n' +
        '            <span><span data-translate>Recipient</span>:<span>&nbsp;</span></span>\n' +
        '            <select id="message-recipient-selector" data-ng-model="tip.msg_receiver_selected" data-ng-options="obj.key as obj.value for obj in tip.msg_receivers_selector | orderBy:\'value\'" class="form-control"></select>\n' +
        '          </span>\n' +
        '        </div>\n' +
        '        <textarea id="TipCommunicationMessagesInput" data-ng-model="tip.newMessageContent" maxlength="4096" class="form-control" autocomplete="off" dynamic-textarea></textarea>\n' +
        '        <span class="float-right">{{tip.newMessagesContent.length ? tip.newMessagesContent.length : \'0\'}}/4096</span>\n' +
        '      </div>\n' +
        '      <div class="col-md-12 clearfix">\n' +
        '        <span class="float-left">\n' +
        '          <button id="message-action-send" class="btn btn-primary" data-ng-click="newMessage()" data-ng-disabled="!tip.newMessageContent || (Authentication.session.role === \'whistleblower\' && !tip.msg_receiver_selected)">\n' +
        '            <i class="fas fa-comment"></i>\n' +
        '            <span data-translate>Send</span>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '        <span data-ng-if="Authentication.session.role === \'receiver\' && !tip.context.enable_two_way_messages" class="form-group">\n' +
        '          <label>\n' +
        "            <input data-ng-model=\"tip.enable_two_way_messages\" data-ng-change=\"tip.operation('set', {'key': 'enable_two_way_messages', 'value': tip.enable_two_way_messages})\" type=\"checkbox\" />\n" +
        '            <span data-translate>Allow the whistleblower to send messages</span>\n' +
        '          </label>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div id="SubmissionMessages">\n' +
        '      <div data-ng-repeat="message in tip.messages | orderBy:\'creation_date\':true | limitTo:itemsPerPage:((currentMessagesPage - 1) * itemsPerPage)">\n' +
        '        <div data-ng-include="\'views/partials/tip_message.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="mt-2 text-center" data-ng-show="tip.messages.length > itemsPerPage">\n' +
        '      <ul uib-pagination\n' +
        '          total-items="tip.messages.length"\n' +
        '          first-text="<< {{\'First\' | translate}}"\n' +
        '          last-text="{{\'Last\' | translate}} >>"\n' +
        '          previous-text="< {{\'Previous\' | translate}}"\n' +
        '          next-text="{{\'Next\' | translate}} >"\n' +
        '          items-per-page="itemsPerPage"\n' +
        '          data-ng-model="currentMessagesPage"\n' +
        '          max-size="5"\n' +
        '          class="pagination-sm"\n' +
        '          boundary-links="true"\n' +
        '          force-ellipses="true"></ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_questionnaire_answers.html',
      '<div id="TipQuestionnaireAnswersBox" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Questionnaire answers</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-repeat="questionnaire in tip.questionnaires">\n' +
        '      <div data-ng-if="tip.questionnaires.length > 1">\n' +
        '        <span data-translate>Questionnaire</span>\n' +
        '        <span>{{$index + 1}}</span>\n' +
        '      </div>\n' +
        '      <div data-ng-repeat="step in questionnaire.steps | orderBy:\'order\'">\n' +
        '        <dt id="step={{$index}}" data-ng-if="questionnaire.steps.length > 1 && tip.context.show_steps_navigation_interface && step.enabled">\n' +
        '          <span data-translate>Step</span>\n' +
        '          <span>{{$index + 1}}: {{step.label}}</span>\n' +
        '        </dt>\n' +
        '        <dd>\n' +
        "          <div data-ng-if=\"step.enabled\" data-ng-repeat=\"field in step.children | orderBy:['y', 'x'] | filter:{ type: '!fileupload'}\">\n" +
        '            <span data-ng-init="fieldAnswers=questionnaire.answers" data-ng-include="\'views/partials/tip_field.html\'"></span>\n' +
        '          </div>\n' +
        '        </dd>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_receiver_list.html',
      '<div id="TipPageReceiversInfoBox" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed" data-ng-keypress="eventDismiss(); $event.stopPropagation();">\n' +
        '    <span data-translate>Recipients</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-repeat="receiver in tip.receivers">\n' +
        '      <div>{{tip.receivers_by_id[receiver.id].name}}</div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/tip_submission_status.html',
      '<span class="form-inline" data-ng-click="$event.stopPropagation();">\n' +
        '  <span id="AssignSubmissionStatus">\n' +
        '    <span data-translate>Status:</span>\n' +
        '    <select id="assignSubmissionStatus" class="form-control" data-ng-model="tip.status" data-ng-options="state.id as state.label | translate for state in submission_statuses.slice(1)" data-ng-change="updateSubmissionStatus()"></select>\n' +
        '    <select id="assignSubmissionSubStatus" class="form-control" data-ng-model="tip.substatus" data-ng-options="substate.id as substate.label | translate for substate in submission_statuses_by_id[tip.status].substatuses" data-ng-hide="!submission_statuses_by_id[tip.status].substatuses.length" data-ng-change="updateSubmissionStatus()">\n' +
        '      <option value="" data-translate></option>\n' +
        '    </select>\n' +
        '  </span>\n' +
        '</span>\n'
    )

    $templateCache.put(
      'views/partials/tip_upload_wbfile.html',
      '<div id="TipPageWBFileUpload" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Files attached by recipients</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed"\n' +
        '       data-ng-controller="RTipWBFileUploadCtrl">\n' +
        '    <div data-ng-repeat="wbfile in tip.wbfiles | orderBy: \'creation_date\'">\n' +
        '      <div id="wbfile-{{$index}}" data-wbfile data-ctx="\'rtip\'"></div>\n' +
        '    </div>\n' +
        '    <div data-translate>Upload a file:</div>\n' +
        '    <div class="form" data-ng-controller="WBFileUploadCtrl"\n' +
        "        data-flow-init=\"{target: 'api/rtips/' + tip_id + '/wbfile'}\"\n" +
        '        data-flow-files-submitted="beginUpload($files, $event, $flow)"\n' +
        '        data-flow-file-success="reload()"\n' +
        '        extend-flow-valid-size="public.node.maximum_filesize*1024*1024">\n' +
        '      <div class="input-group">\n' +
        '        <span class="input-group-prepend"><span class="input-group-text" data-translate>Description</span></span>\n' +
        '        <input type="text" class="form-control" data-ng-model="file_upload_description" />\n' +
        '        <span class="input-group-append" data-ng-disabled="!file_upload_description" >\n' +
        '          <div class="custom-file">\n' +
        '            <input id="customFile" class="custom-file-input" type="file" data-flow-btn data-flow-single-file />\n' +
        '            <label class="btn btn-primary" for="customFile">\n' +
        '              <i class="fas fa-upload"></i>\n' +
        '              <span data-translate>Upload</span>\n' +
        '            </label>\n' +
        '          </div>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div errors-upload></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/upload_error_msg.html',
      '<div data-ng-show="displayErr && file_error_msgs.length" class="mt-2 alert alert-danger alert-dismissible">\n' +
        '  <button type="submit" class="close" data-ng-click="displayErr = false" data-dismiss="alert" aria-label="close">&times;</button>\n' +
        '  <div>{{ file_error_msgs.slice(-1)[0] }}</div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/upload_error_msgs.html',
      '<div data-ng-if="file_error_msgs" data-ng-repeat="file_error_msg in file_error_msgs track by $index">\n' +
        '  <div class="mt-2 alert alert-danger alert-dismissible">\n' +
        '    <button type="submit" class="close" data-ng-click="file_error_msgs.splice($index, 1)" data-dismiss="alert" aria-label="close">&times;</button>\n' +
        '    <div>{{file_error_msg}}</div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/user_home.html',
      '<div data-ng-include="\'views/partials/user_warnings.html\'"></div>\n' +
        '<div id="UserWelcomeMessage">\n' +
        '  <div class="title" data-translate>Welcome!</div>\n' +
        '  <br />\n' +
        '  <ul>\n' +
        '    <li>\n' +
        '      <span data-translate>For the user documentation, visit:</span> <a href="https://docs.globaleaks.org" rel="noreferrer" target="_blank">docs.globaleaks.org</a>\n' +
        '    </li>\n' +
        '    <li>\n' +
        '      <span data-translate>If you need technical support, have general questions, or have new ideas for the software:</span> <a href="https://forum.globaleaks.org" rel="noreferrer" target="_blank">forum.globaleaks.org</a>\n' +
        '    </li>\n' +
        '    <li>\n' +
        '      <span data-translate>If you want to contribute to software development or report a bug, please open an issue in our ticketing system:</span> <a href="https://github.com/globaleaks/GlobaLeaks/issues/" rel="noreferrer" target="_blank">github.com/globaleaks/GlobaLeaks/issues</a>\n' +
        '    </li>\n' +
        '    <li>\n' +
        '      <span data-translate>Join our chat:</span> <a href="https://slack.globaleaks.org" rel="noreferrer" target="_blank">slack.globaleaks.org</a>\n' +
        '    </li>\n' +
        '    <li>\n' +
        '      <span data-translate>Follow the project on:</span> <a href="https://twitter.com/globaleaks" rel="noreferrer" target="_blank">Twitter</a>\n' +
        '    </li>\n' +
        '  </ul>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/user_warnings.html',
      '<div id="UserWarnings">\n' +
        '  <div class="alert alert-secondary" data-ng-show="Authentication.session.role === \'admin\' && resources.node.update_available">\n' +
        '    <i class="fa fa-exclamation-circle"></i>\n' +
        '    <span data-translate>An update is available:</span> <span><a href="https://github.com/globaleaks/GlobaLeaks/blob/main/CHANGELOG" rel="noreferrer" target="_blank">{{resources.node.latest_version}} (<span data-translate>Changelog</span>)</a></span>\n' +
        '  </div>\n' +
        '  <div class="alert alert-secondary" data-ng-show="resources.preferences.encryption && !resources.preferences.clicked_recovery_key">\n' +
        '    <i class="fa fa-exclamation-circle"></i>\n' +
        '    <span data-translate>We recommend that you access the “Preferences” section in order to retrieve your “Account Recovery Key” and store it safely. This key will be necessary to recover your access to the platform and to your data in case you forget your password.</span>\n' +
        '  </div>\n' +
        '  <div class="alert alert-secondary" data-ng-show="Authentication.session.role === \'admin\' && resources.preferences.encryption && !all_recipients_enabled">\n' +
        '    <i class="fa fa-exclamation-circle"></i>\n' +
        "    <span data-translate>One or more recipients have not performed the first login yet. This means they won't be receiving reports.</span>\n" +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/user.html',
      '<div data-ng-hide="Authentication.session.require_password_change">\n' +
        '  <div id="LanguagePickerBox" data-ng-if="public.node.languages_enabled.length > 1" class="float-right ml-1 mb-2">\n' +
        '    <select class="form-control" data-ng-model="GLTranslate.state.language" data-ng-options="item.code as item.native for item in languages_enabled_selector | orderBy:\'native\'"></select>\n' +
        '  </div>\n' +
        '  <div id="LoginStatusBox" data-ng-if="Utils.showUserStatusBox()" class="float-right ml-1 mb-2">\n' +
        '    <span id="UsernameBox" data-ng-if="Authentication.session.role !== \'whistleblower\'">\n' +
        '      <label>{{resources.preferences.name}}</label>\n' +
        '      <span class="text-separator">|</span>\n' +
        '    </span>\n' +
        '    <span id="HomeLinkBox" data-ng-if="Authentication.session.role !== \'whistleblower\'">\n' +
        '      <a id="HomepageLink" data-ng-href="#{{Authentication.session.homepage}}" data-uib-tooltip="{{\'Home\' | translate}}"><i class="fas fa-home"></i></a>\n' +
        '      <span class="text-separator">|</span>\n' +
        '    </span>\n' +
        '    <span id="PreferencesLinkBox" data-ng-if="Authentication.session.role !== \'whistleblower\' && !Authentication.session.properties.management_session">\n' +
        '      <a id="PreferencesLink" data-ng-href="#{{Authentication.session.preferencespage}}" data-uib-tooltip="{{\'Preferences\' | translate}}"><i class="fas fa-user"></i></a>\n' +
        '      <span class="text-separator">|</span>\n' +
        '    </span>\n' +
        '    <span id="SupportLinkBox" data-ng-if="Authentication.session && Authentication.session.role !== \'whistleblower\'">\n' +
        '      <a id="SupportLink" href="" data-ng-click="Utils.openSupportModal()" data-uib-tooltip="{{\'Request support\' | translate}}"><i class="fas fa-life-ring"></i></a>\n' +
        '      <span class="text-separator">|</span>\n' +
        '    </span>\n' +
        '    <span id="LogoutLinkBox">\n' +
        '	    <a id="LogoutLink" href="" data-ng-click="Authentication.logout()" data-uib-tooltip="{{\'Logout\' | translate}}"><i class="fas fa-sign-out-alt"></i><span data-ng-if="Authentication.session.role === \'whistleblower\'"><span> </span><span data-translate>Logout</span></span></a>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div id="WhistleblowerLoginBox" class="ml-1 mb-1" data-ng-if="Utils.showWBLoginBox()" data-ng-include="\'views/partials/receipt.html\'"></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/wbfile.html',
      '<div class="wbfile card card-default">\n' +
        '  <div class="card-body">\n' +
        '    <div class="top-row clearfix">\n' +
        '      <span class="float-left">\n' +
        '        <span class="text-muted" data-ng-if="ctx === \'download\'"><span data-translate>Filename</span>:</span>\n' +
        '        <span class="filename">{{wbfile.name }}</span>\n' +
        '      </span>\n' +
        '      <span class="float-right">\n' +
        '        <span>\n' +
        '          <span class="download-button btn btn-sm btn-primary" data-ng-click="downloadWBFile(wbfile)">\n' +
        '            <i class="fas fa-download"></i>\n' +
        '          </span>\n' +
        '          <button data-ng-if="Authentication.session.role === \'receiver\'" class="btn btn-sm btn-danger" data-ng-click="deleteWBFile(wbfile)" data-single-click>\n' +
        '            <i class="fas fa-trash"></i>\n' +
        '          </button>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '    <div class="file-info-row">\n' +
        '      <span>\n' +
        '        <span data-translate>From</span>: <span>{{receivers_by_id[wbfile.author].name}}</span>\n' +
        '      </span>\n' +
        '      <span class="px-1">\n' +
        "        <span data-translate>Date</span>: <span>{{wbfile.creation_date | date:'dd-MM-yyyy HH:MM'}}</span>\n" +
        '      </span>\n' +
        '      <span class="px-1">\n' +
        '        <span data-translate>Size:</span> <span>{{wbfile.size | byteFmt:2}}</span>\n' +
        '      </span>\n' +
        '      <span class="px-1" data-ng-if="ctx === \'rtip\'">\n' +
        '        <span data-translate>Number of downloads</span>: <span>{{wbfile.downloads}}</span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '    <div data-ng-if="wbfile.description">\n' +
        '      <span>\n' +
        '        <span data-translate>Description</span>:\n' +
        '      </span>\n' +
        '      <span>{{wbfile.description}}</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/partials/widget_wbfiles.html',
      '<div id="AttachedWBFile" class="card card-default" data-ng-init="collapsed = false; submission = {}">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Files attached by recipients</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-repeat="wbfile in tip.wbfiles | orderBy: \'creation_date\'">\n' +
        '      <div id="wbfile-{{$index}}" data-wbfile></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/2fa.html',
      '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <div class="form-group">\n' +
        '      <label data-translate>Enter the two factor authentication code</label>\n' +
        '      <input class="form-control" data-ng-model="request.auth_code" type="text" size="6" maxlength="6" required />\n' +
        '    </div>\n' +
        '\n' +
        '    <div class="input-group">\n' +
        '      <button class="btn btn-primary" data-ng-disabled="request.auth_code.length !== 6" data-ng-click="submit()" type="submit">\n' +
        '        <span data-translate>Proceed</span>\n' +
        '      </button>\n' +
        '\n' +
        '      <a class="btn" data-ng-click="Utils.openSupportModal()" data-uib-tooltip="{{\'Request support\' | translate}}"><i class="fas fa-life-ring"></i></a>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/failure_recovery.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span data-translate>The provided recovery key is invalid.</span>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/failure_token.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span data-translate>The provided reset token is invalid or expired.</span>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/main.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <label data-ng-if="!public.node.simplified_login" data-translate>Enter your account\'s username or your email address to request a password reset.</label>\n' +
        '    <label data-ng-if="public.node.simplified_login" data-translate>Enter your email address to request a password reset.</label>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">	\n' +
        '  <div class="col-md-3">\n' +
        '    <form name="form" autocomplete="off" novalidate>\n' +
        '      <div class="input-group">\n' +
        '        <input class="form-control" name="username" data-ng-model="request.username" type="text" required />\n' +
        '        <span class="input-group-append">\n' +
        '          <button class="btn btn-primary" data-ng-disabled="!request.username"  data-ng-click="submit()" type="submit" data-translate>Submit</button>\n' +
        '	  <a class="btn" href="" data-ng-click="Utils.openSupportModal()" data-uib-tooltip="{{\'Request support\' | translate}}"><i class="fas fa-life-ring"></i></a>\n' +
        '	</span>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/recovery.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <label data-translate>Enter your account recovery key to complete the password reset procedure</label>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6">\n' +
        '    <form name="form" autocomplete="off" novalidate>\n' +
        '      <div class="input-group">\n' +
        '        <input class="form-control recoverykeyinput" type="text" placeholder="XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX" maxlength="64" size="64" data-ng-model="request.recovery_key" name="recoveryKey" recoverykeyvalidator>\n' +
        '        <div class="input-group-btn">\n' +
        '          <button class="btn btn-primary" data-ng-click="submit()" type="submit" data-translate>Submit</button>\n' +
        '          <a class="btn" href="" data-ng-click="Utils.openSupportModal()" data-uib-tooltip="{{\'Request support\' | translate}}"><i class="fas fa-life-ring"></i></a>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </form>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/passwordreset/requested.html',
      '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span data-translate>Password reset requested.</span>\n' +
        '    <span data-translate>Please check your inbox for further instructions.</span>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/recipient/content.html',
      '<form name="contentForm" data-ng-controller="AdminGeneralSettingsCtrl" novalidate>\n' +
        '  <div data-ng-include="tabs[0].template"></div>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/recipient/home.html',
      '<div id="RecipientHomepage" data-ng-include="\'views/partials/user_home.html\'"></div>\n'
    )

    $templateCache.put(
      'views/recipient/sidebar.html',
      '<a href="#/recipient/home" data-ng-class="{\'active\': location.path() === \'/recipient/home\'}" data-translate>Home</a>\n' +
        '<a href="#/recipient/reports" data-ng-class="{\'active\': location.path() === \'/recipient/reports\'}" data-translate>Reports</a>\n' +
        '<a href="#/recipient/content" data-ng-class="{\'active\': location.path() === \'/recipient/content\'}" data-ng-if="resources.preferences.can_edit_general_settings" data-translate>Site settings</a>\n'
    )

    $templateCache.put(
      'views/recipient/tip.html',
      '<div id="Toolbar" class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <a id="link-tiplist"\n' +
        '       href="#/recipient/reports"\n' +
        '       data-uib-tooltip="{{\'Reports\' | translate}}"\n' +
        '       class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-arrow-left"></i>\n' +
        '    </a>\n' +
        '\n' +
        '    <span id="tip-action-star"\n' +
        '          data-ng-click="tip_toggle_star()"\n' +
        '          data-uib-tooltip="{{\'Mark as important\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i data-ng-if="tip.important" class="fas fa-star text-warning"></i>\n' +
        '      <i data-ng-if="!tip.important" class="far fa-star"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-notify" data-ng-if="!tip.enable_notifications"\n' +
        '          data-ng-click="tip_notify(true)"\n' +
        '          data-uib-tooltip="{{\'Turn on email notifications\' | translate}}"\n' +
        '          class="btn btn-outline-secondary active">\n' +
        '      <i class="fas fa-bell-slash"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-silence" data-ng-if="tip.enable_notifications"\n' +
        '          data-ng-click="tip_notify(false)"\n' +
        '          data-uib-tooltip="{{\'Silence email notifications\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-bell"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-grant-access"\n' +
        '          data-ng-if="resources.preferences.can_grant_access_to_reports"\n' +
        '          data-ng-click="openGrantTipAccessModal()"\n' +
        '          data-uib-tooltip="{{\'Grant access\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-user-plus"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-revoke-access"\n' +
        '          data-ng-if="resources.preferences.can_grant_access_to_reports"\n' +
        '          data-ng-click="openRevokeTipAccessModal()"\n' +
        '          data-uib-tooltip="{{\'Revoke access\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-user-minus"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-postpone"\n' +
        '          data-ng-if="resources.preferences.can_postpone_expiration && contexts_by_id[tip.context_id].tip_timetolive > 0"\n' +
        '          data-ng-click="tip_postpone()"\n' +
        '          data-uib-tooltip="{{\'Postpone the expiration date\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-clock"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-delete"\n' +
        '          data-ng-if="resources.preferences.can_delete_submission"\n' +
        '          data-ng-click="tip_delete()"\n' +
        '          data-uib-tooltip="{{\'Delete\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-trash"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-print"\n' +
        '          data-ng-click="Utils.print()"\n' +
        '          data-uib-tooltip="{{\'Print\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-print"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="tip-action-export"\n' +
        '          data-ng-click="exportTip(tip)"\n' +
        '          data-uib-tooltip="{{\'Export\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '        <i class="fas fa-save"></i>\n' +
        '    </span>\n' +
        '\n' +
        '    <span id="link-reload"\n' +
        '          data-ng-click="reload()"\n' +
        '          data-uib-tooltip="{{\'Refresh\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-sync"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row mt-2">\n' +
        '  <div class="col-md-12" data-ng-include="\'views/partials/tip_info.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row" data-ng-if="tip.receivers.length > 1">\n' +
        '  <div class="col-md-12" data-ng-include="\'views/partials/tip_receiver_list.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6" data-ng-include="\'views/partials/tip_questionnaire_answers.html\'"></div>\n' +
        '  <div class="col-md-6" data-ng-if="tip.enable_whistleblower_identity" data-ng-include="\'views/recipient/whistleblower_identity.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div data-ng-include="\'views/partials/tip_files_receiver.html\'"></div>\n' +
        '    <div data-ng-include="\'views/partials/tip_upload_wbfile.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6" data-ng-if="tip.context.enable_comments || tip.comments.length" data-ng-include="\'views/partials/tip_comments.html\'"></div>\n' +
        '  <div class="col-md-6" data-ng-if="tip.context.enable_messages || tip.messages.length" data-ng-include="\'views/partials/tip_messages.html\'"></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/recipient/tips.html',
      '<div id="Toolbar" class="row">\n' +
        '  <div class="col-md-12 clearfix">\n' +
        '    <span class="float-left">\n' +
        '      <a id="link-home"\n' +
        '         href="#/recipient/home"\n' +
        '         data-uib-tooltip="{{\'Home\' | translate}}"\n' +
        '         class="btn btn-outline-secondary">\n' +
        '        <i class="fas fa-arrow-left"></i>\n' +
        '      </a>\n' +
        '\n' +
        '      <span id="tip-action-select-all"\n' +
        '            data-ng-if="selected_tips.length !== resources.rtips.rtips.length"\n' +
        '            data-ng-click="select_all()"\n' +
        '            data-uib-tooltip="{{\'Select all\' | translate}}"\n' +
        '            class="btn btn-outline-secondary">\n' +
        '        <i class="far fa-square"></i>\n' +
        '      </span>\n' +
        '\n' +
        '      <span id="tip-action-select-all"\n' +
        '            data-ng-if="selected_tips.length === resources.rtips.rtips.length"\n' +
        '            data-ng-click="deselect_all()"\n' +
        '            data-uib-tooltip="{{\'Deselect all\' | translate}}"\n' +
        '            class="btn btn-outline-secondary">\n' +
        '        <i class="fas fa-check-square"></i>\n' +
        '      </span>\n' +
        '\n' +
        '      <span data-ng-if="selected_tips.length">\n' +
        '        <span id="tip-action-grant-access-selected"\n' +
        '              data-ng-if="resources.preferences.can_grant_access_to_reports"\n' +
        '              data-ng-click="open_grant_access_modal()"\n' +
        '              data-uib-tooltip="{{\'Grant access\' | translate}}"\n' +
        '              class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-user-plus"></i>\n' +
        '        </span>\n' +
        '\n' +
        '        <span id="tip-action-revoke-access-selected"\n' +
        '              data-ng-if="resources.preferences.can_grant_access_to_reports"\n' +
        '              data-ng-click="open_revoke_access_modal()"\n' +
        '              data-uib-tooltip="{{\'Revoke access\' | translate}}"\n' +
        '              class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-user-minus"></i>\n' +
        '        </span>\n' +
        '\n' +
        '        <span id="tip-action-delete-selected"\n' +
        '              data-ng-if="resources.preferences.can_delete_submission"\n' +
        '              data-ng-click="tip_delete_selected()"\n' +
        '              data-uib-tooltip="{{\'Delete\' | translate}}"\n' +
        '              class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-trash"></i>\n' +
        '        </span>\n' +
        '\n' +
        '        <span id="tip-action-export-selected"\n' +
        '              data-ng-click="tips_export()"\n' +
        '              data-uib-tooltip="{{\'Export\' | translate}}"\n' +
        '              class="btn btn-outline-secondary">\n' +
        '          <i class="fas fa-save"></i>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '\n' +
        '      <span id="tip-action-reload"\n' +
        '            data-ng-click="reload()"\n' +
        '            data-uib-tooltip="{{\'Refresh\' | translate}}"\n' +
        '            class="btn btn-outline-secondary">\n' +
        '        <i class="fas fa-sync"></i>\n' +
        '      </span>\n' +
        '\n' +
        '      <span id="SearchFilter" class="form-group float-right">\n' +
        '        <div class="input-group">\n' +
        '          <input type="text" class="form-control" data-ng-attr-placeholder="{{\'Search\' | translate}}"\n' +
        '                 data-ng-model="search">\n' +
        '            <div class="input-group-append">\n' +
        '            <span class="input-group-text"><i class="fas fa-search"></i></span>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </span>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '</div>\n' +
        '\n' +
        '<div id="TipList" class="row mt-2">\n' +
        '  <div class="col-md-12 table-responsive">\n' +
        '    <table class="table table-striped" id="tipList" data-ng-init="sortKey = \'creation_date\'; sortReverse=true;">\n' +
        '      <thead>\n' +
        '        <tr>\n' +
        '          <th></th>\n' +
        '          <th data-ng-click="sortKey = \'important\'; sortReverse = !sortReverse">\n' +
        '            <i class="fas fa-star" ></i>\n' +
        '            <span data-ng-show="sortKey == \'important\'">\n' +
        '              <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '              <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoID" data-ng-click="sortKey = \'id\'; sortReverse = !sortReverse">\n' +
        '            <i class="fas fa-hashtag"></i>\n' +
        '            <span data-ng-show="sortKey == \'id\'">\n' +
        '              <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '              <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoContext" data-ng-if="public.contexts.length > 1">\n' +
        '            <span data-ng-click="sortKey = \'context_name\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-inbox"></i>\n' +
        '              <span data-translate>Context</span>\n' +
        '              <span data-ng-show="sortKey == \'context_name\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoLabel">\n' +
        '            <span data-ng-click="sortKey = \'label\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-tag"></i>\n' +
        '              <span data-translate>Label</span>\n' +
        '              <span data-ng-show="sortKey == \'label\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoStatus">\n' +
        '            <span data-ng-click="sortKey = \'submissionStatusStr\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-dot-circle"></i>\n' +
        '              <span data-translate>Status</span>\n' +
        '              <span data-ng-show="sortKey == \'submissionStatusStr\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoSubmissionDate">\n' +
        '            <span data-ng-click="sortKey = \'creation_date\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-clock"></i>\n' +
        '              <span data-translate>Report date</span>\n' +
        '              <span data-ng-show="sortKey == \'creation_date\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoUpdateDate">\n' +
        '            <span data-ng-click="sortKey = \'update_date\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-clock"></i>\n' +
        '              <span data-translate>Last update</span>\n' +
        '              <span data-ng-show="sortKey == \'update_date\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoExpirationDate">\n' +
        '            <span data-ng-click="sortKey = \'expiration_date\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-hourglass"></i>\n' +
        '              <span data-translate>Expiration date</span>\n' +
        '              <span data-ng-show="sortKey == \'expiration_date\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoReadReceipt">\n' +
        '            <i class="fas fa-eye"></i>\n' +
        '          </th>\n' +
        '          <th class="TipInfoPreview">\n' +
        '            <span>\n' +
        '              <i class="fas fa-list-alt"></i>\n' +
        '              <span data-translate>Preview</span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '          <th class="TipInfoScore" data-ng-if="public.node.enable_scoring_system">\n' +
        '            <span data-ng-click="$parent.sortKey = \'score\'; sortReverse = !sortReverse">\n' +
        '              <i class="fas fa-flash"></i>\n' +
        '              <span data-translate>Score</span>\n' +
        '              <span data-ng-show="$parent.sortKey == \'score\'">\n' +
        '                <span data-ng-show="!sortReverse" class="fas fa-caret-down"></span>\n' +
        '                <span data-ng-show="sortReverse" class="fas fa-caret-up"></span>\n' +
        '              </span>\n' +
        '            </span>\n' +
        '          </th>\n' +
        '        </tr>\n' +
        '      </thead>\n' +
        '      <tbody id="tipListTableBody">\n' +
        '        <tr id="tip-{{$index}}"\n' +
        '            data-ng-repeat="tip in filteredTips | orderBy:sortKey:sortReverse | limitTo:itemsPerPage:((currentPage - 1) * itemsPerPage)"\n' +
        '            data-ng-class="{\'font-weight-bold\': tip.updated, \'selectedTip\': isSelected(tip.id)}" class="tip-action-open"\n' +
        '            data-ng-click="Utils.go(\'/status/\' + tip.id)">\n' +
        '          <td>\n' +
        '            <span class="btn btn-sm btn-outline-secondary" data-ng-if="isSelected(tip.id)"\n' +
        '                  data-ng-click="tip_switch(tip.id); $event.stopPropagation();">\n' +
        '              <i class="fas fa-check-square"></i>\n' +
        '            </span>\n' +
        '            <span class="btn btn-sm btn-outline-secondary" data-ng-if="!isSelected(tip.id)"\n' +
        '                  data-ng-click="tip_switch(tip.id); $event.stopPropagation();">\n' +
        '              <i class="far fa-square"></i>\n' +
        '            </span>\n' +
        '            <span name="TipExport"\n' +
        '                  data-ng-click="exportTip(tip); $event.stopPropagation()"\n' +
        '                  data-uib-tooltip="{{\'Export\' | translate}}"\n' +
        '                  novalidate>\n' +
        '              <button id="tip-action-export" class="btn btn-sm btn-outline-secondary">\n' +
        '                <i class="fas fa-save"></i>\n' +
        '              </button>\n' +
        '            </span>\n' +
        '          </td>\n' +
        '          <td data-uib-tooltip="{{\'Mark as important\' | translate }}">\n' +
        '            <i class="fas fa-star text-warning" data-ng-click="toggle_star(tip); $event.stopPropagation();" data-ng-class="{\'visible-on-over\': !tip.important}"></i>\n' +
        '          </td>\n' +
        '          <td class="TipInfoID">{{tip.progressive}}</td>\n' +
        '          <td class="TipInfoContext" data-ng-if="public.contexts.length > 1">{{tip.context_name}}</td>\n' +
        '          <td class="TipInfoLabel">{{tip.label}}</td>\n' +
        '          <td class="TipInfoStatus"><span>{{tip.submissionStatusStr}}</span></td>\n' +
        '          <td class="TipInfoSubmissionDate">{{tip.creation_date | date:\'dd-MM-yyyy HH:mm\'}}</td>\n' +
        '          <td class="TipInfoUpdateDate">{{tip.update_date | date:\'dd-MM-yyyy HH:mm\'}}</td>\n' +
        '          <td class="TipInfoExpirationDate">\n' +
        '            <span\n' +
        '                data-ng-if="!Utils.isNever(tip.expiration_date)">{{tip.expiration_date | date:\'dd-MM-yyyy HH:mm\'}}</span>\n' +
        '            <span data-ng-if="Utils.isNever(tip.expiration_date)">-</span>\n' +
        '          </td>\n' +
        '          <td class="TipInfoLastAccess">\n' +
        '            <i data-ng-if="tip.last_access >= tip.update_date" class="fas fa-check"\n' +
        "               data-uib-tooltip=\"{{'The whistleblower has already read the last update' | translate }} ({{tip.last_access | date:'dd-MM-yyyy HH:mm'}})\"></i>\n" +
        '            <i data-ng-if="tip.last_access < tip.update_date" class="fas fa-times"\n' +
        '               data-uib-tooltip="{{\'The whistleblower has not read the last update yet\' | translate }}"></i>\n' +
        '          </td>\n' +
        '          <td class="TipInfoPreview">\n' +
        '            <div data-ng-if="tip.file_count || tip.comment_count || tip.message_count">\n' +
        '              <span data-ng-if="tip.file_count" data-uib-tooltip="{{\'Files\' | translate}}"><i class="fas fa-file text-secondary"></i>: {{tip.file_count}}</span>\n' +
        '              <span data-ng-if="tip.comment_count" data-uib-tooltip="{{\'Comments\' | translate}}"><i class="fas fa-comment text-secondary"></i>: {{tip.comment_count}}</span>\n' +
        '              <span data-ng-if="tip.message_count" data-uib-tooltip="{{\'Messages\' | translate}}"><i class="fas fa-envelope text-secondary"></i>: {{tip.message_count}}</span>\n' +
        '            </div>\n' +
        '            <div class="preview">\n' +
        '              <div data-ng-repeat="step in tip.questionnaire" data-ng-init="fieldAnswers = tip.answers; preview=true">\n' +
        '                <div data-ng-repeat="field in step.children" data-ng-include="\'views/partials/tip_field.html\'"></div>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </td>\n' +
        '          <td class="TipInfoScore" data-ng-if="public.node.enable_scoring_system" data-ng-switch="tip.score">\n' +
        '            <span data-ng-switch-when="0">-</span>\n' +
        '            <span class="badge badge-primary" data-ng-switch-when="1" data-translate>Low</span>\n' +
        '            <span class="badge badge-primary" data-ng-switch-when="2" data-translate>Medium</span>\n' +
        '            <span class="badge badge-primary" data-ng-switch-when="3" data-translate>High</span>\n' +
        '          </td>\n' +
        '        </tr>\n' +
        '      </tbody>\n' +
        '    </table>\n' +
        '\n' +
        '    <div class="text-center" data-ng-show="filteredTips.length > itemsPerPage">\n' +
        '      <ul uib-pagination\n' +
        '          total-items="filteredTips.length"\n' +
        '          first-text="<< {{\'First\' | translate}}"\n' +
        '          last-text="{{\'Last\' | translate}} >>"\n' +
        '          previous-text="< {{\'Previous\' | translate}}"\n' +
        '          next-text="{{\'Next\' | translate}} >"\n' +
        '          items-per-page="itemsPerPage"\n' +
        '          data-ng-model="currentPage"\n' +
        '          max-size="10"\n' +
        '          class="pagination-sm"\n' +
        '          boundary-links="true"\n' +
        '          force-ellipses="true"></ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/recipient/whistleblower_identity.html',
      '<div id="TipInfoBox" class="card card-default" data-ng-init="collapsed = false">\n' +
        '  <div class="card-header clearfix" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <span data-translate>Identity</span>\n' +
        '    <span class="float-right">\n' +
        '      <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '      <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-if="tip.iar && tip.iar.reply !== \'authorized\'">\n' +
        '      <div>\n' +
        "        <label data-translate>Access to the whistleblower's identity has been requested to the custodian.</label>\n" +
        '      </div>\n' +
        '      <div>\n' +
        '        <label data-translate>Date of the request</label><span>:</span>\n' +
        "        <span>{{tip.iar.request_date | date:'dd-MM-yyyy HH:mm'}}</span>\n" +
        '      </div>\n' +
        '      <div>\n' +
        '        <label data-translate>Request status</label><span>:</span>\n' +
        '        <span data-ng-switch="tip.iar.reply">\n' +
        '          <span data-ng-switch-when="pending" data-translate>Waiting for authorization</span>\n' +
        '          <span data-ng-switch-when="denied" data-translate>Denied</span>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div data-ng-if="tip.iar && tip.iar.reply == \'denied\'"><label data-translate>Reply motivation</label>:<span>{{tip.iar.reply_motivation}}</span></div>\n' +
        '    </div>\n' +
        '    <span data-ng-if="!tip.data.whistleblower_identity_provided">-</span>\n' +
        '    <div data-ng-if="tip.data.whistleblower_identity_provided">\n' +
        '      <div data-ng-if="tip.iar && tip.iar.reply === \'authorized\'">\n' +
        "        <div data-ng-repeat=\"field in whistleblower_identity_field.children | orderBy:['y', 'x']\">\n" +
        '          <span data-ng-init="fieldAnswers=tip.data.whistleblower_identity" data-ng-include="\'views/partials/tip_field.html\'"></span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-if="!tip.iar || tip.iar.reply === \'denied\'">\n' +
        '        <button data-ng-if="tip.custodian" class="btn btn-sm btn-primary" data-ng-click="file_identity_access_request()" data-translate>Request access to the whistleblower\'s identity</button>\n' +
        '        <button data-ng-if="!tip.custodian" class="btn btn-sm btn-primary" data-ng-click="access_identity()" data-translate>Show</button>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/signup/activation.html',
      '<div class="row wizard-block">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="congratulations">\n' +
        '      <div class="title" data-translate>Congratulations!</div>\n' +
        '      <div>\n' +
        '        <span data-translate>You have completed the platform activation.</span>\n' +
        '        <span data-translate>Please check your inbox for further instructions.</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/signup/main.html',
      '<div class="row">\n' +
        '  <div data-ng-show="step === 1" class="col-md-6 wizard-block" data-ng-switch="public.node.mode">\n' +
        '    <div data-ng-switch-when="whistleblowing.it">\n' +
        '      <div data-ng-include="\'views/signup/modes/whistleblowingit.html\'"></div>\n' +
        '    </div>\n' +
        '    <div data-ng-switch-default>\n' +
        '      <div data-ng-include="\'views/signup/modes/default.html\'"></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step === 2" class="col-md-12 wizard-block">\n' +
        '    <div class="congratulations">\n' +
        '      <div class="title" data-translate>Success!</div>\n' +
        '      <div>\n' +
        '        <span data-translate>Your whistleblowing platform is almost ready!</span>\n' +
        '        <span data-translate>Check your inbox to activate it.</span>\n' +
        '        <br />\n' +
        '        <span data-translate>If not activated within 24 hours the platform will be automatically deleted.</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/signup/modes/default.html',
      '<form name="signupForm" data-ng-class="{\'was-validated\': validated}" novalidate>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12">\n' +
        '      <div class="title" data-translate>Sign up</div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 form-group">\n' +
        '      <label>\n' +
        '        <span data-translate>Domain</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <div class="input-group">\n' +
        '        <input name="subdomain" class="form-control" data-ng-model="signup.subdomain" type="text"\n' +
        '               data-ng-pattern="/^[a-z0-9]+$/" data-subdomainvalidator required >\n' +
        '        <span class="input-group-append"><span class="input-group-text">.{{public.node.rootdomain}}</span></span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label data-translate>Name</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="name" class="form-control" data-ng-model="signup.name" type="text" required>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label data-translate>Surname</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="surname" class="form-control" data-ng-model="signup.surname" type="text" required>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>\n' +
        '        <span data-translate>Email address</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <input name="mail_address" class="form-control" data-ng-model="signup.email"\n' +
        '             data-ng-pattern="CONSTANTS.email_regexp" type="email"\n' +
        '             data-ng-class="{\'is-invalid\': validated && signupForm.mail_address.$error.pattern}"\n' +
        '             required>\n' +
        '      <div class="text-danger" data-ng-show="signupForm.mail_address.$error.pattern">\n' +
        '        <span data-translate>Invalid email address</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>\n' +
        '        <span data-translate>Email address</span> <span>(</span><span data-translate>Confirmation</span><span>)</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <input name="email" class="form-control" data-ng-model="confirmation_email"\n' +
        '             data-disable-ccp type="email"\n' +
        '             data-ng-class="{\'is-invalid\': validated && signup.email !== confirmation_email}"\n' +
        '             required>\n' +
        '      <div class="text-danger" data-ng-show="validated && signupForm.mail_address.$valid && signup.email !== confirmation_email">\n' +
        '        <span data-translate>Invalid confirmation</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-include="\'views/signup/tos.html\'"></div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12">\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated = true) && !signupForm.$invalid && complete()">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Proceed</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/signup/modes/whistleblowingit.html',
      '<form name="signupForm" data-ng-class="{\'was-validated\': validated}" novalidate>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12">\n' +
        '      <div class="title" data-translate>Sign up</div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Nome</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="name" class="form-control" data-ng-model="signup.name" type="text" required>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Cognome</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="surname" class="form-control" data-ng-model="signup.surname" type="text" required>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Ruolo</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="role" class="custom-select" data-ng-model="signup.role" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option value="option1">Direttore generale</option>\n' +
        '          <option value="option2">Responsabile ICT</option>\n' +
        '          <option value="option3">Responsabile internal audit</option>\n' +
        '          <option value="option4">Responsabile prevenzione corruzione</option>\n' +
        '          <option value="other">Altro</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Telefono</label> <span class="text-danger"\n' +
        '                                    data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="phone" class="form-control" data-ng-model="signup.phone" type="text"\n' +
        '             data-ng-pattern="CONSTANTS.phonenumber_regexp" required>\n' +
        '      <div class="text-danger" data-ng-show="signupForm.phone.$error.pattern">\n' +
        '        <span data-translate>Invalid phone number</span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>\n' +
        '        <span>Email di ruolo</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <div>\n' +
        '        <input name="email" class="form-control" data-ng-model="signup.email" data-ng-pattern="CONSTANTS.email_regexp" type="email" required>\n' +
        '        <div class="text-danger" data-ng-show="signupForm.email.$error.pattern">\n' +
        '          <span data-translate>Invalid email address</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>\n' +
        '        <span>Email di ruolo (Conferma)</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <div>\n' +
        '        <input name="email" class="form-control" data-ng-model="confirmation_email" data-disable-ccp type="email" required>\n' +
        '        <div class="text-danger" data-ng-show="signupForm.email.$valid && signup.email !== confirmation_email">\n' +
        '          <span data-translate>Invalid confirmation</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Come sei venuto a conoscenza del progetto?</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="hear_channel" class="custom-select" data-ng-model="signup.hear_channel" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option value="option1">Convegno di settore</option>\n' +
        '          <option value="option2">Media</option>\n' +
        '          <option value="option3">Motori di ricerca</option>\n' +
        '          <option value="option4">Passaparola</option>\n' +
        '          <option value="option5">Social media</option>\n' +
        '          <option value="other">Altro</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <br />\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12">\n' +
        '      <label class="title">Dati ente:</label>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Nome</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="organization_name" class="form-control" data-ng-model="signup.organization_name" type="text" data-ng-change="updateSubdomain()" required>\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Tipo</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="organization_type" class="custom-select" data-ng-model="signup.organization_type" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option value="L10">Agenzie ed enti per il turismo</option>\n' +
        '          <option value="L19">Agenzie ed enti regionali del lavoro</option>\n' +
        '          <option value="L13">Agenzie ed enti regionali di sviluppo agricolo</option>\n' +
        '          <option value="L2">Agenzie ed enti regionali per la formazione, la ricerca e l\'ambiente</option>\n' +
        '          <option value="C10">Agenzie fiscali</option>\n' +
        '          <option value="L20">Agenzie regionali e provinciale per la rappresentanza negoziale</option>\n' +
        '          <option value="L21">Agenzie regionali per le erogazioni in agricoltura</option>\n' +
        '          <option value="L22">Agenzie regionali sanitarie</option>\n' +
        '          <option value="L15">Agenzie, enti e consorzi pubblici per il diritto allo studio universitario</option>\n' +
        '          <option value="L1">Altri enti locali</option>\n' +
        '          <option value="C13">Automobile club federati ACI</option>\n' +
        '          <option value="C5">Autorità amministrative indipendenti</option>\n' +
        '          <option value="L23">Autorità di ambito territoriale ottimale</option>\n' +
        '          <option value="L40">Autorità di bacino</option>\n' +
        '          <option value="L11">Autorità portuali</option>\n' +
        '          <option value="L39">Aziende e consorzi pubblici territoriali per l\'edilizia residenziale</option>\n' +
        '          <option value="L46">Aziende ed amministrazioni dello stato ad ordinamento autonomo</option>\n' +
        '          <option value="L8">Aziende ospedaliere, aziende ospedaliere universitarie, policlinici e istituti di ricovero e cura a carattere scientifico pubblici</option>\n' +
        '          <option value="L34">Aziende pubbliche di servizi alla persona</option>\n' +
        '          <option value="L7">Aziende sanitarie locali</option>\n' +
        '          <option value="L35">Camere di commercio, industria, artigianato e agricoltura e loro unioni regionali</option>\n' +
        '          <option value="L45">Città metropolitane</option>\n' +
        '          <option value="L6">Comuni e loro consorzi e associazioni</option>\n' +
        '          <option value="L12">Comunità montane e loro consorzi e associazioni</option>\n' +
        '          <option value="L24">Consorzi di bacino imbrifero montano</option>\n' +
        '          <option value="L28">Consorzi interuniversitari di ricerca</option>\n' +
        '          <option value="L42">Consorzi per l\'area di sviluppo industriale</option>\n' +
        '          <option value="L36">Consorzi tra amministrazioni locali</option>\n' +
        '          <option value="L44">Enti di regolazione dei servizi idrici e o dei rifiuti</option>\n' +
        '          <option value="C8">Enti e istituzioni di ricerca pubblici</option>\n' +
        '          <option value="SCECP">Enti nazionali di previdenza ed assistenza sociale in conto economico consolidato</option>\n' +
        '          <option value="C3">Enti pubblici non economici</option>\n' +
        '          <option value="C7">Enti pubblici produttori di servizi assistenziali, ricreativi e culturali </option>\n' +
        '          <option value="C14">Federazioni nazionali, ordini, collegi e consigli professionali</option>\n' +
        '          <option value="L16">Fondazioni lirico sinfoniche</option>\n' +
        '          <option value="C11">Forze di polizia ad ordinamento civile e militare per la tutela dell\'ordine e della sicurezza pubblica</option>\n' +
        '          <option value="GPS">Gestori di pubblici servizi</option>\n' +
        '          <option value="L33">Istituti di istruzione statale di ogni ordine e grado</option>\n' +
        '          <option value="C12">Istituti zooprofilattici sperimentali</option>\n' +
        '          <option value="L43">Istituzioni per l\'alta formazione artistica, musicale e coreutica - AFAM</option>\n' +
        '          <option value="C2">Organi costituzionali e di rilievo costituzionale</option>\n' +
        '          <option value="L38">Parchi nazionali, consorzi e enti gestori di parchi e aree naturali protette</option>\n' +
        '          <option value="C1">Presidenza del consiglio dei ministri, ministeri e avvocatura dello stato</option>\n' +
        '          <option value="L5">Province e loro consorzi e associazioni</option>\n' +
        '          <option value="L4">Regioni, province autonome e loro consorzi e associazioni</option>\n' +
        '          <option value="SCEC">Società in conto economico consolidato</option>\n' +
        '          <option value="SP">Società partecipata</option>\n' +
        '          <option value="L31">Teatri stabili ad iniziativa pubblica</option>\n' +
        '          <option value="L18">Unioni di comuni e loro consorzi e associazioni</option>\n' +
        '          <option value="L17">Università e istituti di istruzione universitaria pubblici</option>\n' +
        '          <option value="OTHER">Altro</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Codice fiscale</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="tax_code" class="form-control" data-ng-model="signup.organization_tax_code" type="text"\n' +
        '             data-ng-required="!signup.organization_tax_code && !signup.organization_vat_code">\n' +
        '    </div>\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Partita IVA</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="vat_code" class="form-control" data-ng-model="signup.organization_vat_code" type="text"\n' +
        '             data-ng-required="!signup.organization_tax_code && !signup.organization_vat_code">\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 form-group">\n' +
        '      <label>\n' +
        '        <span>Questo sarà il sito di segnalazione del tuo ente:</span>\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      </label>\n' +
        '      <div class="fieldDescription">Se vuoi, puoi modificare l’indirizzo per il whistleblowing del tuo ente indicato qui sotto.</div>\n' +
        '      <div class="input-group">\n' +
        '        <input name="subdomain" class="form-control" data-ng-model="signup.subdomain" type="text"\n' +
        '               data-ng-pattern="/^[a-z0-9]+$/" required\n' +
        '               subdomainvalidator>\n' +
        '        <span class="input-group-append"><span class="input-group-text">.{{public.node.rootdomain}}</span></span>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-4 form-group">\n' +
        '      <label>Regione</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="organization_location2" class="custom-select" data-ng-model="signup.organization_location2" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option data-ng-repeat="x in data_countries_italy_regions" value="{{x.id}}">{{x.nome}}</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-4 form-group">\n' +
        '      <label>Provincia</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="organization_location3" class="custom-select" data-ng-model="signup.organization_location3" data-ng-disabled="!signup.organization_location2" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option data-ng-repeat="x in data_countries_italy_provinces | filter:{\'id_regione\': signup.organization_location2}:true" value="{{x.id}}">{{x.nome}}</option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="col-md-4 form-group">\n' +
        '      <label>Città</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div>\n' +
        '        <select name="organization_location4" class="custom-select" data-ng-model="signup.organization_location4" data-ng-disabled="!signup.organization_location3" required>\n' +
        '          <option value="" selected="selected"></option>\n' +
        '          <option data-ng-repeat="x in data_countries_italy_cities | filter:{\'id_provincia\': signup.organization_location3}:true" value="{{x.id}}">{{x.nome}}</option>\n' +
        '          <option value=""></option>\n' +
        '        </select>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 form-group">\n' +
        '      <label>Numero dipendenti</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-6">\n' +
        '          <select name="organization_number_employees" class="custom-select" data-ng-model="signup.organization_number_employees" required>\n' +
        '            <option value="" selected="selected"></option>\n' +
        '            <option value="option1">0-15</option>\n' +
        '            <option value="option2">15 - 100</option>\n' +
        '            <option value="option3">100 - 1.000</option>\n' +
        '            <option value="option4">1.000 - 5.000</option>\n' +
        '            <option value="option5">5.000 - 10.000</option>\n' +
        '            <option value="option6">&gt; 10.000</option>\n' +
        '          </select>\n' +
        '	</div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 form-group">\n' +
        '      <label>Numero utenti</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <div class="fieldDescription">Per numero utenti si intende il bacino di riferimento dell’ente, per un comune sono i cittadini, per una ASL sono gli utenti del servizio sanitario di pertinenza, per l’università gli iscritti, etc.</div>\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-6">\n' +
        '          <select name="organization_number_users" class="custom-select" data-ng-model="signup.organization_number_users" required>\n' +
        '            <option value="" selected="selected"></option>\n' +
        '            <option value="option1">0 - 500</option>\n' +
        '            <option value="option2">500 - 5.000</option>\n' +
        '            <option value="option3">5.000 - 50.000</option>\n' +
        '            <option value="option4">50.000 - 100.000</option>\n' +
        '            <option value="option5">100.000 - 500.000</option>\n' +
        '            <option value="option6">&gt; 500.000</option>\n' +
        '          </select>\n' +
        '	</div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-6 form-group">\n' +
        '      <label>Sito ente</label>\n' +
        '      <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '      <input name="organization_site" class="form-control" data-ng-model="signup.organization_site" type="text" required>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <br />\n' +
        '  <div data-ng-include="\'views/signup/tos.html\'"></div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12">\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated = true) && !signupForm.$invalid && complete()">\n' +
        '        <i class="fas fa-check"></i>\n' +
        '        <span data-translate>Proceed</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</form>\n'
    )

    $templateCache.put(
      'views/signup/tos.html',
      '<div class="row">\n' +
        '  <div id="SignupTos1" class="col-md-12 form-group" data-ng-if="public.node.signup_tos1_enable">\n' +
        '    <label>{{public.node.signup_tos1_title}}</label>\n' +
        '    <div class="tos-text">{{public.node.signup_tos1_text}}</div>\n' +
        '    <div class="form-check">\n' +
        '      <input name="tos1" class="form-check-input" type="checkbox" data-ng-model="signup.tos1" required/>\n' +
        '      <span class="form-check-label">{{public.node.signup_tos1_checkbox_label}}</span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div id="SignupTos2" class="col-md-12 form-group" data-ng-if="public.node.signup_tos2_enable">\n' +
        '    <label>{{public.node.signup_tos2_title}}</label>\n' +
        '    <div class="tos-text">{{public.node.signup_tos2_text}}</div>\n' +
        '    <div class="form-check">\n' +
        '      <input name="tos2" class="form-check-input" type="checkbox" data-ng-model="signup.tos2" required/>\n' +
        '      <label class="form-check-label">{{public.node.signup_tos2_checkbox_label}}</label>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/context_selection.html',
      '<div class="row mb-2" data-ng-if="public.node.contexts_clarification">\n' +
        '  <div class="col-md-12" data-markdown-to-html="public.node.contexts_clarification"></div>\n' +
        '</div>\n' +
        '<div id="SubmissionStepContext" class="row">\n' +
        '  <div data-ng-repeat="context in selectable_contexts | orderBy:contextsOrderPredicate" id="context-{{$index}}" class="{{Utils.getCardSize(selectable_contexts.length)}}" data-ng-click="selectContext(context)">\n' +
        '    <div class="selectCard">\n' +
        '      <div class="row">\n' +
        '        <div class="col-md-12 title">{{context.name}}</div>\n' +
        '      </div>\n' +
        '      <div class="row" data-ng-if="context.picture">\n' +
        '        <div class="col-md-4"><img class="contextImg" alt="context picture" data-ng-if="context.picture" data-ng-src="/s/{{context.id}}" /></div>\n' +
        '      </div>\n' +
        '      <div class="row" data-ng-if="context.description">\n' +
        '        <div class="col-md-12 description">{{context.description}}</div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/fields/whistleblower_identity.html',
      '<div data-ng-init="submission._submission.identity_provided = true;">\n' +
        '  <div data-ng-if="!field.required">\n' +
        '    <label class="form-check-inline"><input class="inputelem" type="radio" name="whistleblower_identity_radio_1" data-ng-model="submission._submission.identity_provided" data-ng-value="true" /><span data-translate>Yes</span></label>\n' +
        '    <label class="form-check-inline"><input class="inputelem" type="radio" name="whistleblober_identity_radio_1" data-ng-model="submission._submission.identity_provided" data-ng-value="false" /><span data-translate>No</span></label>\n' +
        '  </div>\n' +
        '  <div data-ng-if="submission._submission.identity_provided === true">\n' +
        '    <div data-ng-include="\'views/whistleblower/form.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/form_field_input.html',
      '<div class="Question" data-ng-form="{{fieldFormVarName}}">\n' +
        '  <div data-ng-controller="SubmissionFormFieldCtrl" data-ng-switch="field.template_id">\n' +
        '    <div data-ng-switch-when="whistleblower_identity">\n' +
        '      <div data-ng-include="\'views/whistleblower/fields/whistleblower_identity.html\'"></div>\n' +
        '    </div>\n' +
        '    <div data-ng-switch-default data-ng-switch="field.type">\n' +
        '      <div data-ng-switch-when="textarea" data-ng-model-options="{\'debounce\':250}">\n' +
        '        <textarea id="{{fieldEntry}}"\n' +
        '                  name="input-{{entryIndex}}"\n' +
        '                  class="form-control inputelem"\n' +
        '                  data-ng-model="entry[\'value\']"\n' +
        '                  data-ng-minlength="field.attrs.min_len.value"\n' +
        '                  maxlength="{{field.attrs.max_len.value}}"\n' +
        '                  aria-label="{{field.label}}"\n' +
        '                  data-ng-required="entry.required_status"\n' +
        '                  data-ng-attr-placeholder="{{field.placeholder}}"\n' +
        '                  dynamic-textarea></textarea>\n' +
        '        <div class="clearfix">\n' +
        "          <div data-ng-if=\"entry['value'].length && field.attrs.max_len.value > 0 && (field.attrs.max_len.value - entry['value'].length) <= 50\" class=\"float-right\">{{entry['value'].length}}/{{field.attrs.max_len.value}}</div>\n" +
        '        </div>\n' +
        '        <div data-ng-if="displayErrors()" class="text-danger">\n' +
        '          <span data-ng-if="f[\'input-\' + entryIndex].$error.required" data-translate>This field is mandatory</span>\n' +
        '          <span data-ng-if="f[\'input-\' + entryIndex].$error.minlength" data-translate>The answer is too short</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="selectbox">\n' +
        '        <select id="{{fieldEntry}}" name="{{\'input-\' +  entryIndex}}" class="custom-select inputelem" data-ng-model="entry[\'value\']" data-ng-required="entry.required_status" data-ng-show="field.options.length < 10">\n' +
        '          <option class="d-none" value=""></option>\n' +
        '          <option data-ng-repeat="option in field.options | orderBy:field.attrs.display_alphabetically.value ? \'label\' : \'order\'" id="{{fieldEntry}}-option-{{$index}}" value="{{option.id}}">{{option.label}}</option>\n' +
        '        </select>\n' +
        '	<div class="input-group" data-ng-class="{\'d-block\': !entry[\'value\']}" data-ng-show="field.options.length >= 10">\n' +
        '          <ui-select data-ng-model="entry[\'value\']" data-theme="bootstrap" data-on-select="entry[\'value\'] = $item.id; label = $item.label">\n' +
        '            <ui-select-match data-ng-attr-placeholder="{{\'Search\' | translate}}">\n' +
        '              <span data-ng-bind="label"></span>\n' +
        '            </ui-select-match>\n' +
        '            <ui-select-choices data-repeat="option in field.options | filter:{\'label\': $select.search} | orderBy:field.attrs.display_alphabetically.value ? \'label\' : \'order\'" refresh="" resfresh-delay="0">\n' +
        '              <span data-ng-bind-html="option.label | highlight: $select.search"></span>\n' +
        '            </ui-select-choices>\n' +
        '          </ui-select>\n' +
        '          <span class="input-append" data-ng-click="entry[\'value\']=\'\';" data-ng-disabled="!entry[\'value\']" data-ng-if="entry[\'value\']"><i class="input-group-text fas fa-times-circle"></i></span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="multichoice">\n' +
        '        <div data-ng-repeat="option in field.options | orderBy:\'order\'" id="{{stepId}}-field-{{fieldRow}}-{{fieldCol}}-input-{{entryIndex}}" name="{{\'input-\' +  entryIndex}}">\n' +
        '          <input class="form-control-input inputelem" type="radio" id="{{stepId}}-field-{{fieldRow}}-{{fieldCol}}-input-{{entryIndex}}-option-{{$index}}" data-ng-model="entry[\'value\']" value="{{option.id}}" data-ng-required="field.required" />\n' +
        '          <span data-uib-tooltip="{{option.hint1}}" class="form-control-label" data-ng-class="{\'text-underline\': option.hint1}">{{option.label}}</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="checkbox">\n' +
        "        <div data-ng-repeat=\"option in field.options | orderBy:field.attrs.display_alphabetically.value ? 'label' : 'order'\">\n" +
        '          <label>\n' +
        '            <input id="{{fieldEntry}}"\n' +
        "                   name=\"{{'input-' + $parent.entryIndex + '-option-' + entryIndex}}\"\n" +
        '                   class="form-control-input inputelem"\n' +
        '                   data-ng-model="entry[option.id]"\n' +
        '                   data-ng-required="entry.required_status"\n' +
        '                   type="checkbox" />\n' +
        '            <span data-uib-tooltip="{{option.hint1}}" class="form-control-label" data-ng-class="{\'text-underline\': option.hint1}">{{option.label}}</span>\n' +
        '          </label>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="date">\n' +
        '        <div class="input-group">\n' +
        '          <input id="{{fieldEntry}}"\n' +
        '                 name="input-{{entryIndex}}"\n' +
        '                 class="form-control inputelem"\n' +
        '                 type="text"\n' +
        '                 readonly="readonly"\n' +
        '                 aria-label="{{field.label}}"\n' +
        '                 data-ng-model="entry[\'value\']"\n' +
        '                 data-ng-required="entry.required_status"\n' +
        '                 data-ng-click="open()"\n' +
        '                 uib-datepicker-popup\n' +
        '                 datepicker-options="dateOptions"\n' +
        '                 is-open="status.opened"\n' +
        '                 show-button-bar="false" />\n' +
        '          <span class="input-group-append" data-ng-click="open()"><i class="input-group-text fas fa-calendar"></i></span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="daterange" class="form-inline">\n' +
        '        <span class="form-group">\n' +
        '          <label data-translate>From</label>\n' +
        '          <div class="input-group mx-1">\n' +
        '            <input id="{{fieldEntry}}"\n' +
        '                   name="input-{{entryIndex}}"\n' +
        '                   class="form-control inputelem"\n' +
        '                   type="text"\n' +
        '                   readonly="readonly"\n' +
        '                   aria-label="{{field.label}}"\n' +
        '                   data-ng-model="daterange.start"\n' +
        '                   data-ng-required="entry.required_status"\n' +
        '                   data-ng-attr-placeholder="{{field.placeholder}}"\n' +
        '                   data-ng-click="openStart()"\n' +
        '                   uib-datepicker-popup\n' +
        '                   datepicker-options="dateOptions1"\n' +
        '                   is-open="status.openedStart"\n' +
        '                   show-button-bar="false" />\n' +
        '            <span class="input-group-append" data-ng-click="openStart()"><i class="input-group-text fas fa-calendar"></i></span>\n' +
        '          </div>\n' +
        '        </span>\n' +
        '        <span class="form-group mx-1" data-ng-if="daterange.start">\n' +
        '          <label data-translate>To</label>\n' +
        '          <div class="input-group mx-1">\n' +
        '            <input id="{{fieldEntry}}"\n' +
        '                   name="input-{{entryIndex}}"\n' +
        '                   class="form-control inputelem"\n' +
        '                   type="text"\n' +
        '                   readonly="readonly"\n' +
        '                   aria-label="{{field.label}}"\n' +
        '                   data-ng-model="daterange.end"\n' +
        '                   data-ng-required="entry.required_status"\n' +
        '                   data-ng-attr-placeholder="{{field.placeholder}}"\n' +
        '                   data-ng-click="openEnd()"\n' +
        '                   uib-datepicker-popup\n' +
        '                   datepicker-options="dateOptions2"\n' +
        '                   is-open="status.openedEnd"\n' +
        '		   show-button-bar="false" />\n' +
        '            <span class="input-group-append" data-ng-click="openEnd()"><i class="input-group-text fas fa-calendar"></i></span>\n' +
        '          </div>\n' +
        '        </span>\n' +
        '        <span class="ml-1" data-ng-if="daterange.start">\n' +
        '          <button type="button" class="btn btn-outline-secondary" ng-click="clear()"><i class="fas fa-times-circle"></i></button>\n' +
        '        </span>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="tos">\n' +
        '        <div class="form-group tos-text" data-markdown-to-html="field.attrs.text.value"></div>\n' +
        '        <div data-ng-if="field.attrs.attachment.value">\n' +
        '          <a data-ng-href="{{field.attrs.attachment_url.value}}" rel="noreferrer" target="_blank">{{field.attrs.attachment_text.value}}</a>\n' +
        '        </div>\n' +
        '        <div class="form-check">\n' +
        '          <label>\n' +
        '            <input id="{{fieldEntry}}"\n' +
        '                   name="input-{{entryIndex}}"\n' +
        '                   class="form-check-input inputelem"\n' +
        '                   data-ng-model="entry[\'value\']"\n' +
        '                   data-ng-required="entry.required_status"\n' +
        '                   value="{{field.value}}"\n' +
        '                   type="checkbox" />\n' +
        '            <span class="form-check-label">{{field.attrs.checkbox_label.value}}</span>\n' +
        '	  </label>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="fileupload">\n' +
        '        <div id="{{fieldEntry}}" data-ng-include="\'views/partials/rfile_upload_button.html\'"></div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-when="fieldgroup">\n' +
        '        <div data-ng-if="field.attrs.multimedia.value" data-ng-switch="field.attrs.multimedia_type.value">\n' +
        '          <div data-ng-switch-when="image">\n' +
        '            <img data-ng-src="{{field.attrs.multimedia_url.value}}" />\n' +
        '          </div>\n' +
        '          <div data-ng-switch-when="audio">\n' +
        '            <audio controls>\n' +
        '              <source data-ng-src="{{field.attrs.multimedia_url.value}}" type="audio/mpeg" />\n' +
        '            </audio>\n' +
        '          </div>\n' +
        '          <div data-ng-switch-when="video">\n' +
        '            <video controls><source data-ng-src="{{field.attrs.multimedia_url.value}}" type="video/mp4"></video>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div data-ng-include="\'views/whistleblower/form.html\'"></div>\n' +
        '      </div>\n' +
        '      <div data-ng-switch-default data-ng-model-options="{\'debounce\':250}">\n' +
        '        <input id="{{fieldEntry}}"\n' +
        '               name="input-{{entryIndex}}"\n' +
        '               class="form-control inputelem"\n' +
        '               data-ng-model="entry[\'value\']"\n' +
        '               data-ng-minlength="field.attrs.min_len.value"\n' +
        '               data-ng-pattern="validator"\n' +
        '               maxlength="{{field.attrs.max_len.value}}"\n' +
        '               data-ng-required="entry.required_status"\n' +
        '               data-ng-attr-placeholder="{{field.placeholder}}"\n' +
        '               aria-label="{{field.label}}"\n' +
        '               type="text" />\n' +
        '        <div class="clearfix">\n' +
        '          <div data-ng-if="f[\'input-\' + entryIndex].$error.pattern && field.attrs.input_validation.value === \'custom\'" class="text-danger" data-translate>The specified input is not valid.</div>\n' +
        '\n' +
        "          <div data-ng-if=\"f['input-' + entryIndex].$error.pattern && field.attrs.input_validation.value !== 'custom'\">\n" +
        '            <span class="text-danger" data-translate>The specified input is not valid:</span>\n' +
        '            <span class="text-danger" data-ng-switch="field.attrs.input_validation.value">\n' +
        '              <span data-ng-switch-when="email" data-translate>please enter a valid email address.</span>\n' +
        '              <span data-ng-switch-when="number" class="text-danger" data-translate>please enter numbers only.</span>\n' +
        '              <span data-ng-switch-when="phonenumber" class="text-danger" data-translate>please enter numbers only.</span>\n' +
        '            </span>\n' +
        '          </div>\n' +
        '\n' +
        "	  <div data-ng-if=\"entry['value'].length && field.attrs.max_len.value > 0 && (field.attrs.max_len.value - entry['value'].length) <= 50\" class=\"float-right\">{{entry['value'].length}}/{{field.attrs.max_len.value}}</div>\n" +
        '          <div data-ng-if="entry.required_status && displayErrors()" class="float-left text-danger">\n' +
        '          </div>\n' +
        '          <span data-ng-if="f[\'input-\' + entryIndex].$error.required && displayErrors()" class="text-danger" data-translate>This field is mandatory</span>\n' +
        '          <span data-ng-if="f[\'input-\' + entryIndex].$error.minlength && displayErrors()" class="text-danger" data-translate>The answer is too short</span>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="field.type !== \'inputbox\' && field.type !== \'textarea\' && entry.required_status && displayErrors()" class="text-danger" data-translate>This field is mandatory</div>\n' +
        '  <div data-ng-if="field.type === \'selectbox\'" data-ng-repeat="option in field.options">\n' +
        '    <div data-ng-show="option.set && option.hint1"><i class="fas fa-info-circle"></i> {{option.hint1}}</div>\n' +
        '  </div>\n' +
        '  <div data-ng-repeat="option in field.options">\n' +
        '    <div data-ng-show="option.set && option.hint2" data-ng-class="{\'text-danger\': option.block_submission}"><i class="fas fa-info-circle"></i> {{option.hint2}}</div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/form_field_inputs.html',
      '<div class="fieldAnswerEntry" data-ng-repeat="entry in entries" data-ng-class="{\'fieldAnswerEntryFirst\': $first, \'fieldAnswerEntryLast\': $last}" data-ng-init="entryIndex=$index">\n' +
        '  <div data-ng-controller="SubmissionFieldEntryCtrl">\n' +
        '    <div class="fieldAnswerEntryLabel clearfix" data-ng-if="entries.length > 1">\n' +
        '      <span class="float-left">\n' +
        '        <label class="text-muted">\n' +
        '          <span>#{{entryIndex + 1}}</span>\n' +
        '        </label>\n' +
        '      </span>\n' +
        '      <span class="float-right">\n' +
        '        <span class="text-danger" data-uib-tooltip="{{\'Remove\' | translate}}" data-ng-click="Utils.deleteFromList(entries, entry)">\n' +
        '          <i class="fas fa-times"></i>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '    <div data-ng-include="\'views/whistleblower/form_field_input.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div data-ng-if="field.multi_entry && field.type === \'fieldgroup\'" class="float-right">\n' +
        '  <button class="btn btn-outline-secondary" data-ng-click="addAnswerEntry(entries, field.id)">\n' +
        '    <i class="fas fa-plus"></i>\n' +
        '  </button>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/form.html',
      '<div data-ng-repeat="row in rows" data-ng-init="fieldRow=$index" class="row" data-flow-init>\n' +
        '  <div data-ng-repeat="field in row | orderBy:\'x\'" data-ng-init="fieldCol=$index" data-ng-if="field.enabled"  data-ng-class="fieldUtilities.getClass(field, row.length)">\n' +
        '    <div data-ng-controller="SubmissionFieldCtrl" id="{{fieldId}}" class="question">\n' +
        '      <div class="question-label">\n' +
        '        <label data-content="field.hint" data-uib-tooltip="{{field.hint}}">\n' +
        '          <span data-ng-if="field.label" class="title">{{field.label}}</span>\n' +
        '          <span data-ng-if="field.hint">\n' +
        '            <i class="fas fa-question-circle"></i>\n' +
        '          </span>\n' +
        '          <span data-ng-if="field.required" class="text-danger sup" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '        </label>\n' +
        '      </div>\n' +
        '      <div class="question-body">\n' +
        '        <div data-ng-if="field.description" class="description" data-markdown-to-html="field.description"></div>\n' +
        '        <div class="form-group">\n' +
        '          <div data-ng-include="\'views/whistleblower/form_field_inputs.html\'"></div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/home.html',
      '<div id="HomePageBox">\n' +
        '  <div id="Presentation" data-ng-show="public.node.presentation" data-markdown-to-html="public.node.presentation"></div>\n' +
        '  <div id="WhistleblowerBox" class="d-block mx-auto">\n' +
        '    <div id="WhistleblowerSubmitBoxButtonDisabled" class="mb-4" data-ng-show="public.node.disable_submissions || (!public.node.https_whistleblower && !connection.tor)">\n' +
        '      <button class="btn btn-danger disabled">\n' +
        '        <i class="fas fa-ban-circle"></i>\n' +
        '        <span data-translate>Submissions disabled</span>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '    <div class="mb-4" data-ng-show="!public.node.https_whistleblower && !connection.tor">\n' +
        '      <p class="text-danger" data-translate>You are connecting to the server without anonymity and this server supports only anonymous submissions</p>\n' +
        '    </div>\n' +
        '    <div id="WhistleblowerSubmitBox" class="mb-4" data-ng-show="!public.node.disable_submissions && (public.node.https_whistleblower || connection.tor)">\n' +
        '      <div id="WhistleblowingQuestion" data-ng-show="public.node.whistleblowing_question" data-markdown-to-html="public.node.whistleblowing_question"></div>\n' +
        '      <button id="WhistleblowingButton" data-ng-click="openSubmission()" class="btn btn-primary">{{public.node.whistleblowing_button}}</button>\n' +
        '    </div>\n' +
        '    <div id="WhistleblowerLoginBox" data-ng-show="(public.node.https_whistleblower || connection.tor)" data-ng-include="\'views/partials/receipt.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/receipt.html',
      '<div class="row" data-ng-if="page === \'receiptpage\'">\n' +
        '  <div class="col-md-12">\n' +
        '    <div id="ReceiptText">\n' +
        '      <div data-ng-if="!Authentication.context.score_receipt_text_custom">\n' +
        '        <span data-translate>Thank you.</span> <span data-translate>Your report was successful.</span> <span data-translate>We will try to get back to you as soon as possible.</span>\n' +
        '      </div>\n' +
        '      <div data-ng-if="Authentication.context.score_receipt_text_custom">\n' +
        '        <p data-ng-if="Authentication.submission.score === 1" class="preformatted">{{Authentication.context.score_receipt_text_l}}</p>\n' +
        '        <p data-ng-if="Authentication.submission.score === 2" class="preformatted">{{Authentication.context.score_receipt_text_m}}</p>\n' +
        '        <p data-ng-if="Authentication.submission.score === 3" class="preformatted">{{Authentication.context.score_receipt_text_h}}</p>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div class="card card-secondary">\n' +
        '      <div class="card-header">\n' +
        '        <span data-translate>Remember your receipt for this report.</span>\n' +
        '      </div>\n' +
        '      <div class="card-body">\n' +
        '        <div id="Receipt"><div class="btn btn-light" data-uib-tooltip="{{\'Copy to clipboard\' | translate}}" data-ng-click="Utils.copyToClipboard(receipt)">{{formatted_receipt}}</div></div>\n' +
        '        <div data-translate>Use the 16 digit receipt to log in. It will allow you to view any messages we sent you, and also to add extra info.</div>\n' +
        '        <div class="mt-md-3 clearfix" data-ng-if="page === \'receiptpage\'">\n' +
        '          <button id="ReceiptButton" class="float-right btn btn-primary" data-ng-click="Authentication.login(0, \'whistleblower\', receipt)" data-translate>View your report</button>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/receiver_card.html',
      '<div class="selectCard" data-ng-class="{\'selected\': submission.selected_receivers[receiver.id] || receiver.forcefully_selected}">\n' +
        '  <div class="row mb-1">\n' +
        '    <div class="col-md-1">\n' +
        '      <div data-ng-if="submission.selected_receivers[receiver.id]">\n' +
        '        <div data-ng-if="!receiver.forcefully_selected">\n' +
        '          <i class="fas fa-check-square" data-uib-tooltip="{{\'Unselect this recipient.\' | translate}}"></i>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '      <div data-ng-if="!submission.selected_receivers[receiver.id] && !receiver.forcefully_selected">\n' +
        '        <i class="far fa-square" data-uib-tooltip="{{\'Select this recipient.\' | translate}}"></i>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-4" data-ng-if="receiver.picture"><img class="receiverImg" alt="receiver picture" data-ng-src="/s/{{receiver.id}}" /></div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 title">{{receiver.name}}</div>\n' +
        '  </div>\n' +
        '  <div class="row">\n' +
        '    <div class="col-md-12 description" data-ng-if="receiver.description">{{receiver.description}}</div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/receiver_selection.html',
      '<div id="SubmissionStepReceiver" class="receiverCards">\n' +
        '  <div id="title" data-ng-if="!show_steps_navigation_bar" data-translate>Recipient selection</div>\n' +
        '  <div data-ng-if="submission.optional_receivers">\n' +
        '    <div class="description" data-translate>Select the recipients of your report:</div>\n' +
        '    <div data-ng-if="submission.context.maximum_selectable_receivers !== 0 && !submission.context.select_all_receivers" id="MaxSelectableReceiverBox">\n' +
        '      <div><span data-translate>Recipients selected:</span> {{submission.countSelectedReceivers()}}/{{submission.context.maximum_selectable_receivers}}</div>\n' +
        '      <div class="text-danger" data-ng-if="submission.countSelectedReceivers() === submission.context.maximum_selectable_receivers" data-translate>You have reached the maximum number of selectable recipients.</div>\n' +
        '    </div>\n' +
        '    <div id="ReceiverSelectionBox" class="row">\n' +
        '      <div data-ng-repeat="receiver in submission.receivers | filter: {forcefully_selected: false} | orderBy:receiversOrderPredicate" id="receiver-{{$index}}" class="{{Utils.getCardSize(submission.receivers.length)}}" data-ng-click="switch_selection(receiver)">\n' +
        '        <div data-ng-include="\'views/whistleblower/receiver_card.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="submission.mandatory_receivers">\n' +
        '    <div class="description" data-translate>The following recipients will receive your report and could not be deselected:</div>\n' +
        '    <div id="ReceiverSelectionBox" class="row">\n' +
        '      <div data-ng-repeat="receiver in submission.receivers | filter: {forcefully_selected: true}" id="receiver-{{$index}}" class="{{Utils.getCardSize(submission.receivers.length)}}" data-ng-click="switch_selection(receiver)">\n' +
        '        <div data-ng-include="\'views/whistleblower/receiver_card.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/step_error.html',
      '<div data-ng-if="displayStepErrors(navigation)">\n' +
        '  <p data-translate>In this step the answers to the following questions are either missing or invalid:</p>\n' +
        '  <ul data-ng-repeat="(key, errors) in stepForm(navigation).$error track by $index">\n' +
        '    <li data-ng-repeat="err in errors" data-ng-controller="SubmissionFieldErrKeyCtrl" data-ng-click="goToQuestion()">{{field.label}}</li>\n' +
        '  </ul>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/submission_error.html',
      '<div id="SubmissionErrors" class="alert alert-secondary mb-2">\n' +
        '  <div data-ng-if="!hasPreviousStep()">\n' +
        '    <div data-ng-if="!areReceiversSelected()">\n' +
        '      <p data-translate>You must select at least one recipient.</p>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-if="!hasNextStep()">\n' +
        '    <div data-ng-if="Utils.isUploading(uploads)">\n' +
        '      <span data-translate>Waiting for the file(s) to finish uploading.</span>&nbsp;\n' +
        '      <i class="fas fa-sync gly-spin"></i>\n' +
        '    </div>\n' +
        '    <div data-ng-if="submission.context.show_steps_navigation_interface && !singleStepForm() && (!areReceiversSelected() || vars.submissionForm.$invalid)">\n' +
        '      <p data-translate>The following steps have errors:</p>\n' +
        '      <ul>\n' +
        '        <li data-ng-if="!areReceiversSelected()" data-ng-click="goToStep(-1)" data-translate>Recipient selection</li>\n' +
        '      </ul>\n' +
        '      <ul data-ng-if="vars.submissionForm.$invalid" data-ng-repeat="step in submission.context.questionnaire.steps | orderBy:\'order\'">\n' +
        '        <li data-ng-if="displayStepErrors($index)" class="err-link" data-ng-click="goToStep($index)">{{step.label}}</li>\n' +
        '      </ul>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-include="\'views/whistleblower/step_error.html\'"></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/submission.html',
      '<div data-ng-if="selectable_contexts.length && !submission.context" data-ng-include="\'views/whistleblower/context_selection.html\'"></div>\n' +
        '<div data-ng-if="submission.context">\n' +
        '  <div data-ng-if="selectable_contexts.length > 1 || context_id">\n' +
        '    <div class="title">{{submission.context.name}}</div>\n' +
        '    <div class="row">\n' +
        '      <div class="col-md-2" data-ng-if="submission.context.picture"><img class="contextImg" alt="context picture" data-ng-src="/s/{{submission.context.id}}" /></div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <form id="SubmissionForm" name="vars.submissionForm" autocomplete="off" novalidate data-ng-class="{\'was-validated\': displayErrors()}">\n' +
        '    <div class="tabbable tabs-below">\n' +
        '      <ul id="SubmissionTabsNavigationBox" class="nav nav-tabs" data-ng-if="submission.context.show_steps_navigation_interface && submission.context.questionnaire.steps.length > 1">\n' +
        '        <li data-ng-if="submission.context.allow_recipients_selection" class="nav-item">\n' +
        '          <a id="receiver-selection-link" data-ng-class="{active: navigation === -1}" class="nav-link" data-ng-click="goToStep(-1)">\n' +
        '            <span class="StepIndex" data-ng-class="{\'StepIndexSelected\': navigation === -1}">1</span> <span class="StepLabel" data-translate>Recipient selection</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '        <li data-ng-repeat="step in submission.context.questionnaire.steps | orderBy:\'order\'" data-ng-if="step.enabled" class="nav-item">\n' +
        '          <a id="step-{{$index}}-link" data-ng-class="{active: navigation === $index}" class="nav-link" data-ng-click="goToStep($index)">\n' +
        '            <span class="StepIndex" data-ng-class="{\'StepIndexSelected\': navigation === $index}">{{$index + (submission.context.allow_recipients_selection ? 2 : 1)}}</span> <span class="StepLabel">{{step.label}}</span>\n' +
        '          </a>\n' +
        '        </li>\n' +
        '      </ul>\n' +
        '      <div id="SubmissionTabsContentBox" class="tab-content">\n' +
        '        <div data-ng-if="displayErrors()" data-ng-include="\'views/whistleblower/submission_error.html\'"></div>\n' +
        '        <div id="step-receiver-selection" data-ng-if="submission.context.allow_recipients_selection">\n' +
        '          <div data-ng-show="navigation === -1" data-ng-include="\'views/whistleblower/receiver_selection.html\'"></div>\n' +
        '        </div>\n' +
        '        <div data-ng-show="navigation !== -1" data-ng-repeat="step in submission.context.questionnaire.steps | orderBy:\'order\'" data-ng-controller="SubmissionStepCtrl" data-ng-if="step.enabled">\n' +
        '          <div id="{{stepId}}" data-ng-form="{{stepId}}" class="SubmissionStep" data-ng-show="navigation === $index">\n' +
        '            <div class="description" data-ng-if="step.description">{{step.description}}</div>\n' +
        '            <div data-ng-include="\'views/whistleblower/form.html\'"></div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div id="SubmissionButtons">\n' +
        '      <button id="PreviousStepButton" class="btn btn-outline-secondary" data-ng-show="hasPreviousStep()" data-ng-click="decrementStep()">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '\n' +
        '      <button id="NextStepButton" class="btn btn-outline-secondary" data-ng-show="hasNextStep()" data-ng-disabled="submission.blocked" data-ng-click="incrementStep()">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '      <button id="SubmitButton" class="btn btn-primary" data-ng-show="submission.context && !hasNextStep()" data-ng-click="completeSubmission()" data-ng-disabled="!Authentication.session || submission.done || submission.blocked || Utils.isUploading(uploads)" type="submit" data-translate>Submit</button>\n' +
        '    </div>\n' +
        '  </form>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/tip.html',
      '<div id="Toolbar" class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <span id="link-reload"\n' +
        '          data-ng-click="reload()"\n' +
        '          data-uib-tooltip="{{\'Refresh\' | translate}}"\n' +
        '          class="btn btn-outline-secondary">\n' +
        '      <i class="fas fa-sync"></i>\n' +
        '    </span>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div data-ng-controller="ReceiptCtrl" data-ng-if="receipt" data-ng-include="\'views/whistleblower/receipt.html\'"></div>\n' +
        '<div class="row" data-ng-if="tip.status !== \'closed\' && tip.context.additional_questionnaire_id && tip.questionnaires.length === 1">\n' +
        '  <div class="col-md-12" data-ng-include="\'views/partials/tip_additional_questionnaire_invite.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12" data-ng-include="\'views/partials/tip_info.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row" data-ng-if="tip.context.show_recipients_details">\n' +
        '  <div class="col-md-12" data-ng-include="\'views/partials/tip_receiver_list.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6" data-ng-include="\'views/partials/tip_questionnaire_answers.html\'"></div>\n' +
        '  <div class="col-md-6" data-ng-if="tip.enable_whistleblower_identity" data-ng-include="\'views/whistleblower/whistleblower_identity.html\'"></div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-12">\n' +
        '    <div data-ng-if="tip.enable_attachments" data-ng-include="\'views/partials/tip_files_whistleblower.html\'"></div>\n' +
        '    <div data-ng-if="tip.wbfiles.length" data-ng-include="\'views/partials/widget_wbfiles.html\'"></div>\n' +
        '  </div>\n' +
        '</div>\n' +
        '<div class="row">\n' +
        '  <div class="col-md-6" data-ng-if="tip.context.enable_comments || tip.comments.length" data-ng-include="\'views/partials/tip_comments.html\'"></div>\n' +
        '  <div class="col-md-6" data-ng-if="tip.context.enable_messages || tip.messages.length" data-ng-include="\'views/partials/tip_messages.html\'"></div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/whistleblower/whistleblower_identity.html',
      '<div id="TipInfoBox" class="card card-default" data-ng-init="collapsed = tip.data.whistleblower_identity_provided; submission = {}">\n' +
        '  <div class="card-header" data-ng-click="collapsed = !collapsed; $event.stopPropagation();">\n' +
        '    <div>\n' +
        '      <span class="clearfix">\n' +
        '	<span>\n' +
        '          <span data-ng-if="tip.data.whistleblower_identity" data-translate>Identity</span>\n' +
        '          <span data-ng-if="!tip.data.whistleblower_identity">{{whistleblower_identity_field.label}}</span>\n' +
        '          <span data-ng-if="tip.data.whistleblower_identity_provided" class="btn btn-sm btn-link"><span data-ng-if="collapsed" data-translate>Show</span><span data-ng-if="!collapsed" data-translate>Hide</span></span>\n' +
        '	</span>\n' +
        '        <span class="float-right">\n' +
        '          <i data-ng-if="!collapsed" class="fas fa-chevron-up" data-uib-tooltip="{{\'Collapse\' | translate}}"></i>\n' +
        '          <i data-ng-if="collapsed" class="fas fa-chevron-down" data-uib-tooltip="{{\'Expand\' | translate}}"></i>\n' +
        '        </span>\n' +
        '      </span>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div class="card-body" data-ng-show="!collapsed">\n' +
        '    <div data-ng-if="tip.data.whistleblower_identity">\n' +
        "      <dd data-ng-repeat=\"field in whistleblower_identity_field.children | orderBy:['y', 'x']\">\n" +
        '        <span data-ng-init="fieldAnswers=tip.data.whistleblower_identity" data-ng-include="\'views/partials/tip_field.html\'"></span>\n' +
        '      <dd>\n' +
        '    </div>\n' +
        '    <div data-ng-if="tip.status !== \'closed\' && !tip.data.whistleblower_identity">\n' +
        '      <div data-ng-form="f">\n' +
        '        <div data-ng-include="\'views/whistleblower/fields/whistleblower_identity.html\'"></div>\n' +
        '	<div id="SubmitBox" data-ng-if="submission._submission.identity_provided">\n' +
        '          <button id="SubmitButton" class="btn btn-primary float-right" data-ng-click="provideIdentityInformation(whistleblower_identity_field.id, answers)" data-ng-disabled="f.$invalid" type="submit">\n' +
        '            <i id="SubmitIconOK" class="fas fa-check"></i>\n' +
        '            <span data-translate>Submit</span>\n' +
        '          </button>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</div>\n'
    )

    $templateCache.put(
      'views/wizard/main.html',
      '<form name="wizardForm" novalidate>\n' +
        '  <div data-ng-show="step == 1" data-ng-form="wizardFormStep1" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-12">\n' +
        '        <div class="title" data-translate>Welcome!</div>\n' +
        '        <div data-translate>The following step-by-step procedure will guide you through creating your whistleblowing platform.</div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="step = 2">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 2" data-ng-form="wizardFormStep2" data-ng-class="{\'was-validated\': validated2}" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-6">\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Project name</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="node_name" class="form-control" data-ng-model="wizard.node_name" data-ng-attr-placeholder="{{\'Project name\' | translate}}" type="text" required>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonPrevious btn btn-primary" data-ng-click="step = 1">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated2 = true) && !wizardFormStep2.$invalid && (step = 4)">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 3" data-ng-form="wizardFormStep3" data-ng-class="{\'was-validated\': validated3}" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="title" data-translate>Please choose a configuration profile:</div>\n' +
        '      <div class="col-md-6">\n' +
        '        <div data-ng-include="\'views/wizard/profiles.html\'"></div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonPrevious btn btn-primary" data-ng-click="step = 2">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated3 = true) && !wizardFormStep3.$invalid && (step = 5)">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 4" data-ng-form="wizardFormStep4" data-ng-class="{\'was-validated\': validated4}" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-12 title" data-translate>Admin</div>\n' +
        '      <div class="col-md-6">\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Username</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="admin_name" class="form-control" data-ng-model="wizard.admin_username" type="text" data-ng-attr-placeholder="{{\'Username\' | translate}}" required>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Name</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="admin_name" class="form-control" data-ng-model="wizard.admin_name" type="text" data-ng-attr-placeholder="{{\'Name\' | translate}}" required>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Email address</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="admin_email" class="form-control" data-ng-model="wizard.admin_mail_address" data-ng-attr-placeholder="{{\'Email address\' | translate}}" data-ng-pattern="CONSTANTS.email_regexp" type="text" data-ng-class="{\'is-invalid\': validated4 && (wizardFormStep4.admin_email.$error.required || wizardFormStep4.admin_email.$error.pattern)}" required>\n' +
        '            <div class="text-danger" data-ng-show="wizardFormStep4.admin_email.$error.pattern">\n' +
        '              <span data-translate>Invalid email address</span>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Password</span>\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="password" class="form-control" data-ng-model="wizard.admin_password" type="password" data-ng-attr-placeholder="{{\'Password\' | translate}}" autocomplete="off" data-password-strength-validator data-ng-class="{\'is-invalid\': validated4 && (wizardFormStep4.password.$error.required || (wizardFormStep4.password.$error.passwordStrength))}" required />\n' +
        '            <password-meter data-ng-show="passwordStrengthScore" value="passwordStrengthScore"></password-meter>\n' +
        '            <div class="text-danger" data-ng-show="!wizardFormStep4.password.$error.required && wizardFormStep4.password.$error.passwordStrengthValidator">\n' +
        '              <p data-translate>The chosen password is too weak. A valid password should be at least 10 characters long and contain a variety of characters including at least a lowercase character, a capital character, a number and a special character.</p>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <label class="col-md-4">\n' +
        '            <span data-translate>Password</span> (<span data-translate>Confirm</span>)\n' +
        '            <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '          </label>\n' +
        '          <div class="col-md-8">\n' +
        '            <input name="checkpassword" class="form-control" data-ng-model="admin_check_password" type="password" data-ng-attr-placeholder="{{\'Password\' | translate}}" autocomplete="off" data-ng-class="{\'is-invalid\': validated4 && (!wizardFormStep4.password.$error.passwordStrengthValidator && wizard.admin_password && (wizard.admin_password !== admin_check_password))}" required />\n' +
        '            <div class="text-danger" data-ng-show="validated4  && (!wizardFormStep4.password.$error.passwordStrengthValidator && wizard.admin_password && (wizard.admin_password !== admin_check_password))" data-translate>The two passwords do not match</div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-check">\n' +
        '              <input class="form-check-input inputelem" type="checkbox" data-ng-model="wizard.admin_escrow">\n' +
        '              <span class="form-check-label" data-translate>Make it possible for this admin to reset user passwords.</span>\n' +
        '            </div>\n' +
        '            <div data-translate>We advise selecting this option if you would like to protect data from being lost in the situation where recipients lose their passwords. On the other hand, we would not advise using this feature if you want to setup a system where only recipients are able to access submissions.</div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonPrevious btn btn-primary" data-ng-click="step = 2">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated4 = true) && !(wizardFormStep4.$invalid || (wizard.admin_password !== admin_check_password)) && (step = 5)">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 5" data-ng-form="wizardFormStep5" data-ng-class="{\'was-validated\': validated5}" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-12 title" data-translate>Recipient</div>\n' +
        '      <div class="col-md-6">\n' +
        '        <div data-ng-if="!wizard.skip_recipient_account_creation">\n' +
        '          <div class="row form-group">\n' +
        '            <label class="col-md-4">\n' +
        '              <span data-translate>Username</span>\n' +
        '              <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '            </label>\n' +
        '            <div class="col-md-8">\n' +
        '              <input name="admin_name" class="form-control" data-ng-model="wizard.receiver_username" type="text" data-ng-attr-placeholder="{{\'Username\' | translate}}"  data-ng-class="{\'is-invalid\': wizard.receiver_username === wizard.admin_username}" required>\n' +
        '              <div class="text-danger" data-ng-show="wizard.receiver_username === wizard.admin_username">\n' +
        '                <span data-translate>Please choose a different username.</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div class="row form-group">\n' +
        '            <label class="col-md-4">\n' +
        '              <span data-translate>Name</span>\n' +
        '              <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '            </label>\n' +
        '            <div class="col-md-8">\n' +
        '              <input name="receiver_name" class="form-control" data-ng-model="wizard.receiver_name" type="text" data-ng-attr-placeholder="{{\'Name\' | translate}}" data-ng-disabled="wizard.skip_recipient_account_creation" required>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div class="row form-group">\n' +
        '            <label class="col-md-4">\n' +
        '              <span data-translate>Email address</span>\n' +
        '              <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '            </label>\n' +
        '            <div class="col-md-8">\n' +
        '              <input name="receiver_email" class="form-control" data-ng-model="wizard.receiver_mail_address" data-ng-pattern="email_regexp" type="text" data-ng-attr-placeholder="{{\'Email address\' | translate}}" data-ng-class="{\'is-invalid\': validated5 && wizardFormStep5.receiver_email.$error.required || wizardFormStep5.receiver_email.$error.pattern}" data-ng-disabled="wizard.skip_recipient_account_creation" required>\n' +
        '              <div class="text-danger" data-ng-show="wizardFormStep5.receiver_email.$error.pattern">\n' +
        '                <span data-translate>Invalid email address</span>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div class="row form-group">\n' +
        '            <label class="col-md-4">\n' +
        '              <span data-translate>Password</span>\n' +
        '              <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '            </label>\n' +
        '            <div class="col-md-8">\n' +
        '              <input name="password" class="form-control" data-ng-model="wizard.receiver_password" type="password" data-ng-attr-placeholder="{{\'Password\' | translate}}" autocomplete="off" data-password-strength-validator data-ng-class="{\'is-invalid\': validated5 && (wizardFormStep5.password.$error.required || (wizardFormStep5.password.$error.passwordStrength))}" required />\n' +
        '              <password-meter data-ng-show="passwordStrengthScore" value="passwordStrengthScore"></password-meter>\n' +
        '              <div class="text-danger" data-ng-show="!wizardFormStep5.password.$error.required && wizardFormStep5.password.$error.passwordStrengthValidator">\n' +
        '                <p data-translate>The chosen password is too weak. A valid password should be at least 10 characters long and contain a variety of characters including at least a lowercase character, a capital character, a number and a special character.</p>\n' +
        '              </div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '          <div class="row form-group">\n' +
        '            <label class="col-md-4">\n' +
        '              <span data-translate>Password</span> (<span data-translate>Confirm</span>)\n' +
        '              <span class="text-danger" data-uib-tooltip="{{\'This field is mandatory\' | translate}}">*</span>\n' +
        '            </label>\n' +
        '            <div class="col-md-8">\n' +
        '              <input name="checkpassword" class="form-control" data-ng-model="recipient_check_password" type="password" data-ng-attr-placeholder="{{\'Password\' | translate}}" autocomplete="off" data-ng-class="{\'is-invalid\': validated4 && (!wizardFormStep5.password.$error.passwordStrengthValidator && wizard.receiver_password && (wizard.receiver_password !== recipient_check_password))}" required />\n' +
        '              <div class="text-danger" data-ng-show="validated4  && (!wizardFormStep5.password.$error.passwordStrengthValidator && wizard.receiver_password && (wizard.receiver_password !== recipient_check_password))" data-translate>The two passwords do not match</div>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '        <div class="row form-group">\n' +
        '          <div class="col-md-12">\n' +
        '            <div class="form-check">\n' +
        '              <input class="form-check-input inputelem" type="checkbox" data-ng-model="wizard.skip_recipient_account_creation">\n' +
        '              <span class="form-check-label" data-translate>Skip the recipient account creation.</span>\n' +
        '            </div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonPrevious btn btn-primary" data-ng-click="step = 4">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated5 = true) && !(wizardFormStep5.$invalid || (wizard.receiver_username === wizard.admin_username)) && (step = 6)">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 6" data-ng-form="wizardFormStep6" data-ng-class="{\'was-validated\': validated6}" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-12">\n' +
        '        <div class="form-group">\n' +
        '          <div class="title" data-translate>License</div>\n' +
        '          <div id=\'wizardLicense\' class="tos-text" data-ng-include="\'license.txt\'"></div>\n' +
        '          <div class="form-check">\n' +
        '            <input name="tosAccept" class="tos-agreement-input form-check-input inputelem" type="checkbox" data-ng-model="tosAccept" required>\n' +
        '            <span class="tos-agreement-label form-check-label" data-translate>I have read and agree to the terms of the license.</span>\n' +
        '          </div>\n' +
        '          <div class="form-check" data-ng-if="public.node.root_tenant">\n' +
        '            <input class="form-check-input inputelem" data-ng-model="wizard.enable_developers_exception_notification" type="checkbox">\n' +
        '            <span data-translate>Notify developers of software problems</span>\n' +
        '            <div data-translate>By enabling this feature, you will contribute to the development and security of the platform.</div>\n' +
        '          </div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonPrevious btn btn-primary" data-ng-click="step = 5">\n' +
        '        <i class="fas fa-arrow-circle-left"></i>\n' +
        '        <span data-translate>Previous</span>\n' +
        '      </button>\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="(validated6 = true) && !wizardFormStep6.$invalid && complete()">\n' +
        '        <span data-translate>Next</span>\n' +
        '        <i class="fas fa-arrow-circle-right"></i>\n' +
        '      </button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '  <div data-ng-show="step == 7" class="clearfix">\n' +
        '    <div class="row wizard-block">\n' +
        '      <div class="col-md-10">\n' +
        '        <div class="congratulations">\n' +
        '          <div class="title" data-translate>Congratulations!</div>\n' +
        '          <div data-translate>You have completed the platform wizard.</div>\n' +
        '        </div>\n' +
        '      </div>\n' +
        '    </div>\n' +
        '    <div class="pager float-left">\n' +
        '      <button class="ButtonNext btn btn-primary" data-ng-click="goToAdminInterface()" type="submit"><span data-translate>Proceed</span></button>\n' +
        '    </div>\n' +
        '  </div>\n' +
        '</form>\n'
    )

    $templateCache.put('views/wizard/profiles.html', '')
  },
])

GL.mockEngine = (function () {
  var mocks = {}

  var applyMock = function (mock) {
    var e = document.querySelector(mock.selector)
    if (e) {
      if (!mock.value || mock.language !== GL.language) {
        mock.language = GL.language
        if (typeof mock.mock === 'function') {
          mock.value = mock.mock(e)
        } else {
          mock.value = mock.mock
        }
      }

      if (mock.type === 'replace') {
        if (mock.value && e.innerHTML !== mock.value) {
          e.innerHTML = mock.value
        }

        if (mock.value) {
          mock.value = e.innerHTML
        }
      } else {
        var custom_elem = e.querySelector('.Mock')

        if (!custom_elem) {
          custom_elem = document.createElement('div')
          custom_elem.classList.add('Mock')
        }

        custom_elem.innerHTML = mock.value

        if (mock.type === 'add-before') {
          e.insertBefore(custom_elem, e.childNodes[0])
        } else if (mock.type === 'add-after') {
          e.appendChild(custom_elem)
        }
      }
    }
  }

  var run = function () {
    var current_path = document.location.pathname + document.location.hash.split('?')[0]
    var path, selector, i

    for (path in mocks) {
      if (path === '*' || path === current_path) {
        for (selector in mocks[path]) {
          for (i in mocks[path][selector]) {
            try {
              applyMock(mocks[path][selector][i])
            } catch (e) {
              continue
            }
          }
        }
      }
    }
  }

  var addMock = function (path, selector, mock, type) {
    if (!(path in mocks)) {
      mocks[path] = {}
    }

    if (!(selector in mocks[path])) {
      mocks[path][selector] = []
    }

    if (type === undefined) {
      type = 'replace'
    }

    mocks[path][selector].push({
      path: path,
      selector: selector,
      mock: mock,
      value: '',
      type: type,
    })

    run()
  }

  return {
    addMock: addMock,
    run: run,
  }
})()

GL.controller('Empty', [function () {}])

GL.controller('ConfirmableModalCtrl', [
  '$scope',
  '$uibModalInstance',
  'arg',
  'confirmFun',
  'cancelFun',
  function ($scope, $uibModalInstance, arg, confirmFun, cancelFun) {
    $scope.arg = arg
    $scope.confirmFun = confirmFun
    $scope.cancelFun = cancelFun

    $scope.confirm = function (result) {
      if ($scope.confirmFun) {
        $scope.confirmFun(result)
      }

      return $uibModalInstance.close(result)
    }

    $scope.cancel = function (result) {
      if ($scope.cancelFun) {
        $scope.cancelFun(result)
      }

      return $uibModalInstance.dismiss('cancel')
    }
  },
])

GL.controller('PreferencesCtrl', [
  '$scope',
  '$q',
  '$http',
  '$location',
  '$window',
  '$uibModal',
  function ($scope, $q, $http, $location, $window, $uibModal) {
    $scope.tabs = [
      {
        title: 'Preferences',
        template: 'views/partials/preferences/tab1.html',
      },
      {
        title: 'Password',
        template: 'views/partials/preferences/tab2.html',
      },
    ]

    $scope.editingName = false
    $scope.editingPublicName = false
    $scope.showEncryptionKey = false

    $scope.toggleNameEditing = function () {
      $scope.editingName = !$scope.editingName
    }

    $scope.togglePublicNameEditing = function () {
      $scope.editingPublicName = !$scope.editingPublicName
    }

    $scope.toggleEmailAddressEditing = function () {
      $scope.editingEmailAddress = !$scope.editingEmailAddress
    }

    $scope.getEncryptionRecoveryKey = function () {
      return $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'get_recovery_key',
          args: {},
        },
      }).then(function (data) {
        $scope.resources.preferences.clicked_recovery_key = true
        $scope.erk = data.data.match(/.{1,4}/g).join('-')
        $uibModal.open({
          templateUrl: 'views/modals/encryption_recovery_key.html',
          controller: 'ConfirmableModalCtrl',
          scope: $scope,
          resolve: {
            arg: null,
            confirmFun: null,
            cancelFun: null,
          },
        })
      })
    }

    $scope.toggle2FA = function () {
      if ($scope.resources.preferences.two_factor) {
        $scope.resources.preferences.two_factor = false

        var symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'
        var array = new Uint32Array(32)

        $window.crypto.getRandomValues(array)

        $scope.totp = {
          qrcode_string: '',
          secret: '',
          edit: false,
        }

        for (var i = 0; i < array.length; i++) {
          $scope.totp.secret += symbols[array[i] % symbols.length]
        }

        $scope.$watch('totp.secret', function () {
          $scope.totp.qrcode_string =
            'otpauth://totp/' +
            $location.host() +
            '%20%28' +
            $scope.resources.preferences.username +
            '%29?secret=' +
            $scope.totp.secret
        })

        $uibModal.open({
          templateUrl: 'views/modals/enable_2fa.html',
          controller: 'TwoFactorModalCtrl',
          scope: $scope,
        })
      } else {
        return $http({
          method: 'PUT',
          url: 'api/user/operations',
          data: {
            operation: 'disable_2fa',
            args: {},
          },
        }).then(function () {
          $scope.resources.preferences.two_factor = false
          $scope.Authentication.session.two_factor = false
        })
      }
    }

    $scope.save = function () {
      if ($scope.resources.preferences.pgp_key_remove) {
        $scope.resources.preferences.pgp_key_public = ''
      }

      return $scope.resources.preferences.$update(function () {
        $scope.reload()
      })
    }

    $scope.loadPublicKeyFile = function (file) {
      $scope.Utils.readFileAsText(file).then(function (txt) {
        $scope.resources.preferences.pgp_key_public = txt
      }, $scope.Utils.displayErrorMsg)
    }
  },
]).controller('TwoFactorModalCtrl', [
  '$scope',
  '$http',
  '$uibModalInstance',
  function ($scope, $http, $uibModalInstance) {
    $scope.confirm = function (result) {
      return $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'enable_2fa',
          args: {
            secret: $scope.totp.secret,
            token: result,
          },
        },
      }).then(function () {
        $scope.resources.preferences.two_factor = true
        $uibModalInstance.dismiss('cancel')
      })
    }

    $scope.cancel = function () {
      return $uibModalInstance.dismiss('cancel')
    }
  },
])

GL.factory('uploadUtils', [
  '$filter',
  function ($filter) {
    // Utils shared across file upload controllers and directives

    return {
      translateInvalidSizeErr: function (filename, maxSize) {
        var strs = ['File size not accepted.', 'Maximum file size is:']
        angular.forEach(strs, function (s, i) {
          strs[i] = $filter('translate')(s)
        })
        return strs[0] + ' ' + filename + ' - ' + strs[1] + ' ' + $filter('byteFmt')(maxSize, 2)
      },
    }
  },
])
  .controller('RFileUploadCtrl', [
    '$scope',
    function ($scope) {
      $scope.disabled = false

      $scope.$on('flow::fileAdded', function () {
        $scope.file_error_msgs = []

        if (typeof $scope.field !== 'undefined' && !$scope.field.multi_entry) {
          // if the field allows to load only one file disable the button
          // as soon as a file is loaded.
          $scope.disabled = true
        }
      })

      $scope.$on('flow::fileSuccess', function () {
        $scope.$emit('GL::uploadsUpdated')
      })
    },
  ])
  .controller('WBFileUploadCtrl', [
    '$scope',
    function ($scope) {
      $scope.file_upload_description = ''

      $scope.beginUpload = function ($files, $event, $flow) {
        $scope.file_error_msgs = []

        $flow.opts.query = { description: $scope.file_upload_description }
        $flow.upload()
      }
    },
  ])
  .controller('ImageUploadCtrl', [
    '$http',
    '$scope',
    '$rootScope',
    'uploadUtils',
    'Utils',
    function ($http, $scope, $rootScope, uploadUtils, Utils) {
      $scope.Utils = Utils
      $scope.imageUploadObj = {}

      $scope.$on('flow::fileAdded', function (event, $flow, flowFile) {
        $scope.file_error_msgs = []
        var validSize = $rootScope.public.node.maximum_filesize * 1024 * 1024
        if (flowFile.size > validSize) {
          var errMsg = uploadUtils.translateInvalidSizeErr(flowFile.name, validSize)
          $scope.file_error_msgs.push(errMsg)
        }
      })

      $scope.$on('flow::complete', function () {
        $scope.imageUploadModel[$scope.imageUploadModelAttr] = true
      })

      $scope.deletePicture = function () {
        $http({
          method: 'DELETE',
          url: 'api/admin/files/' + $scope.imageUploadId,
        }).then(function () {
          if ($scope.imageUploadModel) {
            $scope.imageUploadModel[$scope.imageUploadModelAttr] = ''
          }
          $scope.imageUploadObj.flow.files = []
        })
      }
    },
  ])

GL.controller('SignupCtrl', [
  '$scope',
  '$route',
  '$http',
  'Authentication',
  'DATA_COUNTRIES_ITALY_REGIONS',
  'DATA_COUNTRIES_ITALY_PROVINCES',
  'DATA_COUNTRIES_ITALY_CITIES',
  function (
    $scope,
    $route,
    $http,
    Authentication,
    DATA_COUNTRIES_ITALY_REGIONS,
    DATA_COUNTRIES_ITALY_PROVINCES,
    DATA_COUNTRIES_ITALY_CITIES
  ) {
    if ($scope.public.node.mode === 'whistleblowing.it') {
      $scope.data_countries_italy_regions = DATA_COUNTRIES_ITALY_REGIONS.query()
      $scope.data_countries_italy_provinces = DATA_COUNTRIES_ITALY_PROVINCES.query()
      $scope.data_countries_italy_cities = DATA_COUNTRIES_ITALY_CITIES.query()
    }

    $scope.hostname = ''

    $scope.step = 1
    $scope.signup = {
      subdomain: '',
      name: '',
      surname: '',
      role: '',
      email: '',
      phone: '',
      organization_name: '',
      organization_type: '',
      organization_tax_code: '',
      organization_vat_code: '',
      organization_location1: '',
      organization_location2: '',
      organization_location3: '',
      organization_location4: '',
      organization_number_employees: '',
      organization_number_users: '',
      organization_site: '',
      hear_channel: '',
      tos1: false,
      tos2: false,
    }

    var completed = false

    $scope.updateSubdomain = function () {
      $scope.signup.subdomain = ''
      if ($scope.signup.organization_name) {
        $scope.signup.subdomain = $scope.signup.organization_name
          .replace(/[^\w]/gi, '')
          .toLowerCase()
      }
    }

    $scope.complete = function () {
      if (completed) {
        return
      }

      completed = true

      $http.post('api/signup', $scope.signup).then(function () {
        $scope.step += 1
      })
    }
  },
]).controller('SignupActivationCtrl', [
  '$scope',
  '$http',
  '$location',
  function ($scope, $http, $location) {
    var token = $location.search().token
    if (token) {
      $http.get('api/signup/' + token)
    }
  },
])

GL.controller('WizardCtrl', [
  '$scope',
  '$location',
  '$http',
  'Authentication',
  'GLTranslate',
  function ($scope, $location, $http, Authentication, GLTranslate) {
    /* if the wizard has been already performed redirect to the homepage */
    if ($scope.public.node.wizard_done) {
      $location.path('/')
      return
    }

    $scope.step = 1

    var completed = false

    $scope.complete = function () {
      if (completed) {
        return
      }

      completed = true

      $http.post('api/wizard', $scope.wizard).then(function () {
        $scope.step += 1
      })
    }

    $scope.goToAdminInterface = function () {
      Authentication.login(
        0,
        $scope.wizard.admin_username,
        $scope.wizard.admin_password,
        '',
        ''
      ).then(function () {
        $scope.reload('/admin/home')
      })
    }

    $scope.config_profiles = [
      {
        name: 'default',
        title: 'Default',
        active: true,
      },
    ]

    $scope.selectProfile = function (name) {
      angular.forEach($scope.config_profiles, function (p) {
        p.active = p.name === name ? true : false
        if (p.active) {
          $scope.wizard.profile = p.name
        }
      })
    }

    $scope.wizard = {
      node_language: GLTranslate.state.language,
      node_name: '',
      admin_username: '',
      admin_name: '',
      admin_mail_address: '',
      admin_password: '',
      admin_escrow: true,
      receiver_username: '',
      receiver_name: '',
      receiver_mail_address: '',
      receiver_password: '',
      skip_admin_account_creation: false,
      skip_recipient_account_creation: false,
      profile: 'default',
      enable_developers_exception_notification: true,
    }
  },
])

GL.controller('ReceiverTipsCtrl', [
  '$scope',
  '$filter',
  '$http',
  '$location',
  '$uibModal',
  '$window',
  'RTipExport',
  'TokenResource',
  function ($scope, $filter, $http, $location, $uibModal, $window, RTipExport, TokenResource) {
    $scope.search = undefined
    $scope.currentPage = 1
    $scope.itemsPerPage = 20

    angular.forEach($scope.resources.rtips.rtips, function (tip) {
      tip.context = $scope.contexts_by_id[tip.context_id]
      tip.context_name = tip.context.name
      tip.questionnaire = $scope.resources.rtips.questionnaires[tip.questionnaire]
      tip.submissionStatusStr = $scope.Utils.getSubmissionStatusText(
        tip.status,
        tip.substatus,
        $scope.submission_statuses
      )
    })

    $scope.filteredTips = $scope.resources.rtips.rtips

    $scope.$watch('search', function (value) {
      if (typeof value !== 'undefined') {
        $scope.currentPage = 1
        $scope.filteredTips = $filter('filter')($scope.resources.rtips.rtips, value)
      }
    })

    $scope.open_grant_access_modal = function () {
      $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'get_users_names',
          args: {},
        },
      }).then(function (response) {
        $uibModal.open({
          templateUrl: 'views/modals/grant_access.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: {
              users_names: response.data,
            },
            confirmFun: function () {
              return function (receiver_id) {
                var req = {
                  operation: 'grant',
                  args: {
                    rtips: $scope.selected_tips,
                    receiver: receiver_id,
                  },
                }
                return $http({ method: 'PUT', url: 'api/recipient/operations', data: req }).then(
                  function () {
                    $scope.reload()
                  }
                )
              }
            },
            cancelFun: null,
          },
        })
      })
    }

    $scope.open_revoke_access_modal = function () {
      $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'get_users_names',
          args: {},
        },
      }).then(function (response) {
        $uibModal.open({
          templateUrl: 'views/modals/revoke_access.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: {
              users_names: response.data,
            },
            confirmFun: function () {
              return function (receiver_id) {
                var req = {
                  operation: 'revoke',
                  args: {
                    rtips: $scope.selected_tips,
                    receiver: receiver_id,
                  },
                }
                return $http({ method: 'PUT', url: 'api/recipient/operations', data: req }).then(
                  function () {
                    $scope.reload()
                  }
                )
              }
            },
            cancelFun: null,
          },
        })
      })
    }

    $scope.exportTip = RTipExport

    $scope.selected_tips = []

    $scope.select_all = function () {
      $scope.selected_tips = []
      angular.forEach($scope.filteredTips, function (tip) {
        $scope.selected_tips.push(tip.id)
      })
    }

    $scope.toggle_star = function (tip) {
      return $http({
        method: 'PUT',
        url: 'api/rtips/' + tip.id,
        data: { operation: 'set', args: { key: 'important', value: !tip.important } },
      }).then(function () {
        tip.important = !tip.important
      })
    }

    $scope.deselect_all = function () {
      $scope.selected_tips = []
    }

    $scope.tip_switch = function (id) {
      var index = $scope.selected_tips.indexOf(id)
      if (index > -1) {
        $scope.selected_tips.splice(index, 1)
      } else {
        $scope.selected_tips.push(id)
      }
    }

    $scope.isSelected = function (id) {
      return $scope.selected_tips.indexOf(id) !== -1
    }

    $scope.tip_delete_selected = function () {
      $uibModal.open({
        templateUrl: 'views/modals/delete_confirmation.html',
        controller: 'TipBulkOperationsCtrl',
        resolve: {
          selected_tips: function () {
            return $scope.selected_tips
          },
          operation: function () {
            return 'delete'
          },
        },
      })
    }

    $scope.tips_export = function () {
      for (var i = 0; i < $scope.selected_tips.length; i++) {
        ;(function (i) {
          new TokenResource().$get().then(function (token) {
            return $window.open(
              'api/rtips/' + $scope.selected_tips[i] + '/export?token=' + token.id
            )
          })
        })(i)
      }
    }
  },
]).controller('TipBulkOperationsCtrl', [
  '$scope',
  '$http',
  '$location',
  '$uibModalInstance',
  'selected_tips',
  'operation',
  function ($scope, $http, $location, $uibModalInstance, selected_tips, operation) {
    $scope.selected_tips = selected_tips
    $scope.operation = operation

    $scope.cancel = function () {
      $uibModalInstance.close()
    }

    $scope.confirm = function () {
      $uibModalInstance.close()

      if (['delete'].indexOf(operation) === -1) {
        return
      }

      return $http({
        method: 'PUT',
        url: 'api/recipient/operations',
        data: {
          operation: $scope.operation,
          args: {
            rtips: $scope.selected_tips,
          },
        },
      }).then(function () {
        $scope.selected_tips = []
        $scope.reload()
      })
    }
  },
])

GL.controller('TipCtrl', [
  '$scope',
  '$location',
  '$filter',
  '$http',
  '$routeParams',
  '$uibModal',
  'Authentication',
  'RTip',
  'WBTip',
  'RTipExport',
  'RTipDownloadRFile',
  'WBTipDownloadFile',
  'fieldUtilities',
  function (
    $scope,
    $location,
    $filter,
    $http,
    $routeParams,
    $uibModal,
    Authentication,
    RTip,
    WBTip,
    RTipExport,
    RTipDownloadRFile,
    WBTipDownloadFile,
    fieldUtilities
  ) {
    $scope.fieldUtilities = fieldUtilities
    $scope.tip_id = $routeParams.tip_id

    $scope.itemsPerPage = 5
    $scope.currentCommentsPage = 1
    $scope.currentMessagesPage = 1

    $scope.answers = {}
    $scope.uploads = {}

    $scope.showEditLabelInput = false

    $scope.openGrantTipAccessModal = function () {
      $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'get_users_names',
          args: {},
        },
      }).then(function (response) {
        $uibModal.open({
          templateUrl: 'views/modals/grant_access.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: {
              users_names: response.data,
            },
            confirmFun: function () {
              return function (receiver_id) {
                var req = {
                  operation: 'grant',
                  args: {
                    receiver: receiver_id,
                  },
                }

                return $http({ method: 'PUT', url: 'api/rtips/' + $scope.tip.id, data: req }).then(
                  function () {
                    $scope.reload()
                  }
                )
              }
            },
            cancelFun: null,
          },
        })
      })
    }

    $scope.openRevokeTipAccessModal = function () {
      $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'get_users_names',
          args: {},
        },
      }).then(function (response) {
        $uibModal.open({
          templateUrl: 'views/modals/revoke_access.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: {
              users_names: response.data,
            },
            confirmFun: function () {
              return function (receiver_id) {
                var req = {
                  operation: 'revoke',
                  args: {
                    receiver: receiver_id,
                  },
                }

                return $http({ method: 'PUT', url: 'api/rtips/' + $scope.tip.id, data: req }).then(
                  function () {
                    $scope.reload()
                  }
                )
              }
            },
            cancelFun: null,
          },
        })
      })
    }

    $scope.getAnswersEntries = function (entry) {
      if (typeof entry === 'undefined') {
        return $scope.answers[$scope.field.id]
      }

      return entry[$scope.field.id]
    }

    var filterNotTriggeredField = function (parent, field, answers) {
      var i
      if (fieldUtilities.isFieldTriggered(parent, field, answers, $scope.tip.score)) {
        for (i = 0; i < field.children.length; i++) {
          filterNotTriggeredField(field, field.children[i], answers)
        }
      }
    }

    $scope.preprocessTipAnswers = function (tip) {
      var x, i, j, k, questionnaire, step

      for (x = 0; x < tip.questionnaires.length; x++) {
        questionnaire = tip.questionnaires[x]
        $scope.fieldUtilities.parseQuestionnaire(questionnaire, {})

        for (i = 0; i < questionnaire.steps.length; i++) {
          step = questionnaire.steps[i]
          if (
            fieldUtilities.isFieldTriggered(null, step, questionnaire.answers, $scope.tip.score)
          ) {
            for (j = 0; j < step.children.length; j++) {
              filterNotTriggeredField(step, step.children[j], questionnaire.answers)
            }
          }
        }

        for (i = 0; i < questionnaire.steps.length; i++) {
          step = questionnaire.steps[i]
          j = step.children.length
          while (j--) {
            if (step.children[j]['template_id'] === 'whistleblower_identity') {
              $scope.whistleblower_identity_field = step.children[j]
              $scope.whistleblower_identity_field.enabled = true
              step.children.splice(j, 1)
              $scope.questionnaire = {
                steps: [angular.copy($scope.whistleblower_identity_field)],
              }

              $scope.fields = $scope.questionnaire.steps[0].children
              $scope.rows = fieldUtilities.splitRows($scope.fields)
              $scope.field = $scope.whistleblower_identity_field

              fieldUtilities.onAnswersUpdate($scope)

              for (k = 0; k < $scope.whistleblower_identity_field.children.length; k++) {
                filterNotTriggeredField(
                  $scope.whistleblower_identity_field,
                  $scope.whistleblower_identity_field.children[k],
                  $scope.tip.data.whistleblower_identity
                )
              }
            }
          }
        }
      }
    }

    $scope.hasMultipleEntries = function (field_answer) {
      return typeof field_answer !== 'undefined' && field_answer.length > 1
    }

    $scope.filterFields = function (field) {
      return field.type !== 'fileupload'
    }

    if ($scope.Authentication.session.role === 'whistleblower') {
      $scope.fileupload_url = 'api/wbtip/rfile'

      $scope.tip = new WBTip(function (tip) {
        $scope.tip = tip
        $scope.tip.context = $scope.contexts_by_id[$scope.tip.context_id]
        $scope.tip.receivers_by_id = $scope.Utils.array_to_map($scope.tip.receivers)
        $scope.score = $scope.tip.score

        $scope.ctx = 'wbtip'
        $scope.preprocessTipAnswers(tip)

        $scope.tip.submissionStatusStr = $scope.Utils.getSubmissionStatusText(
          $scope.tip.status,
          $scope.tip.substatus,
          $scope.submission_statuses
        )

        $scope.downloadWBFile = function (file) {
          WBTipDownloadFile(file)
        }

        // FIXME: remove this variable that is now needed only to map wb_identity_field
        $scope.submission = {}
        $scope.submission._submission = tip

        $scope.provideIdentityInformation = function (identity_field_id, identity_field_answers) {
          return $http
            .post('api/wbtip/' + $scope.tip.id + '/provideidentityinformation', {
              identity_field_id: identity_field_id,
              identity_field_answers: identity_field_answers,
            })
            .then(function () {
              $scope.reload()
            })
        }

        if (tip.receivers.length === 1 && tip.msg_receiver_selected === null) {
          tip.msg_receiver_selected = tip.msg_receivers_selector[0].key
        }
      })
    } else if ($scope.Authentication.session.role === 'receiver') {
      $scope.tip = new RTip({ id: $scope.tip_id }, function (tip) {
        $scope.tip = tip
        $scope.tip.context = $scope.contexts_by_id[$scope.tip.context_id]
        $scope.tip.receivers_by_id = $scope.Utils.array_to_map($scope.tip.receivers)

        $scope.score = $scope.tip.score
        $scope.ctx = 'rtip'
        $scope.preprocessTipAnswers(tip)

        $scope.exportTip = RTipExport
        $scope.downloadRFile = RTipDownloadRFile

        $scope.showEditLabelInput = $scope.tip.label === ''

        $scope.tip.submissionStatusStr = $scope.Utils.getSubmissionStatusText(
          $scope.tip.status,
          $scope.tip.substatus,
          $scope.submission_statuses
        )
      })
    }

    $scope.editLabel = function () {
      $scope.showEditLabelInput = true
    }

    $scope.updateLabel = function (label) {
      $scope.tip.operation('set', { key: 'label', value: label }).then(function () {
        $scope.showEditLabelInput = false
      })
    }

    $scope.updateSubmissionStatus = function () {
      $scope.tip.updateSubmissionStatus().then(function () {
        $scope.tip.submissionStatusStr = $scope.Utils.getSubmissionStatusText(
          $scope.tip.status,
          $scope.tip.substatus,
          $scope.submission_statuses
        )
      })
    }

    $scope.newComment = function () {
      $scope.tip.newComment($scope.tip.newCommentContent)
      $scope.tip.newCommentContent = ''
    }

    $scope.newMessage = function () {
      $scope.tip.newMessage($scope.tip.newMessageContent)
      $scope.tip.newMessageContent = ''
    }

    $scope.tip_toggle_star = function () {
      return $scope.tip
        .operation('set', { key: 'important', value: !$scope.tip.important })
        .then(function () {
          $scope.tip.important = !$scope.tip.important
        })
    }

    $scope.tip_notify = function (enable) {
      return $scope.tip
        .operation('set', { key: 'enable_notifications', value: enable })
        .then(function () {
          $scope.tip.enable_notifications = enable
        })
    }

    $scope.tip_delete = function () {
      $uibModal.open({
        templateUrl: 'views/modals/delete_confirmation.html',
        controller: 'TipOperationsCtrl',
        resolve: {
          args: function () {
            return {
              tip: $scope.tip,
              operation: 'delete',
            }
          },
        },
      })
    }

    $scope.tip_postpone = function () {
      $uibModal.open({
        templateUrl: 'views/modals/tip_operation_postpone.html',
        controller: 'TipOperationsCtrl',
        resolve: {
          args: function () {
            return {
              tip: $scope.tip,
              operation: 'postpone',
              contexts_by_id: $scope.contexts_by_id,
              expiration_date: $scope.Utils.getPostponeDate(
                $scope.contexts_by_id[$scope.tip.context_id].tip_timetolive
              ),
              dateOptions: {
                minDate: new Date($scope.tip.expiration_date),
                maxDate: $scope.Utils.getPostponeDate(
                  $scope.contexts_by_id[$scope.tip.context_id].tip_timetolive * 2
                ),
              },
              opened: false,
              Utils: $scope.Utils,
            }
          },
        },
      })
    }

    $scope.tip_open_additional_questionnaire = function () {
      $scope.answers = {}
      $scope.uploads = {}

      $uibModal.open({
        templateUrl: 'views/modals/tip_additional_questionnaire_form.html',
        controller: 'AdditionalQuestionnaireCtrl',
        scope: $scope,
      })
    }

    $scope.access_identity = function () {
      return $http
        .post('api/rtips/' + $scope.tip.id + '/iars', { request_motivation: '' })
        .then(function () {
          $scope.reload()
        })
    }

    $scope.file_identity_access_request = function () {
      $uibModal.open({
        templateUrl: 'views/modals/tip_operation_file_identity_access_request.html',
        controller: 'IdentityAccessRequestCtrl',
        resolve: {
          tip: function () {
            return $scope.tip
          },
        },
      })
    }

    $scope.score = 0

    $scope.$watch(
      'answers',
      function () {
        fieldUtilities.onAnswersUpdate($scope)
      },
      true
    )
  },
])
  .controller('TipOperationsCtrl', [
    '$scope',
    '$http',
    '$location',
    '$uibModalInstance',
    'args',
    function ($scope, $http, $location, $uibModalInstance, args) {
      $scope.args = args

      $scope.cancel = function () {
        $uibModalInstance.close()
      }

      $scope.confirm = function () {
        $uibModalInstance.close()

        if ($scope.args.operation === 'postpone') {
          var req = {
            operation: 'postpone',
            args: {
              value: $scope.args.expiration_date.getTime(),
            },
          }

          return $http({ method: 'PUT', url: 'api/rtips/' + args.tip.id, data: req }).then(
            function () {
              $scope.reload()
            }
          )
        } else if (args.operation === 'delete') {
          return $http({ method: 'DELETE', url: 'api/rtips/' + args.tip.id, data: {} }).then(
            function () {
              $location.url('/recipient/reports')
              $scope.reload()
            }
          )
        }
      }
    },
  ])
  .controller('RTipWBFileUploadCtrl', [
    '$scope',
    'Authentication',
    'RTipDownloadWBFile',
    'RTipWBFileResource',
    function ($scope, Authentication, RTipDownloadWBFile, RTipWBFileResource) {
      var reloadUI = function () {
        $scope.reload()
      }

      $scope.downloadWBFile = function (f) {
        RTipDownloadWBFile(f).finally(reloadUI)
      }

      $scope.deleteWBFile = function (f) {
        RTipWBFileResource.remove({ id: f.id }).$promise.finally(reloadUI)
      }
    },
  ])
  .controller('WBTipFileDownloadCtrl', [
    '$scope',
    '$uibModalInstance',
    'WBTipDownloadFile',
    'file',
    'tip',
    function ($scope, $uibModalInstance, WBTipDownloadFile, file, tip) {
      $scope.ctx = 'download'
      $scope.file = file
      $scope.tip = tip
      $scope.confirm = function () {
        $uibModalInstance.close()
        WBTipDownloadFile(file)
      }

      $scope.cancel = function () {
        $uibModalInstance.close()
      }
    },
  ])
  .controller('IdentityAccessRequestCtrl', [
    '$scope',
    '$http',
    '$uibModalInstance',
    'tip',
    function ($scope, $http, $uibModalInstance, tip) {
      $scope.tip = tip

      $scope.cancel = function () {
        $uibModalInstance.close()
      }

      $scope.confirm = function () {
        $uibModalInstance.close()

        return $http
          .post('api/rtips/' + tip.id + '/iars', { request_motivation: $scope.request_motivation })
          .then(function () {
            $scope.reload()
          })
      }
    },
  ])

GL.controller('CustodianIdentityAccessRequestsCtrl', [
  '$scope',
  '$http',
  '$uibModal',
  'IdentityAccessRequests',
  function ($scope, $http, $uibModal, IdentityAccessRequests) {
    $scope.iars = IdentityAccessRequests.query()

    $scope.authorize_identity_access_request = function (iar_id) {
      return $http
        .put('api/custodian/iars/' + iar_id, { reply: 'authorized', reply_motivation: '' })
        .then(function () {
          $scope.reload()
        })
    }

    $scope.file_denied_identity_access_reply = function (iar_id) {
      $uibModal.open({
        templateUrl: 'views/modals/tip_operation_file_identity_access_reply.html',
        controller: 'IdentityAccessReplyCtrl',
        resolve: {
          iar: function () {
            return iar_id
          },
        },
      })
    }
  },
]).controller('IdentityAccessReplyCtrl', [
  '$scope',
  '$http',
  '$uibModalInstance',
  'iar',
  function ($scope, $http, $uibModalInstance, iar) {
    $scope.iar = iar
    $scope.cancel = function () {
      $uibModalInstance.close()
    }

    $scope.confirm = function () {
      $uibModalInstance.close()
      return $http
        .put('api/custodian/iars/' + $scope.iar, {
          reply: 'denied',
          reply_motivation: $scope.reply_motivation,
        })
        .then(function () {
          $scope.reload()
        })
    }
  },
])

GL.controller('AdminCtrl', [
  '$scope',
  function ($scope) {
    $scope.updateNode = function () {
      $scope.Utils.update($scope.resources.node, function () {
        $scope.$emit('REFRESH')
      })
    }

    $scope.newItemOrder = function (objects, key) {
      if (objects.length === 0) {
        return 0
      }

      var max = 0
      angular.forEach(objects, function (object) {
        if (object[key] > max) {
          max = object[key]
        }
      })

      return max + 1
    }

    $scope.$watch(
      'resources.users',
      function () {
        $scope.all_recipients_enabled = false

        if (!$scope.resources.users) {
          return
        }

        for (var i = 0; i < $scope.resources.users.length; i++) {
          if (
            $scope.resources.users[i].role === 'receiver' &&
            !$scope.resources.users[i].encryption
          ) {
            return
          }
        }

        $scope.all_recipients_enabled = true
      },
      true
    )
  },
])

GL.controller('AdminGeneralSettingsCtrl', [
  '$scope',
  '$filter',
  '$http',
  'Files',
  'AdminL10NResource',
  'DefaultL10NResource',
  function ($scope, $filter, $http, Files, AdminL10NResource, DefaultL10NResource) {
    $scope.tabs = [
      {
        title: 'Main configuration',
        template: 'views/admin/content/tab1.html',
      },
    ]

    if ($scope.Authentication.session.role === 'admin') {
      $scope.tabs = $scope.tabs.concat([
        {
          title: 'Theme customization',
          template: 'views/admin/content/tab2.html',
        },
        {
          title: 'Files',
          template: 'views/admin/content/tab3.html',
        },
        {
          title: 'Languages',
          template: 'views/admin/content/tab4.html',
        },
        {
          title: 'Text customization',
          template: 'views/admin/content/tab5.html',
        },
      ])
    }

    $scope.admin_files = [
      {
        title: 'Favicon',
        varname: 'favicon',
        filename: 'custom_favicon.ico',
        type: 'ico',
        size: '131072',
      },
      {
        title: 'CSS',
        varname: 'css',
        filename: 'custom_stylesheet.css',
        type: 'css',
        size: '1048576',
      },
      {
        title: 'JavaScript',
        varname: 'script',
        filename: 'custom_script.js',
        type: 'js',
        size: '1048576',
      },
    ]

    if ($scope.Authentication.session.role === 'admin') {
      $scope.toggleLangSelect = function () {
        $scope.showLangSelect = true
      }

      $scope.langNotEnabledFilter = function (lang_obj) {
        return $scope.resources.node.languages_enabled.indexOf(lang_obj.code) === -1
      }

      $scope.enableLanguage = function (lang_obj) {
        $scope.resources.node.languages_enabled.push(lang_obj.code)
      }

      $scope.removeLang = function (idx, lang_code) {
        if (lang_code === $scope.resources.node.default_language) {
          return
        }
        $scope.resources.node.languages_enabled.splice(idx, 1)
      }

      $scope.get_l10n = function (lang) {
        if (!lang) {
          return
        }

        $scope.custom_texts = AdminL10NResource.get({ lang: lang })
        DefaultL10NResource.get({ lang: lang }, function (default_texts) {
          var list = []
          for (var key in default_texts) {
            if (default_texts.hasOwnProperty(key)) {
              var value = default_texts[key]
              if (value.length > 150) {
                value = value.substr(0, 150) + '...'
              }
              list.push({ key: key, value: value })
            }
          }

          $scope.default_texts = default_texts
          $scope.custom_texts_selector = $filter('orderBy')(list, 'value')
        })
      }

      $scope.vars = {
        language_to_customize: $scope.public.node.default_language,
      }

      $scope.get_l10n($scope.vars.language_to_customize)
    }

    $scope.files = []

    $scope.update_files = function () {
      var updated_files = Files.query(function () {
        $scope.files = updated_files
      })
    }

    $scope.delete_file = function (url) {
      $http.delete(url).then(function () {
        $scope.update_files()

        $scope.$emit('REFRESH')
      })
    }

    $scope.update_files()
  },
])

GL.controller('AdminUsersCtrl', [
  '$scope',
  'AdminTenantResource',
  function ($scope, AdminTenantResource) {
    $scope.showAddUser = false
    $scope.toggleAddUser = function () {
      $scope.showAddUser = !$scope.showAddUser
    }

    if ($scope.public.node.root_tenant) {
      AdminTenantResource.query(function (result) {
        $scope.resources.tenants = result
        $scope.tenants_by_id = $scope.Utils.array_to_map($scope.resources.tenants)
      })
    }
  },
])
  .controller('AdminUserEditorCtrl', [
    '$scope',
    '$http',
    'AdminUserResource',
    function ($scope, $http, AdminUserResource) {
      $scope.deleteUser = function () {
        $scope.Utils.deleteDialog().then(function () {
          return $scope.Utils.deleteResource(AdminUserResource, $scope.resources.users, $scope.user)
        })
      }

      $scope.editing = false

      $scope.toggleEditing = function () {
        $scope.editing = $scope.editing ^ 1
      }

      $scope.showAddUserTenantAssociation = false
      $scope.toggleAddUserTenantAssociation = function () {
        $scope.showAddUserTenantAssociation = !$scope.showAddUserTenantAssociation
      }

      $scope.saveUser = function () {
        var user = $scope.user
        if (user.pgp_key_remove) {
          user.pgp_key_public = ''
        }

        if (user.pgp_key_public !== '') {
          user.pgp_key_remove = false
        }

        return user.$update()
      }

      $scope.loadPublicKeyFile = function (file) {
        $scope.Utils.readFileAsText(file).then(function (txt) {
          $scope.user.pgp_key_public = txt
        }, $scope.Utils.displayErrorMsg)
      }

      $scope.resetUserPassword = function () {
        return $http.put('api/admin/config', {
          operation: 'reset_user_password',
          args: {
            value: $scope.user.id,
          },
        })
      }

      $scope.disable2FA = function () {
        $http
          .put('api/admin/config', {
            operation: 'disable_2fa',
            args: {
              value: $scope.user.id,
            },
          })
          .then(function () {
            $scope.user.two_factor = false
          })
      }
    },
  ])
  .controller('AdminUserAddCtrl', [
    '$scope',
    function ($scope) {
      $scope.new_user = { send_account_activation_link: true }

      $scope.add_user = function () {
        var user = new $scope.AdminUtils.new_user()

        user.username =
          typeof $scope.new_user.username !== 'undefined' ? $scope.new_user.username : ''
        user.role = $scope.new_user.role
        user.name = $scope.new_user.name
        user.mail_address = $scope.new_user.email
        user.send_account_activation_link = $scope.new_user.send_account_activation_link
        user.language = $scope.resources.node.default_language

        user.$save(function (new_user) {
          $scope.resources.users.push(new_user)
          $scope.new_user = { send_account_activation_link: true }
        })
      }
    },
  ])

GL.controller('AdminContextsCtrl', [
  '$scope',
  'AdminContextResource',
  function ($scope, AdminContextResource) {
    $scope.admin_receivers_by_id = $scope.Utils.array_to_map($scope.resources.users)

    $scope.save_context = function (context, cb) {
      if (context.additional_questionnaire_id === null) {
        context.additional_questionnaire_id = ''
      }

      var updated_context = new AdminContextResource(context)

      return $scope.Utils.update(updated_context, cb)
    }

    $scope.showAddContext = false
    $scope.toggleAddContext = function () {
      $scope.showAddContext = !$scope.showAddContext
    }

    $scope.moveUpAndSave = function (elem) {
      $scope.Utils.moveUp(elem)
      $scope.save_context(elem)
    }

    $scope.moveDownAndSave = function (elem) {
      $scope.Utils.moveDown(elem)
      $scope.save_context(elem)
    }
  },
])
  .controller('AdminContextEditorCtrl', [
    '$scope',
    '$http',
    'AdminContextResource',
    function ($scope, $http, AdminContextResource) {
      $scope.editing = false

      $scope.toggleEditing = function () {
        $scope.editing = !$scope.editing
      }

      function swap($event, index, n) {
        $event.stopPropagation()

        var target = index + n
        if (target < 0 || target >= $scope.resources.contexts.length) {
          return
        }

        $scope.resources.contexts[index] = $scope.resources.contexts[target]
        $scope.resources.contexts[target] = $scope.context

        return $http({
          method: 'PUT',
          url: 'api/admin/contexts',
          data: {
            operation: 'order_elements',
            args: {
              ids: $scope.resources.contexts.map(function (c) {
                return c.id
              }),
            },
          },
        })
      }

      $scope.moveUp = function (e, idx) {
        swap(e, idx, -1)
      }
      $scope.moveDown = function (e, idx) {
        swap(e, idx, 1)
      }

      $scope.showSelect = false
      $scope.toggleSelect = function () {
        $scope.showSelect = true
      }

      $scope.moveReceiver = function (rec) {
        $scope.context.receivers.push(rec.id)
        $scope.showSelect = false
      }

      $scope.receiverNotSelectedFilter = function (item) {
        return $scope.context.receivers.indexOf(item.id) === -1
      }

      $scope.deleteContext = function () {
        $scope.Utils.deleteDialog().then(function () {
          return $scope.Utils.deleteResource(
            AdminContextResource,
            $scope.resources.contexts,
            $scope.context
          )
        })
      }
    },
  ])
  .controller('AdminContextReceiverSelectorCtrl', [
    '$scope',
    function ($scope) {
      function swap(index, n) {
        var target = index + n
        if (target > -1 && target < $scope.context.receivers.length) {
          var tmp = $scope.context.receivers[target]
          var tmpIdx = $scope.context.receivers[index]
          $scope.context.receivers[target] = tmpIdx
          $scope.context.receivers[index] = tmp
        }
      }

      $scope.moveUp = function (idx) {
        swap(idx, -1)
      }
      $scope.moveDown = function (idx) {
        swap(idx, 1)
      }
    },
  ])
  .controller('AdminContextAddCtrl', [
    '$scope',
    function ($scope) {
      $scope.new_context = {}

      $scope.add_context = function () {
        var context = new $scope.AdminUtils.new_context()

        context.name = $scope.new_context.name
        context.questionnaire_id = $scope.resources.node.default_questionnaire
        context.order = $scope.newItemOrder($scope.resources.contexts, 'order')

        context.$save(function (new_context) {
          $scope.resources.contexts.push(new_context)
          $scope.new_context = {}
        })
      }
    },
  ])

GL.controller('AdminFieldEditorCtrl', [
  '$scope',
  '$http',
  'FileSaver',
  function ($scope, $http, FileSaver) {
    $scope.admin_receivers_by_id = $scope.Utils.array_to_map($scope.resources.users)

    $scope.editing = false
    $scope.new_field = {}

    $scope.showAddTrigger = false
    $scope.new_trigger = {}

    if ($scope.children) {
      $scope.fields = $scope.children
    }

    $scope.children = $scope.field.children

    $scope.toggleEditing = function () {
      $scope.editing = !$scope.editing
    }

    $scope.toggleAddTrigger = function () {
      $scope.showAddTrigger = !$scope.showAddTrigger
    }

    $scope.isMarkableSubjectToStats = function (field) {
      return ['inputbox', 'textarea', 'fieldgroup'].indexOf(field.type) === -1
    }

    $scope.isMarkableSubjectToPreview = function (field) {
      return ['fieldgroup', 'fileupload'].indexOf(field.type) === -1
    }

    $scope.typeSwitch = function (type) {
      if (['inputbox', 'textarea'].indexOf(type) !== -1) {
        return 'inputbox_or_textarea'
      }

      if (['checkbox', 'selectbox'].indexOf(type) !== -1) {
        return 'checkbox_or_selectbox'
      }

      return type
    }

    $scope.showOptions = function (field) {
      if (['checkbox', 'selectbox', 'multichoice'].indexOf(field.type) > -1) {
        return true
      }

      return false
    }

    $scope.delField = function (field) {
      $scope.Utils.deleteDialog().then(function () {
        return $scope.Utils.deleteResource($scope.fieldResource, $scope.fields, field)
      })
    }

    $scope.showAddQuestion = $scope.showAddQuestionFromTemplate = false
    $scope.toggleAddQuestion = function () {
      $scope.showAddQuestion = !$scope.showAddQuestion
      $scope.showAddQuestionFromTemplate = false
    }

    $scope.toggleAddQuestionFromTemplate = function () {
      $scope.showAddQuestionFromTemplate = !$scope.showAddQuestionFromTemplate
      $scope.showAddQuestion = false
    }

    $scope.addOption = function () {
      var new_option = {
        id: '',
        label: '',
        hint1: '',
        hint2: '',
        block_submission: false,
        score_points: 0,
        score_type: 'none',
        trigger_receiver: [],
      }

      new_option.order = $scope.newItemOrder($scope.field.options, 'order')

      $scope.field.options.push(new_option)
    }

    function swapOption(index, n) {
      var target = index + n
      if (target < 0 || target >= $scope.field.options.length) {
        return
      }
      var a = $scope.field.options[target]
      var b = $scope.field.options[index]
      $scope.field.options[target] = b
      $scope.field.options[index] = a
    }

    $scope.moveOptionUp = function (idx) {
      swapOption(idx, -1)
    }
    $scope.moveOptionDown = function (idx) {
      swapOption(idx, 1)
    }

    $scope.delOption = function (option) {
      $scope.field.options.splice($scope.field.options.indexOf(option), 1)
    }

    $scope.delTrigger = function (trigger) {
      $scope.field.triggered_by_options.splice(
        $scope.field.triggered_by_options.indexOf(trigger),
        1
      )
    }

    $scope.save_field = function (field) {
      field = new $scope.fieldResource(field)

      $scope.Utils.assignUniqueOrderIndex(field.options)

      return $scope.Utils.update(field)
    }

    $scope.moveUpAndSave = function (elem) {
      $scope.Utils.moveUp(elem)
      $scope.save_field(elem)
    }

    $scope.moveDownAndSave = function (elem) {
      $scope.Utils.moveDown(elem)
      $scope.save_field(elem)
    }

    $scope.moveLeftAndSave = function (elem) {
      $scope.Utils.moveLeft(elem)
      $scope.save_field(elem)
    }

    $scope.moveRightAndSave = function (elem) {
      $scope.Utils.moveRight(elem)
      $scope.save_field(elem)
    }

    $scope.add_field = function () {
      var field = $scope.AdminUtils.new_field('', $scope.field.id)
      field.label = $scope.new_field.label
      field.type = $scope.new_field.type
      field.attrs = $scope.resources.get_field_attrs(field.type)
      field.y = $scope.newItemOrder($scope.field.children, 'y')

      field.instance = $scope.field.instance

      if (field.type === 'fileupload') {
        field.multi_entry = true
      }

      field.$save(function (new_field) {
        $scope.field.children.push(new_field)
        $scope.new_field = {}
      })
    }

    $scope.add_field_from_template = function () {
      var field = $scope.AdminUtils.new_field('', $scope.field.id)
      field.template_id = $scope.new_field.template_id
      field.instance = 'reference'
      field.y = $scope.newItemOrder($scope.field.children, 'y')

      field.$save(function (new_field) {
        $scope.field.children.push(new_field)
        $scope.new_field = {}
      })
    }

    $scope.fieldIsMarkableSubjectToStats = $scope.isMarkableSubjectToStats($scope.field)
    $scope.fieldIsMarkableSubjectToPreview = $scope.isMarkableSubjectToPreview($scope.field)

    $scope.addTrigger = function () {
      $scope.field.triggered_by_options.push($scope.new_trigger)
      $scope.toggleAddTrigger()
      $scope.new_trigger = {}
    }

    $scope.flipBlockSubmission = function (option) {
      option.block_submission = !option.block_submission
    }

    $scope.addOptionHintDialog = function (option) {
      return $scope.Utils.openConfirmableModalDialog(
        'views/partials/add_option_hint.html',
        option,
        $scope
      )
    }

    $scope.triggerReceiverDialog = function (option) {
      $scope.addReceiver = function (rec) {
        option.trigger_receiver.push(rec.id)
      }

      $scope.receiverNotSelectedFilter = function (item) {
        return option.trigger_receiver.indexOf(item.id) === -1
      }

      return $scope.Utils.openConfirmableModalDialog(
        'views/partials/trigger_receiver.html',
        option,
        $scope
      )
    }

    $scope.assignScorePointsDialog = function (option) {
      return $scope.Utils.openConfirmableModalDialog(
        'views/partials/assign_score_points.html',
        option,
        $scope
      )
    }

    $scope.exportQuestion = function (obj) {
      $http({
        method: 'GET',
        url: 'api/admin/fieldtemplates/' + obj.id,
        responseType: 'blob',
      }).then(function (response) {
        FileSaver.saveAs(response.data, obj.label + '.json')
      })
    }
  },
])
  .controller('AdminFieldTemplatesCtrl', [
    '$scope',
    '$http',
    'AdminFieldTemplateResource',
    function ($scope, $http, AdminFieldTemplateResource) {
      $scope.fieldResource = AdminFieldTemplateResource
      $scope.parsedFields = $scope.fieldUtilities.parseFields($scope.resources.fieldtemplates, {})

      $scope.importQuestion = function (file) {
        $scope.Utils.readFileAsText(file)
          .then(function (txt) {
            return $http({
              method: 'POST',
              url: 'api/admin/fieldtemplates?multilang=1',
              data: txt,
            })
          })
          .then(function () {
            $scope.reload()
          }, $scope.Utils.displayErrorMsg)
      }
    },
  ])
  .controller('AdminFieldTemplatesAddCtrl', [
    '$scope',
    function ($scope) {
      $scope.new_field = {}

      $scope.add_field = function () {
        var field = $scope.AdminUtils.new_field_template($scope.field ? $scope.field.id : '')
        field.instance = 'template'
        field.label = $scope.new_field.label
        field.type = $scope.new_field.type
        field.attrs = $scope.resources.get_field_attrs(field.type)

        field.$save(function (new_field) {
          $scope.fields.push(new_field)
          $scope.new_field = {}
        })
      }
    },
  ])

GL.controller('AdminStepAddCtrl', [
  '$scope',
  function ($scope) {
    $scope.new_step = {}

    $scope.add_step = function () {
      var step = new $scope.AdminUtils.new_step($scope.questionnaire.id)
      step.label = $scope.new_step.label
      step.order = $scope.newItemOrder($scope.questionnaire.steps, 'order')

      step.$save(function (new_step) {
        $scope.questionnaire.steps.push(new_step)
        $scope.new_step = {}
      })
    }
  },
]).controller('AdminStepEditorCtrl', [
  '$scope',
  '$http',
  'AdminStepResource',
  'AdminFieldResource',
  function ($scope, $http, AdminStepResource, AdminFieldResource) {
    $scope.editing = false
    $scope.new_field = {}

    $scope.showAddTrigger = false
    $scope.new_trigger = { field: '', option: '', sufficient: true }

    $scope.fields = $scope.step.children
    $scope.fieldResource = AdminFieldResource

    $scope.toggleEditing = function () {
      $scope.editing = $scope.editing ^ 1
    }

    $scope.toggleAddTrigger = function () {
      $scope.showAddTrigger = !$scope.showAddTrigger
    }

    $scope.save_step = function (step) {
      step = new AdminStepResource(step)
      return $scope.Utils.update(step)
    }

    $scope.showAddQuestion = $scope.showAddQuestionFromTemplate = false
    $scope.toggleAddQuestion = function () {
      $scope.showAddQuestion = !$scope.showAddQuestion
      $scope.showAddQuestionFromTemplate = false
    }

    $scope.toggleAddQuestionFromTemplate = function () {
      $scope.showAddQuestionFromTemplate = !$scope.showAddQuestionFromTemplate
      $scope.showAddQuestion = false
    }

    $scope.delField = function (field) {
      return $scope.Utils.deleteResource($scope.fieldResource, $scope.fields, field)
    }

    $scope.add_field = function () {
      var field = $scope.AdminUtils.new_field($scope.step.id, '')
      field.label = $scope.new_field.label
      field.type = $scope.new_field.type
      field.attrs = $scope.resources.get_field_attrs(field.type)
      field.y = $scope.newItemOrder($scope.fields, 'y')

      if (field.type === 'fileupload') {
        field.multi_entry = true
      }

      field.$save(function (new_field) {
        $scope.fields.push(new_field)
        $scope.new_field = {}
      })
    }

    $scope.add_field_from_template = function () {
      var field = $scope.AdminUtils.new_field($scope.step.id, '')
      field.template_id = $scope.new_field.template_id
      field.instance = 'reference'
      field.y = $scope.newItemOrder($scope.fields, 'y')

      field.$save(function (new_field) {
        $scope.fields.push(new_field)
        $scope.new_field = {}
      })
    }

    $scope.delTrigger = function (trigger) {
      $scope.step.triggered_by_options.splice($scope.step.triggered_by_options.indexOf(trigger), 1)
    }

    function swap($event, index, n) {
      $event.stopPropagation()

      var target = index + n
      if (target < 0 || target >= $scope.questionnaire.steps.length) {
        return
      }

      var a = $scope.questionnaire.steps[target]
      var b = $scope.questionnaire.steps[index]
      $scope.questionnaire.steps[target] = b
      $scope.questionnaire.steps[index] = a

      return $http({
        method: 'PUT',
        url: 'api/admin/steps',
        data: {
          operation: 'order_elements',
          args: {
            ids: $scope.questionnaire.steps.map(function (s) {
              return s.id
            }),
            questionnaire_id: $scope.questionnaire.id,
          },
        },
      })
    }

    $scope.moveUp = function (e, idx) {
      swap(e, idx, -1)
    }
    $scope.moveDown = function (e, idx) {
      swap(e, idx, 1)
    }

    $scope.addTrigger = function () {
      $scope.step.triggered_by_options.push($scope.new_trigger)
      $scope.toggleAddTrigger()
      $scope.new_trigger = { field: '', option: '', sufficient: true }
    }
  },
])

GL.controller('AdminQuestionnaireCtrl', [
  '$scope',
  '$http',
  'AdminQuestionnaireResource',
  function ($scope, $http, AdminQuestionnaireResource) {
    $scope.tabs = [
      {
        title: 'Questionnaires',
        template: 'views/admin/questionnaires/main.html',
      },
      {
        title: 'Question templates',
        template: 'views/admin/questionnaires/questions.html',
      },
    ]

    $scope.deleted_fields_ids = []

    $scope.resources.get_field_attrs = function (type) {
      if (type in $scope.resources.field_attrs) {
        return $scope.resources.field_attrs[type]
      } else {
        return {}
      }
    }

    $scope.showAddQuestionnaire = false
    $scope.toggleAddQuestionnaire = function () {
      $scope.showAddQuestionnaire = !$scope.showAddQuestionnaire
    }

    $scope.showAddQuestion = false
    $scope.toggleAddQuestion = function () {
      $scope.showAddQuestion = !$scope.showAddQuestion
    }

    $scope.importQuestionnaire = function (file) {
      $scope.Utils.readFileAsText(file)
        .then(function (txt) {
          return $http({
            method: 'POST',
            url: 'api/admin/questionnaires?multilang=1',
            data: txt,
          })
        })
        .then(function () {
          $scope.reload()
        }, $scope.Utils.displayErrorMsg)
    }

    $scope.save_questionnaire = function (questionnaire, cb) {
      var updated_questionnaire = new AdminQuestionnaireResource(questionnaire)

      return $scope.Utils.update(updated_questionnaire, cb)
    }

    $scope.delete_questionnaire = function (questionnaire) {
      $scope.Utils.deleteDialog().then(function () {
        return $scope.Utils.deleteResource(
          AdminQuestionnaireResource,
          $scope.resources.questionnaires,
          questionnaire
        )
      })
    }
  },
])
  .controller('AdminQuestionnaireEditorCtrl', [
    '$scope',
    '$uibModal',
    '$http',
    'FileSaver',
    'AdminStepResource',
    function ($scope, $uibModal, $http, FileSaver, AdminStepResource) {
      $scope.editing = false

      $scope.toggleEditing = function () {
        $scope.editing = $scope.questionnaire.editable && !$scope.editing
      }

      $scope.showAddStep = false
      $scope.toggleAddStep = function () {
        $scope.showAddStep = !$scope.showAddStep
      }

      $scope.parsedFields = $scope.fieldUtilities.parseQuestionnaire($scope.questionnaire, {})

      $scope.delStep = function (step) {
        $scope.Utils.deleteDialog().then(function () {
          return $scope.Utils.deleteResource(AdminStepResource, $scope.questionnaire.steps, step)
        })
      }

      $scope.duplicate_questionnaire = function (questionnaire) {
        $uibModal.open({
          templateUrl: 'views/modals/questionnaire_duplication.html',
          controller: 'QuestionaireOperationsCtrl',
          resolve: {
            questionnaire: function () {
              return questionnaire
            },
            operation: function () {
              return 'duplicate'
            },
          },
        })
      }

      $scope.exportQuestionnaire = function (obj) {
        $http({
          method: 'GET',
          url: 'api/admin/questionnaires/' + obj.id,
          responseType: 'blob',
        }).then(function (response) {
          FileSaver.saveAs(response.data, obj.name + '.json')
        })
      }
    },
  ])
  .controller('AdminQuestionnaireAddCtrl', [
    '$scope',
    function ($scope) {
      $scope.new_questionnaire = {}

      $scope.add_questionnaire = function () {
        var questionnaire = new $scope.AdminUtils.new_questionnaire()

        questionnaire.name = $scope.new_questionnaire.name

        questionnaire.$save(function (new_questionnaire) {
          $scope.resources.questionnaires.push(new_questionnaire)
          $scope.new_questionnaire = {}
        })
      }
    },
  ])
  .controller('QuestionaireOperationsCtrl', [
    '$scope',
    '$http',
    '$location',
    '$uibModalInstance',
    'questionnaire',
    'operation',
    function ($scope, $http, $location, $uibModalInstance, questionnaire, operation) {
      $scope.questionnaire = questionnaire
      $scope.operation = operation

      $scope.cancel = function () {
        $uibModalInstance.close()
      }

      $scope.confirm = function () {
        $uibModalInstance.close()

        if ($scope.operation === 'duplicate') {
          $http
            .post('api/admin/questionnaires/duplicate', {
              questionnaire_id: $scope.questionnaire.id,
              new_name: $scope.duplicate_questionnaire.name,
            })
            .then(function () {
              $scope.reload()
            })
        }
      }
    },
  ])

GL.controller('AdminNetworkCtrl', [
  '$scope',
  function ($scope) {
    $scope.tabs = [
      {
        title: 'HTTPS',
        template: 'views/admin/network/https.html',
      },
      {
        title: 'Tor',
        template: 'views/admin/network/tor.html',
      },
      {
        title: 'Access control',
        template: 'views/admin/network/access_control.html',
      },
      {
        title: 'URL redirects',
        template: 'views/admin/network/url_redirects.html',
      },
    ]

    $scope.resetOnionPrivateKey = function () {
      return $scope.Utils.applyConfig('reset_onion_private_key', {}, true)
    }

    $scope.new_redirect = {}

    $scope.add_redirect = function () {
      var redirect = new $scope.AdminUtils.new_redirect()

      redirect.path1 = $scope.new_redirect.path1
      redirect.path2 = $scope.new_redirect.path2

      redirect.$save(function (new_redirect) {
        $scope.resources.redirects.push(new_redirect)
        $scope.new_redirect = {}
      })
    }
  },
])
  .controller('AdminHTTPSConfigCtrl', [
    '$q',
    '$http',
    '$window',
    '$scope',
    '$uibModal',
    'FileSaver',
    'AdminTLSConfigResource',
    'AdminTLSCfgFileResource',
    'AdminAcmeResource',
    function (
      $q,
      $http,
      $window,
      $scope,
      $uibModal,
      FileSaver,
      tlsConfigResource,
      cfgFileResource,
      adminAcmeResource
    ) {
      $scope.state = 0
      $scope.menuState = 'setup'

      $scope.setMenu = function (state) {
        $scope.menuState = state
      }

      $scope.parseTLSConfig = function (tlsConfig) {
        $scope.tls_config = tlsConfig

        var t = 0
        var choice = 'setup'

        if (!tlsConfig.acme) {
          if (tlsConfig.files.key.set) {
            t = 1
          }

          if (tlsConfig.files.cert.set) {
            t = 2
          }

          if (tlsConfig.files.chain.set) {
            t = 3
          }
        } else if (
          tlsConfig.files.key.set &&
          tlsConfig.files.cert.set &&
          tlsConfig.files.chain.set
        ) {
          t = 3
        }

        if (tlsConfig.enabled) {
          choice = 'status'
          t = -1
        } else if (t > 0) {
          choice = 'files'
        }

        $scope.state = t
        $scope.menuState = choice
      }

      tlsConfigResource.get({}).$promise.then($scope.parseTLSConfig)

      $scope.refreshConfig = function () {
        return tlsConfigResource.get().$promise.then($scope.parseTLSConfig)
      }

      $scope.file_resources = {
        key: new cfgFileResource({ name: 'key' }),
        cert: new cfgFileResource({ name: 'cert' }),
        chain: new cfgFileResource({ name: 'chain' }),
        csr: new cfgFileResource({ name: 'csr' }),
      }

      $scope.csr_cfg = {
        country: '',
        province: '',
        city: '',
        company: '',
        department: '',
        email: '',
      }

      $scope.csr_state = {
        open: false,
      }

      $scope.gen_key = function () {
        return $scope.file_resources.key.$update().then($scope.refreshConfig)
      }

      $scope.postFile = function (file, resource) {
        $scope.Utils.readFileAsText(file)
          .then(function (str) {
            resource.content = str
            return resource.$save()
          })
          .then($scope.refreshConfig)
      }

      $scope.downloadFile = function (resource) {
        $http({
          method: 'GET',
          url: 'api/admin/config/tls/files/' + resource.name,
          responseType: 'blob',
        }).then(function (response) {
          FileSaver.saveAs(response.data, resource.name + '.pem')
        })
      }

      $scope.setupAcme = function () {
        var aRes = new adminAcmeResource()
        $scope.file_resources.key
          .$update()
          .then(function () {
            return aRes.$save()
          })
          .then($scope.refreshConfig)
      }

      $scope.deleteFile = function (resource) {
        $uibModal.open({
          templateUrl: 'views/modals/confirmation.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: null,
            confirmFun: function () {
              return function () {
                return resource.$delete().then($scope.refreshConfig)
              }
            },
            cancelFun: null,
          },
        })
      }

      $scope.setup = function () {
        $scope.setMenu('files')
      }

      $scope.toggleCfg = function () {
        if ($scope.tls_config.enabled) {
          $scope.tls_config.$disable().then($scope.refreshConfig)
        } else {
          $scope.tls_config.$enable().then(function () {
            $window.location.href = 'https://' + $scope.resources.node.hostname
          })
        }
      }

      $scope.submitCSR = function () {
        $scope.file_resources.content = $scope.csr_cfg
        $scope.file_resources.csr.content = $scope.csr_cfg
        $scope.file_resources.csr.$save().then(function () {
          $scope.csr_state.open = false
          return $scope.refreshConfig()
        })
      }

      $scope.resetCfg = function () {
        $uibModal.open({
          templateUrl: 'views/modals/confirmation.html',
          controller: 'ConfirmableModalCtrl',
          resolve: {
            arg: null,
            confirmFun: function () {
              return function () {
                $scope.tls_config.$delete().then($scope.refreshConfig)
              }
            },
            cancelFun: null,
          },
        })
      }
    },
  ])
  .controller('AdminRedirectEditCtrl', [
    '$scope',
    'AdminRedirectResource',
    function ($scope, AdminRedirectResource) {
      $scope.delete_redirect = function (redirect) {
        AdminRedirectResource.delete(
          {
            id: redirect.id,
          },
          function () {
            $scope.Utils.deleteFromList($scope.resources.redirects, redirect)
          }
        )
      }
    },
  ])

GL.controller('AdminMailCtrl', [
  '$scope',
  'AdminNotificationResource',
  function ($scope, AdminNotificationResource) {
    $scope.tabs = [
      {
        title: 'Main configuration',
        template: 'views/admin/notifications/tab1.html',
      },
      {
        title: 'Notification templates',
        template: 'views/admin/notifications/tab2.html',
      },
    ]

    $scope.updateThenTestMail = function () {
      AdminNotificationResource.update($scope.resources.notification).$promise.then(
        function () {
          return $scope.Utils.applyConfig('test_mail')
        },
        function () {}
      )
    }
  },
])

GL.controller('AdminAdvancedCtrl', [
  '$scope',
  function ($scope) {
    $scope.tabs = [
      {
        title: 'Main configuration',
        template: 'views/admin/advanced/tab1.html',
      },
    ]

    if ($scope.resources.node.root_tenant) {
      $scope.tabs.push({
        title: 'Anomaly detection thresholds',
        template: 'views/admin/advanced/tab2.html',
      })
    }

    $scope.resetSubmissions = function () {
      $scope.Utils.deleteDialog().then(function () {
        return $scope.Utils.applyConfig('reset_submissions')
      })
    }

    $scope.toggleEncryption = function () {
      if ($scope.resources.node.encryption) {
        $scope.Utils.openConfirmableModalDialog('views/modals/enable_encryption.html').then(
          function () {
            $scope.resources.node.encryption = true
            $scope.resources.node.escrow = false
            $scope.Utils.update($scope.resources.node, function () {
              if (!$scope.resources.preferences.encryption) {
                $scope.Authentication.logout()
              }
            })
          },
          function () {
            $scope.resources.node.encryption = false
          }
        )
      }
    }
  },
])

GL.controller('AdminAuditLogCtrl', [
  '$scope',
  function ($scope) {
    $scope.tabs = [
      {
        title: 'Audit log',
        template: 'views/admin/auditlog/tab1.html',
      },
      {
        title: 'Users',
        template: 'views/admin/auditlog/tab2.html',
      },
      {
        title: 'Reports',
        template: 'views/admin/auditlog/tab3.html',
      },
      {
        title: 'Scheduled jobs',
        template: 'views/admin/auditlog/tab4.html',
      },
    ]

    $scope.itemsPerPage = 20

    $scope.resourcesNames = ['auditlog', 'tips', 'users']

    $scope.auditLog = {}

    for (var i = 0; i < $scope.resourcesNames.length; i++) {
      $scope.auditLog[$scope.resourcesNames[i]] = {
        currentPage: 1,
        elems: angular.copy($scope.resources[$scope.resourcesNames[i]]),
      }
    }
  },
])

angular
  .module('GL')
  .controller('TenantCtrl', [
    '$scope',
    function ($scope) {
      $scope.tabs = [
        {
          title: 'Sites',
          template: 'views/admin/sites/tab1.html',
        },
        {
          title: 'Options',
          template: 'views/admin/sites/tab2.html',
        },
      ]

      $scope.search = undefined
      $scope.currentPage = 1
      $scope.itemsPerPage = 20

      $scope.newTenant = new $scope.AdminUtils.new_tenant()

      $scope.$watch('search', function (value) {
        if (typeof value !== 'undefined') {
          $scope.currentPage = 1
        }
      })

      $scope.showAddTenant = false
      $scope.toggleAddTenant = function () {
        $scope.showAddTenant = !$scope.showAddTenant
      }

      $scope.addTenant = function () {
        $scope.newTenant.$save(function (tenant) {
          $scope.resources.tenants.push(tenant)
          $scope.newTenant = new $scope.AdminUtils.new_tenant()
        })
      }
    },
  ])
  .controller('TenantEditorCtrl', [
    '$scope',
    '$http',
    '$window',
    'AdminTenantResource',
    function ($scope, $http, $window, AdminTenantResource) {
      $scope.toggleEditing = function ($event) {
        $event.stopPropagation()
        $scope.editing = !$scope.editing
      }

      $scope.isRemovableTenant = function () {
        return $scope.tenant.id !== 1
      }

      $scope.isCurrentTenant = function () {
        return false
      }

      $scope.toggleActivation = function ($event) {
        $event.stopPropagation()
        $scope.tenant.active = !$scope.tenant.active
        $scope.tenant.$update()
      }

      $scope.configureTenant = function ($event, tid) {
        $event.stopPropagation()
        return $http.get('api/tenantauthswitch/' + tid).then(function (x) {
          return $window.open(x.data.redirect)
        })
      }

      $scope.saveTenant = function () {
        $scope.tenant.subdomain = angular.isDefined($scope.tenant.subdomain)
          ? $scope.tenant.subdomain
          : ''
        return $scope.tenant.$update()
      }

      $scope.deleteTenant = function ($event) {
        $event.stopPropagation()
        $scope.Utils.deleteDialog().then(function () {
          return $scope.Utils.deleteResource(
            AdminTenantResource,
            $scope.resources.tenants,
            $scope.tenant
          )
        })
      }
    },
  ])

GL.controller('AdminCaseManagementCtrl', [
  '$scope',
  function ($scope) {
    $scope.tabs = [
      {
        title: 'Report statuses',
        template: 'views/admin/casemanagement/tab1.html',
      },
    ]
  },
])
  .controller('AdminSubmissionStatusCtrl', [
    '$scope',
    function ($scope) {
      $scope.showAddStatus = false
      $scope.toggleAddStatus = function () {
        $scope.showAddStatus = !$scope.showAddStatus
      }

      $scope.isSystemDefined = function (state) {
        return ['new', 'opened', 'closed'].indexOf(state.id) !== -1
      }
    },
  ])
  .controller('AdminSubmissionStatusEditorCtrl', [
    '$scope',
    '$http',
    'AdminSubmissionStatusResource',
    function ($scope, $http, AdminSubmissionStatusResource) {
      $scope.editing = false

      $scope.isEditable = function () {
        return ['new', 'opened'].indexOf($scope.submissions_status.id) === -1
      }

      $scope.toggleEditing = function () {
        if ($scope.isEditable()) {
          $scope.editing = !$scope.editing
        }
      }

      $scope.showAddSubstatus = false
      $scope.toggleAddSubstatus = function () {
        $scope.showAddSubstatus = !$scope.showAddSubstatus
      }

      $scope.deleteSubmissionStatus = function () {
        $scope.Utils.deleteDialog().then(function () {
          return $scope.Utils.deleteResource(
            AdminSubmissionStatusResource,
            $scope.resources.submission_statuses,
            $scope.submissions_status
          )
        })
      }

      function ss_idx(ss_id) {
        for (var i = 0; i < $scope.resources.submission_statuses.length; i++) {
          var status = $scope.resources.submission_statuses[i]
          if (status.id === ss_id) {
            return i
          }
        }
      }

      $scope.save_submissions_status = function (context, cb) {
        var updated_submissions_status = new AdminSubmissionStatusResource(context)
        return $scope.Utils.update(updated_submissions_status, cb)
      }

      function swap($event, index, n) {
        $event.stopPropagation()

        var target = index + n

        if (target < 0 || target >= $scope.resources.submission_statuses.length) {
          return
        }

        // Because the base data structure and the one we display don't match ...
        var orig_index = ss_idx($scope.resources.submission_statuses[index].id)
        var orig_target = ss_idx($scope.resources.submission_statuses[target].id)

        var moving_status = $scope.resources.submission_statuses[orig_index]
        $scope.resources.submission_statuses[orig_index] =
          $scope.resources.submission_statuses[orig_target]
        $scope.resources.submission_statuses[orig_target] = moving_status

        // Return only the ids we want to reorder
        var reordered_ids = {
          ids: $scope.resources.submission_statuses
            .map(function (c) {
              return c.id
            })
            .filter(function (c) {
              return c
            }),
        }

        $http({
          method: 'PUT',
          url: 'api/admin/submission_statuses',
          data: {
            operation: 'order_elements',
            args: reordered_ids,
          },
        })
      }

      $scope.moveUp = function (e, idx) {
        swap(e, idx, -1)
      }
      $scope.moveDown = function (e, idx) {
        swap(e, idx, 1)
      }
    },
  ])
  .controller('AdminSubmissionStatusAddCtrl', [
    '$scope',
    '$http',
    function ($scope, $http) {
      var order = $scope.newItemOrder($scope.resources.submission_statuses, 'order')

      $scope.addSubmissionStatus = function () {
        var new_submissions_status = {
          label: $scope.new_submissions_status.label,
          order: order,
        }

        $http.post('api/admin/submission_statuses', new_submissions_status).then(function (result) {
          $scope.resources.submission_statuses.push(result.data)
        })
      }
    },
  ])
  .controller('AdminSubmissionSubStatusCtrl', [function () {}])
  .controller('AdminSubmissionSubStatusEditorCtrl', [
    '$scope',
    '$http',
    'AdminSubmissionSubStatusResource',
    function ($scope, $http, AdminSubmissionSubStatusResource) {
      $scope.substatus_editing = false
      $scope.toggleSubstatusEditing = function () {
        $scope.substatus_editing = !$scope.substatus_editing
      }

      $scope.deleteSubSubmissionStatus = function () {
        $scope.Utils.deleteDialog().then(function () {
          AdminSubmissionSubStatusResource.delete(
            {
              id: $scope.substatus.id,
              submissionstatus_id: $scope.substatus.submissionstatus_id,
            },
            function () {
              var index = $scope.submissions_status.substatuses.indexOf($scope.substatus)
              $scope.submissions_status.substatuses.splice(index, 1)
            }
          )
        })
      }

      $scope.save_submissions_substatuses = function (substatus, cb) {
        var updated_submissions_substatuses = new AdminSubmissionSubStatusResource(substatus)
        return $scope.Utils.update(updated_submissions_substatuses, cb)
      }

      function swapSs($event, index, n) {
        $event.stopPropagation()

        var target = index + n

        if (target < 0 || target >= $scope.submissions_status.substatuses.length) {
          return
        }

        $scope.submissions_status.substatuses[index] = $scope.submissions_status.substatuses[target]
        $scope.submissions_status.substatuses[target] = $scope.substatus

        $http({
          method: 'PUT',
          url: 'api/admin/submission_statuses/' + $scope.submissions_status.id + '/substatuses',
          data: {
            operation: 'order_elements',
            args: {
              ids: $scope.submissions_status.substatuses.map(function (c) {
                return c.id
              }),
            },
          },
        })
      }

      $scope.moveSsUp = function (e, idx) {
        swapSs(e, idx, -1)
      }
      $scope.moveSsDown = function (e, idx) {
        swapSs(e, idx, 1)
      }
    },
  ])
  .controller('AdminSubmissionSubStatusAddCtrl', [
    '$scope',
    '$http',
    function ($scope, $http) {
      $scope.order = $scope.newItemOrder($scope.submissions_status.substatuses, 'order')

      $scope.addSubmissionSubStatus = function () {
        var new_submissions_substatuses = {
          label: $scope.new_substatus.label,
          order: $scope.order,
        }

        $http
          .post(
            'api/admin/submission_statuses/' + $scope.submissions_status.id + '/substatuses',
            new_submissions_substatuses
          )
          .then(function (result) {
            $scope.submissions_status.substatuses.push(result.data)
          })
      }
    },
  ])
  .controller('AdminSubmissionClosingStatusCtrl', [
    '$scope',
    function ($scope) {
      $scope.submissions_status = undefined

      $scope.showAddStatus = false

      $scope.toggleAddStatus = function () {
        $scope.showAddStatus = !$scope.showAddStatus
      }

      // Find the closed status from the statuses list so we can directly manipulate it
      for (var i = 0; i < $scope.resources.submission_statuses.length; i++) {
        var status = $scope.resources.submission_statuses[i]
        if (status.id === 'closed') {
          $scope.submissions_status = status
          return
        }
      }
    },
  ])
  .controller('AdminSubmissionClosedSubStatusAddCtrl', [
    '$scope',
    '$http',
    function ($scope, $http) {
      $scope.closed_ss_order = $scope.newItemOrder($scope.submissions_status.substatuses, 'order')

      // It would be nice to refactor this with addSubmissionSubStatus
      $scope.addClosingSubmissionSubStatus = function () {
        var new_submissions_substatuses = {
          label: $scope.new_closed_submissions_substatuses.label,
          order: $scope.closed_ss_order,
        }

        $http
          .post(
            'api/admin/submission_statuses/' + $scope.submissions_status.id + '/substatuses',
            new_submissions_substatuses
          )
          .then(function (result) {
            $scope.submissions_status.substatuses.push(result.data)
          })
      }
    },
  ])

GL.controller('SubmissionCtrl', [
  '$scope',
  '$filter',
  '$location',
  '$interval',
  'tmhDynamicLocale',
  'Submission',
  'fieldUtilities',
  function ($scope, $filter, $location, $interval, tmhDynamicLocale, Submission, fieldUtilities) {
    $scope.vars = {}

    $scope.fieldUtilities = fieldUtilities

    $scope.context_id = $location.search().context || ''

    $scope.context = undefined

    $scope.navigation = -1

    $scope.validate = {}

    $scope.score = 0

    $scope.singleStepForm = function () {
      return $scope.firstStepIndex() === $scope.lastStepIndex()
    }

    $scope.contextsOrderPredicate = $scope.public.node.show_contexts_in_alphabetical_order
      ? 'name'
      : 'order'

    $scope.selectable_contexts = $filter('filter')($scope.public.contexts, { status: 'enabled' })
    $scope.selectable_contexts = $filter('orderBy')(
      $scope.selectable_contexts,
      $scope.contextsOrderPredicate
    )

    $scope.selectContext = function (context) {
      $scope.context = context
    }

    $scope.selectable = function () {
      if ($scope.submission.context.maximum_selectable_receivers === 0) {
        return true
      }

      return (
        Object.keys($scope.submission.selected_receivers).length <
        $scope.submission.context.maximum_selectable_receivers
      )
    }

    $scope.switch_selection = function (receiver) {
      if (receiver.forcefully_selected) {
        return
      }

      if ($scope.submission.selected_receivers[receiver.id]) {
        delete $scope.submission.selected_receivers[receiver.id]
      } else if ($scope.selectable()) {
        $scope.submission.selected_receivers[receiver.id] = true
      }
    }

    $scope.goToStep = function (index) {
      $scope.navigation = index
      $scope.Utils.scrollToTop()
    }

    $scope.firstStepIndex = function () {
      return $scope.receiver_selection_step ? -1 : 0
    }

    $scope.lastStepIndex = function () {
      var last_enabled = 0

      for (var i = 0; i < $scope.questionnaire.steps.length; i++) {
        if (
          fieldUtilities.isFieldTriggered(
            null,
            $scope.questionnaire.steps[i],
            $scope.answers,
            $scope.score
          )
        ) {
          last_enabled = i
        }
      }

      return last_enabled
    }

    $scope.hasNextStep = function () {
      if (typeof $scope.context === 'undefined') {
        return false
      }

      return $scope.navigation < $scope.lastStepIndex()
    }

    $scope.hasPreviousStep = function () {
      if (typeof $scope.context === 'undefined') {
        return false
      }

      return $scope.navigation > $scope.firstStepIndex()
    }

    $scope.checkForInvalidFields = function () {
      for (var i = 0; i <= $scope.navigation; i++) {
        if ($scope.questionnaire.steps[i].enabled) {
          // find the first invalid element
          var form = document.getElementById('step-' + i)
          var firstInvalid = form.querySelector('.inputelem.ng-invalid')

          // if we find one, set focus
          if (firstInvalid) {
            return false
          }
        }
      }

      return true
    }

    $scope.runValidation = function () {
      $scope.validate[$scope.navigation] = true

      if (!$scope.areReceiversSelected() || !$scope.checkForInvalidFields()) {
        $scope.Utils.scrollToTop()
        return false
      }

      return true
    }

    $scope.incrementStep = function () {
      if (!$scope.runValidation()) {
        return
      }

      if ($scope.hasNextStep()) {
        $scope.vars.submissionForm.$dirty = false
        for (var i = $scope.navigation + 1; i <= $scope.lastStepIndex(); i++) {
          if (
            fieldUtilities.isFieldTriggered(
              null,
              $scope.questionnaire.steps[i],
              $scope.answers,
              $scope.score
            )
          ) {
            $scope.navigation = i
            $scope.Utils.scrollToTop()
            return
          }
        }
      }
    }

    $scope.decrementStep = function () {
      if ($scope.hasPreviousStep()) {
        $scope.vars.submissionForm.$dirty = false
        for (var i = $scope.navigation - 1; i >= $scope.firstStepIndex(); i--) {
          if (
            i === -1 ||
            fieldUtilities.isFieldTriggered(
              null,
              $scope.questionnaire.steps[i],
              $scope.answers,
              $scope.score
            )
          ) {
            $scope.navigation = i
            $scope.Utils.scrollToTop()
            return
          }
        }
      }
    }

    $scope.areReceiversSelected = function () {
      return Object.keys($scope.submission.selected_receivers).length > 0
    }

    $scope.submissionHasErrors = function () {
      if (angular.isDefined($scope.vars.submissionForm)) {
        return $scope.vars.submissionForm.$invalid || $scope.Utils.isUploading($scope.uploads)
      }

      return false
    }

    $scope.fileupload_url = function () {
      if (!$scope.submission) {
        return
      }

      return 'api/submission/attachment'
    }

    $scope.prepareSubmission = function (context) {
      $scope.answers = {}
      $scope.uploads = {}
      $scope.context = context
      $scope.questionnaire = context.questionnaire
      $scope.field_id_map = fieldUtilities.build_field_id_map($scope.questionnaire)

      $scope.submission.create(context.id)

      $scope.receiversOrderPredicate = $scope.submission.context
        .show_receivers_in_alphabetical_order
        ? 'name'
        : null
      $scope.show_steps_navigation_bar =
        $scope.context.allow_recipients_selection || $scope.questionnaire.steps.length > 1

      if ($scope.context.allow_recipients_selection) {
        $scope.navigation = -1
      } else {
        $scope.navigation = 0
      }
    }

    $scope.completeSubmission = function () {
      if (!$scope.runValidation()) {
        return
      }

      $scope.submission._submission.answers = $scope.answers
      return $scope.submission.submit()
    }

    $scope.stepForm = function (index) {
      if (index !== -1) {
        return $scope.vars.submissionForm['step-' + index]
      }
    }

    $scope.displayStepErrors = function (index) {
      if (index !== -1) {
        return $scope.stepForm(index).$invalid
      }
    }

    $scope.replaceReceivers = function (receivers) {
      for (var key in $scope.submission.selected_receivers) {
        if (receivers.indexOf(key) === -1) {
          delete $scope.submission.selected_receivers[key]
        }
      }

      for (var i = 0; i < receivers.length; i++) {
        if (receivers[i] in $scope.receivers_by_id) {
          $scope.submission.selected_receivers[receivers[i]] = true
        }
      }
    }

    $scope.displayErrors = function () {
      if (!($scope.validate[$scope.navigation] || $scope.submission.done)) {
        return false
      }

      if (!($scope.hasPreviousStep() || !$scope.hasNextStep()) && !$scope.areReceiversSelected()) {
        return true
      }

      if (!$scope.hasNextStep() && $scope.submissionHasErrors()) {
        return true
      }

      if ($scope.displayStepErrors($scope.navigation)) {
        return true
      }

      return false
    }

    $scope.setPage('submissionpage')

    $scope.submission = new Submission(function () {
      var context = null

      if ($scope.context_id) {
        context = $filter('filter')($scope.public.contexts, { id: $scope.context_id })[0]
      } else if ($scope.selectable_contexts.length === 1) {
        context = $scope.selectable_contexts[0]
      }

      if (context) {
        $scope.context = context
      }

      // Watch for changes in certain variables
      $scope.$watch('context', function () {
        if ($scope.submission && $scope.context) {
          $scope.prepareSubmission($scope.context)
        }
      })

      $scope.$watch(
        'answers',
        function () {
          fieldUtilities.onAnswersUpdate($scope)
        },
        true
      )

      $scope.$on('GL::uploadsUpdated', function () {
        fieldUtilities.onAnswersUpdate($scope)
      })
    })
  },
])
  .controller('AdditionalQuestionnaireCtrl', [
    '$http',
    '$scope',
    '$uibModalInstance',
    '$filter',
    '$location',
    '$interval',
    'tmhDynamicLocale',
    'Submission',
    'glbcProofOfWork',
    'fieldUtilities',
    function (
      $http,
      $scope,
      $uibModalInstance,
      $filter,
      $location,
      $interval,
      tmhDynamicLocale,
      Submission,
      glbcProofOfWork,
      fieldUtilities
    ) {
      $scope.vars = {}

      $scope.fieldUtilities = fieldUtilities

      $scope.navigation = 0

      $scope.validate = {}

      $scope.score = 0

      $scope.singleStepForm = function () {
        return $scope.firstStepIndex() === $scope.lastStepIndex()
      }

      $scope.goToStep = function (index) {
        $scope.navigation = index
        $scope.Utils.scrollToTop()
      }

      $scope.firstStepIndex = function () {
        return 0
      }

      $scope.lastStepIndex = function () {
        var last_enabled = 0

        for (var i = 0; i < $scope.questionnaire.steps.length; i++) {
          if ($scope.questionnaire.steps[i].enabled) {
            last_enabled = i
          }
        }

        return last_enabled
      }

      $scope.hasNextStep = function () {
        return $scope.navigation < $scope.lastStepIndex()
      }

      $scope.hasPreviousStep = function () {
        return $scope.navigation > $scope.firstStepIndex()
      }

      $scope.checkForInvalidFields = function () {
        for (var i = 0; i <= $scope.navigation; i++) {
          if ($scope.questionnaire.steps[i].enabled) {
            // find the first invalid element
            var form = document.getElementById('step-' + i)
            var firstInvalid = form.querySelector('.inputelem.ng-invalid')

            // if we find one, set focus
            if (firstInvalid) {
              return false
            }
          }
        }

        return true
      }

      $scope.runValidation = function () {
        $scope.validate[$scope.navigation] = true

        if ($scope.navigation > -1 && !$scope.checkForInvalidFields()) {
          $scope.Utils.scrollToTop()
          return false
        }

        return true
      }

      $scope.incrementStep = function () {
        if (!$scope.runValidation()) {
          return
        }

        if ($scope.hasNextStep()) {
          $scope.vars.submissionForm.$dirty = false
          for (var i = $scope.navigation + 1; i <= $scope.lastStepIndex(); i++) {
            if (
              fieldUtilities.isFieldTriggered(
                null,
                $scope.questionnaire.steps[i],
                $scope.answers,
                $scope.score
              )
            ) {
              $scope.navigation = i
              $scope.Utils.scrollToTop()
              return
            }
          }
        }
      }

      $scope.decrementStep = function () {
        if ($scope.hasPreviousStep()) {
          $scope.vars.submissionForm.$dirty = false
          for (var i = $scope.navigation - 1; i >= $scope.firstStepIndex(); i--) {
            if (
              i === -1 ||
              fieldUtilities.isFieldTriggered(
                null,
                $scope.questionnaire.steps[i],
                $scope.answers,
                $scope.score
              )
            ) {
              $scope.navigation = i
              $scope.Utils.scrollToTop()
              return
            }
          }
        }
      }

      $scope.areReceiversSelected = function () {
        return true
      }

      $scope.submissionHasErrors = function () {
        return false
      }

      $scope.prepareSubmission = function () {
        $scope.answers = {}
        $scope.uploads = {}
        $scope.questionnaire = $scope.tip.additional_questionnaire
        $scope.field_id_map = fieldUtilities.build_field_id_map($scope.questionnaire)
      }

      $scope.completeSubmission = function () {
        $scope.validate[$scope.navigation] = true

        if (!$scope.checkForInvalidFields()) {
          $scope.Utils.scrollToTop()
          return
        }

        return $http
          .post('api/wbtip/' + $scope.tip.id + '/update', {
            cmd: 'additional_questionnaire',
            answers: $scope.answers,
          })
          .then(function () {
            $scope.reload()
          })
      }

      $scope.stepForm = function (index) {
        if (index !== -1) {
          return $scope.vars.submissionForm['step-' + index]
        }
      }

      $scope.displayStepErrors = function (index) {
        if (index !== -1) {
          return $scope.stepForm(index).$invalid
        }
      }

      $scope.displayErrors = function () {
        if (!$scope.validate[$scope.navigation]) {
          return false
        }

        if ($scope.displayStepErrors($scope.navigation)) {
          return true
        }

        return false
      }

      $scope.cancel = function () {
        $uibModalInstance.close()
      }

      // Watch for changes in certain variables
      $scope.$watch(
        'answers',
        function () {
          fieldUtilities.onAnswersUpdate($scope)
        },
        true
      )

      $scope.$on('GL::uploadsUpdated', function () {
        fieldUtilities.onAnswersUpdate($scope)
      })

      $scope.prepareSubmission()
      fieldUtilities.onAnswersUpdate($scope)
    },
  ])
  .controller('SubmissionStepCtrl', [
    '$scope',
    '$filter',
    'fieldUtilities',
    function ($scope, $filter, fieldUtilities) {
      $scope.fields = $scope.step.children
      $scope.stepId = 'step-' + $scope.$index

      $scope.rows = fieldUtilities.splitRows($scope.fields)

      $scope.status = {
        opened: false,
      }
    },
  ])
  .controller('SubmissionFieldErrKeyCtrl', [
    '$scope',
    function ($scope) {
      var pre = 'fieldForm_'

      var f_id = $scope.err.$name
      f_id = f_id.substring(0, f_id.indexOf('$'))
      f_id = f_id.slice(pre.length).replace(new RegExp('_', 'g'), '-')
      $scope.field = $scope.field_id_map[f_id]

      $scope.goToQuestion = function () {
        var form = document.getElementById('step-' + $scope.navigation)
        var s = 'div[data-ng-form="' + $scope.err.$name + '"] .ng-invalid'
        var formFieldSel = form.querySelector(s)
        formFieldSel.focus()
      }
    },
  ])
  .controller('SubmissionFormFieldCtrl', [
    '$scope',
    function ($scope) {
      $scope.f = $scope[$scope.fieldFormVarName]
    },
  ])
  .controller('SubmissionFieldEntryCtrl', [
    '$scope',
    function ($scope) {
      $scope.fieldEntry = $scope.fieldId + '-input-' + $scope.$index
    },
  ])
  .controller('SubmissionFieldCtrl', [
    '$scope',
    'fieldUtilities',
    function ($scope, fieldUtilities) {
      $scope.fieldFormVarName = fieldUtilities.fieldFormName($scope.field.id + '$' + $scope.$index)

      $scope.getAnswersEntries = function (entry) {
        if (typeof entry === 'undefined') {
          return $scope.answers[$scope.field.id]
        }

        return entry[$scope.field.id]
      }

      $scope.addAnswerEntry = function (entries) {
        entries.push({})
      }

      $scope.fields = $scope.field.children
      $scope.rows = fieldUtilities.splitRows($scope.fields)
      $scope.entries = $scope.getAnswersEntries($scope.entry)

      $scope.clear = function () {
        $scope.entries.length = 0
        $scope.addAnswerEntry($scope.entries)
      }

      if ($scope.field.type === 'inputbox') {
        $scope.validator = fieldUtilities.getValidator($scope.field)
      } else if ($scope.field.type === 'date') {
        $scope.dateOptions = { showWeeks: false }

        if (angular.isDefined($scope.field.attrs.min_date)) {
          $scope.dateOptions.minDate = new Date($scope.field.attrs.min_date.value)
        }

        if (angular.isDefined($scope.field.attrs.max_date)) {
          $scope.dateOptions.maxDate = new Date($scope.field.attrs.max_date.value)
        }

        $scope.status = {
          opened: false,
        }

        $scope.open = function () {
          $scope.status.opened = true
        }
      } else if ($scope.field.type === 'daterange') {
        $scope.dateOptions1 = { showWeeks: false }
        $scope.dateOptions2 = { showWeeks: false }

        if (angular.isDefined($scope.field.attrs.min_date)) {
          $scope.dateOptions1.minDate = new Date($scope.field.attrs.min_date.value)
        }

        if (angular.isDefined($scope.field.attrs.max_date)) {
          $scope.dateOptions2 = new Date($scope.field.attrs.max_date.value)
        }

        $scope.clear = function () {
          $scope.daterange.start = ''
          $scope.daterange.end = ''
          $scope.entries.length = 0
          $scope.addAnswerEntry($scope.entries)
        }

        $scope.daterange = {
          start: '',
          end: '',
        }

        $scope.$watch('daterange.start', function () {
          if ($scope.daterange.start) {
            $scope.dateOptions2.minDate = new Date($scope.daterange.start)
          }
        })

        $scope.$watch('daterange.end', function () {
          if ($scope.daterange.start && $scope.daterange.end) {
            $scope.entries[0].value =
              String(Number($scope.daterange.start)) + ':' + String(Number($scope.daterange.end))
          }
        })

        $scope.status = {
          openedStart: false,
          openedEnd: false,
        }

        $scope.openStart = function () {
          $scope.status.openedStart = true
          $scope.clear()
        }

        $scope.openEnd = function () {
          $scope.status.openedEnd = true
        }
      }

      $scope.validateRequiredCheckbox = function (field, entry) {
        if (!field.required) {
          return true
        }

        for (var i = 0; i < field.options.length; i++) {
          if (entry[field.options[i].id] && entry[field.options[i].id]) {
            return true
          }
        }

        return false
      }

      $scope.fieldId = $scope.stepId + '-field-' + $scope.fieldRow + '-' + $scope.fieldCol
    },
  ])

GL.controller('ReceiptCtrl', [
  '$scope',
  function ($scope) {
    $scope.formatted_receipt = (function (receipt) {
      if (!receipt || receipt.length !== 16) {
        return ''
      }

      return (
        receipt.substr(0, 4) +
        ' ' +
        receipt.substr(4, 4) +
        ' ' +
        receipt.substr(8, 4) +
        ' ' +
        receipt.substr(12, 4)
      )
    })($scope.receipt)
  },
])

GL.controller('LoginCtrl', [
  '$scope',
  '$location',
  function ($scope, $location) {
    $scope.loginData = {
      loginUsername: '',
      loginPassword: '',
      loginAuthCode: '',
    }

    // If already logged in, just go to the landing page.
    if (
      typeof $scope.Authentication.session !== 'undefined' &&
      $scope.Authentication.session.homepage
    ) {
      $location.path($scope.Authentication.session.homepage)
    }

    if ($location.path() === '/receipt') {
      $scope.login_template = 'views/login/receipt.html'
    } else if ($location.path() === '/login' && $scope.public.node.simplified_login) {
      $scope.login_template = 'views/login/simplified.html'
    } else {
      $scope.login_template = 'views/login/default.html'
    }

    var token = $location.search().token
    if (token) {
      $scope.Authentication.login(0, '', '', '', token)
    }
  },
])

GL.controller('ForcedPasswordChangeCtrl', [
  '$scope',
  '$location',
  function ($scope, $location) {
    $scope.save = function () {
      return $scope.resources.preferences.$update(function () {
        $scope.Authentication.session.require_password_change = false
        $location.path($scope.Authentication.session.homepage)
      })
    }
  },
])

GL.controller('EnableTwoFactorAuthCtrl', [
  '$scope',
  '$http',
  '$location',
  '$window',
  function ($scope, $http, $location, $window) {
    var symbols = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'
    var array = new Uint32Array(32)

    $window.crypto.getRandomValues(array)

    $scope.totp = {
      qrcode_string: '',
      secret: '',
      edit: false,
    }

    for (var i = 0; i < array.length; i++) {
      $scope.totp.secret += symbols[array[i] % symbols.length]
    }

    $scope.$watch('totp.secret', function () {
      $scope.totp.qrcode_string =
        'otpauth://totp/' +
        $location.host() +
        '%20%28' +
        $scope.resources.preferences.username +
        '%29?secret=' +
        $scope.totp.secret
    })

    $scope.enable2FA = function (token) {
      return $http({
        method: 'PUT',
        url: 'api/user/operations',
        data: {
          operation: 'enable_2fa',
          args: {
            secret: $scope.totp.secret,
            token: token,
          },
        },
      }).then(function () {
        $scope.resources.preferences.two_factor = true
        $scope.Authentication.session.two_factor = true
        $location.path($scope.Authentication.session.homepage)
      })
    }
  },
])

GL.controller('PasswordResetCtrl', [
  '$scope',
  '$location',
  '$http',
  function ($scope, $location, $http) {
    $scope.request = {
      username: '',
    }

    $scope.submit = function () {
      $http.post('api/reset/password', $scope.request).then(function () {
        $location.path('/login/passwordreset/requested')
      })
    }
  },
]).controller('PasswordResetCompleteCtrl', [
  '$scope',
  '$location',
  '$http',
  function ($scope, $location, $http) {
    $scope.request = {
      reset_token: $location.search().token || '',
      recovery_key: $location.search().recovery || '',
      auth_code: '',
    }

    $scope.submit = function () {
      $http.put('api/reset/password', $scope.request).then(function (response) {
        $scope.request.recovery_key = ''
        $scope.request.auth_code = ''
        if (response.data.status === 'success') {
          $location.url('/login?token=' + response.data.token)
        } else if (response.data.status === 'require_recovery_key') {
          $location.path('/password/reset/recovery')
        } else if (response.data.status === 'require_two_factor_authentication') {
          $location.path('/password/reset/2fa')
        } else {
          $location.url('/login/passwordreset/failure/token')
        }
      })
    }

    if ($location.path() === '/password/reset') {
      $scope.submit()
    }
  },
])
